
climate_info_f042k6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080065bc  080065bc  000075bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066dc  080066dc  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  080066dc  080066dc  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066dc  080066dc  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080066e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000060  08006744  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08006744  000082a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdbd  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223c  00000000  00000000  00014e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00017088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a63  00000000  00000000  00017dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028f5  00000000  00000000  0001882b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001050c  00000000  00000000  0001b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e1b0  00000000  00000000  0002b62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b97dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003680  00000000  00000000  000b9820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000bcea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065a4 	.word	0x080065a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	080065a4 	.word	0x080065a4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 f8ab 	bl	800056c <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 f82b 	bl	800047c <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f89d 	bl	800056c <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f893 	bl	800056c <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f839 	bl	80004cc <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 f82f 	bl	80004cc <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__eqsf2>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	0042      	lsls	r2, r0, #1
 8000480:	024e      	lsls	r6, r1, #9
 8000482:	004c      	lsls	r4, r1, #1
 8000484:	0245      	lsls	r5, r0, #9
 8000486:	0a6d      	lsrs	r5, r5, #9
 8000488:	0e12      	lsrs	r2, r2, #24
 800048a:	0fc3      	lsrs	r3, r0, #31
 800048c:	0a76      	lsrs	r6, r6, #9
 800048e:	0e24      	lsrs	r4, r4, #24
 8000490:	0fc9      	lsrs	r1, r1, #31
 8000492:	2aff      	cmp	r2, #255	@ 0xff
 8000494:	d010      	beq.n	80004b8 <__eqsf2+0x3c>
 8000496:	2cff      	cmp	r4, #255	@ 0xff
 8000498:	d00c      	beq.n	80004b4 <__eqsf2+0x38>
 800049a:	2001      	movs	r0, #1
 800049c:	42a2      	cmp	r2, r4
 800049e:	d10a      	bne.n	80004b6 <__eqsf2+0x3a>
 80004a0:	42b5      	cmp	r5, r6
 80004a2:	d108      	bne.n	80004b6 <__eqsf2+0x3a>
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d00f      	beq.n	80004c8 <__eqsf2+0x4c>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d104      	bne.n	80004b6 <__eqsf2+0x3a>
 80004ac:	0028      	movs	r0, r5
 80004ae:	1e43      	subs	r3, r0, #1
 80004b0:	4198      	sbcs	r0, r3
 80004b2:	e000      	b.n	80004b6 <__eqsf2+0x3a>
 80004b4:	2001      	movs	r0, #1
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	2001      	movs	r0, #1
 80004ba:	2cff      	cmp	r4, #255	@ 0xff
 80004bc:	d1fb      	bne.n	80004b6 <__eqsf2+0x3a>
 80004be:	4335      	orrs	r5, r6
 80004c0:	d1f9      	bne.n	80004b6 <__eqsf2+0x3a>
 80004c2:	404b      	eors	r3, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	e7f6      	b.n	80004b6 <__eqsf2+0x3a>
 80004c8:	2000      	movs	r0, #0
 80004ca:	e7f4      	b.n	80004b6 <__eqsf2+0x3a>

080004cc <__gesf2>:
 80004cc:	b530      	push	{r4, r5, lr}
 80004ce:	0042      	lsls	r2, r0, #1
 80004d0:	0244      	lsls	r4, r0, #9
 80004d2:	024d      	lsls	r5, r1, #9
 80004d4:	0fc3      	lsrs	r3, r0, #31
 80004d6:	0048      	lsls	r0, r1, #1
 80004d8:	0a64      	lsrs	r4, r4, #9
 80004da:	0e12      	lsrs	r2, r2, #24
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0e00      	lsrs	r0, r0, #24
 80004e0:	0fc9      	lsrs	r1, r1, #31
 80004e2:	2aff      	cmp	r2, #255	@ 0xff
 80004e4:	d019      	beq.n	800051a <__gesf2+0x4e>
 80004e6:	28ff      	cmp	r0, #255	@ 0xff
 80004e8:	d00b      	beq.n	8000502 <__gesf2+0x36>
 80004ea:	2a00      	cmp	r2, #0
 80004ec:	d11e      	bne.n	800052c <__gesf2+0x60>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d10b      	bne.n	800050a <__gesf2+0x3e>
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d027      	beq.n	8000546 <__gesf2+0x7a>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d134      	bne.n	8000564 <__gesf2+0x98>
 80004fa:	2900      	cmp	r1, #0
 80004fc:	d02f      	beq.n	800055e <__gesf2+0x92>
 80004fe:	0008      	movs	r0, r1
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	2d00      	cmp	r5, #0
 8000504:	d128      	bne.n	8000558 <__gesf2+0x8c>
 8000506:	2a00      	cmp	r2, #0
 8000508:	d101      	bne.n	800050e <__gesf2+0x42>
 800050a:	2c00      	cmp	r4, #0
 800050c:	d0f5      	beq.n	80004fa <__gesf2+0x2e>
 800050e:	428b      	cmp	r3, r1
 8000510:	d107      	bne.n	8000522 <__gesf2+0x56>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d023      	beq.n	800055e <__gesf2+0x92>
 8000516:	0018      	movs	r0, r3
 8000518:	e7f2      	b.n	8000500 <__gesf2+0x34>
 800051a:	2c00      	cmp	r4, #0
 800051c:	d11c      	bne.n	8000558 <__gesf2+0x8c>
 800051e:	28ff      	cmp	r0, #255	@ 0xff
 8000520:	d014      	beq.n	800054c <__gesf2+0x80>
 8000522:	1e58      	subs	r0, r3, #1
 8000524:	2302      	movs	r3, #2
 8000526:	4018      	ands	r0, r3
 8000528:	3801      	subs	r0, #1
 800052a:	e7e9      	b.n	8000500 <__gesf2+0x34>
 800052c:	2800      	cmp	r0, #0
 800052e:	d0f8      	beq.n	8000522 <__gesf2+0x56>
 8000530:	428b      	cmp	r3, r1
 8000532:	d1f6      	bne.n	8000522 <__gesf2+0x56>
 8000534:	4282      	cmp	r2, r0
 8000536:	dcf4      	bgt.n	8000522 <__gesf2+0x56>
 8000538:	dbeb      	blt.n	8000512 <__gesf2+0x46>
 800053a:	42ac      	cmp	r4, r5
 800053c:	d8f1      	bhi.n	8000522 <__gesf2+0x56>
 800053e:	2000      	movs	r0, #0
 8000540:	42ac      	cmp	r4, r5
 8000542:	d2dd      	bcs.n	8000500 <__gesf2+0x34>
 8000544:	e7e5      	b.n	8000512 <__gesf2+0x46>
 8000546:	2c00      	cmp	r4, #0
 8000548:	d0da      	beq.n	8000500 <__gesf2+0x34>
 800054a:	e7ea      	b.n	8000522 <__gesf2+0x56>
 800054c:	2d00      	cmp	r5, #0
 800054e:	d103      	bne.n	8000558 <__gesf2+0x8c>
 8000550:	428b      	cmp	r3, r1
 8000552:	d1e6      	bne.n	8000522 <__gesf2+0x56>
 8000554:	2000      	movs	r0, #0
 8000556:	e7d3      	b.n	8000500 <__gesf2+0x34>
 8000558:	2002      	movs	r0, #2
 800055a:	4240      	negs	r0, r0
 800055c:	e7d0      	b.n	8000500 <__gesf2+0x34>
 800055e:	2001      	movs	r0, #1
 8000560:	4240      	negs	r0, r0
 8000562:	e7cd      	b.n	8000500 <__gesf2+0x34>
 8000564:	428b      	cmp	r3, r1
 8000566:	d0e8      	beq.n	800053a <__gesf2+0x6e>
 8000568:	e7db      	b.n	8000522 <__gesf2+0x56>
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__lesf2>:
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	0042      	lsls	r2, r0, #1
 8000570:	0244      	lsls	r4, r0, #9
 8000572:	024d      	lsls	r5, r1, #9
 8000574:	0fc3      	lsrs	r3, r0, #31
 8000576:	0048      	lsls	r0, r1, #1
 8000578:	0a64      	lsrs	r4, r4, #9
 800057a:	0e12      	lsrs	r2, r2, #24
 800057c:	0a6d      	lsrs	r5, r5, #9
 800057e:	0e00      	lsrs	r0, r0, #24
 8000580:	0fc9      	lsrs	r1, r1, #31
 8000582:	2aff      	cmp	r2, #255	@ 0xff
 8000584:	d01a      	beq.n	80005bc <__lesf2+0x50>
 8000586:	28ff      	cmp	r0, #255	@ 0xff
 8000588:	d00e      	beq.n	80005a8 <__lesf2+0x3c>
 800058a:	2a00      	cmp	r2, #0
 800058c:	d11e      	bne.n	80005cc <__lesf2+0x60>
 800058e:	2800      	cmp	r0, #0
 8000590:	d10e      	bne.n	80005b0 <__lesf2+0x44>
 8000592:	2d00      	cmp	r5, #0
 8000594:	d02a      	beq.n	80005ec <__lesf2+0x80>
 8000596:	2c00      	cmp	r4, #0
 8000598:	d00c      	beq.n	80005b4 <__lesf2+0x48>
 800059a:	428b      	cmp	r3, r1
 800059c:	d01d      	beq.n	80005da <__lesf2+0x6e>
 800059e:	1e58      	subs	r0, r3, #1
 80005a0:	2302      	movs	r3, #2
 80005a2:	4018      	ands	r0, r3
 80005a4:	3801      	subs	r0, #1
 80005a6:	e010      	b.n	80005ca <__lesf2+0x5e>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d10d      	bne.n	80005c8 <__lesf2+0x5c>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d120      	bne.n	80005f2 <__lesf2+0x86>
 80005b0:	2c00      	cmp	r4, #0
 80005b2:	d11e      	bne.n	80005f2 <__lesf2+0x86>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d023      	beq.n	8000600 <__lesf2+0x94>
 80005b8:	0008      	movs	r0, r1
 80005ba:	e006      	b.n	80005ca <__lesf2+0x5e>
 80005bc:	2c00      	cmp	r4, #0
 80005be:	d103      	bne.n	80005c8 <__lesf2+0x5c>
 80005c0:	28ff      	cmp	r0, #255	@ 0xff
 80005c2:	d1ec      	bne.n	800059e <__lesf2+0x32>
 80005c4:	2d00      	cmp	r5, #0
 80005c6:	d017      	beq.n	80005f8 <__lesf2+0x8c>
 80005c8:	2002      	movs	r0, #2
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d0e6      	beq.n	800059e <__lesf2+0x32>
 80005d0:	428b      	cmp	r3, r1
 80005d2:	d1e4      	bne.n	800059e <__lesf2+0x32>
 80005d4:	4282      	cmp	r2, r0
 80005d6:	dce2      	bgt.n	800059e <__lesf2+0x32>
 80005d8:	db04      	blt.n	80005e4 <__lesf2+0x78>
 80005da:	42ac      	cmp	r4, r5
 80005dc:	d8df      	bhi.n	800059e <__lesf2+0x32>
 80005de:	2000      	movs	r0, #0
 80005e0:	42ac      	cmp	r4, r5
 80005e2:	d2f2      	bcs.n	80005ca <__lesf2+0x5e>
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00b      	beq.n	8000600 <__lesf2+0x94>
 80005e8:	0018      	movs	r0, r3
 80005ea:	e7ee      	b.n	80005ca <__lesf2+0x5e>
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d0ec      	beq.n	80005ca <__lesf2+0x5e>
 80005f0:	e7d5      	b.n	800059e <__lesf2+0x32>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d1d3      	bne.n	800059e <__lesf2+0x32>
 80005f6:	e7f5      	b.n	80005e4 <__lesf2+0x78>
 80005f8:	2000      	movs	r0, #0
 80005fa:	428b      	cmp	r3, r1
 80005fc:	d0e5      	beq.n	80005ca <__lesf2+0x5e>
 80005fe:	e7ce      	b.n	800059e <__lesf2+0x32>
 8000600:	2001      	movs	r0, #1
 8000602:	4240      	negs	r0, r0
 8000604:	e7e1      	b.n	80005ca <__lesf2+0x5e>
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__aeabi_f2iz>:
 8000608:	0241      	lsls	r1, r0, #9
 800060a:	0042      	lsls	r2, r0, #1
 800060c:	0fc3      	lsrs	r3, r0, #31
 800060e:	0a49      	lsrs	r1, r1, #9
 8000610:	2000      	movs	r0, #0
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	2a7e      	cmp	r2, #126	@ 0x7e
 8000616:	dd03      	ble.n	8000620 <__aeabi_f2iz+0x18>
 8000618:	2a9d      	cmp	r2, #157	@ 0x9d
 800061a:	dd02      	ble.n	8000622 <__aeabi_f2iz+0x1a>
 800061c:	4a09      	ldr	r2, [pc, #36]	@ (8000644 <__aeabi_f2iz+0x3c>)
 800061e:	1898      	adds	r0, r3, r2
 8000620:	4770      	bx	lr
 8000622:	2080      	movs	r0, #128	@ 0x80
 8000624:	0400      	lsls	r0, r0, #16
 8000626:	4301      	orrs	r1, r0
 8000628:	2a95      	cmp	r2, #149	@ 0x95
 800062a:	dc07      	bgt.n	800063c <__aeabi_f2iz+0x34>
 800062c:	2096      	movs	r0, #150	@ 0x96
 800062e:	1a82      	subs	r2, r0, r2
 8000630:	40d1      	lsrs	r1, r2
 8000632:	4248      	negs	r0, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f3      	bne.n	8000620 <__aeabi_f2iz+0x18>
 8000638:	0008      	movs	r0, r1
 800063a:	e7f1      	b.n	8000620 <__aeabi_f2iz+0x18>
 800063c:	3a96      	subs	r2, #150	@ 0x96
 800063e:	4091      	lsls	r1, r2
 8000640:	e7f7      	b.n	8000632 <__aeabi_f2iz+0x2a>
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	7fffffff 	.word	0x7fffffff

08000648 <__aeabi_dadd>:
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	4657      	mov	r7, sl
 800064c:	464e      	mov	r6, r9
 800064e:	4645      	mov	r5, r8
 8000650:	46de      	mov	lr, fp
 8000652:	b5e0      	push	{r5, r6, r7, lr}
 8000654:	b083      	sub	sp, #12
 8000656:	9000      	str	r0, [sp, #0]
 8000658:	9101      	str	r1, [sp, #4]
 800065a:	030c      	lsls	r4, r1, #12
 800065c:	004f      	lsls	r7, r1, #1
 800065e:	0fce      	lsrs	r6, r1, #31
 8000660:	0a61      	lsrs	r1, r4, #9
 8000662:	9c00      	ldr	r4, [sp, #0]
 8000664:	031d      	lsls	r5, r3, #12
 8000666:	0f64      	lsrs	r4, r4, #29
 8000668:	430c      	orrs	r4, r1
 800066a:	9900      	ldr	r1, [sp, #0]
 800066c:	9200      	str	r2, [sp, #0]
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	00c8      	lsls	r0, r1, #3
 8000672:	0059      	lsls	r1, r3, #1
 8000674:	0d4b      	lsrs	r3, r1, #21
 8000676:	4699      	mov	r9, r3
 8000678:	9a00      	ldr	r2, [sp, #0]
 800067a:	9b01      	ldr	r3, [sp, #4]
 800067c:	0a6d      	lsrs	r5, r5, #9
 800067e:	0fd9      	lsrs	r1, r3, #31
 8000680:	0f53      	lsrs	r3, r2, #29
 8000682:	432b      	orrs	r3, r5
 8000684:	469a      	mov	sl, r3
 8000686:	9b00      	ldr	r3, [sp, #0]
 8000688:	0d7f      	lsrs	r7, r7, #21
 800068a:	00da      	lsls	r2, r3, #3
 800068c:	4694      	mov	ip, r2
 800068e:	464a      	mov	r2, r9
 8000690:	46b0      	mov	r8, r6
 8000692:	1aba      	subs	r2, r7, r2
 8000694:	428e      	cmp	r6, r1
 8000696:	d100      	bne.n	800069a <__aeabi_dadd+0x52>
 8000698:	e0b0      	b.n	80007fc <__aeabi_dadd+0x1b4>
 800069a:	2a00      	cmp	r2, #0
 800069c:	dc00      	bgt.n	80006a0 <__aeabi_dadd+0x58>
 800069e:	e078      	b.n	8000792 <__aeabi_dadd+0x14a>
 80006a0:	4649      	mov	r1, r9
 80006a2:	2900      	cmp	r1, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x60>
 80006a6:	e0e9      	b.n	800087c <__aeabi_dadd+0x234>
 80006a8:	49c9      	ldr	r1, [pc, #804]	@ (80009d0 <__aeabi_dadd+0x388>)
 80006aa:	428f      	cmp	r7, r1
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x68>
 80006ae:	e195      	b.n	80009dc <__aeabi_dadd+0x394>
 80006b0:	2501      	movs	r5, #1
 80006b2:	2a38      	cmp	r2, #56	@ 0x38
 80006b4:	dc16      	bgt.n	80006e4 <__aeabi_dadd+0x9c>
 80006b6:	2180      	movs	r1, #128	@ 0x80
 80006b8:	4653      	mov	r3, sl
 80006ba:	0409      	lsls	r1, r1, #16
 80006bc:	430b      	orrs	r3, r1
 80006be:	469a      	mov	sl, r3
 80006c0:	2a1f      	cmp	r2, #31
 80006c2:	dd00      	ble.n	80006c6 <__aeabi_dadd+0x7e>
 80006c4:	e1e7      	b.n	8000a96 <__aeabi_dadd+0x44e>
 80006c6:	2120      	movs	r1, #32
 80006c8:	4655      	mov	r5, sl
 80006ca:	1a8b      	subs	r3, r1, r2
 80006cc:	4661      	mov	r1, ip
 80006ce:	409d      	lsls	r5, r3
 80006d0:	40d1      	lsrs	r1, r2
 80006d2:	430d      	orrs	r5, r1
 80006d4:	4661      	mov	r1, ip
 80006d6:	4099      	lsls	r1, r3
 80006d8:	1e4b      	subs	r3, r1, #1
 80006da:	4199      	sbcs	r1, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	40d3      	lsrs	r3, r2
 80006e0:	430d      	orrs	r5, r1
 80006e2:	1ae4      	subs	r4, r4, r3
 80006e4:	1b45      	subs	r5, r0, r5
 80006e6:	42a8      	cmp	r0, r5
 80006e8:	4180      	sbcs	r0, r0
 80006ea:	4240      	negs	r0, r0
 80006ec:	1a24      	subs	r4, r4, r0
 80006ee:	0223      	lsls	r3, r4, #8
 80006f0:	d400      	bmi.n	80006f4 <__aeabi_dadd+0xac>
 80006f2:	e10f      	b.n	8000914 <__aeabi_dadd+0x2cc>
 80006f4:	0264      	lsls	r4, r4, #9
 80006f6:	0a64      	lsrs	r4, r4, #9
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0xb6>
 80006fc:	e139      	b.n	8000972 <__aeabi_dadd+0x32a>
 80006fe:	0020      	movs	r0, r4
 8000700:	f001 fd7e 	bl	8002200 <__clzsi2>
 8000704:	0003      	movs	r3, r0
 8000706:	3b08      	subs	r3, #8
 8000708:	2120      	movs	r1, #32
 800070a:	0028      	movs	r0, r5
 800070c:	1aca      	subs	r2, r1, r3
 800070e:	40d0      	lsrs	r0, r2
 8000710:	409c      	lsls	r4, r3
 8000712:	0002      	movs	r2, r0
 8000714:	409d      	lsls	r5, r3
 8000716:	4322      	orrs	r2, r4
 8000718:	429f      	cmp	r7, r3
 800071a:	dd00      	ble.n	800071e <__aeabi_dadd+0xd6>
 800071c:	e173      	b.n	8000a06 <__aeabi_dadd+0x3be>
 800071e:	1bd8      	subs	r0, r3, r7
 8000720:	3001      	adds	r0, #1
 8000722:	1a09      	subs	r1, r1, r0
 8000724:	002c      	movs	r4, r5
 8000726:	408d      	lsls	r5, r1
 8000728:	40c4      	lsrs	r4, r0
 800072a:	1e6b      	subs	r3, r5, #1
 800072c:	419d      	sbcs	r5, r3
 800072e:	0013      	movs	r3, r2
 8000730:	40c2      	lsrs	r2, r0
 8000732:	408b      	lsls	r3, r1
 8000734:	4325      	orrs	r5, r4
 8000736:	2700      	movs	r7, #0
 8000738:	0014      	movs	r4, r2
 800073a:	431d      	orrs	r5, r3
 800073c:	076b      	lsls	r3, r5, #29
 800073e:	d009      	beq.n	8000754 <__aeabi_dadd+0x10c>
 8000740:	230f      	movs	r3, #15
 8000742:	402b      	ands	r3, r5
 8000744:	2b04      	cmp	r3, #4
 8000746:	d005      	beq.n	8000754 <__aeabi_dadd+0x10c>
 8000748:	1d2b      	adds	r3, r5, #4
 800074a:	42ab      	cmp	r3, r5
 800074c:	41ad      	sbcs	r5, r5
 800074e:	426d      	negs	r5, r5
 8000750:	1964      	adds	r4, r4, r5
 8000752:	001d      	movs	r5, r3
 8000754:	0223      	lsls	r3, r4, #8
 8000756:	d400      	bmi.n	800075a <__aeabi_dadd+0x112>
 8000758:	e12d      	b.n	80009b6 <__aeabi_dadd+0x36e>
 800075a:	4a9d      	ldr	r2, [pc, #628]	@ (80009d0 <__aeabi_dadd+0x388>)
 800075c:	3701      	adds	r7, #1
 800075e:	4297      	cmp	r7, r2
 8000760:	d100      	bne.n	8000764 <__aeabi_dadd+0x11c>
 8000762:	e0d3      	b.n	800090c <__aeabi_dadd+0x2c4>
 8000764:	4646      	mov	r6, r8
 8000766:	499b      	ldr	r1, [pc, #620]	@ (80009d4 <__aeabi_dadd+0x38c>)
 8000768:	08ed      	lsrs	r5, r5, #3
 800076a:	4021      	ands	r1, r4
 800076c:	074a      	lsls	r2, r1, #29
 800076e:	432a      	orrs	r2, r5
 8000770:	057c      	lsls	r4, r7, #21
 8000772:	024d      	lsls	r5, r1, #9
 8000774:	0b2d      	lsrs	r5, r5, #12
 8000776:	0d64      	lsrs	r4, r4, #21
 8000778:	0524      	lsls	r4, r4, #20
 800077a:	432c      	orrs	r4, r5
 800077c:	07f6      	lsls	r6, r6, #31
 800077e:	4334      	orrs	r4, r6
 8000780:	0010      	movs	r0, r2
 8000782:	0021      	movs	r1, r4
 8000784:	b003      	add	sp, #12
 8000786:	bcf0      	pop	{r4, r5, r6, r7}
 8000788:	46bb      	mov	fp, r7
 800078a:	46b2      	mov	sl, r6
 800078c:	46a9      	mov	r9, r5
 800078e:	46a0      	mov	r8, r4
 8000790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000792:	2a00      	cmp	r2, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x150>
 8000796:	e084      	b.n	80008a2 <__aeabi_dadd+0x25a>
 8000798:	464a      	mov	r2, r9
 800079a:	1bd2      	subs	r2, r2, r7
 800079c:	2f00      	cmp	r7, #0
 800079e:	d000      	beq.n	80007a2 <__aeabi_dadd+0x15a>
 80007a0:	e16d      	b.n	8000a7e <__aeabi_dadd+0x436>
 80007a2:	0025      	movs	r5, r4
 80007a4:	4305      	orrs	r5, r0
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x162>
 80007a8:	e127      	b.n	80009fa <__aeabi_dadd+0x3b2>
 80007aa:	1e56      	subs	r6, r2, #1
 80007ac:	2a01      	cmp	r2, #1
 80007ae:	d100      	bne.n	80007b2 <__aeabi_dadd+0x16a>
 80007b0:	e23b      	b.n	8000c2a <__aeabi_dadd+0x5e2>
 80007b2:	4d87      	ldr	r5, [pc, #540]	@ (80009d0 <__aeabi_dadd+0x388>)
 80007b4:	42aa      	cmp	r2, r5
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0x172>
 80007b8:	e26a      	b.n	8000c90 <__aeabi_dadd+0x648>
 80007ba:	2501      	movs	r5, #1
 80007bc:	2e38      	cmp	r6, #56	@ 0x38
 80007be:	dc12      	bgt.n	80007e6 <__aeabi_dadd+0x19e>
 80007c0:	0032      	movs	r2, r6
 80007c2:	2a1f      	cmp	r2, #31
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0x180>
 80007c6:	e1f8      	b.n	8000bba <__aeabi_dadd+0x572>
 80007c8:	2620      	movs	r6, #32
 80007ca:	0025      	movs	r5, r4
 80007cc:	1ab6      	subs	r6, r6, r2
 80007ce:	0007      	movs	r7, r0
 80007d0:	4653      	mov	r3, sl
 80007d2:	40b0      	lsls	r0, r6
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	40b5      	lsls	r5, r6
 80007d8:	40d7      	lsrs	r7, r2
 80007da:	1e46      	subs	r6, r0, #1
 80007dc:	41b0      	sbcs	r0, r6
 80007de:	1b1b      	subs	r3, r3, r4
 80007e0:	469a      	mov	sl, r3
 80007e2:	433d      	orrs	r5, r7
 80007e4:	4305      	orrs	r5, r0
 80007e6:	4662      	mov	r2, ip
 80007e8:	1b55      	subs	r5, r2, r5
 80007ea:	45ac      	cmp	ip, r5
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	4653      	mov	r3, sl
 80007f0:	4252      	negs	r2, r2
 80007f2:	000e      	movs	r6, r1
 80007f4:	464f      	mov	r7, r9
 80007f6:	4688      	mov	r8, r1
 80007f8:	1a9c      	subs	r4, r3, r2
 80007fa:	e778      	b.n	80006ee <__aeabi_dadd+0xa6>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	dc00      	bgt.n	8000802 <__aeabi_dadd+0x1ba>
 8000800:	e08e      	b.n	8000920 <__aeabi_dadd+0x2d8>
 8000802:	4649      	mov	r1, r9
 8000804:	2900      	cmp	r1, #0
 8000806:	d175      	bne.n	80008f4 <__aeabi_dadd+0x2ac>
 8000808:	4661      	mov	r1, ip
 800080a:	4653      	mov	r3, sl
 800080c:	4319      	orrs	r1, r3
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x1ca>
 8000810:	e0f6      	b.n	8000a00 <__aeabi_dadd+0x3b8>
 8000812:	1e51      	subs	r1, r2, #1
 8000814:	2a01      	cmp	r2, #1
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x1d2>
 8000818:	e191      	b.n	8000b3e <__aeabi_dadd+0x4f6>
 800081a:	4d6d      	ldr	r5, [pc, #436]	@ (80009d0 <__aeabi_dadd+0x388>)
 800081c:	42aa      	cmp	r2, r5
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x1da>
 8000820:	e0dc      	b.n	80009dc <__aeabi_dadd+0x394>
 8000822:	2501      	movs	r5, #1
 8000824:	2938      	cmp	r1, #56	@ 0x38
 8000826:	dc14      	bgt.n	8000852 <__aeabi_dadd+0x20a>
 8000828:	000a      	movs	r2, r1
 800082a:	2a1f      	cmp	r2, #31
 800082c:	dd00      	ble.n	8000830 <__aeabi_dadd+0x1e8>
 800082e:	e1a2      	b.n	8000b76 <__aeabi_dadd+0x52e>
 8000830:	2120      	movs	r1, #32
 8000832:	4653      	mov	r3, sl
 8000834:	1a89      	subs	r1, r1, r2
 8000836:	408b      	lsls	r3, r1
 8000838:	001d      	movs	r5, r3
 800083a:	4663      	mov	r3, ip
 800083c:	40d3      	lsrs	r3, r2
 800083e:	431d      	orrs	r5, r3
 8000840:	4663      	mov	r3, ip
 8000842:	408b      	lsls	r3, r1
 8000844:	0019      	movs	r1, r3
 8000846:	1e4b      	subs	r3, r1, #1
 8000848:	4199      	sbcs	r1, r3
 800084a:	4653      	mov	r3, sl
 800084c:	40d3      	lsrs	r3, r2
 800084e:	430d      	orrs	r5, r1
 8000850:	18e4      	adds	r4, r4, r3
 8000852:	182d      	adds	r5, r5, r0
 8000854:	4285      	cmp	r5, r0
 8000856:	4180      	sbcs	r0, r0
 8000858:	4240      	negs	r0, r0
 800085a:	1824      	adds	r4, r4, r0
 800085c:	0223      	lsls	r3, r4, #8
 800085e:	d559      	bpl.n	8000914 <__aeabi_dadd+0x2cc>
 8000860:	4b5b      	ldr	r3, [pc, #364]	@ (80009d0 <__aeabi_dadd+0x388>)
 8000862:	3701      	adds	r7, #1
 8000864:	429f      	cmp	r7, r3
 8000866:	d051      	beq.n	800090c <__aeabi_dadd+0x2c4>
 8000868:	2101      	movs	r1, #1
 800086a:	4b5a      	ldr	r3, [pc, #360]	@ (80009d4 <__aeabi_dadd+0x38c>)
 800086c:	086a      	lsrs	r2, r5, #1
 800086e:	401c      	ands	r4, r3
 8000870:	4029      	ands	r1, r5
 8000872:	430a      	orrs	r2, r1
 8000874:	07e5      	lsls	r5, r4, #31
 8000876:	4315      	orrs	r5, r2
 8000878:	0864      	lsrs	r4, r4, #1
 800087a:	e75f      	b.n	800073c <__aeabi_dadd+0xf4>
 800087c:	4661      	mov	r1, ip
 800087e:	4653      	mov	r3, sl
 8000880:	4319      	orrs	r1, r3
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x23e>
 8000884:	e0bc      	b.n	8000a00 <__aeabi_dadd+0x3b8>
 8000886:	1e51      	subs	r1, r2, #1
 8000888:	2a01      	cmp	r2, #1
 800088a:	d100      	bne.n	800088e <__aeabi_dadd+0x246>
 800088c:	e164      	b.n	8000b58 <__aeabi_dadd+0x510>
 800088e:	4d50      	ldr	r5, [pc, #320]	@ (80009d0 <__aeabi_dadd+0x388>)
 8000890:	42aa      	cmp	r2, r5
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x24e>
 8000894:	e16a      	b.n	8000b6c <__aeabi_dadd+0x524>
 8000896:	2501      	movs	r5, #1
 8000898:	2938      	cmp	r1, #56	@ 0x38
 800089a:	dd00      	ble.n	800089e <__aeabi_dadd+0x256>
 800089c:	e722      	b.n	80006e4 <__aeabi_dadd+0x9c>
 800089e:	000a      	movs	r2, r1
 80008a0:	e70e      	b.n	80006c0 <__aeabi_dadd+0x78>
 80008a2:	4a4d      	ldr	r2, [pc, #308]	@ (80009d8 <__aeabi_dadd+0x390>)
 80008a4:	1c7d      	adds	r5, r7, #1
 80008a6:	4215      	tst	r5, r2
 80008a8:	d000      	beq.n	80008ac <__aeabi_dadd+0x264>
 80008aa:	e0d0      	b.n	8000a4e <__aeabi_dadd+0x406>
 80008ac:	0025      	movs	r5, r4
 80008ae:	4662      	mov	r2, ip
 80008b0:	4653      	mov	r3, sl
 80008b2:	4305      	orrs	r5, r0
 80008b4:	431a      	orrs	r2, r3
 80008b6:	2f00      	cmp	r7, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_dadd+0x274>
 80008ba:	e137      	b.n	8000b2c <__aeabi_dadd+0x4e4>
 80008bc:	2d00      	cmp	r5, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x27a>
 80008c0:	e1a8      	b.n	8000c14 <__aeabi_dadd+0x5cc>
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_dadd+0x280>
 80008c6:	e16a      	b.n	8000b9e <__aeabi_dadd+0x556>
 80008c8:	4663      	mov	r3, ip
 80008ca:	1ac5      	subs	r5, r0, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	1ae2      	subs	r2, r4, r3
 80008d0:	42a8      	cmp	r0, r5
 80008d2:	419b      	sbcs	r3, r3
 80008d4:	425b      	negs	r3, r3
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	021a      	lsls	r2, r3, #8
 80008da:	d400      	bmi.n	80008de <__aeabi_dadd+0x296>
 80008dc:	e203      	b.n	8000ce6 <__aeabi_dadd+0x69e>
 80008de:	4663      	mov	r3, ip
 80008e0:	1a1d      	subs	r5, r3, r0
 80008e2:	45ac      	cmp	ip, r5
 80008e4:	4192      	sbcs	r2, r2
 80008e6:	4653      	mov	r3, sl
 80008e8:	4252      	negs	r2, r2
 80008ea:	1b1c      	subs	r4, r3, r4
 80008ec:	000e      	movs	r6, r1
 80008ee:	4688      	mov	r8, r1
 80008f0:	1aa4      	subs	r4, r4, r2
 80008f2:	e723      	b.n	800073c <__aeabi_dadd+0xf4>
 80008f4:	4936      	ldr	r1, [pc, #216]	@ (80009d0 <__aeabi_dadd+0x388>)
 80008f6:	428f      	cmp	r7, r1
 80008f8:	d070      	beq.n	80009dc <__aeabi_dadd+0x394>
 80008fa:	2501      	movs	r5, #1
 80008fc:	2a38      	cmp	r2, #56	@ 0x38
 80008fe:	dca8      	bgt.n	8000852 <__aeabi_dadd+0x20a>
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	4653      	mov	r3, sl
 8000904:	0409      	lsls	r1, r1, #16
 8000906:	430b      	orrs	r3, r1
 8000908:	469a      	mov	sl, r3
 800090a:	e78e      	b.n	800082a <__aeabi_dadd+0x1e2>
 800090c:	003c      	movs	r4, r7
 800090e:	2500      	movs	r5, #0
 8000910:	2200      	movs	r2, #0
 8000912:	e731      	b.n	8000778 <__aeabi_dadd+0x130>
 8000914:	2307      	movs	r3, #7
 8000916:	402b      	ands	r3, r5
 8000918:	2b00      	cmp	r3, #0
 800091a:	d000      	beq.n	800091e <__aeabi_dadd+0x2d6>
 800091c:	e710      	b.n	8000740 <__aeabi_dadd+0xf8>
 800091e:	e093      	b.n	8000a48 <__aeabi_dadd+0x400>
 8000920:	2a00      	cmp	r2, #0
 8000922:	d074      	beq.n	8000a0e <__aeabi_dadd+0x3c6>
 8000924:	464a      	mov	r2, r9
 8000926:	1bd2      	subs	r2, r2, r7
 8000928:	2f00      	cmp	r7, #0
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x2e6>
 800092c:	e0c7      	b.n	8000abe <__aeabi_dadd+0x476>
 800092e:	4928      	ldr	r1, [pc, #160]	@ (80009d0 <__aeabi_dadd+0x388>)
 8000930:	4589      	cmp	r9, r1
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x2ee>
 8000934:	e185      	b.n	8000c42 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2a38      	cmp	r2, #56	@ 0x38
 800093a:	dc12      	bgt.n	8000962 <__aeabi_dadd+0x31a>
 800093c:	2180      	movs	r1, #128	@ 0x80
 800093e:	0409      	lsls	r1, r1, #16
 8000940:	430c      	orrs	r4, r1
 8000942:	2a1f      	cmp	r2, #31
 8000944:	dd00      	ble.n	8000948 <__aeabi_dadd+0x300>
 8000946:	e1ab      	b.n	8000ca0 <__aeabi_dadd+0x658>
 8000948:	2120      	movs	r1, #32
 800094a:	0025      	movs	r5, r4
 800094c:	1a89      	subs	r1, r1, r2
 800094e:	0007      	movs	r7, r0
 8000950:	4088      	lsls	r0, r1
 8000952:	408d      	lsls	r5, r1
 8000954:	40d7      	lsrs	r7, r2
 8000956:	1e41      	subs	r1, r0, #1
 8000958:	4188      	sbcs	r0, r1
 800095a:	40d4      	lsrs	r4, r2
 800095c:	433d      	orrs	r5, r7
 800095e:	4305      	orrs	r5, r0
 8000960:	44a2      	add	sl, r4
 8000962:	4465      	add	r5, ip
 8000964:	4565      	cmp	r5, ip
 8000966:	4192      	sbcs	r2, r2
 8000968:	4252      	negs	r2, r2
 800096a:	4452      	add	r2, sl
 800096c:	0014      	movs	r4, r2
 800096e:	464f      	mov	r7, r9
 8000970:	e774      	b.n	800085c <__aeabi_dadd+0x214>
 8000972:	0028      	movs	r0, r5
 8000974:	f001 fc44 	bl	8002200 <__clzsi2>
 8000978:	0003      	movs	r3, r0
 800097a:	3318      	adds	r3, #24
 800097c:	2b1f      	cmp	r3, #31
 800097e:	dc00      	bgt.n	8000982 <__aeabi_dadd+0x33a>
 8000980:	e6c2      	b.n	8000708 <__aeabi_dadd+0xc0>
 8000982:	002a      	movs	r2, r5
 8000984:	3808      	subs	r0, #8
 8000986:	4082      	lsls	r2, r0
 8000988:	429f      	cmp	r7, r3
 800098a:	dd00      	ble.n	800098e <__aeabi_dadd+0x346>
 800098c:	e0a9      	b.n	8000ae2 <__aeabi_dadd+0x49a>
 800098e:	1bdb      	subs	r3, r3, r7
 8000990:	1c58      	adds	r0, r3, #1
 8000992:	281f      	cmp	r0, #31
 8000994:	dc00      	bgt.n	8000998 <__aeabi_dadd+0x350>
 8000996:	e1ac      	b.n	8000cf2 <__aeabi_dadd+0x6aa>
 8000998:	0015      	movs	r5, r2
 800099a:	3b1f      	subs	r3, #31
 800099c:	40dd      	lsrs	r5, r3
 800099e:	2820      	cmp	r0, #32
 80009a0:	d005      	beq.n	80009ae <__aeabi_dadd+0x366>
 80009a2:	2340      	movs	r3, #64	@ 0x40
 80009a4:	1a1b      	subs	r3, r3, r0
 80009a6:	409a      	lsls	r2, r3
 80009a8:	1e53      	subs	r3, r2, #1
 80009aa:	419a      	sbcs	r2, r3
 80009ac:	4315      	orrs	r5, r2
 80009ae:	2307      	movs	r3, #7
 80009b0:	2700      	movs	r7, #0
 80009b2:	402b      	ands	r3, r5
 80009b4:	e7b0      	b.n	8000918 <__aeabi_dadd+0x2d0>
 80009b6:	08ed      	lsrs	r5, r5, #3
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <__aeabi_dadd+0x388>)
 80009ba:	0762      	lsls	r2, r4, #29
 80009bc:	432a      	orrs	r2, r5
 80009be:	08e4      	lsrs	r4, r4, #3
 80009c0:	429f      	cmp	r7, r3
 80009c2:	d00f      	beq.n	80009e4 <__aeabi_dadd+0x39c>
 80009c4:	0324      	lsls	r4, r4, #12
 80009c6:	0b25      	lsrs	r5, r4, #12
 80009c8:	057c      	lsls	r4, r7, #21
 80009ca:	0d64      	lsrs	r4, r4, #21
 80009cc:	e6d4      	b.n	8000778 <__aeabi_dadd+0x130>
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	000007ff 	.word	0x000007ff
 80009d4:	ff7fffff 	.word	0xff7fffff
 80009d8:	000007fe 	.word	0x000007fe
 80009dc:	08c0      	lsrs	r0, r0, #3
 80009de:	0762      	lsls	r2, r4, #29
 80009e0:	4302      	orrs	r2, r0
 80009e2:	08e4      	lsrs	r4, r4, #3
 80009e4:	0013      	movs	r3, r2
 80009e6:	4323      	orrs	r3, r4
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x3a4>
 80009ea:	e186      	b.n	8000cfa <__aeabi_dadd+0x6b2>
 80009ec:	2580      	movs	r5, #128	@ 0x80
 80009ee:	032d      	lsls	r5, r5, #12
 80009f0:	4325      	orrs	r5, r4
 80009f2:	032d      	lsls	r5, r5, #12
 80009f4:	4cc3      	ldr	r4, [pc, #780]	@ (8000d04 <__aeabi_dadd+0x6bc>)
 80009f6:	0b2d      	lsrs	r5, r5, #12
 80009f8:	e6be      	b.n	8000778 <__aeabi_dadd+0x130>
 80009fa:	4660      	mov	r0, ip
 80009fc:	4654      	mov	r4, sl
 80009fe:	000e      	movs	r6, r1
 8000a00:	0017      	movs	r7, r2
 8000a02:	08c5      	lsrs	r5, r0, #3
 8000a04:	e7d8      	b.n	80009b8 <__aeabi_dadd+0x370>
 8000a06:	4cc0      	ldr	r4, [pc, #768]	@ (8000d08 <__aeabi_dadd+0x6c0>)
 8000a08:	1aff      	subs	r7, r7, r3
 8000a0a:	4014      	ands	r4, r2
 8000a0c:	e696      	b.n	800073c <__aeabi_dadd+0xf4>
 8000a0e:	4abf      	ldr	r2, [pc, #764]	@ (8000d0c <__aeabi_dadd+0x6c4>)
 8000a10:	1c79      	adds	r1, r7, #1
 8000a12:	4211      	tst	r1, r2
 8000a14:	d16b      	bne.n	8000aee <__aeabi_dadd+0x4a6>
 8000a16:	0022      	movs	r2, r4
 8000a18:	4302      	orrs	r2, r0
 8000a1a:	2f00      	cmp	r7, #0
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_dadd+0x3d8>
 8000a1e:	e0db      	b.n	8000bd8 <__aeabi_dadd+0x590>
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x3de>
 8000a24:	e12d      	b.n	8000c82 <__aeabi_dadd+0x63a>
 8000a26:	4662      	mov	r2, ip
 8000a28:	4653      	mov	r3, sl
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x3e8>
 8000a2e:	e0b6      	b.n	8000b9e <__aeabi_dadd+0x556>
 8000a30:	4663      	mov	r3, ip
 8000a32:	18c5      	adds	r5, r0, r3
 8000a34:	4285      	cmp	r5, r0
 8000a36:	4180      	sbcs	r0, r0
 8000a38:	4454      	add	r4, sl
 8000a3a:	4240      	negs	r0, r0
 8000a3c:	1824      	adds	r4, r4, r0
 8000a3e:	0223      	lsls	r3, r4, #8
 8000a40:	d502      	bpl.n	8000a48 <__aeabi_dadd+0x400>
 8000a42:	000f      	movs	r7, r1
 8000a44:	4bb0      	ldr	r3, [pc, #704]	@ (8000d08 <__aeabi_dadd+0x6c0>)
 8000a46:	401c      	ands	r4, r3
 8000a48:	003a      	movs	r2, r7
 8000a4a:	0028      	movs	r0, r5
 8000a4c:	e7d8      	b.n	8000a00 <__aeabi_dadd+0x3b8>
 8000a4e:	4662      	mov	r2, ip
 8000a50:	1a85      	subs	r5, r0, r2
 8000a52:	42a8      	cmp	r0, r5
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4653      	mov	r3, sl
 8000a58:	4252      	negs	r2, r2
 8000a5a:	4691      	mov	r9, r2
 8000a5c:	1ae3      	subs	r3, r4, r3
 8000a5e:	001a      	movs	r2, r3
 8000a60:	464b      	mov	r3, r9
 8000a62:	1ad2      	subs	r2, r2, r3
 8000a64:	0013      	movs	r3, r2
 8000a66:	4691      	mov	r9, r2
 8000a68:	021a      	lsls	r2, r3, #8
 8000a6a:	d454      	bmi.n	8000b16 <__aeabi_dadd+0x4ce>
 8000a6c:	464a      	mov	r2, r9
 8000a6e:	464c      	mov	r4, r9
 8000a70:	432a      	orrs	r2, r5
 8000a72:	d000      	beq.n	8000a76 <__aeabi_dadd+0x42e>
 8000a74:	e640      	b.n	80006f8 <__aeabi_dadd+0xb0>
 8000a76:	2600      	movs	r6, #0
 8000a78:	2400      	movs	r4, #0
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	e67c      	b.n	8000778 <__aeabi_dadd+0x130>
 8000a7e:	4da1      	ldr	r5, [pc, #644]	@ (8000d04 <__aeabi_dadd+0x6bc>)
 8000a80:	45a9      	cmp	r9, r5
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x43e>
 8000a84:	e090      	b.n	8000ba8 <__aeabi_dadd+0x560>
 8000a86:	2501      	movs	r5, #1
 8000a88:	2a38      	cmp	r2, #56	@ 0x38
 8000a8a:	dd00      	ble.n	8000a8e <__aeabi_dadd+0x446>
 8000a8c:	e6ab      	b.n	80007e6 <__aeabi_dadd+0x19e>
 8000a8e:	2580      	movs	r5, #128	@ 0x80
 8000a90:	042d      	lsls	r5, r5, #16
 8000a92:	432c      	orrs	r4, r5
 8000a94:	e695      	b.n	80007c2 <__aeabi_dadd+0x17a>
 8000a96:	0011      	movs	r1, r2
 8000a98:	4655      	mov	r5, sl
 8000a9a:	3920      	subs	r1, #32
 8000a9c:	40cd      	lsrs	r5, r1
 8000a9e:	46a9      	mov	r9, r5
 8000aa0:	2a20      	cmp	r2, #32
 8000aa2:	d006      	beq.n	8000ab2 <__aeabi_dadd+0x46a>
 8000aa4:	2140      	movs	r1, #64	@ 0x40
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	1a8a      	subs	r2, r1, r2
 8000aaa:	4093      	lsls	r3, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	4694      	mov	ip, r2
 8000ab2:	4665      	mov	r5, ip
 8000ab4:	1e6b      	subs	r3, r5, #1
 8000ab6:	419d      	sbcs	r5, r3
 8000ab8:	464b      	mov	r3, r9
 8000aba:	431d      	orrs	r5, r3
 8000abc:	e612      	b.n	80006e4 <__aeabi_dadd+0x9c>
 8000abe:	0021      	movs	r1, r4
 8000ac0:	4301      	orrs	r1, r0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x47e>
 8000ac4:	e0c4      	b.n	8000c50 <__aeabi_dadd+0x608>
 8000ac6:	1e51      	subs	r1, r2, #1
 8000ac8:	2a01      	cmp	r2, #1
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x486>
 8000acc:	e0fb      	b.n	8000cc6 <__aeabi_dadd+0x67e>
 8000ace:	4d8d      	ldr	r5, [pc, #564]	@ (8000d04 <__aeabi_dadd+0x6bc>)
 8000ad0:	42aa      	cmp	r2, r5
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x48e>
 8000ad4:	e0b5      	b.n	8000c42 <__aeabi_dadd+0x5fa>
 8000ad6:	2501      	movs	r5, #1
 8000ad8:	2938      	cmp	r1, #56	@ 0x38
 8000ada:	dd00      	ble.n	8000ade <__aeabi_dadd+0x496>
 8000adc:	e741      	b.n	8000962 <__aeabi_dadd+0x31a>
 8000ade:	000a      	movs	r2, r1
 8000ae0:	e72f      	b.n	8000942 <__aeabi_dadd+0x2fa>
 8000ae2:	4c89      	ldr	r4, [pc, #548]	@ (8000d08 <__aeabi_dadd+0x6c0>)
 8000ae4:	1aff      	subs	r7, r7, r3
 8000ae6:	4014      	ands	r4, r2
 8000ae8:	0762      	lsls	r2, r4, #29
 8000aea:	08e4      	lsrs	r4, r4, #3
 8000aec:	e76a      	b.n	80009c4 <__aeabi_dadd+0x37c>
 8000aee:	4a85      	ldr	r2, [pc, #532]	@ (8000d04 <__aeabi_dadd+0x6bc>)
 8000af0:	4291      	cmp	r1, r2
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x4ae>
 8000af4:	e0e3      	b.n	8000cbe <__aeabi_dadd+0x676>
 8000af6:	4663      	mov	r3, ip
 8000af8:	18c2      	adds	r2, r0, r3
 8000afa:	4282      	cmp	r2, r0
 8000afc:	4180      	sbcs	r0, r0
 8000afe:	0023      	movs	r3, r4
 8000b00:	4240      	negs	r0, r0
 8000b02:	4453      	add	r3, sl
 8000b04:	181b      	adds	r3, r3, r0
 8000b06:	07dd      	lsls	r5, r3, #31
 8000b08:	085c      	lsrs	r4, r3, #1
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	0852      	lsrs	r2, r2, #1
 8000b0e:	4315      	orrs	r5, r2
 8000b10:	000f      	movs	r7, r1
 8000b12:	402b      	ands	r3, r5
 8000b14:	e700      	b.n	8000918 <__aeabi_dadd+0x2d0>
 8000b16:	4663      	mov	r3, ip
 8000b18:	1a1d      	subs	r5, r3, r0
 8000b1a:	45ac      	cmp	ip, r5
 8000b1c:	4192      	sbcs	r2, r2
 8000b1e:	4653      	mov	r3, sl
 8000b20:	4252      	negs	r2, r2
 8000b22:	1b1c      	subs	r4, r3, r4
 8000b24:	000e      	movs	r6, r1
 8000b26:	4688      	mov	r8, r1
 8000b28:	1aa4      	subs	r4, r4, r2
 8000b2a:	e5e5      	b.n	80006f8 <__aeabi_dadd+0xb0>
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_dadd+0x4ea>
 8000b30:	e091      	b.n	8000c56 <__aeabi_dadd+0x60e>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d138      	bne.n	8000ba8 <__aeabi_dadd+0x560>
 8000b36:	2480      	movs	r4, #128	@ 0x80
 8000b38:	2600      	movs	r6, #0
 8000b3a:	0324      	lsls	r4, r4, #12
 8000b3c:	e756      	b.n	80009ec <__aeabi_dadd+0x3a4>
 8000b3e:	4663      	mov	r3, ip
 8000b40:	18c5      	adds	r5, r0, r3
 8000b42:	4285      	cmp	r5, r0
 8000b44:	4180      	sbcs	r0, r0
 8000b46:	4454      	add	r4, sl
 8000b48:	4240      	negs	r0, r0
 8000b4a:	1824      	adds	r4, r4, r0
 8000b4c:	2701      	movs	r7, #1
 8000b4e:	0223      	lsls	r3, r4, #8
 8000b50:	d400      	bmi.n	8000b54 <__aeabi_dadd+0x50c>
 8000b52:	e6df      	b.n	8000914 <__aeabi_dadd+0x2cc>
 8000b54:	2702      	movs	r7, #2
 8000b56:	e687      	b.n	8000868 <__aeabi_dadd+0x220>
 8000b58:	4663      	mov	r3, ip
 8000b5a:	1ac5      	subs	r5, r0, r3
 8000b5c:	42a8      	cmp	r0, r5
 8000b5e:	4180      	sbcs	r0, r0
 8000b60:	4653      	mov	r3, sl
 8000b62:	4240      	negs	r0, r0
 8000b64:	1ae4      	subs	r4, r4, r3
 8000b66:	2701      	movs	r7, #1
 8000b68:	1a24      	subs	r4, r4, r0
 8000b6a:	e5c0      	b.n	80006ee <__aeabi_dadd+0xa6>
 8000b6c:	0762      	lsls	r2, r4, #29
 8000b6e:	08c0      	lsrs	r0, r0, #3
 8000b70:	4302      	orrs	r2, r0
 8000b72:	08e4      	lsrs	r4, r4, #3
 8000b74:	e736      	b.n	80009e4 <__aeabi_dadd+0x39c>
 8000b76:	0011      	movs	r1, r2
 8000b78:	4653      	mov	r3, sl
 8000b7a:	3920      	subs	r1, #32
 8000b7c:	40cb      	lsrs	r3, r1
 8000b7e:	4699      	mov	r9, r3
 8000b80:	2a20      	cmp	r2, #32
 8000b82:	d006      	beq.n	8000b92 <__aeabi_dadd+0x54a>
 8000b84:	2140      	movs	r1, #64	@ 0x40
 8000b86:	4653      	mov	r3, sl
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	4093      	lsls	r3, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	4694      	mov	ip, r2
 8000b92:	4665      	mov	r5, ip
 8000b94:	1e6b      	subs	r3, r5, #1
 8000b96:	419d      	sbcs	r5, r3
 8000b98:	464b      	mov	r3, r9
 8000b9a:	431d      	orrs	r5, r3
 8000b9c:	e659      	b.n	8000852 <__aeabi_dadd+0x20a>
 8000b9e:	0762      	lsls	r2, r4, #29
 8000ba0:	08c0      	lsrs	r0, r0, #3
 8000ba2:	4302      	orrs	r2, r0
 8000ba4:	08e4      	lsrs	r4, r4, #3
 8000ba6:	e70d      	b.n	80009c4 <__aeabi_dadd+0x37c>
 8000ba8:	4653      	mov	r3, sl
 8000baa:	075a      	lsls	r2, r3, #29
 8000bac:	4663      	mov	r3, ip
 8000bae:	08d8      	lsrs	r0, r3, #3
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	000e      	movs	r6, r1
 8000bb4:	4302      	orrs	r2, r0
 8000bb6:	08dc      	lsrs	r4, r3, #3
 8000bb8:	e714      	b.n	80009e4 <__aeabi_dadd+0x39c>
 8000bba:	0015      	movs	r5, r2
 8000bbc:	0026      	movs	r6, r4
 8000bbe:	3d20      	subs	r5, #32
 8000bc0:	40ee      	lsrs	r6, r5
 8000bc2:	2a20      	cmp	r2, #32
 8000bc4:	d003      	beq.n	8000bce <__aeabi_dadd+0x586>
 8000bc6:	2540      	movs	r5, #64	@ 0x40
 8000bc8:	1aaa      	subs	r2, r5, r2
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	4320      	orrs	r0, r4
 8000bce:	1e42      	subs	r2, r0, #1
 8000bd0:	4190      	sbcs	r0, r2
 8000bd2:	0005      	movs	r5, r0
 8000bd4:	4335      	orrs	r5, r6
 8000bd6:	e606      	b.n	80007e6 <__aeabi_dadd+0x19e>
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d07c      	beq.n	8000cd6 <__aeabi_dadd+0x68e>
 8000bdc:	4662      	mov	r2, ip
 8000bde:	4653      	mov	r3, sl
 8000be0:	08c0      	lsrs	r0, r0, #3
 8000be2:	431a      	orrs	r2, r3
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x5a0>
 8000be6:	e6fa      	b.n	80009de <__aeabi_dadd+0x396>
 8000be8:	0762      	lsls	r2, r4, #29
 8000bea:	4310      	orrs	r0, r2
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	08e4      	lsrs	r4, r4, #3
 8000bf0:	0312      	lsls	r2, r2, #12
 8000bf2:	4214      	tst	r4, r2
 8000bf4:	d008      	beq.n	8000c08 <__aeabi_dadd+0x5c0>
 8000bf6:	08d9      	lsrs	r1, r3, #3
 8000bf8:	4211      	tst	r1, r2
 8000bfa:	d105      	bne.n	8000c08 <__aeabi_dadd+0x5c0>
 8000bfc:	4663      	mov	r3, ip
 8000bfe:	08d8      	lsrs	r0, r3, #3
 8000c00:	4653      	mov	r3, sl
 8000c02:	000c      	movs	r4, r1
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	4318      	orrs	r0, r3
 8000c08:	0f42      	lsrs	r2, r0, #29
 8000c0a:	00c0      	lsls	r0, r0, #3
 8000c0c:	08c0      	lsrs	r0, r0, #3
 8000c0e:	0752      	lsls	r2, r2, #29
 8000c10:	4302      	orrs	r2, r0
 8000c12:	e6e7      	b.n	80009e4 <__aeabi_dadd+0x39c>
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dadd+0x5d2>
 8000c18:	e72d      	b.n	8000a76 <__aeabi_dadd+0x42e>
 8000c1a:	4663      	mov	r3, ip
 8000c1c:	08d8      	lsrs	r0, r3, #3
 8000c1e:	4653      	mov	r3, sl
 8000c20:	075a      	lsls	r2, r3, #29
 8000c22:	000e      	movs	r6, r1
 8000c24:	4302      	orrs	r2, r0
 8000c26:	08dc      	lsrs	r4, r3, #3
 8000c28:	e6cc      	b.n	80009c4 <__aeabi_dadd+0x37c>
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	1a1d      	subs	r5, r3, r0
 8000c2e:	45ac      	cmp	ip, r5
 8000c30:	4192      	sbcs	r2, r2
 8000c32:	4653      	mov	r3, sl
 8000c34:	4252      	negs	r2, r2
 8000c36:	1b1c      	subs	r4, r3, r4
 8000c38:	000e      	movs	r6, r1
 8000c3a:	4688      	mov	r8, r1
 8000c3c:	1aa4      	subs	r4, r4, r2
 8000c3e:	3701      	adds	r7, #1
 8000c40:	e555      	b.n	80006ee <__aeabi_dadd+0xa6>
 8000c42:	4663      	mov	r3, ip
 8000c44:	08d9      	lsrs	r1, r3, #3
 8000c46:	4653      	mov	r3, sl
 8000c48:	075a      	lsls	r2, r3, #29
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	08dc      	lsrs	r4, r3, #3
 8000c4e:	e6c9      	b.n	80009e4 <__aeabi_dadd+0x39c>
 8000c50:	4660      	mov	r0, ip
 8000c52:	4654      	mov	r4, sl
 8000c54:	e6d4      	b.n	8000a00 <__aeabi_dadd+0x3b8>
 8000c56:	08c0      	lsrs	r0, r0, #3
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x616>
 8000c5c:	e6bf      	b.n	80009de <__aeabi_dadd+0x396>
 8000c5e:	0762      	lsls	r2, r4, #29
 8000c60:	4310      	orrs	r0, r2
 8000c62:	2280      	movs	r2, #128	@ 0x80
 8000c64:	08e4      	lsrs	r4, r4, #3
 8000c66:	0312      	lsls	r2, r2, #12
 8000c68:	4214      	tst	r4, r2
 8000c6a:	d0cd      	beq.n	8000c08 <__aeabi_dadd+0x5c0>
 8000c6c:	08dd      	lsrs	r5, r3, #3
 8000c6e:	4215      	tst	r5, r2
 8000c70:	d1ca      	bne.n	8000c08 <__aeabi_dadd+0x5c0>
 8000c72:	4663      	mov	r3, ip
 8000c74:	08d8      	lsrs	r0, r3, #3
 8000c76:	4653      	mov	r3, sl
 8000c78:	075b      	lsls	r3, r3, #29
 8000c7a:	000e      	movs	r6, r1
 8000c7c:	002c      	movs	r4, r5
 8000c7e:	4318      	orrs	r0, r3
 8000c80:	e7c2      	b.n	8000c08 <__aeabi_dadd+0x5c0>
 8000c82:	4663      	mov	r3, ip
 8000c84:	08d9      	lsrs	r1, r3, #3
 8000c86:	4653      	mov	r3, sl
 8000c88:	075a      	lsls	r2, r3, #29
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	08dc      	lsrs	r4, r3, #3
 8000c8e:	e699      	b.n	80009c4 <__aeabi_dadd+0x37c>
 8000c90:	4663      	mov	r3, ip
 8000c92:	08d8      	lsrs	r0, r3, #3
 8000c94:	4653      	mov	r3, sl
 8000c96:	075a      	lsls	r2, r3, #29
 8000c98:	000e      	movs	r6, r1
 8000c9a:	4302      	orrs	r2, r0
 8000c9c:	08dc      	lsrs	r4, r3, #3
 8000c9e:	e6a1      	b.n	80009e4 <__aeabi_dadd+0x39c>
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0027      	movs	r7, r4
 8000ca4:	3920      	subs	r1, #32
 8000ca6:	40cf      	lsrs	r7, r1
 8000ca8:	2a20      	cmp	r2, #32
 8000caa:	d003      	beq.n	8000cb4 <__aeabi_dadd+0x66c>
 8000cac:	2140      	movs	r1, #64	@ 0x40
 8000cae:	1a8a      	subs	r2, r1, r2
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	4320      	orrs	r0, r4
 8000cb4:	1e42      	subs	r2, r0, #1
 8000cb6:	4190      	sbcs	r0, r2
 8000cb8:	0005      	movs	r5, r0
 8000cba:	433d      	orrs	r5, r7
 8000cbc:	e651      	b.n	8000962 <__aeabi_dadd+0x31a>
 8000cbe:	000c      	movs	r4, r1
 8000cc0:	2500      	movs	r5, #0
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	e558      	b.n	8000778 <__aeabi_dadd+0x130>
 8000cc6:	4460      	add	r0, ip
 8000cc8:	4560      	cmp	r0, ip
 8000cca:	4192      	sbcs	r2, r2
 8000ccc:	4454      	add	r4, sl
 8000cce:	4252      	negs	r2, r2
 8000cd0:	0005      	movs	r5, r0
 8000cd2:	18a4      	adds	r4, r4, r2
 8000cd4:	e73a      	b.n	8000b4c <__aeabi_dadd+0x504>
 8000cd6:	4653      	mov	r3, sl
 8000cd8:	075a      	lsls	r2, r3, #29
 8000cda:	4663      	mov	r3, ip
 8000cdc:	08d9      	lsrs	r1, r3, #3
 8000cde:	4653      	mov	r3, sl
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	08dc      	lsrs	r4, r3, #3
 8000ce4:	e67e      	b.n	80009e4 <__aeabi_dadd+0x39c>
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	001c      	movs	r4, r3
 8000cea:	432a      	orrs	r2, r5
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_dadd+0x6a8>
 8000cee:	e6ab      	b.n	8000a48 <__aeabi_dadd+0x400>
 8000cf0:	e6c1      	b.n	8000a76 <__aeabi_dadd+0x42e>
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	1a09      	subs	r1, r1, r0
 8000cf8:	e519      	b.n	800072e <__aeabi_dadd+0xe6>
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	4c01      	ldr	r4, [pc, #4]	@ (8000d04 <__aeabi_dadd+0x6bc>)
 8000d00:	e53a      	b.n	8000778 <__aeabi_dadd+0x130>
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	000007ff 	.word	0x000007ff
 8000d08:	ff7fffff 	.word	0xff7fffff
 8000d0c:	000007fe 	.word	0x000007fe

08000d10 <__aeabi_ddiv>:
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d12:	46de      	mov	lr, fp
 8000d14:	4645      	mov	r5, r8
 8000d16:	4657      	mov	r7, sl
 8000d18:	464e      	mov	r6, r9
 8000d1a:	b5e0      	push	{r5, r6, r7, lr}
 8000d1c:	b087      	sub	sp, #28
 8000d1e:	9200      	str	r2, [sp, #0]
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	030b      	lsls	r3, r1, #12
 8000d24:	0b1b      	lsrs	r3, r3, #12
 8000d26:	469b      	mov	fp, r3
 8000d28:	0fca      	lsrs	r2, r1, #31
 8000d2a:	004b      	lsls	r3, r1, #1
 8000d2c:	0004      	movs	r4, r0
 8000d2e:	4680      	mov	r8, r0
 8000d30:	0d5b      	lsrs	r3, r3, #21
 8000d32:	9202      	str	r2, [sp, #8]
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x28>
 8000d36:	e16a      	b.n	800100e <__aeabi_ddiv+0x2fe>
 8000d38:	4ad4      	ldr	r2, [pc, #848]	@ (800108c <__aeabi_ddiv+0x37c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x30>
 8000d3e:	e18c      	b.n	800105a <__aeabi_ddiv+0x34a>
 8000d40:	4659      	mov	r1, fp
 8000d42:	0f42      	lsrs	r2, r0, #29
 8000d44:	00c9      	lsls	r1, r1, #3
 8000d46:	430a      	orrs	r2, r1
 8000d48:	2180      	movs	r1, #128	@ 0x80
 8000d4a:	0409      	lsls	r1, r1, #16
 8000d4c:	4311      	orrs	r1, r2
 8000d4e:	00c2      	lsls	r2, r0, #3
 8000d50:	4690      	mov	r8, r2
 8000d52:	4acf      	ldr	r2, [pc, #828]	@ (8001090 <__aeabi_ddiv+0x380>)
 8000d54:	4689      	mov	r9, r1
 8000d56:	4692      	mov	sl, r2
 8000d58:	449a      	add	sl, r3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2400      	movs	r4, #0
 8000d5e:	9303      	str	r3, [sp, #12]
 8000d60:	9e00      	ldr	r6, [sp, #0]
 8000d62:	9f01      	ldr	r7, [sp, #4]
 8000d64:	033b      	lsls	r3, r7, #12
 8000d66:	0b1b      	lsrs	r3, r3, #12
 8000d68:	469b      	mov	fp, r3
 8000d6a:	007b      	lsls	r3, r7, #1
 8000d6c:	0030      	movs	r0, r6
 8000d6e:	0d5b      	lsrs	r3, r3, #21
 8000d70:	0ffd      	lsrs	r5, r7, #31
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x68>
 8000d76:	e128      	b.n	8000fca <__aeabi_ddiv+0x2ba>
 8000d78:	4ac4      	ldr	r2, [pc, #784]	@ (800108c <__aeabi_ddiv+0x37c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x70>
 8000d7e:	e177      	b.n	8001070 <__aeabi_ddiv+0x360>
 8000d80:	4659      	mov	r1, fp
 8000d82:	0f72      	lsrs	r2, r6, #29
 8000d84:	00c9      	lsls	r1, r1, #3
 8000d86:	430a      	orrs	r2, r1
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	0409      	lsls	r1, r1, #16
 8000d8c:	4311      	orrs	r1, r2
 8000d8e:	468b      	mov	fp, r1
 8000d90:	49bf      	ldr	r1, [pc, #764]	@ (8001090 <__aeabi_ddiv+0x380>)
 8000d92:	00f2      	lsls	r2, r6, #3
 8000d94:	468c      	mov	ip, r1
 8000d96:	4651      	mov	r1, sl
 8000d98:	4463      	add	r3, ip
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9e02      	ldr	r6, [sp, #8]
 8000da2:	406e      	eors	r6, r5
 8000da4:	2c0f      	cmp	r4, #15
 8000da6:	d827      	bhi.n	8000df8 <__aeabi_ddiv+0xe8>
 8000da8:	49ba      	ldr	r1, [pc, #744]	@ (8001094 <__aeabi_ddiv+0x384>)
 8000daa:	00a4      	lsls	r4, r4, #2
 8000dac:	5909      	ldr	r1, [r1, r4]
 8000dae:	468f      	mov	pc, r1
 8000db0:	46cb      	mov	fp, r9
 8000db2:	4642      	mov	r2, r8
 8000db4:	9e02      	ldr	r6, [sp, #8]
 8000db6:	9b03      	ldr	r3, [sp, #12]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d016      	beq.n	8000dea <__aeabi_ddiv+0xda>
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_ddiv+0xb2>
 8000dc0:	e2a6      	b.n	8001310 <__aeabi_ddiv+0x600>
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_ddiv+0xb8>
 8000dc6:	e0df      	b.n	8000f88 <__aeabi_ddiv+0x278>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2400      	movs	r4, #0
 8000dce:	4690      	mov	r8, r2
 8000dd0:	051b      	lsls	r3, r3, #20
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	07f6      	lsls	r6, r6, #31
 8000dd6:	4333      	orrs	r3, r6
 8000dd8:	4640      	mov	r0, r8
 8000dda:	0019      	movs	r1, r3
 8000ddc:	b007      	add	sp, #28
 8000dde:	bcf0      	pop	{r4, r5, r6, r7}
 8000de0:	46bb      	mov	fp, r7
 8000de2:	46b2      	mov	sl, r6
 8000de4:	46a9      	mov	r9, r5
 8000de6:	46a0      	mov	r8, r4
 8000de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dea:	2200      	movs	r2, #0
 8000dec:	2400      	movs	r4, #0
 8000dee:	4690      	mov	r8, r2
 8000df0:	4ba6      	ldr	r3, [pc, #664]	@ (800108c <__aeabi_ddiv+0x37c>)
 8000df2:	e7ed      	b.n	8000dd0 <__aeabi_ddiv+0xc0>
 8000df4:	002e      	movs	r6, r5
 8000df6:	e7df      	b.n	8000db8 <__aeabi_ddiv+0xa8>
 8000df8:	45cb      	cmp	fp, r9
 8000dfa:	d200      	bcs.n	8000dfe <__aeabi_ddiv+0xee>
 8000dfc:	e1d4      	b.n	80011a8 <__aeabi_ddiv+0x498>
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0xf2>
 8000e00:	e1cf      	b.n	80011a2 <__aeabi_ddiv+0x492>
 8000e02:	2301      	movs	r3, #1
 8000e04:	425b      	negs	r3, r3
 8000e06:	469c      	mov	ip, r3
 8000e08:	4644      	mov	r4, r8
 8000e0a:	4648      	mov	r0, r9
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	44e2      	add	sl, ip
 8000e10:	465b      	mov	r3, fp
 8000e12:	0e15      	lsrs	r5, r2, #24
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	431d      	orrs	r5, r3
 8000e18:	0c19      	lsrs	r1, r3, #16
 8000e1a:	042b      	lsls	r3, r5, #16
 8000e1c:	0212      	lsls	r2, r2, #8
 8000e1e:	9500      	str	r5, [sp, #0]
 8000e20:	0c1d      	lsrs	r5, r3, #16
 8000e22:	4691      	mov	r9, r2
 8000e24:	9102      	str	r1, [sp, #8]
 8000e26:	9503      	str	r5, [sp, #12]
 8000e28:	f7ff f9fe 	bl	8000228 <__aeabi_uidivmod>
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	436a      	muls	r2, r5
 8000e30:	040b      	lsls	r3, r1, #16
 8000e32:	0c21      	lsrs	r1, r4, #16
 8000e34:	4680      	mov	r8, r0
 8000e36:	4319      	orrs	r1, r3
 8000e38:	428a      	cmp	r2, r1
 8000e3a:	d909      	bls.n	8000e50 <__aeabi_ddiv+0x140>
 8000e3c:	9d00      	ldr	r5, [sp, #0]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	46ac      	mov	ip, r5
 8000e42:	425b      	negs	r3, r3
 8000e44:	4461      	add	r1, ip
 8000e46:	469c      	mov	ip, r3
 8000e48:	44e0      	add	r8, ip
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	d800      	bhi.n	8000e50 <__aeabi_ddiv+0x140>
 8000e4e:	e1fb      	b.n	8001248 <__aeabi_ddiv+0x538>
 8000e50:	1a88      	subs	r0, r1, r2
 8000e52:	9902      	ldr	r1, [sp, #8]
 8000e54:	f7ff f9e8 	bl	8000228 <__aeabi_uidivmod>
 8000e58:	9a03      	ldr	r2, [sp, #12]
 8000e5a:	0424      	lsls	r4, r4, #16
 8000e5c:	4342      	muls	r2, r0
 8000e5e:	0409      	lsls	r1, r1, #16
 8000e60:	0c24      	lsrs	r4, r4, #16
 8000e62:	0003      	movs	r3, r0
 8000e64:	430c      	orrs	r4, r1
 8000e66:	42a2      	cmp	r2, r4
 8000e68:	d906      	bls.n	8000e78 <__aeabi_ddiv+0x168>
 8000e6a:	9900      	ldr	r1, [sp, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	468c      	mov	ip, r1
 8000e70:	4464      	add	r4, ip
 8000e72:	42a1      	cmp	r1, r4
 8000e74:	d800      	bhi.n	8000e78 <__aeabi_ddiv+0x168>
 8000e76:	e1e1      	b.n	800123c <__aeabi_ddiv+0x52c>
 8000e78:	1aa0      	subs	r0, r4, r2
 8000e7a:	4642      	mov	r2, r8
 8000e7c:	0412      	lsls	r2, r2, #16
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	4693      	mov	fp, r2
 8000e82:	464b      	mov	r3, r9
 8000e84:	4659      	mov	r1, fp
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	001d      	movs	r5, r3
 8000e8a:	9304      	str	r3, [sp, #16]
 8000e8c:	040b      	lsls	r3, r1, #16
 8000e8e:	4649      	mov	r1, r9
 8000e90:	0409      	lsls	r1, r1, #16
 8000e92:	0c09      	lsrs	r1, r1, #16
 8000e94:	000c      	movs	r4, r1
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	435c      	muls	r4, r3
 8000e9a:	0c12      	lsrs	r2, r2, #16
 8000e9c:	436b      	muls	r3, r5
 8000e9e:	4688      	mov	r8, r1
 8000ea0:	4351      	muls	r1, r2
 8000ea2:	436a      	muls	r2, r5
 8000ea4:	0c25      	lsrs	r5, r4, #16
 8000ea6:	46ac      	mov	ip, r5
 8000ea8:	185b      	adds	r3, r3, r1
 8000eaa:	4463      	add	r3, ip
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d903      	bls.n	8000eb8 <__aeabi_ddiv+0x1a8>
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0249      	lsls	r1, r1, #9
 8000eb4:	468c      	mov	ip, r1
 8000eb6:	4462      	add	r2, ip
 8000eb8:	0c19      	lsrs	r1, r3, #16
 8000eba:	0424      	lsls	r4, r4, #16
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	0c24      	lsrs	r4, r4, #16
 8000ec0:	188a      	adds	r2, r1, r2
 8000ec2:	191c      	adds	r4, r3, r4
 8000ec4:	4290      	cmp	r0, r2
 8000ec6:	d302      	bcc.n	8000ece <__aeabi_ddiv+0x1be>
 8000ec8:	d116      	bne.n	8000ef8 <__aeabi_ddiv+0x1e8>
 8000eca:	42a7      	cmp	r7, r4
 8000ecc:	d214      	bcs.n	8000ef8 <__aeabi_ddiv+0x1e8>
 8000ece:	465b      	mov	r3, fp
 8000ed0:	9d00      	ldr	r5, [sp, #0]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	444f      	add	r7, r9
 8000ed6:	9305      	str	r3, [sp, #20]
 8000ed8:	454f      	cmp	r7, r9
 8000eda:	419b      	sbcs	r3, r3
 8000edc:	46ac      	mov	ip, r5
 8000ede:	425b      	negs	r3, r3
 8000ee0:	4463      	add	r3, ip
 8000ee2:	18c0      	adds	r0, r0, r3
 8000ee4:	4285      	cmp	r5, r0
 8000ee6:	d300      	bcc.n	8000eea <__aeabi_ddiv+0x1da>
 8000ee8:	e1a1      	b.n	800122e <__aeabi_ddiv+0x51e>
 8000eea:	4282      	cmp	r2, r0
 8000eec:	d900      	bls.n	8000ef0 <__aeabi_ddiv+0x1e0>
 8000eee:	e1f6      	b.n	80012de <__aeabi_ddiv+0x5ce>
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_ddiv+0x1e4>
 8000ef2:	e1f1      	b.n	80012d8 <__aeabi_ddiv+0x5c8>
 8000ef4:	9b05      	ldr	r3, [sp, #20]
 8000ef6:	469b      	mov	fp, r3
 8000ef8:	1b3c      	subs	r4, r7, r4
 8000efa:	42a7      	cmp	r7, r4
 8000efc:	41bf      	sbcs	r7, r7
 8000efe:	9d00      	ldr	r5, [sp, #0]
 8000f00:	1a80      	subs	r0, r0, r2
 8000f02:	427f      	negs	r7, r7
 8000f04:	1bc0      	subs	r0, r0, r7
 8000f06:	4285      	cmp	r5, r0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_ddiv+0x1fc>
 8000f0a:	e1d0      	b.n	80012ae <__aeabi_ddiv+0x59e>
 8000f0c:	9902      	ldr	r1, [sp, #8]
 8000f0e:	f7ff f98b 	bl	8000228 <__aeabi_uidivmod>
 8000f12:	9a03      	ldr	r2, [sp, #12]
 8000f14:	040b      	lsls	r3, r1, #16
 8000f16:	4342      	muls	r2, r0
 8000f18:	0c21      	lsrs	r1, r4, #16
 8000f1a:	0007      	movs	r7, r0
 8000f1c:	4319      	orrs	r1, r3
 8000f1e:	428a      	cmp	r2, r1
 8000f20:	d900      	bls.n	8000f24 <__aeabi_ddiv+0x214>
 8000f22:	e178      	b.n	8001216 <__aeabi_ddiv+0x506>
 8000f24:	1a88      	subs	r0, r1, r2
 8000f26:	9902      	ldr	r1, [sp, #8]
 8000f28:	f7ff f97e 	bl	8000228 <__aeabi_uidivmod>
 8000f2c:	9a03      	ldr	r2, [sp, #12]
 8000f2e:	0424      	lsls	r4, r4, #16
 8000f30:	4342      	muls	r2, r0
 8000f32:	0409      	lsls	r1, r1, #16
 8000f34:	0c24      	lsrs	r4, r4, #16
 8000f36:	0003      	movs	r3, r0
 8000f38:	430c      	orrs	r4, r1
 8000f3a:	42a2      	cmp	r2, r4
 8000f3c:	d900      	bls.n	8000f40 <__aeabi_ddiv+0x230>
 8000f3e:	e15d      	b.n	80011fc <__aeabi_ddiv+0x4ec>
 8000f40:	4641      	mov	r1, r8
 8000f42:	1aa4      	subs	r4, r4, r2
 8000f44:	043a      	lsls	r2, r7, #16
 8000f46:	431a      	orrs	r2, r3
 8000f48:	9d04      	ldr	r5, [sp, #16]
 8000f4a:	0413      	lsls	r3, r2, #16
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	4359      	muls	r1, r3
 8000f50:	4647      	mov	r7, r8
 8000f52:	436b      	muls	r3, r5
 8000f54:	469c      	mov	ip, r3
 8000f56:	0c10      	lsrs	r0, r2, #16
 8000f58:	4347      	muls	r7, r0
 8000f5a:	0c0b      	lsrs	r3, r1, #16
 8000f5c:	44bc      	add	ip, r7
 8000f5e:	4463      	add	r3, ip
 8000f60:	4368      	muls	r0, r5
 8000f62:	429f      	cmp	r7, r3
 8000f64:	d903      	bls.n	8000f6e <__aeabi_ddiv+0x25e>
 8000f66:	2580      	movs	r5, #128	@ 0x80
 8000f68:	026d      	lsls	r5, r5, #9
 8000f6a:	46ac      	mov	ip, r5
 8000f6c:	4460      	add	r0, ip
 8000f6e:	0c1f      	lsrs	r7, r3, #16
 8000f70:	0409      	lsls	r1, r1, #16
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	0c09      	lsrs	r1, r1, #16
 8000f76:	183f      	adds	r7, r7, r0
 8000f78:	185b      	adds	r3, r3, r1
 8000f7a:	42bc      	cmp	r4, r7
 8000f7c:	d200      	bcs.n	8000f80 <__aeabi_ddiv+0x270>
 8000f7e:	e102      	b.n	8001186 <__aeabi_ddiv+0x476>
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x274>
 8000f82:	e0fd      	b.n	8001180 <__aeabi_ddiv+0x470>
 8000f84:	2301      	movs	r3, #1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	4b43      	ldr	r3, [pc, #268]	@ (8001098 <__aeabi_ddiv+0x388>)
 8000f8a:	4453      	add	r3, sl
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_ddiv+0x282>
 8000f90:	e0ae      	b.n	80010f0 <__aeabi_ddiv+0x3e0>
 8000f92:	0751      	lsls	r1, r2, #29
 8000f94:	d000      	beq.n	8000f98 <__aeabi_ddiv+0x288>
 8000f96:	e198      	b.n	80012ca <__aeabi_ddiv+0x5ba>
 8000f98:	4659      	mov	r1, fp
 8000f9a:	01c9      	lsls	r1, r1, #7
 8000f9c:	d506      	bpl.n	8000fac <__aeabi_ddiv+0x29c>
 8000f9e:	4659      	mov	r1, fp
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800109c <__aeabi_ddiv+0x38c>)
 8000fa2:	4019      	ands	r1, r3
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	468b      	mov	fp, r1
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4453      	add	r3, sl
 8000fac:	493c      	ldr	r1, [pc, #240]	@ (80010a0 <__aeabi_ddiv+0x390>)
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	dd00      	ble.n	8000fb4 <__aeabi_ddiv+0x2a4>
 8000fb2:	e71a      	b.n	8000dea <__aeabi_ddiv+0xda>
 8000fb4:	4659      	mov	r1, fp
 8000fb6:	08d2      	lsrs	r2, r2, #3
 8000fb8:	0749      	lsls	r1, r1, #29
 8000fba:	4311      	orrs	r1, r2
 8000fbc:	465a      	mov	r2, fp
 8000fbe:	055b      	lsls	r3, r3, #21
 8000fc0:	0254      	lsls	r4, r2, #9
 8000fc2:	4688      	mov	r8, r1
 8000fc4:	0b24      	lsrs	r4, r4, #12
 8000fc6:	0d5b      	lsrs	r3, r3, #21
 8000fc8:	e702      	b.n	8000dd0 <__aeabi_ddiv+0xc0>
 8000fca:	465a      	mov	r2, fp
 8000fcc:	9b00      	ldr	r3, [sp, #0]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_ddiv+0x2c4>
 8000fd2:	e07e      	b.n	80010d2 <__aeabi_ddiv+0x3c2>
 8000fd4:	465b      	mov	r3, fp
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x2cc>
 8000fda:	e100      	b.n	80011de <__aeabi_ddiv+0x4ce>
 8000fdc:	4658      	mov	r0, fp
 8000fde:	f001 f90f 	bl	8002200 <__clzsi2>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	3a0b      	subs	r2, #11
 8000fe8:	271d      	movs	r7, #29
 8000fea:	9e00      	ldr	r6, [sp, #0]
 8000fec:	1aba      	subs	r2, r7, r2
 8000fee:	0019      	movs	r1, r3
 8000ff0:	4658      	mov	r0, fp
 8000ff2:	40d6      	lsrs	r6, r2
 8000ff4:	3908      	subs	r1, #8
 8000ff6:	4088      	lsls	r0, r1
 8000ff8:	0032      	movs	r2, r6
 8000ffa:	4302      	orrs	r2, r0
 8000ffc:	4693      	mov	fp, r2
 8000ffe:	9a00      	ldr	r2, [sp, #0]
 8001000:	408a      	lsls	r2, r1
 8001002:	4928      	ldr	r1, [pc, #160]	@ (80010a4 <__aeabi_ddiv+0x394>)
 8001004:	4453      	add	r3, sl
 8001006:	468a      	mov	sl, r1
 8001008:	449a      	add	sl, r3
 800100a:	2300      	movs	r3, #0
 800100c:	e6c8      	b.n	8000da0 <__aeabi_ddiv+0x90>
 800100e:	465b      	mov	r3, fp
 8001010:	4303      	orrs	r3, r0
 8001012:	4699      	mov	r9, r3
 8001014:	d056      	beq.n	80010c4 <__aeabi_ddiv+0x3b4>
 8001016:	465b      	mov	r3, fp
 8001018:	2b00      	cmp	r3, #0
 800101a:	d100      	bne.n	800101e <__aeabi_ddiv+0x30e>
 800101c:	e0cd      	b.n	80011ba <__aeabi_ddiv+0x4aa>
 800101e:	4658      	mov	r0, fp
 8001020:	f001 f8ee 	bl	8002200 <__clzsi2>
 8001024:	230b      	movs	r3, #11
 8001026:	425b      	negs	r3, r3
 8001028:	469c      	mov	ip, r3
 800102a:	0002      	movs	r2, r0
 800102c:	4484      	add	ip, r0
 800102e:	4666      	mov	r6, ip
 8001030:	231d      	movs	r3, #29
 8001032:	1b9b      	subs	r3, r3, r6
 8001034:	0026      	movs	r6, r4
 8001036:	0011      	movs	r1, r2
 8001038:	4658      	mov	r0, fp
 800103a:	40de      	lsrs	r6, r3
 800103c:	3908      	subs	r1, #8
 800103e:	4088      	lsls	r0, r1
 8001040:	0033      	movs	r3, r6
 8001042:	4303      	orrs	r3, r0
 8001044:	4699      	mov	r9, r3
 8001046:	0023      	movs	r3, r4
 8001048:	408b      	lsls	r3, r1
 800104a:	4698      	mov	r8, r3
 800104c:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <__aeabi_ddiv+0x398>)
 800104e:	2400      	movs	r4, #0
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	469a      	mov	sl, r3
 8001054:	2300      	movs	r3, #0
 8001056:	9303      	str	r3, [sp, #12]
 8001058:	e682      	b.n	8000d60 <__aeabi_ddiv+0x50>
 800105a:	465a      	mov	r2, fp
 800105c:	4302      	orrs	r2, r0
 800105e:	4691      	mov	r9, r2
 8001060:	d12a      	bne.n	80010b8 <__aeabi_ddiv+0x3a8>
 8001062:	2200      	movs	r2, #0
 8001064:	469a      	mov	sl, r3
 8001066:	2302      	movs	r3, #2
 8001068:	4690      	mov	r8, r2
 800106a:	2408      	movs	r4, #8
 800106c:	9303      	str	r3, [sp, #12]
 800106e:	e677      	b.n	8000d60 <__aeabi_ddiv+0x50>
 8001070:	465a      	mov	r2, fp
 8001072:	9b00      	ldr	r3, [sp, #0]
 8001074:	431a      	orrs	r2, r3
 8001076:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <__aeabi_ddiv+0x39c>)
 8001078:	469c      	mov	ip, r3
 800107a:	44e2      	add	sl, ip
 800107c:	2a00      	cmp	r2, #0
 800107e:	d117      	bne.n	80010b0 <__aeabi_ddiv+0x3a0>
 8001080:	2302      	movs	r3, #2
 8001082:	431c      	orrs	r4, r3
 8001084:	2300      	movs	r3, #0
 8001086:	469b      	mov	fp, r3
 8001088:	3302      	adds	r3, #2
 800108a:	e689      	b.n	8000da0 <__aeabi_ddiv+0x90>
 800108c:	000007ff 	.word	0x000007ff
 8001090:	fffffc01 	.word	0xfffffc01
 8001094:	08006638 	.word	0x08006638
 8001098:	000003ff 	.word	0x000003ff
 800109c:	feffffff 	.word	0xfeffffff
 80010a0:	000007fe 	.word	0x000007fe
 80010a4:	000003f3 	.word	0x000003f3
 80010a8:	fffffc0d 	.word	0xfffffc0d
 80010ac:	fffff801 	.word	0xfffff801
 80010b0:	2303      	movs	r3, #3
 80010b2:	0032      	movs	r2, r6
 80010b4:	431c      	orrs	r4, r3
 80010b6:	e673      	b.n	8000da0 <__aeabi_ddiv+0x90>
 80010b8:	469a      	mov	sl, r3
 80010ba:	2303      	movs	r3, #3
 80010bc:	46d9      	mov	r9, fp
 80010be:	240c      	movs	r4, #12
 80010c0:	9303      	str	r3, [sp, #12]
 80010c2:	e64d      	b.n	8000d60 <__aeabi_ddiv+0x50>
 80010c4:	2300      	movs	r3, #0
 80010c6:	4698      	mov	r8, r3
 80010c8:	469a      	mov	sl, r3
 80010ca:	3301      	adds	r3, #1
 80010cc:	2404      	movs	r4, #4
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	e646      	b.n	8000d60 <__aeabi_ddiv+0x50>
 80010d2:	2301      	movs	r3, #1
 80010d4:	431c      	orrs	r4, r3
 80010d6:	2300      	movs	r3, #0
 80010d8:	469b      	mov	fp, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	e660      	b.n	8000da0 <__aeabi_ddiv+0x90>
 80010de:	2300      	movs	r3, #0
 80010e0:	2480      	movs	r4, #128	@ 0x80
 80010e2:	4698      	mov	r8, r3
 80010e4:	2600      	movs	r6, #0
 80010e6:	4b92      	ldr	r3, [pc, #584]	@ (8001330 <__aeabi_ddiv+0x620>)
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	e671      	b.n	8000dd0 <__aeabi_ddiv+0xc0>
 80010ec:	2201      	movs	r2, #1
 80010ee:	4252      	negs	r2, r2
 80010f0:	2101      	movs	r1, #1
 80010f2:	1ac9      	subs	r1, r1, r3
 80010f4:	2938      	cmp	r1, #56	@ 0x38
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x3ea>
 80010f8:	e666      	b.n	8000dc8 <__aeabi_ddiv+0xb8>
 80010fa:	291f      	cmp	r1, #31
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x3f0>
 80010fe:	e0ab      	b.n	8001258 <__aeabi_ddiv+0x548>
 8001100:	201f      	movs	r0, #31
 8001102:	4240      	negs	r0, r0
 8001104:	1ac3      	subs	r3, r0, r3
 8001106:	4658      	mov	r0, fp
 8001108:	40d8      	lsrs	r0, r3
 800110a:	0003      	movs	r3, r0
 800110c:	2920      	cmp	r1, #32
 800110e:	d004      	beq.n	800111a <__aeabi_ddiv+0x40a>
 8001110:	4658      	mov	r0, fp
 8001112:	4988      	ldr	r1, [pc, #544]	@ (8001334 <__aeabi_ddiv+0x624>)
 8001114:	4451      	add	r1, sl
 8001116:	4088      	lsls	r0, r1
 8001118:	4302      	orrs	r2, r0
 800111a:	1e51      	subs	r1, r2, #1
 800111c:	418a      	sbcs	r2, r1
 800111e:	431a      	orrs	r2, r3
 8001120:	2307      	movs	r3, #7
 8001122:	0019      	movs	r1, r3
 8001124:	2400      	movs	r4, #0
 8001126:	4011      	ands	r1, r2
 8001128:	4213      	tst	r3, r2
 800112a:	d00c      	beq.n	8001146 <__aeabi_ddiv+0x436>
 800112c:	230f      	movs	r3, #15
 800112e:	4013      	ands	r3, r2
 8001130:	2b04      	cmp	r3, #4
 8001132:	d100      	bne.n	8001136 <__aeabi_ddiv+0x426>
 8001134:	e0f9      	b.n	800132a <__aeabi_ddiv+0x61a>
 8001136:	1d11      	adds	r1, r2, #4
 8001138:	4291      	cmp	r1, r2
 800113a:	419b      	sbcs	r3, r3
 800113c:	000a      	movs	r2, r1
 800113e:	425b      	negs	r3, r3
 8001140:	0759      	lsls	r1, r3, #29
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	0b1c      	lsrs	r4, r3, #12
 8001146:	08d2      	lsrs	r2, r2, #3
 8001148:	430a      	orrs	r2, r1
 800114a:	4690      	mov	r8, r2
 800114c:	2300      	movs	r3, #0
 800114e:	e63f      	b.n	8000dd0 <__aeabi_ddiv+0xc0>
 8001150:	2480      	movs	r4, #128	@ 0x80
 8001152:	464b      	mov	r3, r9
 8001154:	0324      	lsls	r4, r4, #12
 8001156:	4223      	tst	r3, r4
 8001158:	d009      	beq.n	800116e <__aeabi_ddiv+0x45e>
 800115a:	465b      	mov	r3, fp
 800115c:	4223      	tst	r3, r4
 800115e:	d106      	bne.n	800116e <__aeabi_ddiv+0x45e>
 8001160:	431c      	orrs	r4, r3
 8001162:	0324      	lsls	r4, r4, #12
 8001164:	002e      	movs	r6, r5
 8001166:	4690      	mov	r8, r2
 8001168:	4b71      	ldr	r3, [pc, #452]	@ (8001330 <__aeabi_ddiv+0x620>)
 800116a:	0b24      	lsrs	r4, r4, #12
 800116c:	e630      	b.n	8000dd0 <__aeabi_ddiv+0xc0>
 800116e:	2480      	movs	r4, #128	@ 0x80
 8001170:	464b      	mov	r3, r9
 8001172:	0324      	lsls	r4, r4, #12
 8001174:	431c      	orrs	r4, r3
 8001176:	0324      	lsls	r4, r4, #12
 8001178:	9e02      	ldr	r6, [sp, #8]
 800117a:	4b6d      	ldr	r3, [pc, #436]	@ (8001330 <__aeabi_ddiv+0x620>)
 800117c:	0b24      	lsrs	r4, r4, #12
 800117e:	e627      	b.n	8000dd0 <__aeabi_ddiv+0xc0>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_ddiv+0x476>
 8001184:	e700      	b.n	8000f88 <__aeabi_ddiv+0x278>
 8001186:	9800      	ldr	r0, [sp, #0]
 8001188:	1e51      	subs	r1, r2, #1
 800118a:	4684      	mov	ip, r0
 800118c:	4464      	add	r4, ip
 800118e:	4284      	cmp	r4, r0
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x484>
 8001192:	e084      	b.n	800129e <__aeabi_ddiv+0x58e>
 8001194:	42bc      	cmp	r4, r7
 8001196:	d200      	bcs.n	800119a <__aeabi_ddiv+0x48a>
 8001198:	e0ae      	b.n	80012f8 <__aeabi_ddiv+0x5e8>
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x48e>
 800119c:	e0c1      	b.n	8001322 <__aeabi_ddiv+0x612>
 800119e:	000a      	movs	r2, r1
 80011a0:	e6f0      	b.n	8000f84 <__aeabi_ddiv+0x274>
 80011a2:	4542      	cmp	r2, r8
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x498>
 80011a6:	e62c      	b.n	8000e02 <__aeabi_ddiv+0xf2>
 80011a8:	464b      	mov	r3, r9
 80011aa:	07dc      	lsls	r4, r3, #31
 80011ac:	0858      	lsrs	r0, r3, #1
 80011ae:	4643      	mov	r3, r8
 80011b0:	085b      	lsrs	r3, r3, #1
 80011b2:	431c      	orrs	r4, r3
 80011b4:	4643      	mov	r3, r8
 80011b6:	07df      	lsls	r7, r3, #31
 80011b8:	e62a      	b.n	8000e10 <__aeabi_ddiv+0x100>
 80011ba:	f001 f821 	bl	8002200 <__clzsi2>
 80011be:	2315      	movs	r3, #21
 80011c0:	469c      	mov	ip, r3
 80011c2:	4484      	add	ip, r0
 80011c4:	0002      	movs	r2, r0
 80011c6:	4663      	mov	r3, ip
 80011c8:	3220      	adds	r2, #32
 80011ca:	2b1c      	cmp	r3, #28
 80011cc:	dc00      	bgt.n	80011d0 <__aeabi_ddiv+0x4c0>
 80011ce:	e72e      	b.n	800102e <__aeabi_ddiv+0x31e>
 80011d0:	0023      	movs	r3, r4
 80011d2:	3808      	subs	r0, #8
 80011d4:	4083      	lsls	r3, r0
 80011d6:	4699      	mov	r9, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	4698      	mov	r8, r3
 80011dc:	e736      	b.n	800104c <__aeabi_ddiv+0x33c>
 80011de:	f001 f80f 	bl	8002200 <__clzsi2>
 80011e2:	0002      	movs	r2, r0
 80011e4:	0003      	movs	r3, r0
 80011e6:	3215      	adds	r2, #21
 80011e8:	3320      	adds	r3, #32
 80011ea:	2a1c      	cmp	r2, #28
 80011ec:	dc00      	bgt.n	80011f0 <__aeabi_ddiv+0x4e0>
 80011ee:	e6fb      	b.n	8000fe8 <__aeabi_ddiv+0x2d8>
 80011f0:	9900      	ldr	r1, [sp, #0]
 80011f2:	3808      	subs	r0, #8
 80011f4:	4081      	lsls	r1, r0
 80011f6:	2200      	movs	r2, #0
 80011f8:	468b      	mov	fp, r1
 80011fa:	e702      	b.n	8001002 <__aeabi_ddiv+0x2f2>
 80011fc:	9900      	ldr	r1, [sp, #0]
 80011fe:	3b01      	subs	r3, #1
 8001200:	468c      	mov	ip, r1
 8001202:	4464      	add	r4, ip
 8001204:	42a1      	cmp	r1, r4
 8001206:	d900      	bls.n	800120a <__aeabi_ddiv+0x4fa>
 8001208:	e69a      	b.n	8000f40 <__aeabi_ddiv+0x230>
 800120a:	42a2      	cmp	r2, r4
 800120c:	d800      	bhi.n	8001210 <__aeabi_ddiv+0x500>
 800120e:	e697      	b.n	8000f40 <__aeabi_ddiv+0x230>
 8001210:	1e83      	subs	r3, r0, #2
 8001212:	4464      	add	r4, ip
 8001214:	e694      	b.n	8000f40 <__aeabi_ddiv+0x230>
 8001216:	46ac      	mov	ip, r5
 8001218:	4461      	add	r1, ip
 800121a:	3f01      	subs	r7, #1
 800121c:	428d      	cmp	r5, r1
 800121e:	d900      	bls.n	8001222 <__aeabi_ddiv+0x512>
 8001220:	e680      	b.n	8000f24 <__aeabi_ddiv+0x214>
 8001222:	428a      	cmp	r2, r1
 8001224:	d800      	bhi.n	8001228 <__aeabi_ddiv+0x518>
 8001226:	e67d      	b.n	8000f24 <__aeabi_ddiv+0x214>
 8001228:	1e87      	subs	r7, r0, #2
 800122a:	4461      	add	r1, ip
 800122c:	e67a      	b.n	8000f24 <__aeabi_ddiv+0x214>
 800122e:	4285      	cmp	r5, r0
 8001230:	d000      	beq.n	8001234 <__aeabi_ddiv+0x524>
 8001232:	e65f      	b.n	8000ef4 <__aeabi_ddiv+0x1e4>
 8001234:	45b9      	cmp	r9, r7
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x52a>
 8001238:	e65c      	b.n	8000ef4 <__aeabi_ddiv+0x1e4>
 800123a:	e656      	b.n	8000eea <__aeabi_ddiv+0x1da>
 800123c:	42a2      	cmp	r2, r4
 800123e:	d800      	bhi.n	8001242 <__aeabi_ddiv+0x532>
 8001240:	e61a      	b.n	8000e78 <__aeabi_ddiv+0x168>
 8001242:	1e83      	subs	r3, r0, #2
 8001244:	4464      	add	r4, ip
 8001246:	e617      	b.n	8000e78 <__aeabi_ddiv+0x168>
 8001248:	428a      	cmp	r2, r1
 800124a:	d800      	bhi.n	800124e <__aeabi_ddiv+0x53e>
 800124c:	e600      	b.n	8000e50 <__aeabi_ddiv+0x140>
 800124e:	46ac      	mov	ip, r5
 8001250:	1e83      	subs	r3, r0, #2
 8001252:	4698      	mov	r8, r3
 8001254:	4461      	add	r1, ip
 8001256:	e5fb      	b.n	8000e50 <__aeabi_ddiv+0x140>
 8001258:	4837      	ldr	r0, [pc, #220]	@ (8001338 <__aeabi_ddiv+0x628>)
 800125a:	0014      	movs	r4, r2
 800125c:	4450      	add	r0, sl
 800125e:	4082      	lsls	r2, r0
 8001260:	465b      	mov	r3, fp
 8001262:	0017      	movs	r7, r2
 8001264:	4083      	lsls	r3, r0
 8001266:	40cc      	lsrs	r4, r1
 8001268:	1e7a      	subs	r2, r7, #1
 800126a:	4197      	sbcs	r7, r2
 800126c:	4323      	orrs	r3, r4
 800126e:	433b      	orrs	r3, r7
 8001270:	001a      	movs	r2, r3
 8001272:	465b      	mov	r3, fp
 8001274:	40cb      	lsrs	r3, r1
 8001276:	0751      	lsls	r1, r2, #29
 8001278:	d009      	beq.n	800128e <__aeabi_ddiv+0x57e>
 800127a:	210f      	movs	r1, #15
 800127c:	4011      	ands	r1, r2
 800127e:	2904      	cmp	r1, #4
 8001280:	d005      	beq.n	800128e <__aeabi_ddiv+0x57e>
 8001282:	1d11      	adds	r1, r2, #4
 8001284:	4291      	cmp	r1, r2
 8001286:	4192      	sbcs	r2, r2
 8001288:	4252      	negs	r2, r2
 800128a:	189b      	adds	r3, r3, r2
 800128c:	000a      	movs	r2, r1
 800128e:	0219      	lsls	r1, r3, #8
 8001290:	d400      	bmi.n	8001294 <__aeabi_ddiv+0x584>
 8001292:	e755      	b.n	8001140 <__aeabi_ddiv+0x430>
 8001294:	2200      	movs	r2, #0
 8001296:	2301      	movs	r3, #1
 8001298:	2400      	movs	r4, #0
 800129a:	4690      	mov	r8, r2
 800129c:	e598      	b.n	8000dd0 <__aeabi_ddiv+0xc0>
 800129e:	000a      	movs	r2, r1
 80012a0:	42bc      	cmp	r4, r7
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x596>
 80012a4:	e66e      	b.n	8000f84 <__aeabi_ddiv+0x274>
 80012a6:	454b      	cmp	r3, r9
 80012a8:	d000      	beq.n	80012ac <__aeabi_ddiv+0x59c>
 80012aa:	e66b      	b.n	8000f84 <__aeabi_ddiv+0x274>
 80012ac:	e66c      	b.n	8000f88 <__aeabi_ddiv+0x278>
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <__aeabi_ddiv+0x62c>)
 80012b0:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <__aeabi_ddiv+0x630>)
 80012b2:	4453      	add	r3, sl
 80012b4:	4592      	cmp	sl, r2
 80012b6:	da00      	bge.n	80012ba <__aeabi_ddiv+0x5aa>
 80012b8:	e718      	b.n	80010ec <__aeabi_ddiv+0x3dc>
 80012ba:	2101      	movs	r1, #1
 80012bc:	4249      	negs	r1, r1
 80012be:	1d0a      	adds	r2, r1, #4
 80012c0:	428a      	cmp	r2, r1
 80012c2:	4189      	sbcs	r1, r1
 80012c4:	4249      	negs	r1, r1
 80012c6:	448b      	add	fp, r1
 80012c8:	e666      	b.n	8000f98 <__aeabi_ddiv+0x288>
 80012ca:	210f      	movs	r1, #15
 80012cc:	4011      	ands	r1, r2
 80012ce:	2904      	cmp	r1, #4
 80012d0:	d100      	bne.n	80012d4 <__aeabi_ddiv+0x5c4>
 80012d2:	e661      	b.n	8000f98 <__aeabi_ddiv+0x288>
 80012d4:	0011      	movs	r1, r2
 80012d6:	e7f2      	b.n	80012be <__aeabi_ddiv+0x5ae>
 80012d8:	42bc      	cmp	r4, r7
 80012da:	d800      	bhi.n	80012de <__aeabi_ddiv+0x5ce>
 80012dc:	e60a      	b.n	8000ef4 <__aeabi_ddiv+0x1e4>
 80012de:	2302      	movs	r3, #2
 80012e0:	425b      	negs	r3, r3
 80012e2:	469c      	mov	ip, r3
 80012e4:	9900      	ldr	r1, [sp, #0]
 80012e6:	444f      	add	r7, r9
 80012e8:	454f      	cmp	r7, r9
 80012ea:	419b      	sbcs	r3, r3
 80012ec:	44e3      	add	fp, ip
 80012ee:	468c      	mov	ip, r1
 80012f0:	425b      	negs	r3, r3
 80012f2:	4463      	add	r3, ip
 80012f4:	18c0      	adds	r0, r0, r3
 80012f6:	e5ff      	b.n	8000ef8 <__aeabi_ddiv+0x1e8>
 80012f8:	4649      	mov	r1, r9
 80012fa:	9d00      	ldr	r5, [sp, #0]
 80012fc:	0048      	lsls	r0, r1, #1
 80012fe:	4548      	cmp	r0, r9
 8001300:	4189      	sbcs	r1, r1
 8001302:	46ac      	mov	ip, r5
 8001304:	4249      	negs	r1, r1
 8001306:	4461      	add	r1, ip
 8001308:	4681      	mov	r9, r0
 800130a:	3a02      	subs	r2, #2
 800130c:	1864      	adds	r4, r4, r1
 800130e:	e7c7      	b.n	80012a0 <__aeabi_ddiv+0x590>
 8001310:	2480      	movs	r4, #128	@ 0x80
 8001312:	465b      	mov	r3, fp
 8001314:	0324      	lsls	r4, r4, #12
 8001316:	431c      	orrs	r4, r3
 8001318:	0324      	lsls	r4, r4, #12
 800131a:	4690      	mov	r8, r2
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <__aeabi_ddiv+0x620>)
 800131e:	0b24      	lsrs	r4, r4, #12
 8001320:	e556      	b.n	8000dd0 <__aeabi_ddiv+0xc0>
 8001322:	4599      	cmp	r9, r3
 8001324:	d3e8      	bcc.n	80012f8 <__aeabi_ddiv+0x5e8>
 8001326:	000a      	movs	r2, r1
 8001328:	e7bd      	b.n	80012a6 <__aeabi_ddiv+0x596>
 800132a:	2300      	movs	r3, #0
 800132c:	e708      	b.n	8001140 <__aeabi_ddiv+0x430>
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000043e 	.word	0x0000043e
 8001338:	0000041e 	.word	0x0000041e
 800133c:	000003ff 	.word	0x000003ff
 8001340:	fffffc02 	.word	0xfffffc02

08001344 <__aeabi_dmul>:
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	4657      	mov	r7, sl
 8001348:	46de      	mov	lr, fp
 800134a:	464e      	mov	r6, r9
 800134c:	4645      	mov	r5, r8
 800134e:	b5e0      	push	{r5, r6, r7, lr}
 8001350:	001f      	movs	r7, r3
 8001352:	030b      	lsls	r3, r1, #12
 8001354:	0b1b      	lsrs	r3, r3, #12
 8001356:	0016      	movs	r6, r2
 8001358:	469a      	mov	sl, r3
 800135a:	0fca      	lsrs	r2, r1, #31
 800135c:	004b      	lsls	r3, r1, #1
 800135e:	0004      	movs	r4, r0
 8001360:	4693      	mov	fp, r2
 8001362:	b087      	sub	sp, #28
 8001364:	0d5b      	lsrs	r3, r3, #21
 8001366:	d100      	bne.n	800136a <__aeabi_dmul+0x26>
 8001368:	e0d5      	b.n	8001516 <__aeabi_dmul+0x1d2>
 800136a:	4abb      	ldr	r2, [pc, #748]	@ (8001658 <__aeabi_dmul+0x314>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d100      	bne.n	8001372 <__aeabi_dmul+0x2e>
 8001370:	e0f8      	b.n	8001564 <__aeabi_dmul+0x220>
 8001372:	4651      	mov	r1, sl
 8001374:	0f42      	lsrs	r2, r0, #29
 8001376:	00c9      	lsls	r1, r1, #3
 8001378:	430a      	orrs	r2, r1
 800137a:	2180      	movs	r1, #128	@ 0x80
 800137c:	0409      	lsls	r1, r1, #16
 800137e:	4311      	orrs	r1, r2
 8001380:	00c2      	lsls	r2, r0, #3
 8001382:	4691      	mov	r9, r2
 8001384:	4ab5      	ldr	r2, [pc, #724]	@ (800165c <__aeabi_dmul+0x318>)
 8001386:	468a      	mov	sl, r1
 8001388:	189d      	adds	r5, r3, r2
 800138a:	2300      	movs	r3, #0
 800138c:	4698      	mov	r8, r3
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	033c      	lsls	r4, r7, #12
 8001392:	007b      	lsls	r3, r7, #1
 8001394:	0ffa      	lsrs	r2, r7, #31
 8001396:	0030      	movs	r0, r6
 8001398:	0b24      	lsrs	r4, r4, #12
 800139a:	0d5b      	lsrs	r3, r3, #21
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	d100      	bne.n	80013a2 <__aeabi_dmul+0x5e>
 80013a0:	e096      	b.n	80014d0 <__aeabi_dmul+0x18c>
 80013a2:	4aad      	ldr	r2, [pc, #692]	@ (8001658 <__aeabi_dmul+0x314>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d031      	beq.n	800140c <__aeabi_dmul+0xc8>
 80013a8:	0f72      	lsrs	r2, r6, #29
 80013aa:	00e4      	lsls	r4, r4, #3
 80013ac:	4322      	orrs	r2, r4
 80013ae:	2480      	movs	r4, #128	@ 0x80
 80013b0:	0424      	lsls	r4, r4, #16
 80013b2:	4314      	orrs	r4, r2
 80013b4:	4aa9      	ldr	r2, [pc, #676]	@ (800165c <__aeabi_dmul+0x318>)
 80013b6:	00f0      	lsls	r0, r6, #3
 80013b8:	4694      	mov	ip, r2
 80013ba:	4463      	add	r3, ip
 80013bc:	195b      	adds	r3, r3, r5
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	9201      	str	r2, [sp, #4]
 80013c2:	4642      	mov	r2, r8
 80013c4:	2600      	movs	r6, #0
 80013c6:	2a0a      	cmp	r2, #10
 80013c8:	dc42      	bgt.n	8001450 <__aeabi_dmul+0x10c>
 80013ca:	465a      	mov	r2, fp
 80013cc:	9900      	ldr	r1, [sp, #0]
 80013ce:	404a      	eors	r2, r1
 80013d0:	4693      	mov	fp, r2
 80013d2:	4642      	mov	r2, r8
 80013d4:	2a02      	cmp	r2, #2
 80013d6:	dc32      	bgt.n	800143e <__aeabi_dmul+0xfa>
 80013d8:	3a01      	subs	r2, #1
 80013da:	2a01      	cmp	r2, #1
 80013dc:	d900      	bls.n	80013e0 <__aeabi_dmul+0x9c>
 80013de:	e149      	b.n	8001674 <__aeabi_dmul+0x330>
 80013e0:	2e02      	cmp	r6, #2
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dmul+0xa2>
 80013e4:	e0ca      	b.n	800157c <__aeabi_dmul+0x238>
 80013e6:	2e01      	cmp	r6, #1
 80013e8:	d13d      	bne.n	8001466 <__aeabi_dmul+0x122>
 80013ea:	2300      	movs	r3, #0
 80013ec:	2400      	movs	r4, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	0010      	movs	r0, r2
 80013f2:	465a      	mov	r2, fp
 80013f4:	051b      	lsls	r3, r3, #20
 80013f6:	4323      	orrs	r3, r4
 80013f8:	07d2      	lsls	r2, r2, #31
 80013fa:	4313      	orrs	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	b007      	add	sp, #28
 8001400:	bcf0      	pop	{r4, r5, r6, r7}
 8001402:	46bb      	mov	fp, r7
 8001404:	46b2      	mov	sl, r6
 8001406:	46a9      	mov	r9, r5
 8001408:	46a0      	mov	r8, r4
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140c:	4b92      	ldr	r3, [pc, #584]	@ (8001658 <__aeabi_dmul+0x314>)
 800140e:	4326      	orrs	r6, r4
 8001410:	18eb      	adds	r3, r5, r3
 8001412:	2e00      	cmp	r6, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_dmul+0xd4>
 8001416:	e0bb      	b.n	8001590 <__aeabi_dmul+0x24c>
 8001418:	2203      	movs	r2, #3
 800141a:	4641      	mov	r1, r8
 800141c:	4311      	orrs	r1, r2
 800141e:	465a      	mov	r2, fp
 8001420:	4688      	mov	r8, r1
 8001422:	9900      	ldr	r1, [sp, #0]
 8001424:	404a      	eors	r2, r1
 8001426:	2180      	movs	r1, #128	@ 0x80
 8001428:	0109      	lsls	r1, r1, #4
 800142a:	468c      	mov	ip, r1
 800142c:	0029      	movs	r1, r5
 800142e:	4461      	add	r1, ip
 8001430:	9101      	str	r1, [sp, #4]
 8001432:	4641      	mov	r1, r8
 8001434:	290a      	cmp	r1, #10
 8001436:	dd00      	ble.n	800143a <__aeabi_dmul+0xf6>
 8001438:	e233      	b.n	80018a2 <__aeabi_dmul+0x55e>
 800143a:	4693      	mov	fp, r2
 800143c:	2603      	movs	r6, #3
 800143e:	4642      	mov	r2, r8
 8001440:	2701      	movs	r7, #1
 8001442:	4097      	lsls	r7, r2
 8001444:	21a6      	movs	r1, #166	@ 0xa6
 8001446:	003a      	movs	r2, r7
 8001448:	00c9      	lsls	r1, r1, #3
 800144a:	400a      	ands	r2, r1
 800144c:	420f      	tst	r7, r1
 800144e:	d031      	beq.n	80014b4 <__aeabi_dmul+0x170>
 8001450:	9e02      	ldr	r6, [sp, #8]
 8001452:	2e02      	cmp	r6, #2
 8001454:	d100      	bne.n	8001458 <__aeabi_dmul+0x114>
 8001456:	e235      	b.n	80018c4 <__aeabi_dmul+0x580>
 8001458:	2e03      	cmp	r6, #3
 800145a:	d100      	bne.n	800145e <__aeabi_dmul+0x11a>
 800145c:	e1d2      	b.n	8001804 <__aeabi_dmul+0x4c0>
 800145e:	4654      	mov	r4, sl
 8001460:	4648      	mov	r0, r9
 8001462:	2e01      	cmp	r6, #1
 8001464:	d0c1      	beq.n	80013ea <__aeabi_dmul+0xa6>
 8001466:	9a01      	ldr	r2, [sp, #4]
 8001468:	4b7d      	ldr	r3, [pc, #500]	@ (8001660 <__aeabi_dmul+0x31c>)
 800146a:	4694      	mov	ip, r2
 800146c:	4463      	add	r3, ip
 800146e:	2b00      	cmp	r3, #0
 8001470:	dc00      	bgt.n	8001474 <__aeabi_dmul+0x130>
 8001472:	e0c0      	b.n	80015f6 <__aeabi_dmul+0x2b2>
 8001474:	0742      	lsls	r2, r0, #29
 8001476:	d009      	beq.n	800148c <__aeabi_dmul+0x148>
 8001478:	220f      	movs	r2, #15
 800147a:	4002      	ands	r2, r0
 800147c:	2a04      	cmp	r2, #4
 800147e:	d005      	beq.n	800148c <__aeabi_dmul+0x148>
 8001480:	1d02      	adds	r2, r0, #4
 8001482:	4282      	cmp	r2, r0
 8001484:	4180      	sbcs	r0, r0
 8001486:	4240      	negs	r0, r0
 8001488:	1824      	adds	r4, r4, r0
 800148a:	0010      	movs	r0, r2
 800148c:	01e2      	lsls	r2, r4, #7
 800148e:	d506      	bpl.n	800149e <__aeabi_dmul+0x15a>
 8001490:	4b74      	ldr	r3, [pc, #464]	@ (8001664 <__aeabi_dmul+0x320>)
 8001492:	9a01      	ldr	r2, [sp, #4]
 8001494:	401c      	ands	r4, r3
 8001496:	2380      	movs	r3, #128	@ 0x80
 8001498:	4694      	mov	ip, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4463      	add	r3, ip
 800149e:	4a72      	ldr	r2, [pc, #456]	@ (8001668 <__aeabi_dmul+0x324>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	dc6b      	bgt.n	800157c <__aeabi_dmul+0x238>
 80014a4:	0762      	lsls	r2, r4, #29
 80014a6:	08c0      	lsrs	r0, r0, #3
 80014a8:	0264      	lsls	r4, r4, #9
 80014aa:	055b      	lsls	r3, r3, #21
 80014ac:	4302      	orrs	r2, r0
 80014ae:	0b24      	lsrs	r4, r4, #12
 80014b0:	0d5b      	lsrs	r3, r3, #21
 80014b2:	e79d      	b.n	80013f0 <__aeabi_dmul+0xac>
 80014b4:	2190      	movs	r1, #144	@ 0x90
 80014b6:	0089      	lsls	r1, r1, #2
 80014b8:	420f      	tst	r7, r1
 80014ba:	d163      	bne.n	8001584 <__aeabi_dmul+0x240>
 80014bc:	2288      	movs	r2, #136	@ 0x88
 80014be:	423a      	tst	r2, r7
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dmul+0x180>
 80014c2:	e0d7      	b.n	8001674 <__aeabi_dmul+0x330>
 80014c4:	9b00      	ldr	r3, [sp, #0]
 80014c6:	46a2      	mov	sl, r4
 80014c8:	469b      	mov	fp, r3
 80014ca:	4681      	mov	r9, r0
 80014cc:	9602      	str	r6, [sp, #8]
 80014ce:	e7bf      	b.n	8001450 <__aeabi_dmul+0x10c>
 80014d0:	0023      	movs	r3, r4
 80014d2:	4333      	orrs	r3, r6
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dmul+0x194>
 80014d6:	e07f      	b.n	80015d8 <__aeabi_dmul+0x294>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x19a>
 80014dc:	e1ad      	b.n	800183a <__aeabi_dmul+0x4f6>
 80014de:	0020      	movs	r0, r4
 80014e0:	f000 fe8e 	bl	8002200 <__clzsi2>
 80014e4:	0002      	movs	r2, r0
 80014e6:	0003      	movs	r3, r0
 80014e8:	3a0b      	subs	r2, #11
 80014ea:	201d      	movs	r0, #29
 80014ec:	0019      	movs	r1, r3
 80014ee:	1a82      	subs	r2, r0, r2
 80014f0:	0030      	movs	r0, r6
 80014f2:	3908      	subs	r1, #8
 80014f4:	40d0      	lsrs	r0, r2
 80014f6:	408c      	lsls	r4, r1
 80014f8:	4304      	orrs	r4, r0
 80014fa:	0030      	movs	r0, r6
 80014fc:	4088      	lsls	r0, r1
 80014fe:	4a5b      	ldr	r2, [pc, #364]	@ (800166c <__aeabi_dmul+0x328>)
 8001500:	1aeb      	subs	r3, r5, r3
 8001502:	4694      	mov	ip, r2
 8001504:	4463      	add	r3, ip
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	4642      	mov	r2, r8
 800150c:	2600      	movs	r6, #0
 800150e:	2a0a      	cmp	r2, #10
 8001510:	dc00      	bgt.n	8001514 <__aeabi_dmul+0x1d0>
 8001512:	e75a      	b.n	80013ca <__aeabi_dmul+0x86>
 8001514:	e79c      	b.n	8001450 <__aeabi_dmul+0x10c>
 8001516:	4653      	mov	r3, sl
 8001518:	4303      	orrs	r3, r0
 800151a:	4699      	mov	r9, r3
 800151c:	d054      	beq.n	80015c8 <__aeabi_dmul+0x284>
 800151e:	4653      	mov	r3, sl
 8001520:	2b00      	cmp	r3, #0
 8001522:	d100      	bne.n	8001526 <__aeabi_dmul+0x1e2>
 8001524:	e177      	b.n	8001816 <__aeabi_dmul+0x4d2>
 8001526:	4650      	mov	r0, sl
 8001528:	f000 fe6a 	bl	8002200 <__clzsi2>
 800152c:	230b      	movs	r3, #11
 800152e:	425b      	negs	r3, r3
 8001530:	469c      	mov	ip, r3
 8001532:	0002      	movs	r2, r0
 8001534:	4484      	add	ip, r0
 8001536:	0011      	movs	r1, r2
 8001538:	4650      	mov	r0, sl
 800153a:	3908      	subs	r1, #8
 800153c:	4088      	lsls	r0, r1
 800153e:	231d      	movs	r3, #29
 8001540:	4680      	mov	r8, r0
 8001542:	4660      	mov	r0, ip
 8001544:	1a1b      	subs	r3, r3, r0
 8001546:	0020      	movs	r0, r4
 8001548:	40d8      	lsrs	r0, r3
 800154a:	0003      	movs	r3, r0
 800154c:	4640      	mov	r0, r8
 800154e:	4303      	orrs	r3, r0
 8001550:	469a      	mov	sl, r3
 8001552:	0023      	movs	r3, r4
 8001554:	408b      	lsls	r3, r1
 8001556:	4699      	mov	r9, r3
 8001558:	2300      	movs	r3, #0
 800155a:	4d44      	ldr	r5, [pc, #272]	@ (800166c <__aeabi_dmul+0x328>)
 800155c:	4698      	mov	r8, r3
 800155e:	1aad      	subs	r5, r5, r2
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	e715      	b.n	8001390 <__aeabi_dmul+0x4c>
 8001564:	4652      	mov	r2, sl
 8001566:	4302      	orrs	r2, r0
 8001568:	4691      	mov	r9, r2
 800156a:	d126      	bne.n	80015ba <__aeabi_dmul+0x276>
 800156c:	2200      	movs	r2, #0
 800156e:	001d      	movs	r5, r3
 8001570:	2302      	movs	r3, #2
 8001572:	4692      	mov	sl, r2
 8001574:	3208      	adds	r2, #8
 8001576:	4690      	mov	r8, r2
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	e709      	b.n	8001390 <__aeabi_dmul+0x4c>
 800157c:	2400      	movs	r4, #0
 800157e:	2200      	movs	r2, #0
 8001580:	4b35      	ldr	r3, [pc, #212]	@ (8001658 <__aeabi_dmul+0x314>)
 8001582:	e735      	b.n	80013f0 <__aeabi_dmul+0xac>
 8001584:	2300      	movs	r3, #0
 8001586:	2480      	movs	r4, #128	@ 0x80
 8001588:	469b      	mov	fp, r3
 800158a:	0324      	lsls	r4, r4, #12
 800158c:	4b32      	ldr	r3, [pc, #200]	@ (8001658 <__aeabi_dmul+0x314>)
 800158e:	e72f      	b.n	80013f0 <__aeabi_dmul+0xac>
 8001590:	2202      	movs	r2, #2
 8001592:	4641      	mov	r1, r8
 8001594:	4311      	orrs	r1, r2
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	4694      	mov	ip, r2
 800159c:	002a      	movs	r2, r5
 800159e:	4462      	add	r2, ip
 80015a0:	4688      	mov	r8, r1
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	290a      	cmp	r1, #10
 80015a6:	dd00      	ble.n	80015aa <__aeabi_dmul+0x266>
 80015a8:	e752      	b.n	8001450 <__aeabi_dmul+0x10c>
 80015aa:	465a      	mov	r2, fp
 80015ac:	2000      	movs	r0, #0
 80015ae:	9900      	ldr	r1, [sp, #0]
 80015b0:	0004      	movs	r4, r0
 80015b2:	404a      	eors	r2, r1
 80015b4:	4693      	mov	fp, r2
 80015b6:	2602      	movs	r6, #2
 80015b8:	e70b      	b.n	80013d2 <__aeabi_dmul+0x8e>
 80015ba:	220c      	movs	r2, #12
 80015bc:	001d      	movs	r5, r3
 80015be:	2303      	movs	r3, #3
 80015c0:	4681      	mov	r9, r0
 80015c2:	4690      	mov	r8, r2
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	e6e3      	b.n	8001390 <__aeabi_dmul+0x4c>
 80015c8:	2300      	movs	r3, #0
 80015ca:	469a      	mov	sl, r3
 80015cc:	3304      	adds	r3, #4
 80015ce:	4698      	mov	r8, r3
 80015d0:	3b03      	subs	r3, #3
 80015d2:	2500      	movs	r5, #0
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	e6db      	b.n	8001390 <__aeabi_dmul+0x4c>
 80015d8:	4642      	mov	r2, r8
 80015da:	3301      	adds	r3, #1
 80015dc:	431a      	orrs	r2, r3
 80015de:	002b      	movs	r3, r5
 80015e0:	4690      	mov	r8, r2
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	9201      	str	r2, [sp, #4]
 80015e6:	4642      	mov	r2, r8
 80015e8:	2400      	movs	r4, #0
 80015ea:	2000      	movs	r0, #0
 80015ec:	2601      	movs	r6, #1
 80015ee:	2a0a      	cmp	r2, #10
 80015f0:	dc00      	bgt.n	80015f4 <__aeabi_dmul+0x2b0>
 80015f2:	e6ea      	b.n	80013ca <__aeabi_dmul+0x86>
 80015f4:	e72c      	b.n	8001450 <__aeabi_dmul+0x10c>
 80015f6:	2201      	movs	r2, #1
 80015f8:	1ad2      	subs	r2, r2, r3
 80015fa:	2a38      	cmp	r2, #56	@ 0x38
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dmul+0x2bc>
 80015fe:	e6f4      	b.n	80013ea <__aeabi_dmul+0xa6>
 8001600:	2a1f      	cmp	r2, #31
 8001602:	dc00      	bgt.n	8001606 <__aeabi_dmul+0x2c2>
 8001604:	e12a      	b.n	800185c <__aeabi_dmul+0x518>
 8001606:	211f      	movs	r1, #31
 8001608:	4249      	negs	r1, r1
 800160a:	1acb      	subs	r3, r1, r3
 800160c:	0021      	movs	r1, r4
 800160e:	40d9      	lsrs	r1, r3
 8001610:	000b      	movs	r3, r1
 8001612:	2a20      	cmp	r2, #32
 8001614:	d005      	beq.n	8001622 <__aeabi_dmul+0x2de>
 8001616:	4a16      	ldr	r2, [pc, #88]	@ (8001670 <__aeabi_dmul+0x32c>)
 8001618:	9d01      	ldr	r5, [sp, #4]
 800161a:	4694      	mov	ip, r2
 800161c:	4465      	add	r5, ip
 800161e:	40ac      	lsls	r4, r5
 8001620:	4320      	orrs	r0, r4
 8001622:	1e42      	subs	r2, r0, #1
 8001624:	4190      	sbcs	r0, r2
 8001626:	4318      	orrs	r0, r3
 8001628:	2307      	movs	r3, #7
 800162a:	0019      	movs	r1, r3
 800162c:	2400      	movs	r4, #0
 800162e:	4001      	ands	r1, r0
 8001630:	4203      	tst	r3, r0
 8001632:	d00c      	beq.n	800164e <__aeabi_dmul+0x30a>
 8001634:	230f      	movs	r3, #15
 8001636:	4003      	ands	r3, r0
 8001638:	2b04      	cmp	r3, #4
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2fa>
 800163c:	e140      	b.n	80018c0 <__aeabi_dmul+0x57c>
 800163e:	1d03      	adds	r3, r0, #4
 8001640:	4283      	cmp	r3, r0
 8001642:	41a4      	sbcs	r4, r4
 8001644:	0018      	movs	r0, r3
 8001646:	4264      	negs	r4, r4
 8001648:	0761      	lsls	r1, r4, #29
 800164a:	0264      	lsls	r4, r4, #9
 800164c:	0b24      	lsrs	r4, r4, #12
 800164e:	08c2      	lsrs	r2, r0, #3
 8001650:	2300      	movs	r3, #0
 8001652:	430a      	orrs	r2, r1
 8001654:	e6cc      	b.n	80013f0 <__aeabi_dmul+0xac>
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	000007ff 	.word	0x000007ff
 800165c:	fffffc01 	.word	0xfffffc01
 8001660:	000003ff 	.word	0x000003ff
 8001664:	feffffff 	.word	0xfeffffff
 8001668:	000007fe 	.word	0x000007fe
 800166c:	fffffc0d 	.word	0xfffffc0d
 8001670:	0000043e 	.word	0x0000043e
 8001674:	4649      	mov	r1, r9
 8001676:	464a      	mov	r2, r9
 8001678:	0409      	lsls	r1, r1, #16
 800167a:	0c09      	lsrs	r1, r1, #16
 800167c:	000d      	movs	r5, r1
 800167e:	0c16      	lsrs	r6, r2, #16
 8001680:	0c02      	lsrs	r2, r0, #16
 8001682:	0400      	lsls	r0, r0, #16
 8001684:	0c00      	lsrs	r0, r0, #16
 8001686:	4345      	muls	r5, r0
 8001688:	46ac      	mov	ip, r5
 800168a:	0005      	movs	r5, r0
 800168c:	4375      	muls	r5, r6
 800168e:	46a8      	mov	r8, r5
 8001690:	0015      	movs	r5, r2
 8001692:	000f      	movs	r7, r1
 8001694:	4375      	muls	r5, r6
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	9502      	str	r5, [sp, #8]
 800169a:	002a      	movs	r2, r5
 800169c:	9d00      	ldr	r5, [sp, #0]
 800169e:	436f      	muls	r7, r5
 80016a0:	4665      	mov	r5, ip
 80016a2:	0c2d      	lsrs	r5, r5, #16
 80016a4:	46a9      	mov	r9, r5
 80016a6:	4447      	add	r7, r8
 80016a8:	444f      	add	r7, r9
 80016aa:	45b8      	cmp	r8, r7
 80016ac:	d905      	bls.n	80016ba <__aeabi_dmul+0x376>
 80016ae:	0015      	movs	r5, r2
 80016b0:	2280      	movs	r2, #128	@ 0x80
 80016b2:	0252      	lsls	r2, r2, #9
 80016b4:	4690      	mov	r8, r2
 80016b6:	4445      	add	r5, r8
 80016b8:	9502      	str	r5, [sp, #8]
 80016ba:	0c3d      	lsrs	r5, r7, #16
 80016bc:	9503      	str	r5, [sp, #12]
 80016be:	4665      	mov	r5, ip
 80016c0:	042d      	lsls	r5, r5, #16
 80016c2:	043f      	lsls	r7, r7, #16
 80016c4:	0c2d      	lsrs	r5, r5, #16
 80016c6:	46ac      	mov	ip, r5
 80016c8:	003d      	movs	r5, r7
 80016ca:	4465      	add	r5, ip
 80016cc:	9504      	str	r5, [sp, #16]
 80016ce:	0c25      	lsrs	r5, r4, #16
 80016d0:	0424      	lsls	r4, r4, #16
 80016d2:	0c24      	lsrs	r4, r4, #16
 80016d4:	46ac      	mov	ip, r5
 80016d6:	0025      	movs	r5, r4
 80016d8:	4375      	muls	r5, r6
 80016da:	46a8      	mov	r8, r5
 80016dc:	4665      	mov	r5, ip
 80016de:	000f      	movs	r7, r1
 80016e0:	4369      	muls	r1, r5
 80016e2:	4441      	add	r1, r8
 80016e4:	4689      	mov	r9, r1
 80016e6:	4367      	muls	r7, r4
 80016e8:	0c39      	lsrs	r1, r7, #16
 80016ea:	4449      	add	r1, r9
 80016ec:	436e      	muls	r6, r5
 80016ee:	4588      	cmp	r8, r1
 80016f0:	d903      	bls.n	80016fa <__aeabi_dmul+0x3b6>
 80016f2:	2280      	movs	r2, #128	@ 0x80
 80016f4:	0252      	lsls	r2, r2, #9
 80016f6:	4690      	mov	r8, r2
 80016f8:	4446      	add	r6, r8
 80016fa:	0c0d      	lsrs	r5, r1, #16
 80016fc:	46a8      	mov	r8, r5
 80016fe:	0035      	movs	r5, r6
 8001700:	4445      	add	r5, r8
 8001702:	9505      	str	r5, [sp, #20]
 8001704:	9d03      	ldr	r5, [sp, #12]
 8001706:	043f      	lsls	r7, r7, #16
 8001708:	46a8      	mov	r8, r5
 800170a:	0c3f      	lsrs	r7, r7, #16
 800170c:	0409      	lsls	r1, r1, #16
 800170e:	19c9      	adds	r1, r1, r7
 8001710:	4488      	add	r8, r1
 8001712:	4645      	mov	r5, r8
 8001714:	9503      	str	r5, [sp, #12]
 8001716:	4655      	mov	r5, sl
 8001718:	042e      	lsls	r6, r5, #16
 800171a:	0c36      	lsrs	r6, r6, #16
 800171c:	0c2f      	lsrs	r7, r5, #16
 800171e:	0035      	movs	r5, r6
 8001720:	4345      	muls	r5, r0
 8001722:	4378      	muls	r0, r7
 8001724:	4681      	mov	r9, r0
 8001726:	0038      	movs	r0, r7
 8001728:	46a8      	mov	r8, r5
 800172a:	0c2d      	lsrs	r5, r5, #16
 800172c:	46aa      	mov	sl, r5
 800172e:	9a00      	ldr	r2, [sp, #0]
 8001730:	4350      	muls	r0, r2
 8001732:	4372      	muls	r2, r6
 8001734:	444a      	add	r2, r9
 8001736:	4452      	add	r2, sl
 8001738:	4591      	cmp	r9, r2
 800173a:	d903      	bls.n	8001744 <__aeabi_dmul+0x400>
 800173c:	2580      	movs	r5, #128	@ 0x80
 800173e:	026d      	lsls	r5, r5, #9
 8001740:	46a9      	mov	r9, r5
 8001742:	4448      	add	r0, r9
 8001744:	0c15      	lsrs	r5, r2, #16
 8001746:	46a9      	mov	r9, r5
 8001748:	4645      	mov	r5, r8
 800174a:	042d      	lsls	r5, r5, #16
 800174c:	0c2d      	lsrs	r5, r5, #16
 800174e:	46a8      	mov	r8, r5
 8001750:	4665      	mov	r5, ip
 8001752:	437d      	muls	r5, r7
 8001754:	0412      	lsls	r2, r2, #16
 8001756:	4448      	add	r0, r9
 8001758:	4490      	add	r8, r2
 800175a:	46a9      	mov	r9, r5
 800175c:	0032      	movs	r2, r6
 800175e:	4665      	mov	r5, ip
 8001760:	4362      	muls	r2, r4
 8001762:	436e      	muls	r6, r5
 8001764:	437c      	muls	r4, r7
 8001766:	0c17      	lsrs	r7, r2, #16
 8001768:	1936      	adds	r6, r6, r4
 800176a:	19bf      	adds	r7, r7, r6
 800176c:	42bc      	cmp	r4, r7
 800176e:	d903      	bls.n	8001778 <__aeabi_dmul+0x434>
 8001770:	2480      	movs	r4, #128	@ 0x80
 8001772:	0264      	lsls	r4, r4, #9
 8001774:	46a4      	mov	ip, r4
 8001776:	44e1      	add	r9, ip
 8001778:	9c02      	ldr	r4, [sp, #8]
 800177a:	9e03      	ldr	r6, [sp, #12]
 800177c:	46a4      	mov	ip, r4
 800177e:	9d05      	ldr	r5, [sp, #20]
 8001780:	4466      	add	r6, ip
 8001782:	428e      	cmp	r6, r1
 8001784:	4189      	sbcs	r1, r1
 8001786:	46ac      	mov	ip, r5
 8001788:	0412      	lsls	r2, r2, #16
 800178a:	043c      	lsls	r4, r7, #16
 800178c:	0c12      	lsrs	r2, r2, #16
 800178e:	18a2      	adds	r2, r4, r2
 8001790:	4462      	add	r2, ip
 8001792:	4249      	negs	r1, r1
 8001794:	1854      	adds	r4, r2, r1
 8001796:	4446      	add	r6, r8
 8001798:	46a4      	mov	ip, r4
 800179a:	4546      	cmp	r6, r8
 800179c:	41a4      	sbcs	r4, r4
 800179e:	4682      	mov	sl, r0
 80017a0:	4264      	negs	r4, r4
 80017a2:	46a0      	mov	r8, r4
 80017a4:	42aa      	cmp	r2, r5
 80017a6:	4192      	sbcs	r2, r2
 80017a8:	458c      	cmp	ip, r1
 80017aa:	4189      	sbcs	r1, r1
 80017ac:	44e2      	add	sl, ip
 80017ae:	44d0      	add	r8, sl
 80017b0:	4249      	negs	r1, r1
 80017b2:	4252      	negs	r2, r2
 80017b4:	430a      	orrs	r2, r1
 80017b6:	45a0      	cmp	r8, r4
 80017b8:	41a4      	sbcs	r4, r4
 80017ba:	4582      	cmp	sl, r0
 80017bc:	4189      	sbcs	r1, r1
 80017be:	4264      	negs	r4, r4
 80017c0:	4249      	negs	r1, r1
 80017c2:	430c      	orrs	r4, r1
 80017c4:	4641      	mov	r1, r8
 80017c6:	0c3f      	lsrs	r7, r7, #16
 80017c8:	19d2      	adds	r2, r2, r7
 80017ca:	1912      	adds	r2, r2, r4
 80017cc:	0dcc      	lsrs	r4, r1, #23
 80017ce:	9904      	ldr	r1, [sp, #16]
 80017d0:	0270      	lsls	r0, r6, #9
 80017d2:	4308      	orrs	r0, r1
 80017d4:	1e41      	subs	r1, r0, #1
 80017d6:	4188      	sbcs	r0, r1
 80017d8:	4641      	mov	r1, r8
 80017da:	444a      	add	r2, r9
 80017dc:	0df6      	lsrs	r6, r6, #23
 80017de:	0252      	lsls	r2, r2, #9
 80017e0:	4330      	orrs	r0, r6
 80017e2:	0249      	lsls	r1, r1, #9
 80017e4:	4314      	orrs	r4, r2
 80017e6:	4308      	orrs	r0, r1
 80017e8:	01d2      	lsls	r2, r2, #7
 80017ea:	d535      	bpl.n	8001858 <__aeabi_dmul+0x514>
 80017ec:	2201      	movs	r2, #1
 80017ee:	0843      	lsrs	r3, r0, #1
 80017f0:	4002      	ands	r2, r0
 80017f2:	4313      	orrs	r3, r2
 80017f4:	07e0      	lsls	r0, r4, #31
 80017f6:	4318      	orrs	r0, r3
 80017f8:	0864      	lsrs	r4, r4, #1
 80017fa:	e634      	b.n	8001466 <__aeabi_dmul+0x122>
 80017fc:	9b00      	ldr	r3, [sp, #0]
 80017fe:	46a2      	mov	sl, r4
 8001800:	469b      	mov	fp, r3
 8001802:	4681      	mov	r9, r0
 8001804:	2480      	movs	r4, #128	@ 0x80
 8001806:	4653      	mov	r3, sl
 8001808:	0324      	lsls	r4, r4, #12
 800180a:	431c      	orrs	r4, r3
 800180c:	0324      	lsls	r4, r4, #12
 800180e:	464a      	mov	r2, r9
 8001810:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <__aeabi_dmul+0x588>)
 8001812:	0b24      	lsrs	r4, r4, #12
 8001814:	e5ec      	b.n	80013f0 <__aeabi_dmul+0xac>
 8001816:	f000 fcf3 	bl	8002200 <__clzsi2>
 800181a:	2315      	movs	r3, #21
 800181c:	469c      	mov	ip, r3
 800181e:	4484      	add	ip, r0
 8001820:	0002      	movs	r2, r0
 8001822:	4663      	mov	r3, ip
 8001824:	3220      	adds	r2, #32
 8001826:	2b1c      	cmp	r3, #28
 8001828:	dc00      	bgt.n	800182c <__aeabi_dmul+0x4e8>
 800182a:	e684      	b.n	8001536 <__aeabi_dmul+0x1f2>
 800182c:	2300      	movs	r3, #0
 800182e:	4699      	mov	r9, r3
 8001830:	0023      	movs	r3, r4
 8001832:	3808      	subs	r0, #8
 8001834:	4083      	lsls	r3, r0
 8001836:	469a      	mov	sl, r3
 8001838:	e68e      	b.n	8001558 <__aeabi_dmul+0x214>
 800183a:	f000 fce1 	bl	8002200 <__clzsi2>
 800183e:	0002      	movs	r2, r0
 8001840:	0003      	movs	r3, r0
 8001842:	3215      	adds	r2, #21
 8001844:	3320      	adds	r3, #32
 8001846:	2a1c      	cmp	r2, #28
 8001848:	dc00      	bgt.n	800184c <__aeabi_dmul+0x508>
 800184a:	e64e      	b.n	80014ea <__aeabi_dmul+0x1a6>
 800184c:	0002      	movs	r2, r0
 800184e:	0034      	movs	r4, r6
 8001850:	3a08      	subs	r2, #8
 8001852:	2000      	movs	r0, #0
 8001854:	4094      	lsls	r4, r2
 8001856:	e652      	b.n	80014fe <__aeabi_dmul+0x1ba>
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	e604      	b.n	8001466 <__aeabi_dmul+0x122>
 800185c:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <__aeabi_dmul+0x58c>)
 800185e:	0021      	movs	r1, r4
 8001860:	469c      	mov	ip, r3
 8001862:	0003      	movs	r3, r0
 8001864:	9d01      	ldr	r5, [sp, #4]
 8001866:	40d3      	lsrs	r3, r2
 8001868:	4465      	add	r5, ip
 800186a:	40a9      	lsls	r1, r5
 800186c:	4319      	orrs	r1, r3
 800186e:	0003      	movs	r3, r0
 8001870:	40ab      	lsls	r3, r5
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	4183      	sbcs	r3, r0
 8001876:	4319      	orrs	r1, r3
 8001878:	0008      	movs	r0, r1
 800187a:	40d4      	lsrs	r4, r2
 800187c:	074b      	lsls	r3, r1, #29
 800187e:	d009      	beq.n	8001894 <__aeabi_dmul+0x550>
 8001880:	230f      	movs	r3, #15
 8001882:	400b      	ands	r3, r1
 8001884:	2b04      	cmp	r3, #4
 8001886:	d005      	beq.n	8001894 <__aeabi_dmul+0x550>
 8001888:	1d0b      	adds	r3, r1, #4
 800188a:	428b      	cmp	r3, r1
 800188c:	4180      	sbcs	r0, r0
 800188e:	4240      	negs	r0, r0
 8001890:	1824      	adds	r4, r4, r0
 8001892:	0018      	movs	r0, r3
 8001894:	0223      	lsls	r3, r4, #8
 8001896:	d400      	bmi.n	800189a <__aeabi_dmul+0x556>
 8001898:	e6d6      	b.n	8001648 <__aeabi_dmul+0x304>
 800189a:	2301      	movs	r3, #1
 800189c:	2400      	movs	r4, #0
 800189e:	2200      	movs	r2, #0
 80018a0:	e5a6      	b.n	80013f0 <__aeabi_dmul+0xac>
 80018a2:	290f      	cmp	r1, #15
 80018a4:	d1aa      	bne.n	80017fc <__aeabi_dmul+0x4b8>
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	4652      	mov	r2, sl
 80018aa:	031b      	lsls	r3, r3, #12
 80018ac:	421a      	tst	r2, r3
 80018ae:	d0a9      	beq.n	8001804 <__aeabi_dmul+0x4c0>
 80018b0:	421c      	tst	r4, r3
 80018b2:	d1a7      	bne.n	8001804 <__aeabi_dmul+0x4c0>
 80018b4:	431c      	orrs	r4, r3
 80018b6:	9b00      	ldr	r3, [sp, #0]
 80018b8:	0002      	movs	r2, r0
 80018ba:	469b      	mov	fp, r3
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <__aeabi_dmul+0x588>)
 80018be:	e597      	b.n	80013f0 <__aeabi_dmul+0xac>
 80018c0:	2400      	movs	r4, #0
 80018c2:	e6c1      	b.n	8001648 <__aeabi_dmul+0x304>
 80018c4:	2400      	movs	r4, #0
 80018c6:	4b01      	ldr	r3, [pc, #4]	@ (80018cc <__aeabi_dmul+0x588>)
 80018c8:	0022      	movs	r2, r4
 80018ca:	e591      	b.n	80013f0 <__aeabi_dmul+0xac>
 80018cc:	000007ff 	.word	0x000007ff
 80018d0:	0000041e 	.word	0x0000041e

080018d4 <__aeabi_dsub>:
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	464e      	mov	r6, r9
 80018d8:	4645      	mov	r5, r8
 80018da:	46de      	mov	lr, fp
 80018dc:	4657      	mov	r7, sl
 80018de:	b5e0      	push	{r5, r6, r7, lr}
 80018e0:	b085      	sub	sp, #20
 80018e2:	9000      	str	r0, [sp, #0]
 80018e4:	9101      	str	r1, [sp, #4]
 80018e6:	030c      	lsls	r4, r1, #12
 80018e8:	004f      	lsls	r7, r1, #1
 80018ea:	0fce      	lsrs	r6, r1, #31
 80018ec:	0a61      	lsrs	r1, r4, #9
 80018ee:	9c00      	ldr	r4, [sp, #0]
 80018f0:	46b0      	mov	r8, r6
 80018f2:	0f64      	lsrs	r4, r4, #29
 80018f4:	430c      	orrs	r4, r1
 80018f6:	9900      	ldr	r1, [sp, #0]
 80018f8:	0d7f      	lsrs	r7, r7, #21
 80018fa:	00c8      	lsls	r0, r1, #3
 80018fc:	0011      	movs	r1, r2
 80018fe:	001a      	movs	r2, r3
 8001900:	031b      	lsls	r3, r3, #12
 8001902:	469c      	mov	ip, r3
 8001904:	9100      	str	r1, [sp, #0]
 8001906:	9201      	str	r2, [sp, #4]
 8001908:	0051      	lsls	r1, r2, #1
 800190a:	0d4b      	lsrs	r3, r1, #21
 800190c:	4699      	mov	r9, r3
 800190e:	9b01      	ldr	r3, [sp, #4]
 8001910:	9d00      	ldr	r5, [sp, #0]
 8001912:	0fd9      	lsrs	r1, r3, #31
 8001914:	4663      	mov	r3, ip
 8001916:	0f6a      	lsrs	r2, r5, #29
 8001918:	0a5b      	lsrs	r3, r3, #9
 800191a:	4313      	orrs	r3, r2
 800191c:	00ea      	lsls	r2, r5, #3
 800191e:	4694      	mov	ip, r2
 8001920:	4693      	mov	fp, r2
 8001922:	4ac1      	ldr	r2, [pc, #772]	@ (8001c28 <__aeabi_dsub+0x354>)
 8001924:	9003      	str	r0, [sp, #12]
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	4591      	cmp	r9, r2
 800192a:	d100      	bne.n	800192e <__aeabi_dsub+0x5a>
 800192c:	e0cd      	b.n	8001aca <__aeabi_dsub+0x1f6>
 800192e:	2501      	movs	r5, #1
 8001930:	4069      	eors	r1, r5
 8001932:	464d      	mov	r5, r9
 8001934:	1b7d      	subs	r5, r7, r5
 8001936:	46aa      	mov	sl, r5
 8001938:	428e      	cmp	r6, r1
 800193a:	d100      	bne.n	800193e <__aeabi_dsub+0x6a>
 800193c:	e080      	b.n	8001a40 <__aeabi_dsub+0x16c>
 800193e:	2d00      	cmp	r5, #0
 8001940:	dc00      	bgt.n	8001944 <__aeabi_dsub+0x70>
 8001942:	e335      	b.n	8001fb0 <__aeabi_dsub+0x6dc>
 8001944:	4649      	mov	r1, r9
 8001946:	2900      	cmp	r1, #0
 8001948:	d100      	bne.n	800194c <__aeabi_dsub+0x78>
 800194a:	e0df      	b.n	8001b0c <__aeabi_dsub+0x238>
 800194c:	4297      	cmp	r7, r2
 800194e:	d100      	bne.n	8001952 <__aeabi_dsub+0x7e>
 8001950:	e194      	b.n	8001c7c <__aeabi_dsub+0x3a8>
 8001952:	4652      	mov	r2, sl
 8001954:	2501      	movs	r5, #1
 8001956:	2a38      	cmp	r2, #56	@ 0x38
 8001958:	dc19      	bgt.n	800198e <__aeabi_dsub+0xba>
 800195a:	2280      	movs	r2, #128	@ 0x80
 800195c:	9b02      	ldr	r3, [sp, #8]
 800195e:	0412      	lsls	r2, r2, #16
 8001960:	4313      	orrs	r3, r2
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	4652      	mov	r2, sl
 8001966:	2a1f      	cmp	r2, #31
 8001968:	dd00      	ble.n	800196c <__aeabi_dsub+0x98>
 800196a:	e1e3      	b.n	8001d34 <__aeabi_dsub+0x460>
 800196c:	4653      	mov	r3, sl
 800196e:	2220      	movs	r2, #32
 8001970:	4661      	mov	r1, ip
 8001972:	9d02      	ldr	r5, [sp, #8]
 8001974:	1ad2      	subs	r2, r2, r3
 8001976:	4095      	lsls	r5, r2
 8001978:	40d9      	lsrs	r1, r3
 800197a:	430d      	orrs	r5, r1
 800197c:	4661      	mov	r1, ip
 800197e:	4091      	lsls	r1, r2
 8001980:	000a      	movs	r2, r1
 8001982:	1e51      	subs	r1, r2, #1
 8001984:	418a      	sbcs	r2, r1
 8001986:	4315      	orrs	r5, r2
 8001988:	9a02      	ldr	r2, [sp, #8]
 800198a:	40da      	lsrs	r2, r3
 800198c:	1aa4      	subs	r4, r4, r2
 800198e:	1b45      	subs	r5, r0, r5
 8001990:	42a8      	cmp	r0, r5
 8001992:	4180      	sbcs	r0, r0
 8001994:	4240      	negs	r0, r0
 8001996:	1a24      	subs	r4, r4, r0
 8001998:	0223      	lsls	r3, r4, #8
 800199a:	d400      	bmi.n	800199e <__aeabi_dsub+0xca>
 800199c:	e13d      	b.n	8001c1a <__aeabi_dsub+0x346>
 800199e:	0264      	lsls	r4, r4, #9
 80019a0:	0a64      	lsrs	r4, r4, #9
 80019a2:	2c00      	cmp	r4, #0
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0xd4>
 80019a6:	e147      	b.n	8001c38 <__aeabi_dsub+0x364>
 80019a8:	0020      	movs	r0, r4
 80019aa:	f000 fc29 	bl	8002200 <__clzsi2>
 80019ae:	0003      	movs	r3, r0
 80019b0:	3b08      	subs	r3, #8
 80019b2:	2120      	movs	r1, #32
 80019b4:	0028      	movs	r0, r5
 80019b6:	1aca      	subs	r2, r1, r3
 80019b8:	40d0      	lsrs	r0, r2
 80019ba:	409c      	lsls	r4, r3
 80019bc:	0002      	movs	r2, r0
 80019be:	409d      	lsls	r5, r3
 80019c0:	4322      	orrs	r2, r4
 80019c2:	429f      	cmp	r7, r3
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dsub+0xf4>
 80019c6:	e177      	b.n	8001cb8 <__aeabi_dsub+0x3e4>
 80019c8:	1bd8      	subs	r0, r3, r7
 80019ca:	3001      	adds	r0, #1
 80019cc:	1a09      	subs	r1, r1, r0
 80019ce:	002c      	movs	r4, r5
 80019d0:	408d      	lsls	r5, r1
 80019d2:	40c4      	lsrs	r4, r0
 80019d4:	1e6b      	subs	r3, r5, #1
 80019d6:	419d      	sbcs	r5, r3
 80019d8:	0013      	movs	r3, r2
 80019da:	40c2      	lsrs	r2, r0
 80019dc:	408b      	lsls	r3, r1
 80019de:	4325      	orrs	r5, r4
 80019e0:	2700      	movs	r7, #0
 80019e2:	0014      	movs	r4, r2
 80019e4:	431d      	orrs	r5, r3
 80019e6:	076b      	lsls	r3, r5, #29
 80019e8:	d009      	beq.n	80019fe <__aeabi_dsub+0x12a>
 80019ea:	230f      	movs	r3, #15
 80019ec:	402b      	ands	r3, r5
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d005      	beq.n	80019fe <__aeabi_dsub+0x12a>
 80019f2:	1d2b      	adds	r3, r5, #4
 80019f4:	42ab      	cmp	r3, r5
 80019f6:	41ad      	sbcs	r5, r5
 80019f8:	426d      	negs	r5, r5
 80019fa:	1964      	adds	r4, r4, r5
 80019fc:	001d      	movs	r5, r3
 80019fe:	0223      	lsls	r3, r4, #8
 8001a00:	d400      	bmi.n	8001a04 <__aeabi_dsub+0x130>
 8001a02:	e140      	b.n	8001c86 <__aeabi_dsub+0x3b2>
 8001a04:	4a88      	ldr	r2, [pc, #544]	@ (8001c28 <__aeabi_dsub+0x354>)
 8001a06:	3701      	adds	r7, #1
 8001a08:	4297      	cmp	r7, r2
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x13a>
 8001a0c:	e101      	b.n	8001c12 <__aeabi_dsub+0x33e>
 8001a0e:	2601      	movs	r6, #1
 8001a10:	4643      	mov	r3, r8
 8001a12:	4986      	ldr	r1, [pc, #536]	@ (8001c2c <__aeabi_dsub+0x358>)
 8001a14:	08ed      	lsrs	r5, r5, #3
 8001a16:	4021      	ands	r1, r4
 8001a18:	074a      	lsls	r2, r1, #29
 8001a1a:	432a      	orrs	r2, r5
 8001a1c:	057c      	lsls	r4, r7, #21
 8001a1e:	024d      	lsls	r5, r1, #9
 8001a20:	0b2d      	lsrs	r5, r5, #12
 8001a22:	0d64      	lsrs	r4, r4, #21
 8001a24:	401e      	ands	r6, r3
 8001a26:	0524      	lsls	r4, r4, #20
 8001a28:	432c      	orrs	r4, r5
 8001a2a:	07f6      	lsls	r6, r6, #31
 8001a2c:	4334      	orrs	r4, r6
 8001a2e:	0010      	movs	r0, r2
 8001a30:	0021      	movs	r1, r4
 8001a32:	b005      	add	sp, #20
 8001a34:	bcf0      	pop	{r4, r5, r6, r7}
 8001a36:	46bb      	mov	fp, r7
 8001a38:	46b2      	mov	sl, r6
 8001a3a:	46a9      	mov	r9, r5
 8001a3c:	46a0      	mov	r8, r4
 8001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a40:	2d00      	cmp	r5, #0
 8001a42:	dc00      	bgt.n	8001a46 <__aeabi_dsub+0x172>
 8001a44:	e2d0      	b.n	8001fe8 <__aeabi_dsub+0x714>
 8001a46:	4649      	mov	r1, r9
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	d000      	beq.n	8001a4e <__aeabi_dsub+0x17a>
 8001a4c:	e0d4      	b.n	8001bf8 <__aeabi_dsub+0x324>
 8001a4e:	4661      	mov	r1, ip
 8001a50:	9b02      	ldr	r3, [sp, #8]
 8001a52:	4319      	orrs	r1, r3
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0x184>
 8001a56:	e12b      	b.n	8001cb0 <__aeabi_dsub+0x3dc>
 8001a58:	1e69      	subs	r1, r5, #1
 8001a5a:	2d01      	cmp	r5, #1
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x18c>
 8001a5e:	e1d9      	b.n	8001e14 <__aeabi_dsub+0x540>
 8001a60:	4295      	cmp	r5, r2
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x192>
 8001a64:	e10a      	b.n	8001c7c <__aeabi_dsub+0x3a8>
 8001a66:	2501      	movs	r5, #1
 8001a68:	2938      	cmp	r1, #56	@ 0x38
 8001a6a:	dc17      	bgt.n	8001a9c <__aeabi_dsub+0x1c8>
 8001a6c:	468a      	mov	sl, r1
 8001a6e:	4653      	mov	r3, sl
 8001a70:	2b1f      	cmp	r3, #31
 8001a72:	dd00      	ble.n	8001a76 <__aeabi_dsub+0x1a2>
 8001a74:	e1e7      	b.n	8001e46 <__aeabi_dsub+0x572>
 8001a76:	2220      	movs	r2, #32
 8001a78:	1ad2      	subs	r2, r2, r3
 8001a7a:	9b02      	ldr	r3, [sp, #8]
 8001a7c:	4661      	mov	r1, ip
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	001d      	movs	r5, r3
 8001a82:	4653      	mov	r3, sl
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	4663      	mov	r3, ip
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	430d      	orrs	r5, r1
 8001a8e:	1e51      	subs	r1, r2, #1
 8001a90:	418a      	sbcs	r2, r1
 8001a92:	4653      	mov	r3, sl
 8001a94:	4315      	orrs	r5, r2
 8001a96:	9a02      	ldr	r2, [sp, #8]
 8001a98:	40da      	lsrs	r2, r3
 8001a9a:	18a4      	adds	r4, r4, r2
 8001a9c:	182d      	adds	r5, r5, r0
 8001a9e:	4285      	cmp	r5, r0
 8001aa0:	4180      	sbcs	r0, r0
 8001aa2:	4240      	negs	r0, r0
 8001aa4:	1824      	adds	r4, r4, r0
 8001aa6:	0223      	lsls	r3, r4, #8
 8001aa8:	d400      	bmi.n	8001aac <__aeabi_dsub+0x1d8>
 8001aaa:	e0b6      	b.n	8001c1a <__aeabi_dsub+0x346>
 8001aac:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <__aeabi_dsub+0x354>)
 8001aae:	3701      	adds	r7, #1
 8001ab0:	429f      	cmp	r7, r3
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x1e2>
 8001ab4:	e0ad      	b.n	8001c12 <__aeabi_dsub+0x33e>
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c2c <__aeabi_dsub+0x358>)
 8001aba:	086a      	lsrs	r2, r5, #1
 8001abc:	401c      	ands	r4, r3
 8001abe:	4029      	ands	r1, r5
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	07e5      	lsls	r5, r4, #31
 8001ac4:	4315      	orrs	r5, r2
 8001ac6:	0864      	lsrs	r4, r4, #1
 8001ac8:	e78d      	b.n	80019e6 <__aeabi_dsub+0x112>
 8001aca:	4a59      	ldr	r2, [pc, #356]	@ (8001c30 <__aeabi_dsub+0x35c>)
 8001acc:	9b02      	ldr	r3, [sp, #8]
 8001ace:	4692      	mov	sl, r2
 8001ad0:	4662      	mov	r2, ip
 8001ad2:	44ba      	add	sl, r7
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	d02c      	beq.n	8001b32 <__aeabi_dsub+0x25e>
 8001ad8:	428e      	cmp	r6, r1
 8001ada:	d02e      	beq.n	8001b3a <__aeabi_dsub+0x266>
 8001adc:	4652      	mov	r2, sl
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d060      	beq.n	8001ba4 <__aeabi_dsub+0x2d0>
 8001ae2:	2f00      	cmp	r7, #0
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x214>
 8001ae6:	e0db      	b.n	8001ca0 <__aeabi_dsub+0x3cc>
 8001ae8:	4663      	mov	r3, ip
 8001aea:	000e      	movs	r6, r1
 8001aec:	9c02      	ldr	r4, [sp, #8]
 8001aee:	08d8      	lsrs	r0, r3, #3
 8001af0:	0762      	lsls	r2, r4, #29
 8001af2:	4302      	orrs	r2, r0
 8001af4:	08e4      	lsrs	r4, r4, #3
 8001af6:	0013      	movs	r3, r2
 8001af8:	4323      	orrs	r3, r4
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0x22a>
 8001afc:	e254      	b.n	8001fa8 <__aeabi_dsub+0x6d4>
 8001afe:	2580      	movs	r5, #128	@ 0x80
 8001b00:	032d      	lsls	r5, r5, #12
 8001b02:	4325      	orrs	r5, r4
 8001b04:	032d      	lsls	r5, r5, #12
 8001b06:	4c48      	ldr	r4, [pc, #288]	@ (8001c28 <__aeabi_dsub+0x354>)
 8001b08:	0b2d      	lsrs	r5, r5, #12
 8001b0a:	e78c      	b.n	8001a26 <__aeabi_dsub+0x152>
 8001b0c:	4661      	mov	r1, ip
 8001b0e:	9b02      	ldr	r3, [sp, #8]
 8001b10:	4319      	orrs	r1, r3
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x242>
 8001b14:	e0cc      	b.n	8001cb0 <__aeabi_dsub+0x3dc>
 8001b16:	0029      	movs	r1, r5
 8001b18:	3901      	subs	r1, #1
 8001b1a:	2d01      	cmp	r5, #1
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x24c>
 8001b1e:	e188      	b.n	8001e32 <__aeabi_dsub+0x55e>
 8001b20:	4295      	cmp	r5, r2
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x252>
 8001b24:	e0aa      	b.n	8001c7c <__aeabi_dsub+0x3a8>
 8001b26:	2501      	movs	r5, #1
 8001b28:	2938      	cmp	r1, #56	@ 0x38
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dsub+0x25a>
 8001b2c:	e72f      	b.n	800198e <__aeabi_dsub+0xba>
 8001b2e:	468a      	mov	sl, r1
 8001b30:	e718      	b.n	8001964 <__aeabi_dsub+0x90>
 8001b32:	2201      	movs	r2, #1
 8001b34:	4051      	eors	r1, r2
 8001b36:	428e      	cmp	r6, r1
 8001b38:	d1d0      	bne.n	8001adc <__aeabi_dsub+0x208>
 8001b3a:	4653      	mov	r3, sl
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x26e>
 8001b40:	e0be      	b.n	8001cc0 <__aeabi_dsub+0x3ec>
 8001b42:	2f00      	cmp	r7, #0
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dsub+0x274>
 8001b46:	e138      	b.n	8001dba <__aeabi_dsub+0x4e6>
 8001b48:	46ca      	mov	sl, r9
 8001b4a:	0022      	movs	r2, r4
 8001b4c:	4302      	orrs	r2, r0
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_dsub+0x27e>
 8001b50:	e1e2      	b.n	8001f18 <__aeabi_dsub+0x644>
 8001b52:	4653      	mov	r3, sl
 8001b54:	1e59      	subs	r1, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x288>
 8001b5a:	e20d      	b.n	8001f78 <__aeabi_dsub+0x6a4>
 8001b5c:	4a32      	ldr	r2, [pc, #200]	@ (8001c28 <__aeabi_dsub+0x354>)
 8001b5e:	4592      	cmp	sl, r2
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x290>
 8001b62:	e1d2      	b.n	8001f0a <__aeabi_dsub+0x636>
 8001b64:	2701      	movs	r7, #1
 8001b66:	2938      	cmp	r1, #56	@ 0x38
 8001b68:	dc13      	bgt.n	8001b92 <__aeabi_dsub+0x2be>
 8001b6a:	291f      	cmp	r1, #31
 8001b6c:	dd00      	ble.n	8001b70 <__aeabi_dsub+0x29c>
 8001b6e:	e1ee      	b.n	8001f4e <__aeabi_dsub+0x67a>
 8001b70:	2220      	movs	r2, #32
 8001b72:	9b02      	ldr	r3, [sp, #8]
 8001b74:	1a52      	subs	r2, r2, r1
 8001b76:	0025      	movs	r5, r4
 8001b78:	0007      	movs	r7, r0
 8001b7a:	469a      	mov	sl, r3
 8001b7c:	40cc      	lsrs	r4, r1
 8001b7e:	4090      	lsls	r0, r2
 8001b80:	4095      	lsls	r5, r2
 8001b82:	40cf      	lsrs	r7, r1
 8001b84:	44a2      	add	sl, r4
 8001b86:	1e42      	subs	r2, r0, #1
 8001b88:	4190      	sbcs	r0, r2
 8001b8a:	4653      	mov	r3, sl
 8001b8c:	432f      	orrs	r7, r5
 8001b8e:	4307      	orrs	r7, r0
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	003d      	movs	r5, r7
 8001b94:	4465      	add	r5, ip
 8001b96:	4565      	cmp	r5, ip
 8001b98:	4192      	sbcs	r2, r2
 8001b9a:	9b02      	ldr	r3, [sp, #8]
 8001b9c:	4252      	negs	r2, r2
 8001b9e:	464f      	mov	r7, r9
 8001ba0:	18d4      	adds	r4, r2, r3
 8001ba2:	e780      	b.n	8001aa6 <__aeabi_dsub+0x1d2>
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <__aeabi_dsub+0x360>)
 8001ba6:	1c7d      	adds	r5, r7, #1
 8001ba8:	4215      	tst	r5, r2
 8001baa:	d000      	beq.n	8001bae <__aeabi_dsub+0x2da>
 8001bac:	e0aa      	b.n	8001d04 <__aeabi_dsub+0x430>
 8001bae:	4662      	mov	r2, ip
 8001bb0:	0025      	movs	r5, r4
 8001bb2:	9b02      	ldr	r3, [sp, #8]
 8001bb4:	4305      	orrs	r5, r0
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	2f00      	cmp	r7, #0
 8001bba:	d000      	beq.n	8001bbe <__aeabi_dsub+0x2ea>
 8001bbc:	e0f5      	b.n	8001daa <__aeabi_dsub+0x4d6>
 8001bbe:	2d00      	cmp	r5, #0
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x2f0>
 8001bc2:	e16b      	b.n	8001e9c <__aeabi_dsub+0x5c8>
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x2f6>
 8001bc8:	e152      	b.n	8001e70 <__aeabi_dsub+0x59c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1ac5      	subs	r5, r0, r3
 8001bce:	9b02      	ldr	r3, [sp, #8]
 8001bd0:	1ae2      	subs	r2, r4, r3
 8001bd2:	42a8      	cmp	r0, r5
 8001bd4:	419b      	sbcs	r3, r3
 8001bd6:	425b      	negs	r3, r3
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	021a      	lsls	r2, r3, #8
 8001bdc:	d400      	bmi.n	8001be0 <__aeabi_dsub+0x30c>
 8001bde:	e1d5      	b.n	8001f8c <__aeabi_dsub+0x6b8>
 8001be0:	4663      	mov	r3, ip
 8001be2:	1a1d      	subs	r5, r3, r0
 8001be4:	45ac      	cmp	ip, r5
 8001be6:	4192      	sbcs	r2, r2
 8001be8:	2601      	movs	r6, #1
 8001bea:	9b02      	ldr	r3, [sp, #8]
 8001bec:	4252      	negs	r2, r2
 8001bee:	1b1c      	subs	r4, r3, r4
 8001bf0:	4688      	mov	r8, r1
 8001bf2:	1aa4      	subs	r4, r4, r2
 8001bf4:	400e      	ands	r6, r1
 8001bf6:	e6f6      	b.n	80019e6 <__aeabi_dsub+0x112>
 8001bf8:	4297      	cmp	r7, r2
 8001bfa:	d03f      	beq.n	8001c7c <__aeabi_dsub+0x3a8>
 8001bfc:	4652      	mov	r2, sl
 8001bfe:	2501      	movs	r5, #1
 8001c00:	2a38      	cmp	r2, #56	@ 0x38
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x332>
 8001c04:	e74a      	b.n	8001a9c <__aeabi_dsub+0x1c8>
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	9b02      	ldr	r3, [sp, #8]
 8001c0a:	0412      	lsls	r2, r2, #16
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	e72d      	b.n	8001a6e <__aeabi_dsub+0x19a>
 8001c12:	003c      	movs	r4, r7
 8001c14:	2500      	movs	r5, #0
 8001c16:	2200      	movs	r2, #0
 8001c18:	e705      	b.n	8001a26 <__aeabi_dsub+0x152>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	402b      	ands	r3, r5
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d000      	beq.n	8001c24 <__aeabi_dsub+0x350>
 8001c22:	e6e2      	b.n	80019ea <__aeabi_dsub+0x116>
 8001c24:	e06b      	b.n	8001cfe <__aeabi_dsub+0x42a>
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	000007ff 	.word	0x000007ff
 8001c2c:	ff7fffff 	.word	0xff7fffff
 8001c30:	fffff801 	.word	0xfffff801
 8001c34:	000007fe 	.word	0x000007fe
 8001c38:	0028      	movs	r0, r5
 8001c3a:	f000 fae1 	bl	8002200 <__clzsi2>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	3318      	adds	r3, #24
 8001c42:	2b1f      	cmp	r3, #31
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dsub+0x374>
 8001c46:	e6b4      	b.n	80019b2 <__aeabi_dsub+0xde>
 8001c48:	002a      	movs	r2, r5
 8001c4a:	3808      	subs	r0, #8
 8001c4c:	4082      	lsls	r2, r0
 8001c4e:	429f      	cmp	r7, r3
 8001c50:	dd00      	ble.n	8001c54 <__aeabi_dsub+0x380>
 8001c52:	e0b9      	b.n	8001dc8 <__aeabi_dsub+0x4f4>
 8001c54:	1bdb      	subs	r3, r3, r7
 8001c56:	1c58      	adds	r0, r3, #1
 8001c58:	281f      	cmp	r0, #31
 8001c5a:	dc00      	bgt.n	8001c5e <__aeabi_dsub+0x38a>
 8001c5c:	e1a0      	b.n	8001fa0 <__aeabi_dsub+0x6cc>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	3b1f      	subs	r3, #31
 8001c62:	40dd      	lsrs	r5, r3
 8001c64:	2820      	cmp	r0, #32
 8001c66:	d005      	beq.n	8001c74 <__aeabi_dsub+0x3a0>
 8001c68:	2340      	movs	r3, #64	@ 0x40
 8001c6a:	1a1b      	subs	r3, r3, r0
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	1e53      	subs	r3, r2, #1
 8001c70:	419a      	sbcs	r2, r3
 8001c72:	4315      	orrs	r5, r2
 8001c74:	2307      	movs	r3, #7
 8001c76:	2700      	movs	r7, #0
 8001c78:	402b      	ands	r3, r5
 8001c7a:	e7d0      	b.n	8001c1e <__aeabi_dsub+0x34a>
 8001c7c:	08c0      	lsrs	r0, r0, #3
 8001c7e:	0762      	lsls	r2, r4, #29
 8001c80:	4302      	orrs	r2, r0
 8001c82:	08e4      	lsrs	r4, r4, #3
 8001c84:	e737      	b.n	8001af6 <__aeabi_dsub+0x222>
 8001c86:	08ea      	lsrs	r2, r5, #3
 8001c88:	0763      	lsls	r3, r4, #29
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	4bd3      	ldr	r3, [pc, #844]	@ (8001fdc <__aeabi_dsub+0x708>)
 8001c8e:	08e4      	lsrs	r4, r4, #3
 8001c90:	429f      	cmp	r7, r3
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x3c2>
 8001c94:	e72f      	b.n	8001af6 <__aeabi_dsub+0x222>
 8001c96:	0324      	lsls	r4, r4, #12
 8001c98:	0b25      	lsrs	r5, r4, #12
 8001c9a:	057c      	lsls	r4, r7, #21
 8001c9c:	0d64      	lsrs	r4, r4, #21
 8001c9e:	e6c2      	b.n	8001a26 <__aeabi_dsub+0x152>
 8001ca0:	46ca      	mov	sl, r9
 8001ca2:	0022      	movs	r2, r4
 8001ca4:	4302      	orrs	r2, r0
 8001ca6:	d158      	bne.n	8001d5a <__aeabi_dsub+0x486>
 8001ca8:	4663      	mov	r3, ip
 8001caa:	000e      	movs	r6, r1
 8001cac:	9c02      	ldr	r4, [sp, #8]
 8001cae:	9303      	str	r3, [sp, #12]
 8001cb0:	9b03      	ldr	r3, [sp, #12]
 8001cb2:	4657      	mov	r7, sl
 8001cb4:	08da      	lsrs	r2, r3, #3
 8001cb6:	e7e7      	b.n	8001c88 <__aeabi_dsub+0x3b4>
 8001cb8:	4cc9      	ldr	r4, [pc, #804]	@ (8001fe0 <__aeabi_dsub+0x70c>)
 8001cba:	1aff      	subs	r7, r7, r3
 8001cbc:	4014      	ands	r4, r2
 8001cbe:	e692      	b.n	80019e6 <__aeabi_dsub+0x112>
 8001cc0:	4dc8      	ldr	r5, [pc, #800]	@ (8001fe4 <__aeabi_dsub+0x710>)
 8001cc2:	1c7a      	adds	r2, r7, #1
 8001cc4:	422a      	tst	r2, r5
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dsub+0x3f6>
 8001cc8:	e084      	b.n	8001dd4 <__aeabi_dsub+0x500>
 8001cca:	0022      	movs	r2, r4
 8001ccc:	4302      	orrs	r2, r0
 8001cce:	2f00      	cmp	r7, #0
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x400>
 8001cd2:	e0ef      	b.n	8001eb4 <__aeabi_dsub+0x5e0>
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dsub+0x406>
 8001cd8:	e0e5      	b.n	8001ea6 <__aeabi_dsub+0x5d2>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	9902      	ldr	r1, [sp, #8]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x410>
 8001ce2:	e0c5      	b.n	8001e70 <__aeabi_dsub+0x59c>
 8001ce4:	4663      	mov	r3, ip
 8001ce6:	18c5      	adds	r5, r0, r3
 8001ce8:	468c      	mov	ip, r1
 8001cea:	4285      	cmp	r5, r0
 8001cec:	4180      	sbcs	r0, r0
 8001cee:	4464      	add	r4, ip
 8001cf0:	4240      	negs	r0, r0
 8001cf2:	1824      	adds	r4, r4, r0
 8001cf4:	0223      	lsls	r3, r4, #8
 8001cf6:	d502      	bpl.n	8001cfe <__aeabi_dsub+0x42a>
 8001cf8:	4bb9      	ldr	r3, [pc, #740]	@ (8001fe0 <__aeabi_dsub+0x70c>)
 8001cfa:	3701      	adds	r7, #1
 8001cfc:	401c      	ands	r4, r3
 8001cfe:	46ba      	mov	sl, r7
 8001d00:	9503      	str	r5, [sp, #12]
 8001d02:	e7d5      	b.n	8001cb0 <__aeabi_dsub+0x3dc>
 8001d04:	4662      	mov	r2, ip
 8001d06:	1a85      	subs	r5, r0, r2
 8001d08:	42a8      	cmp	r0, r5
 8001d0a:	4192      	sbcs	r2, r2
 8001d0c:	4252      	negs	r2, r2
 8001d0e:	4691      	mov	r9, r2
 8001d10:	9b02      	ldr	r3, [sp, #8]
 8001d12:	1ae3      	subs	r3, r4, r3
 8001d14:	001a      	movs	r2, r3
 8001d16:	464b      	mov	r3, r9
 8001d18:	1ad2      	subs	r2, r2, r3
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	4691      	mov	r9, r2
 8001d1e:	021a      	lsls	r2, r3, #8
 8001d20:	d46c      	bmi.n	8001dfc <__aeabi_dsub+0x528>
 8001d22:	464a      	mov	r2, r9
 8001d24:	464c      	mov	r4, r9
 8001d26:	432a      	orrs	r2, r5
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dsub+0x458>
 8001d2a:	e63a      	b.n	80019a2 <__aeabi_dsub+0xce>
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	2400      	movs	r4, #0
 8001d30:	2500      	movs	r5, #0
 8001d32:	e678      	b.n	8001a26 <__aeabi_dsub+0x152>
 8001d34:	9902      	ldr	r1, [sp, #8]
 8001d36:	4653      	mov	r3, sl
 8001d38:	000d      	movs	r5, r1
 8001d3a:	3a20      	subs	r2, #32
 8001d3c:	40d5      	lsrs	r5, r2
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d006      	beq.n	8001d50 <__aeabi_dsub+0x47c>
 8001d42:	2240      	movs	r2, #64	@ 0x40
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	000b      	movs	r3, r1
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	4662      	mov	r2, ip
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	4693      	mov	fp, r2
 8001d50:	465b      	mov	r3, fp
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	4193      	sbcs	r3, r2
 8001d56:	431d      	orrs	r5, r3
 8001d58:	e619      	b.n	800198e <__aeabi_dsub+0xba>
 8001d5a:	4653      	mov	r3, sl
 8001d5c:	1e5a      	subs	r2, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x490>
 8001d62:	e0c6      	b.n	8001ef2 <__aeabi_dsub+0x61e>
 8001d64:	4e9d      	ldr	r6, [pc, #628]	@ (8001fdc <__aeabi_dsub+0x708>)
 8001d66:	45b2      	cmp	sl, r6
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x498>
 8001d6a:	e6bd      	b.n	8001ae8 <__aeabi_dsub+0x214>
 8001d6c:	4688      	mov	r8, r1
 8001d6e:	000e      	movs	r6, r1
 8001d70:	2501      	movs	r5, #1
 8001d72:	2a38      	cmp	r2, #56	@ 0x38
 8001d74:	dc10      	bgt.n	8001d98 <__aeabi_dsub+0x4c4>
 8001d76:	2a1f      	cmp	r2, #31
 8001d78:	dc7f      	bgt.n	8001e7a <__aeabi_dsub+0x5a6>
 8001d7a:	2120      	movs	r1, #32
 8001d7c:	0025      	movs	r5, r4
 8001d7e:	1a89      	subs	r1, r1, r2
 8001d80:	0007      	movs	r7, r0
 8001d82:	4088      	lsls	r0, r1
 8001d84:	408d      	lsls	r5, r1
 8001d86:	40d7      	lsrs	r7, r2
 8001d88:	40d4      	lsrs	r4, r2
 8001d8a:	1e41      	subs	r1, r0, #1
 8001d8c:	4188      	sbcs	r0, r1
 8001d8e:	9b02      	ldr	r3, [sp, #8]
 8001d90:	433d      	orrs	r5, r7
 8001d92:	1b1b      	subs	r3, r3, r4
 8001d94:	4305      	orrs	r5, r0
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	4662      	mov	r2, ip
 8001d9a:	1b55      	subs	r5, r2, r5
 8001d9c:	45ac      	cmp	ip, r5
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	9b02      	ldr	r3, [sp, #8]
 8001da2:	4252      	negs	r2, r2
 8001da4:	464f      	mov	r7, r9
 8001da6:	1a9c      	subs	r4, r3, r2
 8001da8:	e5f6      	b.n	8001998 <__aeabi_dsub+0xc4>
 8001daa:	2d00      	cmp	r5, #0
 8001dac:	d000      	beq.n	8001db0 <__aeabi_dsub+0x4dc>
 8001dae:	e0b7      	b.n	8001f20 <__aeabi_dsub+0x64c>
 8001db0:	2a00      	cmp	r2, #0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x4e2>
 8001db4:	e0f0      	b.n	8001f98 <__aeabi_dsub+0x6c4>
 8001db6:	2601      	movs	r6, #1
 8001db8:	400e      	ands	r6, r1
 8001dba:	4663      	mov	r3, ip
 8001dbc:	9802      	ldr	r0, [sp, #8]
 8001dbe:	08d9      	lsrs	r1, r3, #3
 8001dc0:	0742      	lsls	r2, r0, #29
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	08c4      	lsrs	r4, r0, #3
 8001dc6:	e696      	b.n	8001af6 <__aeabi_dsub+0x222>
 8001dc8:	4c85      	ldr	r4, [pc, #532]	@ (8001fe0 <__aeabi_dsub+0x70c>)
 8001dca:	1aff      	subs	r7, r7, r3
 8001dcc:	4014      	ands	r4, r2
 8001dce:	0762      	lsls	r2, r4, #29
 8001dd0:	08e4      	lsrs	r4, r4, #3
 8001dd2:	e760      	b.n	8001c96 <__aeabi_dsub+0x3c2>
 8001dd4:	4981      	ldr	r1, [pc, #516]	@ (8001fdc <__aeabi_dsub+0x708>)
 8001dd6:	428a      	cmp	r2, r1
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_dsub+0x508>
 8001dda:	e0c9      	b.n	8001f70 <__aeabi_dsub+0x69c>
 8001ddc:	4663      	mov	r3, ip
 8001dde:	18c1      	adds	r1, r0, r3
 8001de0:	4281      	cmp	r1, r0
 8001de2:	4180      	sbcs	r0, r0
 8001de4:	9b02      	ldr	r3, [sp, #8]
 8001de6:	4240      	negs	r0, r0
 8001de8:	18e3      	adds	r3, r4, r3
 8001dea:	181b      	adds	r3, r3, r0
 8001dec:	07dd      	lsls	r5, r3, #31
 8001dee:	085c      	lsrs	r4, r3, #1
 8001df0:	2307      	movs	r3, #7
 8001df2:	0849      	lsrs	r1, r1, #1
 8001df4:	430d      	orrs	r5, r1
 8001df6:	0017      	movs	r7, r2
 8001df8:	402b      	ands	r3, r5
 8001dfa:	e710      	b.n	8001c1e <__aeabi_dsub+0x34a>
 8001dfc:	4663      	mov	r3, ip
 8001dfe:	1a1d      	subs	r5, r3, r0
 8001e00:	45ac      	cmp	ip, r5
 8001e02:	4192      	sbcs	r2, r2
 8001e04:	2601      	movs	r6, #1
 8001e06:	9b02      	ldr	r3, [sp, #8]
 8001e08:	4252      	negs	r2, r2
 8001e0a:	1b1c      	subs	r4, r3, r4
 8001e0c:	4688      	mov	r8, r1
 8001e0e:	1aa4      	subs	r4, r4, r2
 8001e10:	400e      	ands	r6, r1
 8001e12:	e5c6      	b.n	80019a2 <__aeabi_dsub+0xce>
 8001e14:	4663      	mov	r3, ip
 8001e16:	18c5      	adds	r5, r0, r3
 8001e18:	9b02      	ldr	r3, [sp, #8]
 8001e1a:	4285      	cmp	r5, r0
 8001e1c:	4180      	sbcs	r0, r0
 8001e1e:	469c      	mov	ip, r3
 8001e20:	4240      	negs	r0, r0
 8001e22:	4464      	add	r4, ip
 8001e24:	1824      	adds	r4, r4, r0
 8001e26:	2701      	movs	r7, #1
 8001e28:	0223      	lsls	r3, r4, #8
 8001e2a:	d400      	bmi.n	8001e2e <__aeabi_dsub+0x55a>
 8001e2c:	e6f5      	b.n	8001c1a <__aeabi_dsub+0x346>
 8001e2e:	2702      	movs	r7, #2
 8001e30:	e641      	b.n	8001ab6 <__aeabi_dsub+0x1e2>
 8001e32:	4663      	mov	r3, ip
 8001e34:	1ac5      	subs	r5, r0, r3
 8001e36:	42a8      	cmp	r0, r5
 8001e38:	4180      	sbcs	r0, r0
 8001e3a:	9b02      	ldr	r3, [sp, #8]
 8001e3c:	4240      	negs	r0, r0
 8001e3e:	1ae4      	subs	r4, r4, r3
 8001e40:	2701      	movs	r7, #1
 8001e42:	1a24      	subs	r4, r4, r0
 8001e44:	e5a8      	b.n	8001998 <__aeabi_dsub+0xc4>
 8001e46:	9d02      	ldr	r5, [sp, #8]
 8001e48:	4652      	mov	r2, sl
 8001e4a:	002b      	movs	r3, r5
 8001e4c:	3a20      	subs	r2, #32
 8001e4e:	40d3      	lsrs	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	4653      	mov	r3, sl
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d006      	beq.n	8001e66 <__aeabi_dsub+0x592>
 8001e58:	2240      	movs	r2, #64	@ 0x40
 8001e5a:	1ad2      	subs	r2, r2, r3
 8001e5c:	002b      	movs	r3, r5
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	4662      	mov	r2, ip
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4693      	mov	fp, r2
 8001e66:	465d      	mov	r5, fp
 8001e68:	1e6b      	subs	r3, r5, #1
 8001e6a:	419d      	sbcs	r5, r3
 8001e6c:	430d      	orrs	r5, r1
 8001e6e:	e615      	b.n	8001a9c <__aeabi_dsub+0x1c8>
 8001e70:	0762      	lsls	r2, r4, #29
 8001e72:	08c0      	lsrs	r0, r0, #3
 8001e74:	4302      	orrs	r2, r0
 8001e76:	08e4      	lsrs	r4, r4, #3
 8001e78:	e70d      	b.n	8001c96 <__aeabi_dsub+0x3c2>
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	0027      	movs	r7, r4
 8001e7e:	3920      	subs	r1, #32
 8001e80:	40cf      	lsrs	r7, r1
 8001e82:	2a20      	cmp	r2, #32
 8001e84:	d005      	beq.n	8001e92 <__aeabi_dsub+0x5be>
 8001e86:	2140      	movs	r1, #64	@ 0x40
 8001e88:	1a8a      	subs	r2, r1, r2
 8001e8a:	4094      	lsls	r4, r2
 8001e8c:	0025      	movs	r5, r4
 8001e8e:	4305      	orrs	r5, r0
 8001e90:	9503      	str	r5, [sp, #12]
 8001e92:	9d03      	ldr	r5, [sp, #12]
 8001e94:	1e6a      	subs	r2, r5, #1
 8001e96:	4195      	sbcs	r5, r2
 8001e98:	433d      	orrs	r5, r7
 8001e9a:	e77d      	b.n	8001d98 <__aeabi_dsub+0x4c4>
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_dsub+0x5ce>
 8001ea0:	e744      	b.n	8001d2c <__aeabi_dsub+0x458>
 8001ea2:	2601      	movs	r6, #1
 8001ea4:	400e      	ands	r6, r1
 8001ea6:	4663      	mov	r3, ip
 8001ea8:	08d9      	lsrs	r1, r3, #3
 8001eaa:	9b02      	ldr	r3, [sp, #8]
 8001eac:	075a      	lsls	r2, r3, #29
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	08dc      	lsrs	r4, r3, #3
 8001eb2:	e6f0      	b.n	8001c96 <__aeabi_dsub+0x3c2>
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	d028      	beq.n	8001f0a <__aeabi_dsub+0x636>
 8001eb8:	4662      	mov	r2, ip
 8001eba:	9f02      	ldr	r7, [sp, #8]
 8001ebc:	08c0      	lsrs	r0, r0, #3
 8001ebe:	433a      	orrs	r2, r7
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x5f0>
 8001ec2:	e6dc      	b.n	8001c7e <__aeabi_dsub+0x3aa>
 8001ec4:	0762      	lsls	r2, r4, #29
 8001ec6:	4310      	orrs	r0, r2
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	08e4      	lsrs	r4, r4, #3
 8001ecc:	0312      	lsls	r2, r2, #12
 8001ece:	4214      	tst	r4, r2
 8001ed0:	d009      	beq.n	8001ee6 <__aeabi_dsub+0x612>
 8001ed2:	08fd      	lsrs	r5, r7, #3
 8001ed4:	4215      	tst	r5, r2
 8001ed6:	d106      	bne.n	8001ee6 <__aeabi_dsub+0x612>
 8001ed8:	4663      	mov	r3, ip
 8001eda:	2601      	movs	r6, #1
 8001edc:	002c      	movs	r4, r5
 8001ede:	08d8      	lsrs	r0, r3, #3
 8001ee0:	077b      	lsls	r3, r7, #29
 8001ee2:	4318      	orrs	r0, r3
 8001ee4:	400e      	ands	r6, r1
 8001ee6:	0f42      	lsrs	r2, r0, #29
 8001ee8:	00c0      	lsls	r0, r0, #3
 8001eea:	08c0      	lsrs	r0, r0, #3
 8001eec:	0752      	lsls	r2, r2, #29
 8001eee:	4302      	orrs	r2, r0
 8001ef0:	e601      	b.n	8001af6 <__aeabi_dsub+0x222>
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	1a1d      	subs	r5, r3, r0
 8001ef6:	45ac      	cmp	ip, r5
 8001ef8:	4192      	sbcs	r2, r2
 8001efa:	9b02      	ldr	r3, [sp, #8]
 8001efc:	4252      	negs	r2, r2
 8001efe:	1b1c      	subs	r4, r3, r4
 8001f00:	000e      	movs	r6, r1
 8001f02:	4688      	mov	r8, r1
 8001f04:	2701      	movs	r7, #1
 8001f06:	1aa4      	subs	r4, r4, r2
 8001f08:	e546      	b.n	8001998 <__aeabi_dsub+0xc4>
 8001f0a:	4663      	mov	r3, ip
 8001f0c:	08d9      	lsrs	r1, r3, #3
 8001f0e:	9b02      	ldr	r3, [sp, #8]
 8001f10:	075a      	lsls	r2, r3, #29
 8001f12:	430a      	orrs	r2, r1
 8001f14:	08dc      	lsrs	r4, r3, #3
 8001f16:	e5ee      	b.n	8001af6 <__aeabi_dsub+0x222>
 8001f18:	4663      	mov	r3, ip
 8001f1a:	9c02      	ldr	r4, [sp, #8]
 8001f1c:	9303      	str	r3, [sp, #12]
 8001f1e:	e6c7      	b.n	8001cb0 <__aeabi_dsub+0x3dc>
 8001f20:	08c0      	lsrs	r0, r0, #3
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d100      	bne.n	8001f28 <__aeabi_dsub+0x654>
 8001f26:	e6aa      	b.n	8001c7e <__aeabi_dsub+0x3aa>
 8001f28:	0762      	lsls	r2, r4, #29
 8001f2a:	4310      	orrs	r0, r2
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	08e4      	lsrs	r4, r4, #3
 8001f30:	0312      	lsls	r2, r2, #12
 8001f32:	4214      	tst	r4, r2
 8001f34:	d0d7      	beq.n	8001ee6 <__aeabi_dsub+0x612>
 8001f36:	9f02      	ldr	r7, [sp, #8]
 8001f38:	08fd      	lsrs	r5, r7, #3
 8001f3a:	4215      	tst	r5, r2
 8001f3c:	d1d3      	bne.n	8001ee6 <__aeabi_dsub+0x612>
 8001f3e:	4663      	mov	r3, ip
 8001f40:	2601      	movs	r6, #1
 8001f42:	08d8      	lsrs	r0, r3, #3
 8001f44:	077b      	lsls	r3, r7, #29
 8001f46:	002c      	movs	r4, r5
 8001f48:	4318      	orrs	r0, r3
 8001f4a:	400e      	ands	r6, r1
 8001f4c:	e7cb      	b.n	8001ee6 <__aeabi_dsub+0x612>
 8001f4e:	000a      	movs	r2, r1
 8001f50:	0027      	movs	r7, r4
 8001f52:	3a20      	subs	r2, #32
 8001f54:	40d7      	lsrs	r7, r2
 8001f56:	2920      	cmp	r1, #32
 8001f58:	d005      	beq.n	8001f66 <__aeabi_dsub+0x692>
 8001f5a:	2240      	movs	r2, #64	@ 0x40
 8001f5c:	1a52      	subs	r2, r2, r1
 8001f5e:	4094      	lsls	r4, r2
 8001f60:	0025      	movs	r5, r4
 8001f62:	4305      	orrs	r5, r0
 8001f64:	9503      	str	r5, [sp, #12]
 8001f66:	9d03      	ldr	r5, [sp, #12]
 8001f68:	1e6a      	subs	r2, r5, #1
 8001f6a:	4195      	sbcs	r5, r2
 8001f6c:	432f      	orrs	r7, r5
 8001f6e:	e610      	b.n	8001b92 <__aeabi_dsub+0x2be>
 8001f70:	0014      	movs	r4, r2
 8001f72:	2500      	movs	r5, #0
 8001f74:	2200      	movs	r2, #0
 8001f76:	e556      	b.n	8001a26 <__aeabi_dsub+0x152>
 8001f78:	9b02      	ldr	r3, [sp, #8]
 8001f7a:	4460      	add	r0, ip
 8001f7c:	4699      	mov	r9, r3
 8001f7e:	4560      	cmp	r0, ip
 8001f80:	4192      	sbcs	r2, r2
 8001f82:	444c      	add	r4, r9
 8001f84:	4252      	negs	r2, r2
 8001f86:	0005      	movs	r5, r0
 8001f88:	18a4      	adds	r4, r4, r2
 8001f8a:	e74c      	b.n	8001e26 <__aeabi_dsub+0x552>
 8001f8c:	001a      	movs	r2, r3
 8001f8e:	001c      	movs	r4, r3
 8001f90:	432a      	orrs	r2, r5
 8001f92:	d000      	beq.n	8001f96 <__aeabi_dsub+0x6c2>
 8001f94:	e6b3      	b.n	8001cfe <__aeabi_dsub+0x42a>
 8001f96:	e6c9      	b.n	8001d2c <__aeabi_dsub+0x458>
 8001f98:	2480      	movs	r4, #128	@ 0x80
 8001f9a:	2600      	movs	r6, #0
 8001f9c:	0324      	lsls	r4, r4, #12
 8001f9e:	e5ae      	b.n	8001afe <__aeabi_dsub+0x22a>
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	2500      	movs	r5, #0
 8001fa4:	1a09      	subs	r1, r1, r0
 8001fa6:	e517      	b.n	80019d8 <__aeabi_dsub+0x104>
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2500      	movs	r5, #0
 8001fac:	4c0b      	ldr	r4, [pc, #44]	@ (8001fdc <__aeabi_dsub+0x708>)
 8001fae:	e53a      	b.n	8001a26 <__aeabi_dsub+0x152>
 8001fb0:	2d00      	cmp	r5, #0
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x6e2>
 8001fb4:	e5f6      	b.n	8001ba4 <__aeabi_dsub+0x2d0>
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	1bda      	subs	r2, r3, r7
 8001fba:	4692      	mov	sl, r2
 8001fbc:	2f00      	cmp	r7, #0
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x6ee>
 8001fc0:	e66f      	b.n	8001ca2 <__aeabi_dsub+0x3ce>
 8001fc2:	2a38      	cmp	r2, #56	@ 0x38
 8001fc4:	dc05      	bgt.n	8001fd2 <__aeabi_dsub+0x6fe>
 8001fc6:	2680      	movs	r6, #128	@ 0x80
 8001fc8:	0436      	lsls	r6, r6, #16
 8001fca:	4334      	orrs	r4, r6
 8001fcc:	4688      	mov	r8, r1
 8001fce:	000e      	movs	r6, r1
 8001fd0:	e6d1      	b.n	8001d76 <__aeabi_dsub+0x4a2>
 8001fd2:	4688      	mov	r8, r1
 8001fd4:	000e      	movs	r6, r1
 8001fd6:	2501      	movs	r5, #1
 8001fd8:	e6de      	b.n	8001d98 <__aeabi_dsub+0x4c4>
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	000007ff 	.word	0x000007ff
 8001fe0:	ff7fffff 	.word	0xff7fffff
 8001fe4:	000007fe 	.word	0x000007fe
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	d100      	bne.n	8001fee <__aeabi_dsub+0x71a>
 8001fec:	e668      	b.n	8001cc0 <__aeabi_dsub+0x3ec>
 8001fee:	464b      	mov	r3, r9
 8001ff0:	1bd9      	subs	r1, r3, r7
 8001ff2:	2f00      	cmp	r7, #0
 8001ff4:	d101      	bne.n	8001ffa <__aeabi_dsub+0x726>
 8001ff6:	468a      	mov	sl, r1
 8001ff8:	e5a7      	b.n	8001b4a <__aeabi_dsub+0x276>
 8001ffa:	2701      	movs	r7, #1
 8001ffc:	2938      	cmp	r1, #56	@ 0x38
 8001ffe:	dd00      	ble.n	8002002 <__aeabi_dsub+0x72e>
 8002000:	e5c7      	b.n	8001b92 <__aeabi_dsub+0x2be>
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	0412      	lsls	r2, r2, #16
 8002006:	4314      	orrs	r4, r2
 8002008:	e5af      	b.n	8001b6a <__aeabi_dsub+0x296>
 800200a:	46c0      	nop			@ (mov r8, r8)

0800200c <__aeabi_i2d>:
 800200c:	b570      	push	{r4, r5, r6, lr}
 800200e:	2800      	cmp	r0, #0
 8002010:	d016      	beq.n	8002040 <__aeabi_i2d+0x34>
 8002012:	17c3      	asrs	r3, r0, #31
 8002014:	18c5      	adds	r5, r0, r3
 8002016:	405d      	eors	r5, r3
 8002018:	0fc4      	lsrs	r4, r0, #31
 800201a:	0028      	movs	r0, r5
 800201c:	f000 f8f0 	bl	8002200 <__clzsi2>
 8002020:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <__aeabi_i2d+0x58>)
 8002022:	1a1b      	subs	r3, r3, r0
 8002024:	055b      	lsls	r3, r3, #21
 8002026:	0d5b      	lsrs	r3, r3, #21
 8002028:	280a      	cmp	r0, #10
 800202a:	dc14      	bgt.n	8002056 <__aeabi_i2d+0x4a>
 800202c:	0002      	movs	r2, r0
 800202e:	002e      	movs	r6, r5
 8002030:	3215      	adds	r2, #21
 8002032:	4096      	lsls	r6, r2
 8002034:	220b      	movs	r2, #11
 8002036:	1a12      	subs	r2, r2, r0
 8002038:	40d5      	lsrs	r5, r2
 800203a:	032d      	lsls	r5, r5, #12
 800203c:	0b2d      	lsrs	r5, r5, #12
 800203e:	e003      	b.n	8002048 <__aeabi_i2d+0x3c>
 8002040:	2400      	movs	r4, #0
 8002042:	2300      	movs	r3, #0
 8002044:	2500      	movs	r5, #0
 8002046:	2600      	movs	r6, #0
 8002048:	051b      	lsls	r3, r3, #20
 800204a:	432b      	orrs	r3, r5
 800204c:	07e4      	lsls	r4, r4, #31
 800204e:	4323      	orrs	r3, r4
 8002050:	0030      	movs	r0, r6
 8002052:	0019      	movs	r1, r3
 8002054:	bd70      	pop	{r4, r5, r6, pc}
 8002056:	380b      	subs	r0, #11
 8002058:	4085      	lsls	r5, r0
 800205a:	032d      	lsls	r5, r5, #12
 800205c:	2600      	movs	r6, #0
 800205e:	0b2d      	lsrs	r5, r5, #12
 8002060:	e7f2      	b.n	8002048 <__aeabi_i2d+0x3c>
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	0000041e 	.word	0x0000041e

08002068 <__aeabi_f2d>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	0242      	lsls	r2, r0, #9
 800206c:	0043      	lsls	r3, r0, #1
 800206e:	0fc4      	lsrs	r4, r0, #31
 8002070:	20fe      	movs	r0, #254	@ 0xfe
 8002072:	0e1b      	lsrs	r3, r3, #24
 8002074:	1c59      	adds	r1, r3, #1
 8002076:	0a55      	lsrs	r5, r2, #9
 8002078:	4208      	tst	r0, r1
 800207a:	d00c      	beq.n	8002096 <__aeabi_f2d+0x2e>
 800207c:	21e0      	movs	r1, #224	@ 0xe0
 800207e:	0089      	lsls	r1, r1, #2
 8002080:	468c      	mov	ip, r1
 8002082:	076d      	lsls	r5, r5, #29
 8002084:	0b12      	lsrs	r2, r2, #12
 8002086:	4463      	add	r3, ip
 8002088:	051b      	lsls	r3, r3, #20
 800208a:	4313      	orrs	r3, r2
 800208c:	07e4      	lsls	r4, r4, #31
 800208e:	4323      	orrs	r3, r4
 8002090:	0028      	movs	r0, r5
 8002092:	0019      	movs	r1, r3
 8002094:	bd70      	pop	{r4, r5, r6, pc}
 8002096:	2b00      	cmp	r3, #0
 8002098:	d114      	bne.n	80020c4 <__aeabi_f2d+0x5c>
 800209a:	2d00      	cmp	r5, #0
 800209c:	d01b      	beq.n	80020d6 <__aeabi_f2d+0x6e>
 800209e:	0028      	movs	r0, r5
 80020a0:	f000 f8ae 	bl	8002200 <__clzsi2>
 80020a4:	280a      	cmp	r0, #10
 80020a6:	dc1c      	bgt.n	80020e2 <__aeabi_f2d+0x7a>
 80020a8:	230b      	movs	r3, #11
 80020aa:	002a      	movs	r2, r5
 80020ac:	1a1b      	subs	r3, r3, r0
 80020ae:	40da      	lsrs	r2, r3
 80020b0:	0003      	movs	r3, r0
 80020b2:	3315      	adds	r3, #21
 80020b4:	409d      	lsls	r5, r3
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <__aeabi_f2d+0x88>)
 80020b8:	0312      	lsls	r2, r2, #12
 80020ba:	1a1b      	subs	r3, r3, r0
 80020bc:	055b      	lsls	r3, r3, #21
 80020be:	0b12      	lsrs	r2, r2, #12
 80020c0:	0d5b      	lsrs	r3, r3, #21
 80020c2:	e7e1      	b.n	8002088 <__aeabi_f2d+0x20>
 80020c4:	2d00      	cmp	r5, #0
 80020c6:	d009      	beq.n	80020dc <__aeabi_f2d+0x74>
 80020c8:	0b13      	lsrs	r3, r2, #12
 80020ca:	2280      	movs	r2, #128	@ 0x80
 80020cc:	0312      	lsls	r2, r2, #12
 80020ce:	431a      	orrs	r2, r3
 80020d0:	076d      	lsls	r5, r5, #29
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <__aeabi_f2d+0x8c>)
 80020d4:	e7d8      	b.n	8002088 <__aeabi_f2d+0x20>
 80020d6:	2300      	movs	r3, #0
 80020d8:	2200      	movs	r2, #0
 80020da:	e7d5      	b.n	8002088 <__aeabi_f2d+0x20>
 80020dc:	2200      	movs	r2, #0
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <__aeabi_f2d+0x8c>)
 80020e0:	e7d2      	b.n	8002088 <__aeabi_f2d+0x20>
 80020e2:	0003      	movs	r3, r0
 80020e4:	002a      	movs	r2, r5
 80020e6:	3b0b      	subs	r3, #11
 80020e8:	409a      	lsls	r2, r3
 80020ea:	2500      	movs	r5, #0
 80020ec:	e7e3      	b.n	80020b6 <__aeabi_f2d+0x4e>
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	00000389 	.word	0x00000389
 80020f4:	000007ff 	.word	0x000007ff

080020f8 <__aeabi_d2f>:
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	030f      	lsls	r7, r1, #12
 80020fe:	0d5b      	lsrs	r3, r3, #21
 8002100:	4c3b      	ldr	r4, [pc, #236]	@ (80021f0 <__aeabi_d2f+0xf8>)
 8002102:	0f45      	lsrs	r5, r0, #29
 8002104:	b083      	sub	sp, #12
 8002106:	0a7f      	lsrs	r7, r7, #9
 8002108:	1c5e      	adds	r6, r3, #1
 800210a:	432f      	orrs	r7, r5
 800210c:	9000      	str	r0, [sp, #0]
 800210e:	9101      	str	r1, [sp, #4]
 8002110:	0fca      	lsrs	r2, r1, #31
 8002112:	00c5      	lsls	r5, r0, #3
 8002114:	4226      	tst	r6, r4
 8002116:	d00b      	beq.n	8002130 <__aeabi_d2f+0x38>
 8002118:	4936      	ldr	r1, [pc, #216]	@ (80021f4 <__aeabi_d2f+0xfc>)
 800211a:	185c      	adds	r4, r3, r1
 800211c:	2cfe      	cmp	r4, #254	@ 0xfe
 800211e:	dd13      	ble.n	8002148 <__aeabi_d2f+0x50>
 8002120:	20ff      	movs	r0, #255	@ 0xff
 8002122:	2300      	movs	r3, #0
 8002124:	05c0      	lsls	r0, r0, #23
 8002126:	4318      	orrs	r0, r3
 8002128:	07d2      	lsls	r2, r2, #31
 800212a:	4310      	orrs	r0, r2
 800212c:	b003      	add	sp, #12
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <__aeabi_d2f+0x42>
 8002134:	2000      	movs	r0, #0
 8002136:	2300      	movs	r3, #0
 8002138:	e7f4      	b.n	8002124 <__aeabi_d2f+0x2c>
 800213a:	433d      	orrs	r5, r7
 800213c:	d0f0      	beq.n	8002120 <__aeabi_d2f+0x28>
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	03db      	lsls	r3, r3, #15
 8002142:	20ff      	movs	r0, #255	@ 0xff
 8002144:	433b      	orrs	r3, r7
 8002146:	e7ed      	b.n	8002124 <__aeabi_d2f+0x2c>
 8002148:	2c00      	cmp	r4, #0
 800214a:	dd14      	ble.n	8002176 <__aeabi_d2f+0x7e>
 800214c:	9b00      	ldr	r3, [sp, #0]
 800214e:	00ff      	lsls	r7, r7, #3
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	1e58      	subs	r0, r3, #1
 8002154:	4183      	sbcs	r3, r0
 8002156:	0f69      	lsrs	r1, r5, #29
 8002158:	433b      	orrs	r3, r7
 800215a:	430b      	orrs	r3, r1
 800215c:	0759      	lsls	r1, r3, #29
 800215e:	d041      	beq.n	80021e4 <__aeabi_d2f+0xec>
 8002160:	210f      	movs	r1, #15
 8002162:	4019      	ands	r1, r3
 8002164:	2904      	cmp	r1, #4
 8002166:	d028      	beq.n	80021ba <__aeabi_d2f+0xc2>
 8002168:	3304      	adds	r3, #4
 800216a:	0159      	lsls	r1, r3, #5
 800216c:	d525      	bpl.n	80021ba <__aeabi_d2f+0xc2>
 800216e:	3401      	adds	r4, #1
 8002170:	2300      	movs	r3, #0
 8002172:	b2e0      	uxtb	r0, r4
 8002174:	e7d6      	b.n	8002124 <__aeabi_d2f+0x2c>
 8002176:	0021      	movs	r1, r4
 8002178:	3117      	adds	r1, #23
 800217a:	dbdb      	blt.n	8002134 <__aeabi_d2f+0x3c>
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	201e      	movs	r0, #30
 8002180:	0409      	lsls	r1, r1, #16
 8002182:	4339      	orrs	r1, r7
 8002184:	1b00      	subs	r0, r0, r4
 8002186:	281f      	cmp	r0, #31
 8002188:	dd1b      	ble.n	80021c2 <__aeabi_d2f+0xca>
 800218a:	2602      	movs	r6, #2
 800218c:	4276      	negs	r6, r6
 800218e:	1b34      	subs	r4, r6, r4
 8002190:	000e      	movs	r6, r1
 8002192:	40e6      	lsrs	r6, r4
 8002194:	0034      	movs	r4, r6
 8002196:	2820      	cmp	r0, #32
 8002198:	d004      	beq.n	80021a4 <__aeabi_d2f+0xac>
 800219a:	4817      	ldr	r0, [pc, #92]	@ (80021f8 <__aeabi_d2f+0x100>)
 800219c:	4684      	mov	ip, r0
 800219e:	4463      	add	r3, ip
 80021a0:	4099      	lsls	r1, r3
 80021a2:	430d      	orrs	r5, r1
 80021a4:	002b      	movs	r3, r5
 80021a6:	1e59      	subs	r1, r3, #1
 80021a8:	418b      	sbcs	r3, r1
 80021aa:	4323      	orrs	r3, r4
 80021ac:	0759      	lsls	r1, r3, #29
 80021ae:	d015      	beq.n	80021dc <__aeabi_d2f+0xe4>
 80021b0:	210f      	movs	r1, #15
 80021b2:	2400      	movs	r4, #0
 80021b4:	4019      	ands	r1, r3
 80021b6:	2904      	cmp	r1, #4
 80021b8:	d117      	bne.n	80021ea <__aeabi_d2f+0xf2>
 80021ba:	019b      	lsls	r3, r3, #6
 80021bc:	0a5b      	lsrs	r3, r3, #9
 80021be:	b2e0      	uxtb	r0, r4
 80021c0:	e7b0      	b.n	8002124 <__aeabi_d2f+0x2c>
 80021c2:	4c0e      	ldr	r4, [pc, #56]	@ (80021fc <__aeabi_d2f+0x104>)
 80021c4:	191c      	adds	r4, r3, r4
 80021c6:	002b      	movs	r3, r5
 80021c8:	40a5      	lsls	r5, r4
 80021ca:	40c3      	lsrs	r3, r0
 80021cc:	40a1      	lsls	r1, r4
 80021ce:	1e68      	subs	r0, r5, #1
 80021d0:	4185      	sbcs	r5, r0
 80021d2:	4329      	orrs	r1, r5
 80021d4:	430b      	orrs	r3, r1
 80021d6:	2400      	movs	r4, #0
 80021d8:	0759      	lsls	r1, r3, #29
 80021da:	d1c1      	bne.n	8002160 <__aeabi_d2f+0x68>
 80021dc:	019b      	lsls	r3, r3, #6
 80021de:	2000      	movs	r0, #0
 80021e0:	0a5b      	lsrs	r3, r3, #9
 80021e2:	e79f      	b.n	8002124 <__aeabi_d2f+0x2c>
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	b2e0      	uxtb	r0, r4
 80021e8:	e79c      	b.n	8002124 <__aeabi_d2f+0x2c>
 80021ea:	3304      	adds	r3, #4
 80021ec:	e7e5      	b.n	80021ba <__aeabi_d2f+0xc2>
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	fffffc80 	.word	0xfffffc80
 80021f8:	fffffca2 	.word	0xfffffca2
 80021fc:	fffffc82 	.word	0xfffffc82

08002200 <__clzsi2>:
 8002200:	211c      	movs	r1, #28
 8002202:	2301      	movs	r3, #1
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	4298      	cmp	r0, r3
 8002208:	d301      	bcc.n	800220e <__clzsi2+0xe>
 800220a:	0c00      	lsrs	r0, r0, #16
 800220c:	3910      	subs	r1, #16
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	4298      	cmp	r0, r3
 8002212:	d301      	bcc.n	8002218 <__clzsi2+0x18>
 8002214:	0a00      	lsrs	r0, r0, #8
 8002216:	3908      	subs	r1, #8
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	4298      	cmp	r0, r3
 800221c:	d301      	bcc.n	8002222 <__clzsi2+0x22>
 800221e:	0900      	lsrs	r0, r0, #4
 8002220:	3904      	subs	r1, #4
 8002222:	a202      	add	r2, pc, #8	@ (adr r2, 800222c <__clzsi2+0x2c>)
 8002224:	5c10      	ldrb	r0, [r2, r0]
 8002226:	1840      	adds	r0, r0, r1
 8002228:	4770      	bx	lr
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	02020304 	.word	0x02020304
 8002230:	01010101 	.word	0x01010101
	...

0800223c <eeprom_write_float>:
    return HAL_OK;
}

// #define EEPROM_I2C_ADDRESS 0x50 << 1 is defined in header file
static HAL_StatusTypeDef eeprom_write_float(I2C_HandleTypeDef *i2c, uint16_t eeprom_mem_addr, float value)
{
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	230a      	movs	r3, #10
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	1c0a      	adds	r2, r1, #0
 800224c:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 800224e:	231e      	movs	r3, #30
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]

	uint8_t *value_bytes = (uint8_t *)&value;
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	61bb      	str	r3, [r7, #24]
	uint8_t send_buffer[3];
	for(uint8_t i = 0; i < 4; i++)
 800225a:	231f      	movs	r3, #31
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e03b      	b.n	80022dc <eeprom_write_float+0xa0>
	{
		uint16_t eeprom_store_addr = eeprom_mem_addr + i;
 8002264:	241f      	movs	r4, #31
 8002266:	193b      	adds	r3, r7, r4
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b299      	uxth	r1, r3
 800226c:	2016      	movs	r0, #22
 800226e:	183b      	adds	r3, r7, r0
 8002270:	220a      	movs	r2, #10
 8002272:	18ba      	adds	r2, r7, r2
 8002274:	8812      	ldrh	r2, [r2, #0]
 8002276:	188a      	adds	r2, r1, r2
 8002278:	801a      	strh	r2, [r3, #0]
		send_buffer[0] = (uint8_t)((eeprom_store_addr >> 8) & 0xFF);  // High Byte
 800227a:	183b      	adds	r3, r7, r0
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	b29b      	uxth	r3, r3
 8002282:	b2da      	uxtb	r2, r3
 8002284:	2110      	movs	r1, #16
 8002286:	187b      	adds	r3, r7, r1
 8002288:	701a      	strb	r2, [r3, #0]
		send_buffer[1] = (uint8_t)(eeprom_store_addr & 0xFF);         // Low Byte
 800228a:	183b      	adds	r3, r7, r0
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	187b      	adds	r3, r7, r1
 8002292:	705a      	strb	r2, [r3, #1]
		send_buffer[2] = value_bytes[i];
 8002294:	193b      	adds	r3, r7, r4
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	18d3      	adds	r3, r2, r3
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	709a      	strb	r2, [r3, #2]
		retval = HAL_I2C_Master_Transmit(i2c, EEPROM_I2C_ADDRESS, send_buffer, 3, HAL_MAX_DELAY);
 80022a2:	251e      	movs	r5, #30
 80022a4:	197c      	adds	r4, r7, r5
 80022a6:	187a      	adds	r2, r7, r1
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	2301      	movs	r3, #1
 80022ac:	425b      	negs	r3, r3
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2303      	movs	r3, #3
 80022b2:	21a0      	movs	r1, #160	@ 0xa0
 80022b4:	f001 fc7a 	bl	8003bac <HAL_I2C_Master_Transmit>
 80022b8:	0003      	movs	r3, r0
 80022ba:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 80022bc:	197b      	adds	r3, r7, r5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <eeprom_write_float+0x8e>
		{
			return retval;
 80022c4:	197b      	adds	r3, r7, r5
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	e00e      	b.n	80022e8 <eeprom_write_float+0xac>
		}
		HAL_Delay(10);
 80022ca:	200a      	movs	r0, #10
 80022cc:	f001 f924 	bl	8003518 <HAL_Delay>
	for(uint8_t i = 0; i < 4; i++)
 80022d0:	211f      	movs	r1, #31
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	3201      	adds	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	231f      	movs	r3, #31
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d9be      	bls.n	8002264 <eeprom_write_float+0x28>
	}
	return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b008      	add	sp, #32
 80022ee:	bdb0      	pop	{r4, r5, r7, pc}

080022f0 <eeprom_read_float>:
	return HAL_OK;
}


static HAL_StatusTypeDef eeprom_read_float(I2C_HandleTypeDef *i2c, uint16_t eeprom_mem_addr, float *value_to_read)
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b08a      	sub	sp, #40	@ 0x28
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	230a      	movs	r3, #10
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	1c0a      	adds	r2, r1, #0
 8002300:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 8002302:	231e      	movs	r3, #30
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]

	uint8_t value_bytes[4];
	uint8_t send_buffer[2];
	for(uint8_t i = 0; i < 4; i++)
 800230a:	231f      	movs	r3, #31
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e051      	b.n	80023b8 <eeprom_read_float+0xc8>
	{
		uint16_t eeprom_store_addr = eeprom_mem_addr + i;
 8002314:	231f      	movs	r3, #31
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b299      	uxth	r1, r3
 800231c:	201c      	movs	r0, #28
 800231e:	183b      	adds	r3, r7, r0
 8002320:	220a      	movs	r2, #10
 8002322:	18ba      	adds	r2, r7, r2
 8002324:	8812      	ldrh	r2, [r2, #0]
 8002326:	188a      	adds	r2, r1, r2
 8002328:	801a      	strh	r2, [r3, #0]
		send_buffer[0] = (uint8_t)((eeprom_store_addr >> 8) & 0xFF);  // High Byte
 800232a:	0001      	movs	r1, r0
 800232c:	187b      	adds	r3, r7, r1
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	b29b      	uxth	r3, r3
 8002334:	b2da      	uxtb	r2, r3
 8002336:	2014      	movs	r0, #20
 8002338:	183b      	adds	r3, r7, r0
 800233a:	701a      	strb	r2, [r3, #0]
		send_buffer[1] = (uint8_t)(eeprom_store_addr & 0xFF);         // Low Byte
 800233c:	187b      	adds	r3, r7, r1
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	183b      	adds	r3, r7, r0
 8002344:	705a      	strb	r2, [r3, #1]

		retval = HAL_I2C_Master_Transmit(i2c, EEPROM_I2C_ADDRESS, send_buffer, 2, HAL_MAX_DELAY);
 8002346:	251e      	movs	r5, #30
 8002348:	197c      	adds	r4, r7, r5
 800234a:	183a      	adds	r2, r7, r0
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	2301      	movs	r3, #1
 8002350:	425b      	negs	r3, r3
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2302      	movs	r3, #2
 8002356:	21a0      	movs	r1, #160	@ 0xa0
 8002358:	f001 fc28 	bl	8003bac <HAL_I2C_Master_Transmit>
 800235c:	0003      	movs	r3, r0
 800235e:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 8002360:	197b      	adds	r3, r7, r5
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <eeprom_read_float+0x7e>
		{
			return retval;
 8002368:	197b      	adds	r3, r7, r5
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	e033      	b.n	80023d6 <eeprom_read_float+0xe6>
		}
		HAL_Delay(10);
 800236e:	200a      	movs	r0, #10
 8002370:	f001 f8d2 	bl	8003518 <HAL_Delay>

		retval = HAL_I2C_Master_Receive(i2c, EEPROM_I2C_ADDRESS, &(value_bytes[i]), 1, HAL_MAX_DELAY);
 8002374:	231f      	movs	r3, #31
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2218      	movs	r2, #24
 800237c:	18ba      	adds	r2, r7, r2
 800237e:	18d2      	adds	r2, r2, r3
 8002380:	251e      	movs	r5, #30
 8002382:	197c      	adds	r4, r7, r5
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	2301      	movs	r3, #1
 8002388:	425b      	negs	r3, r3
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2301      	movs	r3, #1
 800238e:	21a0      	movs	r1, #160	@ 0xa0
 8002390:	f001 fd36 	bl	8003e00 <HAL_I2C_Master_Receive>
 8002394:	0003      	movs	r3, r0
 8002396:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 8002398:	197b      	adds	r3, r7, r5
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <eeprom_read_float+0xb6>
		{
			return retval;
 80023a0:	197b      	adds	r3, r7, r5
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	e017      	b.n	80023d6 <eeprom_read_float+0xe6>
		}
		HAL_Delay(10);
 80023a6:	200a      	movs	r0, #10
 80023a8:	f001 f8b6 	bl	8003518 <HAL_Delay>
	for(uint8_t i = 0; i < 4; i++)
 80023ac:	211f      	movs	r1, #31
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	3201      	adds	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	231f      	movs	r3, #31
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d9a8      	bls.n	8002314 <eeprom_read_float+0x24>
	}

	memcpy(value_to_read, value_bytes, sizeof(float));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	2318      	movs	r3, #24
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	0010      	movs	r0, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	2304      	movs	r3, #4
 80023ce:	001a      	movs	r2, r3
 80023d0:	f003 fc9e 	bl	8005d10 <memcpy>

	return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b008      	add	sp, #32
 80023dc:	bdb0      	pop	{r4, r5, r7, pc}

080023de <init_climate_data>:
 * This function needs to initialize a new climate_data struct
 * 1) get current values from sht41
 * 2) get min/max values from eeprom
 */
HAL_StatusTypeDef init_climate_data(climate_data * cdata, I2C_HandleTypeDef * hi2c)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 80023e8:	2317      	movs	r3, #23
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
	cdata->hal_i2c = hi2c;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	619a      	str	r2, [r3, #24]
	float current_climate_vals[2];
	if(get_temperature_sht41(cdata->hal_i2c, current_climate_vals) != HAL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	220c      	movs	r2, #12
 80023fc:	18ba      	adds	r2, r7, r2
 80023fe:	0011      	movs	r1, r2
 8002400:	0018      	movs	r0, r3
 8002402:	f000 fe15 	bl	8003030 <get_temperature_sht41>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d001      	beq.n	800240e <init_climate_data+0x30>
	{
		return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e011      	b.n	8002432 <init_climate_data+0x54>
	}
	cdata->current_temp = current_climate_vals[0];
 800240e:	210c      	movs	r1, #12
 8002410:	187b      	adds	r3, r7, r1
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]
	cdata->current_hum  = current_climate_vals[1];
 8002418:	187b      	adds	r3, r7, r1
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]

	if(read_eeprom_into_climate_data(cdata) != HAL_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 f88e 	bl	8002544 <read_eeprom_into_climate_data>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d001      	beq.n	8002430 <init_climate_data+0x52>
	{
		return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <init_climate_data+0x54>
	}
	return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b006      	add	sp, #24
 8002438:	bd80      	pop	{r7, pc}

0800243a <update_climate_data_in_eeprom>:
 * Compares the current values to the input climate_data pointer.
 * Update input climate_data values with new values where appropriate.
 * If anything changed, write climate_data to eeprom.
 */
HAL_StatusTypeDef update_climate_data_in_eeprom(climate_data * data)
{
 800243a:	b5b0      	push	{r4, r5, r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retval = HAL_OK;
 8002442:	2517      	movs	r5, #23
 8002444:	197b      	adds	r3, r7, r5
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
	float current_climate_vals[2];
	retval |= get_temperature_sht41(data->hal_i2c, current_climate_vals);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	240c      	movs	r4, #12
 8002450:	193a      	adds	r2, r7, r4
 8002452:	0011      	movs	r1, r2
 8002454:	0018      	movs	r0, r3
 8002456:	f000 fdeb 	bl	8003030 <get_temperature_sht41>
 800245a:	0003      	movs	r3, r0
 800245c:	0019      	movs	r1, r3
 800245e:	197b      	adds	r3, r7, r5
 8002460:	197a      	adds	r2, r7, r5
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	701a      	strb	r2, [r3, #0]

	data->current_temp = current_climate_vals[0];
 8002468:	193b      	adds	r3, r7, r4
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	611a      	str	r2, [r3, #16]
	data->current_hum = current_climate_vals[1];
 8002470:	193b      	adds	r3, r7, r4
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	615a      	str	r2, [r3, #20]

	uint8_t updateEEPROMorNot = 0;
 8002478:	2516      	movs	r5, #22
 800247a:	197b      	adds	r3, r7, r5
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
	if(current_climate_vals[0] > data->max_temp)
 8002480:	193b      	adds	r3, r7, r4
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1c19      	adds	r1, r3, #0
 800248a:	1c10      	adds	r0, r2, #0
 800248c:	f7fd ffe2 	bl	8000454 <__aeabi_fcmpgt>
 8002490:	1e03      	subs	r3, r0, #0
 8002492:	d006      	beq.n	80024a2 <update_climate_data_in_eeprom+0x68>
	{
		data->max_temp = current_climate_vals[0];
 8002494:	193b      	adds	r3, r7, r4
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	601a      	str	r2, [r3, #0]
		updateEEPROMorNot = 1;
 800249c:	197b      	adds	r3, r7, r5
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[0] < data->min_temp)
 80024a2:	240c      	movs	r4, #12
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	1c19      	adds	r1, r3, #0
 80024ae:	1c10      	adds	r0, r2, #0
 80024b0:	f7fd ffbc 	bl	800042c <__aeabi_fcmplt>
 80024b4:	1e03      	subs	r3, r0, #0
 80024b6:	d007      	beq.n	80024c8 <update_climate_data_in_eeprom+0x8e>
	{
		data->min_temp = current_climate_vals[0];
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	605a      	str	r2, [r3, #4]
		updateEEPROMorNot = 1;
 80024c0:	2316      	movs	r3, #22
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[1] > data->max_hum)
 80024c8:	240c      	movs	r4, #12
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	1c19      	adds	r1, r3, #0
 80024d4:	1c10      	adds	r0, r2, #0
 80024d6:	f7fd ffbd 	bl	8000454 <__aeabi_fcmpgt>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d007      	beq.n	80024ee <update_climate_data_in_eeprom+0xb4>
	{
		data->max_hum = current_climate_vals[1];
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	609a      	str	r2, [r3, #8]
		updateEEPROMorNot = 1;
 80024e6:	2316      	movs	r3, #22
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[1] < data->min_hum)
 80024ee:	240c      	movs	r4, #12
 80024f0:	193b      	adds	r3, r7, r4
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	1c19      	adds	r1, r3, #0
 80024fa:	1c10      	adds	r0, r2, #0
 80024fc:	f7fd ff96 	bl	800042c <__aeabi_fcmplt>
 8002500:	1e03      	subs	r3, r0, #0
 8002502:	d007      	beq.n	8002514 <update_climate_data_in_eeprom+0xda>
	{
		data->min_hum = current_climate_vals[1];
 8002504:	193b      	adds	r3, r7, r4
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
		updateEEPROMorNot = 1;
 800250c:	2316      	movs	r3, #22
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
	}

	if(updateEEPROMorNot)
 8002514:	2316      	movs	r3, #22
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <update_climate_data_in_eeprom+0xfc>
	{
		retval|= write_eeprom_from_climate_data(data);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 f84f 	bl	80025c4 <write_eeprom_from_climate_data>
 8002526:	0003      	movs	r3, r0
 8002528:	0019      	movs	r1, r3
 800252a:	2217      	movs	r2, #23
 800252c:	18bb      	adds	r3, r7, r2
 800252e:	18ba      	adds	r2, r7, r2
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	701a      	strb	r2, [r3, #0]
	}


	return retval;
 8002536:	2317      	movs	r3, #23
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	781b      	ldrb	r3, [r3, #0]
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b006      	add	sp, #24
 8002542:	bdb0      	pop	{r4, r5, r7, pc}

08002544 <read_eeprom_into_climate_data>:

HAL_StatusTypeDef read_eeprom_into_climate_data(climate_data * data)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	if( eeprom_read_float(data->hal_i2c, EEPROM_MAX_TEMP_ADDR, &(data->max_temp)) != HAL_OK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4918      	ldr	r1, [pc, #96]	@ (80025b4 <read_eeprom_into_climate_data+0x70>)
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff fecb 	bl	80022f0 <eeprom_read_float>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d001      	beq.n	8002562 <read_eeprom_into_climate_data+0x1e>
	{
		return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e023      	b.n	80025aa <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MIN_TEMP_ADDR, &(data->min_temp)) != HAL_OK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6998      	ldr	r0, [r3, #24]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3304      	adds	r3, #4
 800256a:	4913      	ldr	r1, [pc, #76]	@ (80025b8 <read_eeprom_into_climate_data+0x74>)
 800256c:	001a      	movs	r2, r3
 800256e:	f7ff febf 	bl	80022f0 <eeprom_read_float>
 8002572:	1e03      	subs	r3, r0, #0
 8002574:	d001      	beq.n	800257a <read_eeprom_into_climate_data+0x36>
	{
		return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e017      	b.n	80025aa <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MAX_HUM_ADDR, &(data->max_hum)) != HAL_OK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6998      	ldr	r0, [r3, #24]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3308      	adds	r3, #8
 8002582:	490e      	ldr	r1, [pc, #56]	@ (80025bc <read_eeprom_into_climate_data+0x78>)
 8002584:	001a      	movs	r2, r3
 8002586:	f7ff feb3 	bl	80022f0 <eeprom_read_float>
 800258a:	1e03      	subs	r3, r0, #0
 800258c:	d001      	beq.n	8002592 <read_eeprom_into_climate_data+0x4e>
	{
		return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00b      	b.n	80025aa <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MIN_HUM_ADDR, &(data->min_hum)) != HAL_OK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6998      	ldr	r0, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	330c      	adds	r3, #12
 800259a:	4909      	ldr	r1, [pc, #36]	@ (80025c0 <read_eeprom_into_climate_data+0x7c>)
 800259c:	001a      	movs	r2, r3
 800259e:	f7ff fea7 	bl	80022f0 <eeprom_read_float>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <read_eeprom_into_climate_data+0x66>
	{
		return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e7ff      	b.n	80025aa <read_eeprom_into_climate_data+0x66>
	}
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	00001555 	.word	0x00001555
 80025b8:	00001559 	.word	0x00001559
 80025bc:	0000155d 	.word	0x0000155d
 80025c0:	00001561 	.word	0x00001561

080025c4 <write_eeprom_from_climate_data>:

HAL_StatusTypeDef write_eeprom_from_climate_data(climate_data * data)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	if( eeprom_write_float(data->hal_i2c, EEPROM_MAX_TEMP_ADDR, data->max_temp) != HAL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6998      	ldr	r0, [r3, #24]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4917      	ldr	r1, [pc, #92]	@ (8002634 <write_eeprom_from_climate_data+0x70>)
 80025d6:	1c1a      	adds	r2, r3, #0
 80025d8:	f7ff fe30 	bl	800223c <eeprom_write_float>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d001      	beq.n	80025e4 <write_eeprom_from_climate_data+0x20>
	{
		return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e023      	b.n	800262c <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MIN_TEMP_ADDR, data->min_temp) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6998      	ldr	r0, [r3, #24]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4912      	ldr	r1, [pc, #72]	@ (8002638 <write_eeprom_from_climate_data+0x74>)
 80025ee:	1c1a      	adds	r2, r3, #0
 80025f0:	f7ff fe24 	bl	800223c <eeprom_write_float>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d001      	beq.n	80025fc <write_eeprom_from_climate_data+0x38>
	{
		return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e017      	b.n	800262c <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MAX_HUM_ADDR, data->max_hum) != HAL_OK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6998      	ldr	r0, [r3, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	490d      	ldr	r1, [pc, #52]	@ (800263c <write_eeprom_from_climate_data+0x78>)
 8002606:	1c1a      	adds	r2, r3, #0
 8002608:	f7ff fe18 	bl	800223c <eeprom_write_float>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <write_eeprom_from_climate_data+0x50>
	{
		return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e00b      	b.n	800262c <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MIN_HUM_ADDR, data->min_hum) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6998      	ldr	r0, [r3, #24]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4908      	ldr	r1, [pc, #32]	@ (8002640 <write_eeprom_from_climate_data+0x7c>)
 800261e:	1c1a      	adds	r2, r3, #0
 8002620:	f7ff fe0c 	bl	800223c <eeprom_write_float>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <write_eeprom_from_climate_data+0x68>
	{
		return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e7ff      	b.n	800262c <write_eeprom_from_climate_data+0x68>
	}
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}
 8002634:	00001555 	.word	0x00001555
 8002638:	00001559 	.word	0x00001559
 800263c:	0000155d 	.word	0x0000155d
 8002640:	00001561 	.word	0x00001561

08002644 <reset_climate_data_eeprom>:

HAL_StatusTypeDef reset_climate_data_eeprom(I2C_HandleTypeDef * hi2c)
{
 8002644:	b5b0      	push	{r4, r5, r7, lr}
 8002646:	b08c      	sub	sp, #48	@ 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retval = HAL_OK;
 800264c:	252f      	movs	r5, #47	@ 0x2f
 800264e:	197b      	adds	r3, r7, r5
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
	float current_climate_vals[2];
	retval |= get_temperature_sht41(hi2c, current_climate_vals);
 8002654:	2424      	movs	r4, #36	@ 0x24
 8002656:	193a      	adds	r2, r7, r4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f000 fce7 	bl	8003030 <get_temperature_sht41>
 8002662:	0003      	movs	r3, r0
 8002664:	0019      	movs	r1, r3
 8002666:	197b      	adds	r3, r7, r5
 8002668:	197a      	adds	r2, r7, r5
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]

	climate_data cdata;
	cdata.current_temp = current_climate_vals[0];
 8002670:	0020      	movs	r0, r4
 8002672:	183b      	adds	r3, r7, r0
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	2108      	movs	r1, #8
 8002678:	187b      	adds	r3, r7, r1
 800267a:	611a      	str	r2, [r3, #16]
	cdata.current_hum  = current_climate_vals[1];
 800267c:	183b      	adds	r3, r7, r0
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	187b      	adds	r3, r7, r1
 8002682:	615a      	str	r2, [r3, #20]
	cdata.max_temp = current_climate_vals[0];
 8002684:	183b      	adds	r3, r7, r0
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	187b      	adds	r3, r7, r1
 800268a:	601a      	str	r2, [r3, #0]
	cdata.min_temp = current_climate_vals[0];
 800268c:	183b      	adds	r3, r7, r0
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	187b      	adds	r3, r7, r1
 8002692:	605a      	str	r2, [r3, #4]
	cdata.max_hum  = current_climate_vals[1];
 8002694:	183b      	adds	r3, r7, r0
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	187b      	adds	r3, r7, r1
 800269a:	609a      	str	r2, [r3, #8]
	cdata.min_hum  = current_climate_vals[1];
 800269c:	183b      	adds	r3, r7, r0
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	60da      	str	r2, [r3, #12]
	cdata.hal_i2c = hi2c;
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]

	retval |= write_eeprom_from_climate_data(&cdata);
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff ff89 	bl	80025c4 <write_eeprom_from_climate_data>
 80026b2:	0003      	movs	r3, r0
 80026b4:	0019      	movs	r1, r3
 80026b6:	197b      	adds	r3, r7, r5
 80026b8:	197a      	adds	r2, r7, r5
 80026ba:	7812      	ldrb	r2, [r2, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]

	return retval;
 80026c0:	197b      	adds	r3, r7, r5
 80026c2:	781b      	ldrb	r3, [r3, #0]
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b00c      	add	sp, #48	@ 0x30
 80026ca:	bdb0      	pop	{r4, r5, r7, pc}

080026cc <lcd_send_command>:
#include "lcd.h"



static HAL_StatusTypeDef lcd_send_command(I2C_HandleTypeDef *hi2c, char cmd)
{
 80026cc:	b5b0      	push	{r4, r5, r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	000a      	movs	r2, r1
 80026d6:	1cfb      	adds	r3, r7, #3
 80026d8:	701a      	strb	r2, [r3, #0]
	char data_upper, data_lower;
	data_upper = (cmd & 0xf0);
 80026da:	200f      	movs	r0, #15
 80026dc:	183b      	adds	r3, r7, r0
 80026de:	1cfa      	adds	r2, r7, #3
 80026e0:	7812      	ldrb	r2, [r2, #0]
 80026e2:	210f      	movs	r1, #15
 80026e4:	438a      	bics	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
	data_lower = ((cmd << 4) & 0xf0);
 80026e8:	1cfb      	adds	r3, r7, #3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	011a      	lsls	r2, r3, #4
 80026ee:	240e      	movs	r4, #14
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	701a      	strb	r2, [r3, #0]
	uint8_t data[4];
	data[0] = data_upper | 0x0C; //en=1, rs=0 -> bxxxx1100
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	220c      	movs	r2, #12
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	2108      	movs	r1, #8
 8002700:	187b      	adds	r3, r7, r1
 8002702:	701a      	strb	r2, [r3, #0]
	data[1] = data_upper | 0x08; //en=0, rs=0 -> bxxxx1000
 8002704:	183b      	adds	r3, r7, r0
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2208      	movs	r2, #8
 800270a:	4313      	orrs	r3, r2
 800270c:	b2da      	uxtb	r2, r3
 800270e:	187b      	adds	r3, r7, r1
 8002710:	705a      	strb	r2, [r3, #1]
	data[2] = data_lower | 0x0C;
 8002712:	193b      	adds	r3, r7, r4
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	220c      	movs	r2, #12
 8002718:	4313      	orrs	r3, r2
 800271a:	b2da      	uxtb	r2, r3
 800271c:	187b      	adds	r3, r7, r1
 800271e:	709a      	strb	r2, [r3, #2]
	data[3] = data_lower | 0x08;
 8002720:	193b      	adds	r3, r7, r4
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	4313      	orrs	r3, r2
 8002728:	b2da      	uxtb	r2, r3
 800272a:	187b      	adds	r3, r7, r1
 800272c:	70da      	strb	r2, [r3, #3]
	HAL_StatusTypeDef retval;
	retval = HAL_I2C_Master_Transmit (hi2c, LCD_I2C_ADDR, data, 4, 100);
 800272e:	250d      	movs	r5, #13
 8002730:	197c      	adds	r4, r7, r5
 8002732:	187a      	adds	r2, r7, r1
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	2364      	movs	r3, #100	@ 0x64
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2304      	movs	r3, #4
 800273c:	214e      	movs	r1, #78	@ 0x4e
 800273e:	f001 fa35 	bl	8003bac <HAL_I2C_Master_Transmit>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
	return retval;
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781b      	ldrb	r3, [r3, #0]
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b004      	add	sp, #16
 8002750:	bdb0      	pop	{r4, r5, r7, pc}

08002752 <lcd_send_data>:

static HAL_StatusTypeDef lcd_send_data(I2C_HandleTypeDef *hi2c, char data)
{
 8002752:	b5b0      	push	{r4, r5, r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af02      	add	r7, sp, #8
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	000a      	movs	r2, r1
 800275c:	1cfb      	adds	r3, r7, #3
 800275e:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8002760:	200f      	movs	r0, #15
 8002762:	183b      	adds	r3, r7, r0
 8002764:	1cfa      	adds	r2, r7, #3
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	210f      	movs	r1, #15
 800276a:	438a      	bics	r2, r1
 800276c:	701a      	strb	r2, [r3, #0]
	data_l = ((data << 4) & 0xf0);
 800276e:	1cfb      	adds	r3, r7, #3
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	011a      	lsls	r2, r3, #4
 8002774:	240e      	movs	r4, #14
 8002776:	193b      	adds	r3, r7, r4
 8002778:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1 -> bxxxx1101
 800277a:	183b      	adds	r3, r7, r0
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	220d      	movs	r2, #13
 8002780:	4313      	orrs	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	2108      	movs	r1, #8
 8002786:	187b      	adds	r3, r7, r1
 8002788:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u | 0x09;  //en=0, rs=1 -> bxxxx1001
 800278a:	183b      	adds	r3, r7, r0
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2209      	movs	r2, #9
 8002790:	4313      	orrs	r3, r2
 8002792:	b2da      	uxtb	r2, r3
 8002794:	187b      	adds	r3, r7, r1
 8002796:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1 -> bxxxx1101
 8002798:	193b      	adds	r3, r7, r4
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	220d      	movs	r2, #13
 800279e:	4313      	orrs	r3, r2
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l | 0x09;  //en=0, rs=1 -> bxxxx1001
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2209      	movs	r2, #9
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	70da      	strb	r2, [r3, #3]
	HAL_StatusTypeDef retval;
	retval = HAL_I2C_Master_Transmit (hi2c, LCD_I2C_ADDR, data_t, 4, 100);
 80027b4:	250d      	movs	r5, #13
 80027b6:	197c      	adds	r4, r7, r5
 80027b8:	187a      	adds	r2, r7, r1
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	2364      	movs	r3, #100	@ 0x64
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2304      	movs	r3, #4
 80027c2:	214e      	movs	r1, #78	@ 0x4e
 80027c4:	f001 f9f2 	bl	8003bac <HAL_I2C_Master_Transmit>
 80027c8:	0003      	movs	r3, r0
 80027ca:	7023      	strb	r3, [r4, #0]
	return retval;
 80027cc:	197b      	adds	r3, r7, r5
 80027ce:	781b      	ldrb	r3, [r3, #0]
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b004      	add	sp, #16
 80027d6:	bdb0      	pop	{r4, r5, r7, pc}

080027d8 <lcd_init_settings>:

static HAL_StatusTypeDef lcd_init_settings(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	static uint8_t initialized = 0;

	if(!initialized)
 80027e0:	4b30      	ldr	r3, [pc, #192]	@ (80028a4 <lcd_init_settings+0xcc>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d158      	bne.n	800289a <lcd_init_settings+0xc2>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, LCD_I2C_ADDR, 10, 1000) != HAL_OK) {
 80027e8:	23fa      	movs	r3, #250	@ 0xfa
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	220a      	movs	r2, #10
 80027f0:	214e      	movs	r1, #78	@ 0x4e
 80027f2:	f001 fc0d 	bl	8004010 <HAL_I2C_IsDeviceReady>
 80027f6:	1e03      	subs	r3, r0, #0
 80027f8:	d001      	beq.n	80027fe <lcd_init_settings+0x26>
			return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e04e      	b.n	800289c <lcd_init_settings+0xc4>
		}
		// 4 bit initialisation
		HAL_Delay(50);  // wait for >40ms
 80027fe:	2032      	movs	r0, #50	@ 0x32
 8002800:	f000 fe8a 	bl	8003518 <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2130      	movs	r1, #48	@ 0x30
 8002808:	0018      	movs	r0, r3
 800280a:	f7ff ff5f 	bl	80026cc <lcd_send_command>
		HAL_Delay(5);  // wait for >4.1ms
 800280e:	2005      	movs	r0, #5
 8002810:	f000 fe82 	bl	8003518 <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2130      	movs	r1, #48	@ 0x30
 8002818:	0018      	movs	r0, r3
 800281a:	f7ff ff57 	bl	80026cc <lcd_send_command>
		HAL_Delay(1);  // wait for >100us
 800281e:	2001      	movs	r0, #1
 8002820:	f000 fe7a 	bl	8003518 <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2130      	movs	r1, #48	@ 0x30
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff ff4f 	bl	80026cc <lcd_send_command>
		HAL_Delay(10);
 800282e:	200a      	movs	r0, #10
 8002830:	f000 fe72 	bl	8003518 <HAL_Delay>
		lcd_send_command (hi2c, 0x20);  // 4bit mode
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2120      	movs	r1, #32
 8002838:	0018      	movs	r0, r3
 800283a:	f7ff ff47 	bl	80026cc <lcd_send_command>
		HAL_Delay(10);
 800283e:	200a      	movs	r0, #10
 8002840:	f000 fe6a 	bl	8003518 <HAL_Delay>

		// display initialisation
		lcd_send_command (hi2c, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2128      	movs	r1, #40	@ 0x28
 8002848:	0018      	movs	r0, r3
 800284a:	f7ff ff3f 	bl	80026cc <lcd_send_command>
		HAL_Delay(1);
 800284e:	2001      	movs	r0, #1
 8002850:	f000 fe62 	bl	8003518 <HAL_Delay>
		lcd_send_command (hi2c, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2108      	movs	r1, #8
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff ff37 	bl	80026cc <lcd_send_command>
		HAL_Delay(1);
 800285e:	2001      	movs	r0, #1
 8002860:	f000 fe5a 	bl	8003518 <HAL_Delay>
		lcd_send_command (hi2c, 0x01);  // clear display
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2101      	movs	r1, #1
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff ff2f 	bl	80026cc <lcd_send_command>
		HAL_Delay(2);
 800286e:	2002      	movs	r0, #2
 8002870:	f000 fe52 	bl	8003518 <HAL_Delay>
		lcd_send_command (hi2c, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2106      	movs	r1, #6
 8002878:	0018      	movs	r0, r3
 800287a:	f7ff ff27 	bl	80026cc <lcd_send_command>
		HAL_Delay(1);
 800287e:	2001      	movs	r0, #1
 8002880:	f000 fe4a 	bl	8003518 <HAL_Delay>
		lcd_send_command (hi2c, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	210c      	movs	r1, #12
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff ff1f 	bl	80026cc <lcd_send_command>
		HAL_Delay(100);
 800288e:	2064      	movs	r0, #100	@ 0x64
 8002890:	f000 fe42 	bl	8003518 <HAL_Delay>

		initialized = 1;
 8002894:	4b03      	ldr	r3, [pc, #12]	@ (80028a4 <lcd_init_settings+0xcc>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
	}
	return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b002      	add	sp, #8
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	2000007c 	.word	0x2000007c

080028a8 <lcd_print_string>:


void lcd_print_string (I2C_HandleTypeDef *hi2c, char *str)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
	lcd_init_settings(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ff8f 	bl	80027d8 <lcd_init_settings>
	while (*str) lcd_send_data (hi2c, *str++);
 80028ba:	e008      	b.n	80028ce <lcd_print_string+0x26>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	603a      	str	r2, [r7, #0]
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff ff42 	bl	8002752 <lcd_send_data>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f2      	bne.n	80028bc <lcd_print_string+0x14>
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46c0      	nop			@ (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b002      	add	sp, #8
 80028de:	bd80      	pop	{r7, pc}

080028e0 <lcd_place_cursor>:

void lcd_place_cursor(I2C_HandleTypeDef *hi2c, int row, int col)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	lcd_init_settings(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7ff ff72 	bl	80027d8 <lcd_init_settings>
    switch (row)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <lcd_place_cursor+0x22>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d005      	beq.n	800290c <lcd_place_cursor+0x2c>
 8002900:	e009      	b.n	8002916 <lcd_place_cursor+0x36>
    {
        case 0:
            col |= 0x80;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	4313      	orrs	r3, r2
 8002908:	607b      	str	r3, [r7, #4]
            break;
 800290a:	e004      	b.n	8002916 <lcd_place_cursor+0x36>
        case 1:
            col |= 0xC0;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	22c0      	movs	r2, #192	@ 0xc0
 8002910:	4313      	orrs	r3, r2
 8002912:	607b      	str	r3, [r7, #4]
            break;
 8002914:	46c0      	nop			@ (mov r8, r8)
    }
    lcd_send_command (hi2c, col);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0011      	movs	r1, r2
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff fed4 	bl	80026cc <lcd_send_command>
}
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b004      	add	sp, #16
 800292a:	bd80      	pop	{r7, pc}

0800292c <lcd_clear_display>:

void lcd_clear_display(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	lcd_send_command (hi2c, 0x01);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2101      	movs	r1, #1
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff fec7 	bl	80026cc <lcd_send_command>
	HAL_Delay(10);
 800293e:	200a      	movs	r0, #10
 8002940:	f000 fdea 	bl	8003518 <HAL_Delay>
}
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}

0800294c <lcd_print_2_lines>:

void lcd_print_2_lines(I2C_HandleTypeDef *hi2c, char* top_line, char* bot_line)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
	lcd_clear_display(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff ffe6 	bl	800292c <lcd_clear_display>
	lcd_place_cursor(hi2c, 0, 0);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff ffba 	bl	80028e0 <lcd_place_cursor>
	lcd_print_string(hi2c, top_line);
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	0011      	movs	r1, r2
 8002972:	0018      	movs	r0, r3
 8002974:	f7ff ff98 	bl	80028a8 <lcd_print_string>
	lcd_place_cursor(hi2c, 1, 0);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	2101      	movs	r1, #1
 800297e:	0018      	movs	r0, r3
 8002980:	f7ff ffae 	bl	80028e0 <lcd_place_cursor>
	lcd_print_string(hi2c, bot_line);
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	0011      	movs	r1, r2
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff ff8c 	bl	80028a8 <lcd_print_string>
}
 8002990:	46c0      	nop			@ (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	static uint16_t tick_counter = 0;
	static uint32_t led_tick_counter = 0;
	static uint16_t button_debounce_counter = 0;
	static GPIO_PinState last_button_state = GPIO_PIN_SET;  // Assume button is normally HIGH

	if (htim->Instance == TIM2)  // 100 Hz timer
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	05db      	lsls	r3, r3, #23
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d000      	beq.n	80029ae <HAL_TIM_PeriodElapsedCallback+0x16>
 80029ac:	e06a      	b.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0xec>
	{
		GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80029ae:	250f      	movs	r5, #15
 80029b0:	197c      	adds	r4, r7, r5
 80029b2:	2390      	movs	r3, #144	@ 0x90
 80029b4:	05db      	lsls	r3, r3, #23
 80029b6:	2180      	movs	r1, #128	@ 0x80
 80029b8:	0018      	movs	r0, r3
 80029ba:	f001 f817 	bl	80039ec <HAL_GPIO_ReadPin>
 80029be:	0003      	movs	r3, r0
 80029c0:	7023      	strb	r3, [r4, #0]

		// Debounce logic (button must be stable for 50ms)
		if (buttonState == GPIO_PIN_RESET)  // Button pressed
 80029c2:	197b      	adds	r3, r7, r5
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d120      	bne.n	8002a0c <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			if (button_debounce_counter < 15) // 5 ticks = 50ms
 80029ca:	4b30      	ldr	r3, [pc, #192]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	2b0e      	cmp	r3, #14
 80029d0:	d806      	bhi.n	80029e0 <HAL_TIM_PeriodElapsedCallback+0x48>
			{
				button_debounce_counter++;
 80029d2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	4b2c      	ldr	r3, [pc, #176]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e01b      	b.n	8002a18 <HAL_TIM_PeriodElapsedCallback+0x80>
			}
			else if (last_button_state == GPIO_PIN_SET) // Only trigger once per press
 80029e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d117      	bne.n	8002a18 <HAL_TIM_PeriodElapsedCallback+0x80>
			{
				// Button confirmed as pressed
				last_button_state = GPIO_PIN_RESET;
 80029e8:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
				current_lcd_screen = (current_lcd_screen + 1) % 3;
 80029ee:	4b29      	ldr	r3, [pc, #164]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	2103      	movs	r1, #3
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7fd fd00 	bl	80003fc <__aeabi_idivmod>
 80029fc:	000b      	movs	r3, r1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b24      	ldr	r3, [pc, #144]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002a02:	701a      	strb	r2, [r3, #0]
				lcd_update_pending = 1;  // Signal LCD update
 8002a04:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e005      	b.n	8002a18 <HAL_TIM_PeriodElapsedCallback+0x80>
			}
		}
		else  // Button released
		{
			button_debounce_counter = 0;
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	801a      	strh	r2, [r3, #0]
			last_button_state = GPIO_PIN_SET;
 8002a12:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
		}

		// Reset EEPROM logic (button held for 1 second)
		static uint16_t button_hold_counter = 0;
		if (buttonState == GPIO_PIN_RESET)
 8002a18:	230f      	movs	r3, #15
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10f      	bne.n	8002a42 <HAL_TIM_PeriodElapsedCallback+0xaa>
		{
			if (++button_hold_counter >= 1000)  // 100 ticks = 1 second
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	23fa      	movs	r3, #250	@ 0xfa
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d306      	bcc.n	8002a48 <HAL_TIM_PeriodElapsedCallback+0xb0>
			{
				reset_eeprom_flag = 1;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e002      	b.n	8002a48 <HAL_TIM_PeriodElapsedCallback+0xb0>
			}
		}
		else
		{
			button_hold_counter = 0;
 8002a42:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	801a      	strh	r2, [r3, #0]
		}

		// Temperature sampling
		if (++tick_counter >= 300)  // 3 seconds at 100 Hz
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002a56:	881a      	ldrh	r2, [r3, #0]
 8002a58:	2396      	movs	r3, #150	@ 0x96
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d305      	bcc.n	8002a6c <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			tick_counter = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
			sample_pending = 1;
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
		}

		// LED blink logic
		if(++led_tick_counter >= 100)
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b63      	cmp	r3, #99	@ 0x63
 8002a7c:	d902      	bls.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0xec>
		{
			led_tick_counter = 0;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
			led_tick_counter = 0;

		}
	}
	*/
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b004      	add	sp, #16
 8002a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8c:	20000148 	.word	0x20000148
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000128 	.word	0x20000128
 8002a98:	20000129 	.word	0x20000129
 8002a9c:	2000014a 	.word	0x2000014a
 8002aa0:	2000012b 	.word	0x2000012b
 8002aa4:	2000014c 	.word	0x2000014c
 8002aa8:	2000012a 	.word	0x2000012a
 8002aac:	20000150 	.word	0x20000150

08002ab0 <init_lcd_screens>:

void init_lcd_screens()
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	//uint8_t amount_screens = sizeof(lcd_screens) / sizeof(lcd_screens[0]); // way to calculate
	lcd_screens[0] = lcd_print_current_climate;
 8002ab4:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <init_lcd_screens+0x28>)
 8002ab6:	4a09      	ldr	r2, [pc, #36]	@ (8002adc <init_lcd_screens+0x2c>)
 8002ab8:	601a      	str	r2, [r3, #0]
	lcd_screens[1] = lcd_print_minmax_temp;
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <init_lcd_screens+0x28>)
 8002abc:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <init_lcd_screens+0x30>)
 8002abe:	605a      	str	r2, [r3, #4]
	lcd_screens[2] = lcd_print_minmax_hum;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <init_lcd_screens+0x28>)
 8002ac2:	4a08      	ldr	r2, [pc, #32]	@ (8002ae4 <init_lcd_screens+0x34>)
 8002ac4:	609a      	str	r2, [r3, #8]
	lcd_screens[0](&cdata);
 8002ac6:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <init_lcd_screens+0x28>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a07      	ldr	r2, [pc, #28]	@ (8002ae8 <init_lcd_screens+0x38>)
 8002acc:	0010      	movs	r0, r2
 8002ace:	4798      	blx	r3
}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	2000011c 	.word	0x2000011c
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002b69 	.word	0x08002b69
 8002ae4:	08002be5 	.word	0x08002be5
 8002ae8:	2000012c 	.word	0x2000012c

08002aec <lcd_print_current_climate>:
	lcd_place_cursor(hi2c, 1, 0);
	lcd_print_string(hi2c, hum_buffer);
}

void lcd_print_current_climate(climate_data *clim_data)
{
 8002aec:	b5b0      	push	{r4, r5, r7, lr}
 8002aee:	b092      	sub	sp, #72	@ 0x48
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002af4:	2428      	movs	r4, #40	@ 0x28
 8002af6:	193b      	adds	r3, r7, r4
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	3304      	adds	r3, #4
 8002afe:	221c      	movs	r2, #28
 8002b00:	2100      	movs	r1, #0
 8002b02:	0018      	movs	r0, r3
 8002b04:	f003 f8d0 	bl	8005ca8 <memset>
	char hum_str_buffer[32] = {0};
 8002b08:	2508      	movs	r5, #8
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	3304      	adds	r3, #4
 8002b12:	221c      	movs	r2, #28
 8002b14:	2100      	movs	r1, #0
 8002b16:	0018      	movs	r0, r3
 8002b18:	f003 f8c6 	bl	8005ca8 <memset>

	sprintf(temp_str_buffer, "Cur Temp: %dF", (int) clim_data->current_temp);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	1c18      	adds	r0, r3, #0
 8002b22:	f7fd fd71 	bl	8000608 <__aeabi_f2iz>
 8002b26:	0002      	movs	r2, r0
 8002b28:	490d      	ldr	r1, [pc, #52]	@ (8002b60 <lcd_print_current_climate+0x74>)
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f003 f89b 	bl	8005c68 <siprintf>
	sprintf(hum_str_buffer, "Cur Hum:  %d%%", (int) clim_data->current_hum);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	1c18      	adds	r0, r3, #0
 8002b38:	f7fd fd66 	bl	8000608 <__aeabi_f2iz>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	4909      	ldr	r1, [pc, #36]	@ (8002b64 <lcd_print_current_climate+0x78>)
 8002b40:	197b      	adds	r3, r7, r5
 8002b42:	0018      	movs	r0, r3
 8002b44:	f003 f890 	bl	8005c68 <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	197a      	adds	r2, r7, r5
 8002b4e:	1939      	adds	r1, r7, r4
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7ff fefb 	bl	800294c <lcd_print_2_lines>
}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b012      	add	sp, #72	@ 0x48
 8002b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	080065bc 	.word	0x080065bc
 8002b64:	080065cc 	.word	0x080065cc

08002b68 <lcd_print_minmax_temp>:

void lcd_print_minmax_temp(climate_data *clim_data)
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b092      	sub	sp, #72	@ 0x48
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002b70:	2428      	movs	r4, #40	@ 0x28
 8002b72:	193b      	adds	r3, r7, r4
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	221c      	movs	r2, #28
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f003 f892 	bl	8005ca8 <memset>
	char hum_str_buffer[32] = {0};
 8002b84:	2508      	movs	r5, #8
 8002b86:	197b      	adds	r3, r7, r5
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	221c      	movs	r2, #28
 8002b90:	2100      	movs	r1, #0
 8002b92:	0018      	movs	r0, r3
 8002b94:	f003 f888 	bl	8005ca8 <memset>

	sprintf(temp_str_buffer, "Max Temp: %dF", (int) clim_data->max_temp);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1c18      	adds	r0, r3, #0
 8002b9e:	f7fd fd33 	bl	8000608 <__aeabi_f2iz>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	490d      	ldr	r1, [pc, #52]	@ (8002bdc <lcd_print_minmax_temp+0x74>)
 8002ba6:	193b      	adds	r3, r7, r4
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f003 f85d 	bl	8005c68 <siprintf>
	sprintf(hum_str_buffer, "Min Temp: %dF", (int) clim_data->min_temp);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	1c18      	adds	r0, r3, #0
 8002bb4:	f7fd fd28 	bl	8000608 <__aeabi_f2iz>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	4909      	ldr	r1, [pc, #36]	@ (8002be0 <lcd_print_minmax_temp+0x78>)
 8002bbc:	197b      	adds	r3, r7, r5
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f003 f852 	bl	8005c68 <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	197a      	adds	r2, r7, r5
 8002bca:	1939      	adds	r1, r7, r4
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff febd 	bl	800294c <lcd_print_2_lines>
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b012      	add	sp, #72	@ 0x48
 8002bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	080065dc 	.word	0x080065dc
 8002be0:	080065ec 	.word	0x080065ec

08002be4 <lcd_print_minmax_hum>:

void lcd_print_minmax_hum(climate_data *clim_data)
{
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b092      	sub	sp, #72	@ 0x48
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002bec:	2428      	movs	r4, #40	@ 0x28
 8002bee:	193b      	adds	r3, r7, r4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	221c      	movs	r2, #28
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f003 f854 	bl	8005ca8 <memset>
	char hum_str_buffer[32] = {0};
 8002c00:	2508      	movs	r5, #8
 8002c02:	197b      	adds	r3, r7, r5
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	221c      	movs	r2, #28
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f003 f84a 	bl	8005ca8 <memset>

	sprintf(temp_str_buffer, "Max Hum: %d%%", (int) clim_data->max_hum);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	1c18      	adds	r0, r3, #0
 8002c1a:	f7fd fcf5 	bl	8000608 <__aeabi_f2iz>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	490d      	ldr	r1, [pc, #52]	@ (8002c58 <lcd_print_minmax_hum+0x74>)
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	0018      	movs	r0, r3
 8002c26:	f003 f81f 	bl	8005c68 <siprintf>
	sprintf(hum_str_buffer, "Min Hum: %d%%", (int) clim_data->min_hum);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	1c18      	adds	r0, r3, #0
 8002c30:	f7fd fcea 	bl	8000608 <__aeabi_f2iz>
 8002c34:	0002      	movs	r2, r0
 8002c36:	4909      	ldr	r1, [pc, #36]	@ (8002c5c <lcd_print_minmax_hum+0x78>)
 8002c38:	197b      	adds	r3, r7, r5
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f003 f814 	bl	8005c68 <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	197a      	adds	r2, r7, r5
 8002c46:	1939      	adds	r1, r7, r4
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff fe7f 	bl	800294c <lcd_print_2_lines>
}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b012      	add	sp, #72	@ 0x48
 8002c54:	bdb0      	pop	{r4, r5, r7, pc}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	080065fc 	.word	0x080065fc
 8002c5c:	0800660c 	.word	0x0800660c

08002c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c66:	f000 fbf3 	bl	8003450 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c6a:	f000 f893 	bl	8002d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c6e:	f000 f981 	bl	8002f74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c72:	f000 f8e7 	bl	8002e44 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002c76:	f000 f925 	bl	8002ec4 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_StatusTypeDef retval = HAL_OK;
 8002c7a:	1dbb      	adds	r3, r7, #6
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
  //retval = reset_climate_data_eeprom(&hi2c1);
  retval = init_climate_data(&cdata, &hi2c1);
 8002c80:	1dbc      	adds	r4, r7, #6
 8002c82:	4a3a      	ldr	r2, [pc, #232]	@ (8002d6c <main+0x10c>)
 8002c84:	4b3a      	ldr	r3, [pc, #232]	@ (8002d70 <main+0x110>)
 8002c86:	0011      	movs	r1, r2
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff fba8 	bl	80023de <init_climate_data>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	7023      	strb	r3, [r4, #0]
  init_lcd_screens();
 8002c92:	f7ff ff0d 	bl	8002ab0 <init_lcd_screens>


  while (1)
  {
	  if (lcd_update_pending)
 8002c96:	4b37      	ldr	r3, [pc, #220]	@ (8002d74 <main+0x114>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <main+0x58>
	  {
		  lcd_update_pending = 0;  // Clear the flag
 8002ca0:	4b34      	ldr	r3, [pc, #208]	@ (8002d74 <main+0x114>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
		  lcd_screens[current_lcd_screen](&cdata);  // Update LCD immediately
 8002ca6:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <main+0x118>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	001a      	movs	r2, r3
 8002cac:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <main+0x11c>)
 8002cae:	0092      	lsls	r2, r2, #2
 8002cb0:	58d3      	ldr	r3, [r2, r3]
 8002cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002d70 <main+0x110>)
 8002cb4:	0010      	movs	r0, r2
 8002cb6:	4798      	blx	r3
	  }

	  // Check for temperature sampling
	  uint8_t trigger_screen_refresh = 0;
 8002cb8:	1dfb      	adds	r3, r7, #7
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
	  if(reset_eeprom_flag)
 8002cbe:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <main+0x120>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d025      	beq.n	8002d14 <main+0xb4>
	  {
		  reset_eeprom_flag = 0;
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <main+0x120>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]

		  lcd_print_2_lines(&hi2c1, "RESETTING EEPROM", ".......");
 8002cce:	4a2d      	ldr	r2, [pc, #180]	@ (8002d84 <main+0x124>)
 8002cd0:	492d      	ldr	r1, [pc, #180]	@ (8002d88 <main+0x128>)
 8002cd2:	4b26      	ldr	r3, [pc, #152]	@ (8002d6c <main+0x10c>)
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff fe39 	bl	800294c <lcd_print_2_lines>
		  HAL_Delay(2500);
 8002cda:	4b2c      	ldr	r3, [pc, #176]	@ (8002d8c <main+0x12c>)
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 fc1b 	bl	8003518 <HAL_Delay>
		  if (reset_climate_data_eeprom(&hi2c1) != HAL_OK)
 8002ce2:	4b22      	ldr	r3, [pc, #136]	@ (8002d6c <main+0x10c>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff fcad 	bl	8002644 <reset_climate_data_eeprom>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d133      	bne.n	8002d56 <main+0xf6>
		  {
			  break;
		  }
		  if(init_climate_data(&cdata, &hi2c1) != HAL_OK)
 8002cee:	4a1f      	ldr	r2, [pc, #124]	@ (8002d6c <main+0x10c>)
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d70 <main+0x110>)
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff fb72 	bl	80023de <init_climate_data>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d12d      	bne.n	8002d5a <main+0xfa>
		  {
			  break;
		  }
		  sample_pending = 1;
 8002cfe:	4b24      	ldr	r3, [pc, #144]	@ (8002d90 <main+0x130>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
		  trigger_screen_refresh = 1;
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 8002d0a:	23fa      	movs	r3, #250	@ 0xfa
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fc02 	bl	8003518 <HAL_Delay>
	  }


	  if (sample_pending)
 8002d14:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <main+0x130>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d019      	beq.n	8002d52 <main+0xf2>
	  {
		  sample_pending = 0;  // Clear the flag
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d90 <main+0x130>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);

		  if (update_climate_data_in_eeprom(&cdata) != HAL_OK)
 8002d24:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <main+0x110>)
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff fb87 	bl	800243a <update_climate_data_in_eeprom>
 8002d2c:	1e03      	subs	r3, r0, #0
 8002d2e:	d116      	bne.n	8002d5e <main+0xfe>
		  {
			  break;
		  }
		  //print_climate_data_to_uart(&cdata, &huart2);
		  if(current_lcd_screen == 0 || trigger_screen_refresh)
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <main+0x118>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <main+0xe0>
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <main+0xf2>
		  {
			  lcd_screens[current_lcd_screen](&cdata);
 8002d40:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <main+0x118>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	001a      	movs	r2, r3
 8002d46:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <main+0x11c>)
 8002d48:	0092      	lsls	r2, r2, #2
 8002d4a:	58d3      	ldr	r3, [r2, r3]
 8002d4c:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <main+0x110>)
 8002d4e:	0010      	movs	r0, r2
 8002d50:	4798      	blx	r3
		 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	  }

	  // Other tasks can be added here...

	  __WFI();
 8002d52:	bf30      	wfi
  {
 8002d54:	e79f      	b.n	8002c96 <main+0x36>
			  break;
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	e002      	b.n	8002d60 <main+0x100>
			  break;
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	e000      	b.n	8002d60 <main+0x100>
			  break;
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b003      	add	sp, #12
 8002d68:	bd90      	pop	{r4, r7, pc}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	20000080 	.word	0x20000080
 8002d70:	2000012c 	.word	0x2000012c
 8002d74:	20000129 	.word	0x20000129
 8002d78:	20000128 	.word	0x20000128
 8002d7c:	2000011c 	.word	0x2000011c
 8002d80:	2000012b 	.word	0x2000012b
 8002d84:	0800661c 	.word	0x0800661c
 8002d88:	08006624 	.word	0x08006624
 8002d8c:	000009c4 	.word	0x000009c4
 8002d90:	2000012a 	.word	0x2000012a

08002d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b099      	sub	sp, #100	@ 0x64
 8002d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d9a:	242c      	movs	r4, #44	@ 0x2c
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	0018      	movs	r0, r3
 8002da0:	2334      	movs	r3, #52	@ 0x34
 8002da2:	001a      	movs	r2, r3
 8002da4:	2100      	movs	r1, #0
 8002da6:	f002 ff7f 	bl	8005ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002daa:	231c      	movs	r3, #28
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	0018      	movs	r0, r3
 8002db0:	2310      	movs	r3, #16
 8002db2:	001a      	movs	r2, r3
 8002db4:	2100      	movs	r1, #0
 8002db6:	f002 ff77 	bl	8005ca8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	2318      	movs	r3, #24
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f002 ff70 	bl	8005ca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dc8:	0021      	movs	r1, r4
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2202      	movs	r2, #2
 8002dce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	2210      	movs	r2, #16
 8002dda:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2200      	movs	r2, #0
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	0018      	movs	r0, r3
 8002de6:	f001 fd7b 	bl	80048e0 <HAL_RCC_OscConfig>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002dee:	f000 f919 	bl	8003024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002df2:	211c      	movs	r1, #28
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2207      	movs	r2, #7
 8002df8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2200      	movs	r2, #0
 8002e0a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	2100      	movs	r1, #0
 8002e10:	0018      	movs	r0, r3
 8002e12:	f002 f8eb 	bl	8004fec <HAL_RCC_ClockConfig>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d001      	beq.n	8002e1e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002e1a:	f000 f903 	bl	8003024 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	2220      	movs	r2, #32
 8002e22:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f002 fa29 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002e36:	f000 f8f5 	bl	8003024 <Error_Handler>
  }
}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b019      	add	sp, #100	@ 0x64
 8002e40:	bd90      	pop	{r4, r7, pc}
	...

08002e44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ebc <MX_I2C1_Init+0x78>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e50:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec0 <MX_I2C1_Init+0x7c>)
 8002e52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e54:	4b18      	ldr	r3, [pc, #96]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e60:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e66:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e6c:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e72:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 fded 	bl	8003a60 <HAL_I2C_Init>
 8002e86:	1e03      	subs	r3, r0, #0
 8002e88:	d001      	beq.n	8002e8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e8a:	f000 f8cb 	bl	8003024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002e90:	2100      	movs	r1, #0
 8002e92:	0018      	movs	r0, r3
 8002e94:	f001 fc8c 	bl	80047b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e9c:	f000 f8c2 	bl	8003024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <MX_I2C1_Init+0x74>)
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f001 fccf 	bl	8004848 <HAL_I2CEx_ConfigDigitalFilter>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002eae:	f000 f8b9 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000080 	.word	0x20000080
 8002ebc:	40005400 	.word	0x40005400
 8002ec0:	0010020a 	.word	0x0010020a

08002ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eca:	2308      	movs	r3, #8
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	0018      	movs	r0, r3
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	f002 fee7 	bl	8005ca8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eda:	003b      	movs	r3, r7
 8002edc:	0018      	movs	r0, r3
 8002ede:	2308      	movs	r3, #8
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f002 fee0 	bl	8005ca8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ee8:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	05d2      	lsls	r2, r2, #23
 8002eee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f70 <MX_TIM2_Init+0xac>)
 8002ef4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002efe:	2264      	movs	r2, #100	@ 0x64
 8002f00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f02:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f08:	4b18      	ldr	r3, [pc, #96]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f0e:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002f10:	0018      	movs	r0, r3
 8002f12:	f002 faa5 	bl	8005460 <HAL_TIM_Base_Init>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002f1a:	f000 f883 	bl	8003024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1e:	2108      	movs	r1, #8
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	2280      	movs	r2, #128	@ 0x80
 8002f24:	0152      	lsls	r2, r2, #5
 8002f26:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f28:	187a      	adds	r2, r7, r1
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002f2c:	0011      	movs	r1, r2
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f002 fc20 	bl	8005774 <HAL_TIM_ConfigClockSource>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002f38:	f000 f874 	bl	8003024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3c:	003b      	movs	r3, r7
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f42:	003b      	movs	r3, r7
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f48:	003a      	movs	r2, r7
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002f4c:	0011      	movs	r1, r2
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f002 fe22 	bl	8005b98 <HAL_TIMEx_MasterConfigSynchronization>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002f58:	f000 f864 	bl	8003024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <MX_TIM2_Init+0xa8>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f002 face 	bl	8005500 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8002f64:	46c0      	nop			@ (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b006      	add	sp, #24
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200000d4 	.word	0x200000d4
 8002f70:	0000031f 	.word	0x0000031f

08002f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7a:	240c      	movs	r4, #12
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	0018      	movs	r0, r3
 8002f80:	2314      	movs	r3, #20
 8002f82:	001a      	movs	r2, r3
 8002f84:	2100      	movs	r1, #0
 8002f86:	f002 fe8f 	bl	8005ca8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8a:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <MX_GPIO_Init+0xac>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	4b24      	ldr	r3, [pc, #144]	@ (8003020 <MX_GPIO_Init+0xac>)
 8002f90:	2180      	movs	r1, #128	@ 0x80
 8002f92:	0289      	lsls	r1, r1, #10
 8002f94:	430a      	orrs	r2, r1
 8002f96:	615a      	str	r2, [r3, #20]
 8002f98:	4b21      	ldr	r3, [pc, #132]	@ (8003020 <MX_GPIO_Init+0xac>)
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	029b      	lsls	r3, r3, #10
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003020 <MX_GPIO_Init+0xac>)
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <MX_GPIO_Init+0xac>)
 8002fac:	2180      	movs	r1, #128	@ 0x80
 8002fae:	02c9      	lsls	r1, r1, #11
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	615a      	str	r2, [r3, #20]
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003020 <MX_GPIO_Init+0xac>)
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	02db      	lsls	r3, r3, #11
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8002fc2:	2390      	movs	r3, #144	@ 0x90
 8002fc4:	05db      	lsls	r3, r3, #23
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2108      	movs	r1, #8
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fd2b 	bl	8003a26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	2201      	movs	r2, #1
 8002fda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	193b      	adds	r3, r7, r4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe8:	193a      	adds	r2, r7, r4
 8002fea:	2390      	movs	r3, #144	@ 0x90
 8002fec:	05db      	lsls	r3, r3, #23
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 fb93 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	2280      	movs	r2, #128	@ 0x80
 8002ffa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ffc:	193b      	adds	r3, r7, r4
 8002ffe:	2200      	movs	r2, #0
 8003000:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	193b      	adds	r3, r7, r4
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003008:	193a      	adds	r2, r7, r4
 800300a:	2390      	movs	r3, #144	@ 0x90
 800300c:	05db      	lsls	r3, r3, #23
 800300e:	0011      	movs	r1, r2
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fb83 	bl	800371c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b009      	add	sp, #36	@ 0x24
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	40021000 	.word	0x40021000

08003024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003028:	b672      	cpsid	i
}
 800302a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800302c:	46c0      	nop			@ (mov r8, r8)
 800302e:	e7fd      	b.n	800302c <Error_Handler+0x8>

08003030 <get_temperature_sht41>:

#include "sht41.h"


HAL_StatusTypeDef get_temperature_sht41(I2C_HandleTypeDef *i2ch, float* data_buffer)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b08d      	sub	sp, #52	@ 0x34
 8003034:	af02      	add	r7, sp, #8
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	uint8_t inc_bytes[6] = {0};
 800303a:	230c      	movs	r3, #12
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	809a      	strh	r2, [r3, #4]

	if(HAL_I2C_IsDeviceReady(i2ch, SHT41_I2C_ADDR, 10, 1000) != HAL_OK) {
 8003046:	23fa      	movs	r3, #250	@ 0xfa
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	220a      	movs	r2, #10
 800304e:	2188      	movs	r1, #136	@ 0x88
 8003050:	f000 ffde 	bl	8004010 <HAL_I2C_IsDeviceReady>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d001      	beq.n	800305c <get_temperature_sht41+0x2c>
	  return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0ab      	b.n	80031b4 <get_temperature_sht41+0x184>
	}

	HAL_Delay(10);
 800305c:	200a      	movs	r0, #10
 800305e:	f000 fa5b 	bl	8003518 <HAL_Delay>
	uint8_t command = 0xFD;
 8003062:	210b      	movs	r1, #11
 8003064:	187b      	adds	r3, r7, r1
 8003066:	22fd      	movs	r2, #253	@ 0xfd
 8003068:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(i2ch, SHT41_I2C_ADDR, &command, 1, 1000) != HAL_OK) {
 800306a:	187a      	adds	r2, r7, r1
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	23fa      	movs	r3, #250	@ 0xfa
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2301      	movs	r3, #1
 8003076:	2188      	movs	r1, #136	@ 0x88
 8003078:	f000 fd98 	bl	8003bac <HAL_I2C_Master_Transmit>
 800307c:	1e03      	subs	r3, r0, #0
 800307e:	d001      	beq.n	8003084 <get_temperature_sht41+0x54>
	  return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e097      	b.n	80031b4 <get_temperature_sht41+0x184>
	}

	HAL_Delay(10);
 8003084:	200a      	movs	r0, #10
 8003086:	f000 fa47 	bl	8003518 <HAL_Delay>
	if(HAL_I2C_Master_Receive(i2ch, SHT41_I2C_ADDR, &inc_bytes, 6, 1000) != HAL_OK) {
 800308a:	230c      	movs	r3, #12
 800308c:	18fa      	adds	r2, r7, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	23fa      	movs	r3, #250	@ 0xfa
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2306      	movs	r3, #6
 8003098:	2188      	movs	r1, #136	@ 0x88
 800309a:	f000 feb1 	bl	8003e00 <HAL_I2C_Master_Receive>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d001      	beq.n	80030a6 <get_temperature_sht41+0x76>
	  return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e086      	b.n	80031b4 <get_temperature_sht41+0x184>
	}

	uint16_t raw_temp = (inc_bytes[0] << 8) | inc_bytes[1];
 80030a6:	210c      	movs	r1, #12
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b21a      	sxth	r2, r3
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	4313      	orrs	r3, r2
 80030b8:	b21a      	sxth	r2, r3
 80030ba:	2026      	movs	r0, #38	@ 0x26
 80030bc:	183b      	adds	r3, r7, r0
 80030be:	801a      	strh	r2, [r3, #0]
	uint8_t temp_checksum = inc_bytes[2];
 80030c0:	2325      	movs	r3, #37	@ 0x25
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	187a      	adds	r2, r7, r1
 80030c6:	7892      	ldrb	r2, [r2, #2]
 80030c8:	701a      	strb	r2, [r3, #0]
	uint16_t raw_humidity = (inc_bytes[3] << 8) | inc_bytes[4];
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	78db      	ldrb	r3, [r3, #3]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	b21a      	sxth	r2, r3
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	791b      	ldrb	r3, [r3, #4]
 80030d6:	b21b      	sxth	r3, r3
 80030d8:	4313      	orrs	r3, r2
 80030da:	b21a      	sxth	r2, r3
 80030dc:	2422      	movs	r4, #34	@ 0x22
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	801a      	strh	r2, [r3, #0]
	uint8_t humidity_checksum = inc_bytes[5];
 80030e2:	2321      	movs	r3, #33	@ 0x21
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	187a      	adds	r2, r7, r1
 80030e8:	7952      	ldrb	r2, [r2, #5]
 80030ea:	701a      	strb	r2, [r3, #0]

	float tempc = -45 + 175 * (raw_temp / 65535.0);
 80030ec:	183b      	adds	r3, r7, r0
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7fe ff8b 	bl	800200c <__aeabi_i2d>
 80030f6:	2200      	movs	r2, #0
 80030f8:	4b30      	ldr	r3, [pc, #192]	@ (80031bc <get_temperature_sht41+0x18c>)
 80030fa:	f7fd fe09 	bl	8000d10 <__aeabi_ddiv>
 80030fe:	0002      	movs	r2, r0
 8003100:	000b      	movs	r3, r1
 8003102:	0010      	movs	r0, r2
 8003104:	0019      	movs	r1, r3
 8003106:	2200      	movs	r2, #0
 8003108:	4b2d      	ldr	r3, [pc, #180]	@ (80031c0 <get_temperature_sht41+0x190>)
 800310a:	f7fe f91b 	bl	8001344 <__aeabi_dmul>
 800310e:	0002      	movs	r2, r0
 8003110:	000b      	movs	r3, r1
 8003112:	0010      	movs	r0, r2
 8003114:	0019      	movs	r1, r3
 8003116:	2200      	movs	r2, #0
 8003118:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <get_temperature_sht41+0x194>)
 800311a:	f7fe fbdb 	bl	80018d4 <__aeabi_dsub>
 800311e:	0002      	movs	r2, r0
 8003120:	000b      	movs	r3, r1
 8003122:	0010      	movs	r0, r2
 8003124:	0019      	movs	r1, r3
 8003126:	f7fe ffe7 	bl	80020f8 <__aeabi_d2f>
 800312a:	1c03      	adds	r3, r0, #0
 800312c:	61fb      	str	r3, [r7, #28]
	float tempf = 32 + (tempc * (9.0/5));
 800312e:	69f8      	ldr	r0, [r7, #28]
 8003130:	f7fe ff9a 	bl	8002068 <__aeabi_f2d>
 8003134:	4a24      	ldr	r2, [pc, #144]	@ (80031c8 <get_temperature_sht41+0x198>)
 8003136:	4b25      	ldr	r3, [pc, #148]	@ (80031cc <get_temperature_sht41+0x19c>)
 8003138:	f7fe f904 	bl	8001344 <__aeabi_dmul>
 800313c:	0002      	movs	r2, r0
 800313e:	000b      	movs	r3, r1
 8003140:	0010      	movs	r0, r2
 8003142:	0019      	movs	r1, r3
 8003144:	2200      	movs	r2, #0
 8003146:	4b22      	ldr	r3, [pc, #136]	@ (80031d0 <get_temperature_sht41+0x1a0>)
 8003148:	f7fd fa7e 	bl	8000648 <__aeabi_dadd>
 800314c:	0002      	movs	r2, r0
 800314e:	000b      	movs	r3, r1
 8003150:	0010      	movs	r0, r2
 8003152:	0019      	movs	r1, r3
 8003154:	f7fe ffd0 	bl	80020f8 <__aeabi_d2f>
 8003158:	1c03      	adds	r3, r0, #0
 800315a:	61bb      	str	r3, [r7, #24]
	float humidity_percent = -6 + 125 * (raw_humidity /65535.0);
 800315c:	193b      	adds	r3, r7, r4
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	0018      	movs	r0, r3
 8003162:	f7fe ff53 	bl	800200c <__aeabi_i2d>
 8003166:	2200      	movs	r2, #0
 8003168:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <get_temperature_sht41+0x18c>)
 800316a:	f7fd fdd1 	bl	8000d10 <__aeabi_ddiv>
 800316e:	0002      	movs	r2, r0
 8003170:	000b      	movs	r3, r1
 8003172:	0010      	movs	r0, r2
 8003174:	0019      	movs	r1, r3
 8003176:	2200      	movs	r2, #0
 8003178:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <get_temperature_sht41+0x1a4>)
 800317a:	f7fe f8e3 	bl	8001344 <__aeabi_dmul>
 800317e:	0002      	movs	r2, r0
 8003180:	000b      	movs	r3, r1
 8003182:	0010      	movs	r0, r2
 8003184:	0019      	movs	r1, r3
 8003186:	2200      	movs	r2, #0
 8003188:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <get_temperature_sht41+0x1a8>)
 800318a:	f7fe fba3 	bl	80018d4 <__aeabi_dsub>
 800318e:	0002      	movs	r2, r0
 8003190:	000b      	movs	r3, r1
 8003192:	0010      	movs	r0, r2
 8003194:	0019      	movs	r1, r3
 8003196:	f7fe ffaf 	bl	80020f8 <__aeabi_d2f>
 800319a:	1c03      	adds	r3, r0, #0
 800319c:	617b      	str	r3, [r7, #20]

	HAL_Delay(10);
 800319e:	200a      	movs	r0, #10
 80031a0:	f000 f9ba 	bl	8003518 <HAL_Delay>

	data_buffer[0] = tempf;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	601a      	str	r2, [r3, #0]
	data_buffer[1] = humidity_percent;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	3304      	adds	r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b00b      	add	sp, #44	@ 0x2c
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	40efffe0 	.word	0x40efffe0
 80031c0:	4065e000 	.word	0x4065e000
 80031c4:	40468000 	.word	0x40468000
 80031c8:	cccccccd 	.word	0xcccccccd
 80031cc:	3ffccccc 	.word	0x3ffccccc
 80031d0:	40400000 	.word	0x40400000
 80031d4:	405f4000 	.word	0x405f4000
 80031d8:	40180000 	.word	0x40180000

080031dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <HAL_MspInit+0x44>)
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <HAL_MspInit+0x44>)
 80031e8:	2101      	movs	r1, #1
 80031ea:	430a      	orrs	r2, r1
 80031ec:	619a      	str	r2, [r3, #24]
 80031ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <HAL_MspInit+0x44>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2201      	movs	r2, #1
 80031f4:	4013      	ands	r3, r2
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <HAL_MspInit+0x44>)
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <HAL_MspInit+0x44>)
 8003200:	2180      	movs	r1, #128	@ 0x80
 8003202:	0549      	lsls	r1, r1, #21
 8003204:	430a      	orrs	r2, r1
 8003206:	61da      	str	r2, [r3, #28]
 8003208:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_MspInit+0x44>)
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	055b      	lsls	r3, r3, #21
 8003210:	4013      	ands	r3, r2
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b08b      	sub	sp, #44	@ 0x2c
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	2414      	movs	r4, #20
 800322e:	193b      	adds	r3, r7, r4
 8003230:	0018      	movs	r0, r3
 8003232:	2314      	movs	r3, #20
 8003234:	001a      	movs	r2, r3
 8003236:	2100      	movs	r1, #0
 8003238:	f002 fd36 	bl	8005ca8 <memset>
  if(hi2c->Instance==I2C1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1c      	ldr	r2, [pc, #112]	@ (80032b4 <HAL_I2C_MspInit+0x90>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d131      	bne.n	80032aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <HAL_I2C_MspInit+0x94>)
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <HAL_I2C_MspInit+0x94>)
 800324c:	2180      	movs	r1, #128	@ 0x80
 800324e:	02c9      	lsls	r1, r1, #11
 8003250:	430a      	orrs	r2, r1
 8003252:	615a      	str	r2, [r3, #20]
 8003254:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <HAL_I2C_MspInit+0x94>)
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	02db      	lsls	r3, r3, #11
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003262:	0021      	movs	r1, r4
 8003264:	187b      	adds	r3, r7, r1
 8003266:	22c0      	movs	r2, #192	@ 0xc0
 8003268:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2212      	movs	r2, #18
 800326e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003276:	187b      	adds	r3, r7, r1
 8003278:	2203      	movs	r2, #3
 800327a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2201      	movs	r2, #1
 8003280:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003282:	187b      	adds	r3, r7, r1
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <HAL_I2C_MspInit+0x98>)
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f000 fa47 	bl	800371c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800328e:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <HAL_I2C_MspInit+0x94>)
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_I2C_MspInit+0x94>)
 8003294:	2180      	movs	r1, #128	@ 0x80
 8003296:	0389      	lsls	r1, r1, #14
 8003298:	430a      	orrs	r2, r1
 800329a:	61da      	str	r2, [r3, #28]
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_I2C_MspInit+0x94>)
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	039b      	lsls	r3, r3, #14
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b00b      	add	sp, #44	@ 0x2c
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	40005400 	.word	0x40005400
 80032b8:	40021000 	.word	0x40021000
 80032bc:	48000400 	.word	0x48000400

080032c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2380      	movs	r3, #128	@ 0x80
 80032ce:	05db      	lsls	r3, r3, #23
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d113      	bne.n	80032fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_TIM_Base_MspInit+0x44>)
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <HAL_TIM_Base_MspInit+0x44>)
 80032da:	2101      	movs	r1, #1
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <HAL_TIM_Base_MspInit+0x44>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2201      	movs	r2, #1
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	200f      	movs	r0, #15
 80032f2:	f000 f9e1 	bl	80036b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032f6:	200f      	movs	r0, #15
 80032f8:	f000 f9f3 	bl	80036e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b004      	add	sp, #16
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40021000 	.word	0x40021000

08003308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	e7fd      	b.n	800330c <NMI_Handler+0x4>

08003310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003314:	46c0      	nop			@ (mov r8, r8)
 8003316:	e7fd      	b.n	8003314 <HardFault_Handler+0x4>

08003318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003330:	f000 f8d6 	bl	80034e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003334:	46c0      	nop			@ (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003340:	4b03      	ldr	r3, [pc, #12]	@ (8003350 <TIM2_IRQHandler+0x14>)
 8003342:	0018      	movs	r0, r3
 8003344:	f002 f928 	bl	8005598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003348:	46c0      	nop			@ (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	200000d4 	.word	0x200000d4

08003354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800335c:	4a14      	ldr	r2, [pc, #80]	@ (80033b0 <_sbrk+0x5c>)
 800335e:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <_sbrk+0x60>)
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003368:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003370:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <_sbrk+0x64>)
 8003372:	4a12      	ldr	r2, [pc, #72]	@ (80033bc <_sbrk+0x68>)
 8003374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <_sbrk+0x64>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	18d3      	adds	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d207      	bcs.n	8003394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003384:	f002 fc98 	bl	8005cb8 <__errno>
 8003388:	0003      	movs	r3, r0
 800338a:	220c      	movs	r2, #12
 800338c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800338e:	2301      	movs	r3, #1
 8003390:	425b      	negs	r3, r3
 8003392:	e009      	b.n	80033a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003394:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <_sbrk+0x64>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <_sbrk+0x64>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	18d2      	adds	r2, r2, r3
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <_sbrk+0x64>)
 80033a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b006      	add	sp, #24
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20001800 	.word	0x20001800
 80033b4:	00000400 	.word	0x00000400
 80033b8:	20000154 	.word	0x20000154
 80033bc:	200002a8 	.word	0x200002a8

080033c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80033c4:	46c0      	nop			@ (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033cc:	4813      	ldr	r0, [pc, #76]	@ (800341c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033d0:	f7ff fff6 	bl	80033c0 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80033d4:	4812      	ldr	r0, [pc, #72]	@ (8003420 <LoopForever+0x6>)
    LDR R1, [R0]
 80033d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80033d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80033da:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <LoopForever+0xa>)
    CMP R1, R2
 80033dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80033de:	d105      	bne.n	80033ec <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80033e0:	4811      	ldr	r0, [pc, #68]	@ (8003428 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80033e2:	4912      	ldr	r1, [pc, #72]	@ (800342c <LoopForever+0x12>)
    STR R1, [R0]
 80033e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80033e6:	4812      	ldr	r0, [pc, #72]	@ (8003430 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80033e8:	4912      	ldr	r1, [pc, #72]	@ (8003434 <LoopForever+0x1a>)
    STR R1, [R0]
 80033ea:	6001      	str	r1, [r0, #0]

080033ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033ec:	4812      	ldr	r0, [pc, #72]	@ (8003438 <LoopForever+0x1e>)
  ldr r1, =_edata
 80033ee:	4913      	ldr	r1, [pc, #76]	@ (800343c <LoopForever+0x22>)
  ldr r2, =_sidata
 80033f0:	4a13      	ldr	r2, [pc, #76]	@ (8003440 <LoopForever+0x26>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f4:	e002      	b.n	80033fc <LoopCopyDataInit>

080033f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033fa:	3304      	adds	r3, #4

080033fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003400:	d3f9      	bcc.n	80033f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003402:	4a10      	ldr	r2, [pc, #64]	@ (8003444 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003404:	4c10      	ldr	r4, [pc, #64]	@ (8003448 <LoopForever+0x2e>)
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003408:	e001      	b.n	800340e <LoopFillZerobss>

0800340a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800340a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800340c:	3204      	adds	r2, #4

0800340e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800340e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003410:	d3fb      	bcc.n	800340a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003412:	f002 fc57 	bl	8005cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003416:	f7ff fc23 	bl	8002c60 <main>

0800341a <LoopForever>:

LoopForever:
    b LoopForever
 800341a:	e7fe      	b.n	800341a <LoopForever>
  ldr   r0, =_estack
 800341c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8003420:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003424:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8003428:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800342c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003430:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003434:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800343c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003440:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8003444:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003448:	200002a4 	.word	0x200002a4

0800344c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800344c:	e7fe      	b.n	800344c <ADC1_IRQHandler>
	...

08003450 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003454:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <HAL_Init+0x24>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_Init+0x24>)
 800345a:	2110      	movs	r1, #16
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003460:	2003      	movs	r0, #3
 8003462:	f000 f809 	bl	8003478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003466:	f7ff feb9 	bl	80031dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	40022000 	.word	0x40022000

08003478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003480:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <HAL_InitTick+0x5c>)
 8003482:	681c      	ldr	r4, [r3, #0]
 8003484:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <HAL_InitTick+0x60>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	0019      	movs	r1, r3
 800348a:	23fa      	movs	r3, #250	@ 0xfa
 800348c:	0098      	lsls	r0, r3, #2
 800348e:	f7fc fe45 	bl	800011c <__udivsi3>
 8003492:	0003      	movs	r3, r0
 8003494:	0019      	movs	r1, r3
 8003496:	0020      	movs	r0, r4
 8003498:	f7fc fe40 	bl	800011c <__udivsi3>
 800349c:	0003      	movs	r3, r0
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 f92f 	bl	8003702 <HAL_SYSTICK_Config>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d001      	beq.n	80034ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e00f      	b.n	80034cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d80b      	bhi.n	80034ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	2301      	movs	r3, #1
 80034b6:	425b      	negs	r3, r3
 80034b8:	2200      	movs	r2, #0
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 f8fc 	bl	80036b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c0:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <HAL_InitTick+0x64>)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b003      	add	sp, #12
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	20000004 	.word	0x20000004
 80034d8:	2000000c 	.word	0x2000000c
 80034dc:	20000008 	.word	0x20000008

080034e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_IncTick+0x1c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	001a      	movs	r2, r3
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_IncTick+0x20>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	18d2      	adds	r2, r2, r3
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <HAL_IncTick+0x20>)
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	46c0      	nop			@ (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			@ (mov r8, r8)
 80034fc:	2000000c 	.word	0x2000000c
 8003500:	20000158 	.word	0x20000158

08003504 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;
 8003508:	4b02      	ldr	r3, [pc, #8]	@ (8003514 <HAL_GetTick+0x10>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	20000158 	.word	0x20000158

08003518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7ff fff0 	bl	8003504 <HAL_GetTick>
 8003524:	0003      	movs	r3, r0
 8003526:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3301      	adds	r3, #1
 8003530:	d005      	beq.n	800353e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_Delay+0x44>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	001a      	movs	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	189b      	adds	r3, r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	f7ff ffe0 	bl	8003504 <HAL_GetTick>
 8003544:	0002      	movs	r2, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d8f7      	bhi.n	8003540 <HAL_Delay+0x28>
  {
  }
}
 8003550:	46c0      	nop			@ (mov r8, r8)
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b004      	add	sp, #16
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	2000000c 	.word	0x2000000c

08003560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	0002      	movs	r2, r0
 8003568:	1dfb      	adds	r3, r7, #7
 800356a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800356c:	1dfb      	adds	r3, r7, #7
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b7f      	cmp	r3, #127	@ 0x7f
 8003572:	d809      	bhi.n	8003588 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003574:	1dfb      	adds	r3, r7, #7
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	001a      	movs	r2, r3
 800357a:	231f      	movs	r3, #31
 800357c:	401a      	ands	r2, r3
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <__NVIC_EnableIRQ+0x30>)
 8003580:	2101      	movs	r1, #1
 8003582:	4091      	lsls	r1, r2
 8003584:	000a      	movs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]
  }
}
 8003588:	46c0      	nop			@ (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b002      	add	sp, #8
 800358e:	bd80      	pop	{r7, pc}
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	0002      	movs	r2, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	1dfb      	adds	r3, r7, #7
 80035a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035a2:	1dfb      	adds	r3, r7, #7
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80035a8:	d828      	bhi.n	80035fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003668 <__NVIC_SetPriority+0xd4>)
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	33c0      	adds	r3, #192	@ 0xc0
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	589b      	ldr	r3, [r3, r2]
 80035ba:	1dfa      	adds	r2, r7, #7
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	0011      	movs	r1, r2
 80035c0:	2203      	movs	r2, #3
 80035c2:	400a      	ands	r2, r1
 80035c4:	00d2      	lsls	r2, r2, #3
 80035c6:	21ff      	movs	r1, #255	@ 0xff
 80035c8:	4091      	lsls	r1, r2
 80035ca:	000a      	movs	r2, r1
 80035cc:	43d2      	mvns	r2, r2
 80035ce:	401a      	ands	r2, r3
 80035d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	019b      	lsls	r3, r3, #6
 80035d6:	22ff      	movs	r2, #255	@ 0xff
 80035d8:	401a      	ands	r2, r3
 80035da:	1dfb      	adds	r3, r7, #7
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	0018      	movs	r0, r3
 80035e0:	2303      	movs	r3, #3
 80035e2:	4003      	ands	r3, r0
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035e8:	481f      	ldr	r0, [pc, #124]	@ (8003668 <__NVIC_SetPriority+0xd4>)
 80035ea:	1dfb      	adds	r3, r7, #7
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	430a      	orrs	r2, r1
 80035f4:	33c0      	adds	r3, #192	@ 0xc0
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80035fa:	e031      	b.n	8003660 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035fc:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <__NVIC_SetPriority+0xd8>)
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	0019      	movs	r1, r3
 8003604:	230f      	movs	r3, #15
 8003606:	400b      	ands	r3, r1
 8003608:	3b08      	subs	r3, #8
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	3306      	adds	r3, #6
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	18d3      	adds	r3, r2, r3
 8003612:	3304      	adds	r3, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1dfa      	adds	r2, r7, #7
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	0011      	movs	r1, r2
 800361c:	2203      	movs	r2, #3
 800361e:	400a      	ands	r2, r1
 8003620:	00d2      	lsls	r2, r2, #3
 8003622:	21ff      	movs	r1, #255	@ 0xff
 8003624:	4091      	lsls	r1, r2
 8003626:	000a      	movs	r2, r1
 8003628:	43d2      	mvns	r2, r2
 800362a:	401a      	ands	r2, r3
 800362c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	22ff      	movs	r2, #255	@ 0xff
 8003634:	401a      	ands	r2, r3
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	0018      	movs	r0, r3
 800363c:	2303      	movs	r3, #3
 800363e:	4003      	ands	r3, r0
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003644:	4809      	ldr	r0, [pc, #36]	@ (800366c <__NVIC_SetPriority+0xd8>)
 8003646:	1dfb      	adds	r3, r7, #7
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	001c      	movs	r4, r3
 800364c:	230f      	movs	r3, #15
 800364e:	4023      	ands	r3, r4
 8003650:	3b08      	subs	r3, #8
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	430a      	orrs	r2, r1
 8003656:	3306      	adds	r3, #6
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	18c3      	adds	r3, r0, r3
 800365c:	3304      	adds	r3, #4
 800365e:	601a      	str	r2, [r3, #0]
}
 8003660:	46c0      	nop			@ (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b003      	add	sp, #12
 8003666:	bd90      	pop	{r4, r7, pc}
 8003668:	e000e100 	.word	0xe000e100
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	1e5a      	subs	r2, r3, #1
 800367c:	2380      	movs	r3, #128	@ 0x80
 800367e:	045b      	lsls	r3, r3, #17
 8003680:	429a      	cmp	r2, r3
 8003682:	d301      	bcc.n	8003688 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003684:	2301      	movs	r3, #1
 8003686:	e010      	b.n	80036aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003688:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <SysTick_Config+0x44>)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	3a01      	subs	r2, #1
 800368e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003690:	2301      	movs	r3, #1
 8003692:	425b      	negs	r3, r3
 8003694:	2103      	movs	r1, #3
 8003696:	0018      	movs	r0, r3
 8003698:	f7ff ff7c 	bl	8003594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800369c:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <SysTick_Config+0x44>)
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a2:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <SysTick_Config+0x44>)
 80036a4:	2207      	movs	r2, #7
 80036a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b002      	add	sp, #8
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	e000e010 	.word	0xe000e010

080036b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	210f      	movs	r1, #15
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	1c02      	adds	r2, r0, #0
 80036c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	0011      	movs	r1, r2
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7ff ff5d 	bl	8003594 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b004      	add	sp, #16
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	0002      	movs	r2, r0
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ee:	1dfb      	adds	r3, r7, #7
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b25b      	sxtb	r3, r3
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff ff33 	bl	8003560 <__NVIC_EnableIRQ>
}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff ffaf 	bl	8003670 <SysTick_Config>
 8003712:	0003      	movs	r3, r0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b002      	add	sp, #8
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372a:	e149      	b.n	80039c0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4091      	lsls	r1, r2
 8003736:	000a      	movs	r2, r1
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d100      	bne.n	8003744 <HAL_GPIO_Init+0x28>
 8003742:	e13a      	b.n	80039ba <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2203      	movs	r2, #3
 800374a:	4013      	ands	r3, r2
 800374c:	2b01      	cmp	r3, #1
 800374e:	d005      	beq.n	800375c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2203      	movs	r2, #3
 8003756:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003758:	2b02      	cmp	r3, #2
 800375a:	d130      	bne.n	80037be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	409a      	lsls	r2, r3
 800376a:	0013      	movs	r3, r2
 800376c:	43da      	mvns	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	409a      	lsls	r2, r3
 800377e:	0013      	movs	r3, r2
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003792:	2201      	movs	r2, #1
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	409a      	lsls	r2, r3
 8003798:	0013      	movs	r3, r2
 800379a:	43da      	mvns	r2, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	2201      	movs	r2, #1
 80037aa:	401a      	ands	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	409a      	lsls	r2, r3
 80037b0:	0013      	movs	r3, r2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2203      	movs	r2, #3
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d017      	beq.n	80037fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2203      	movs	r2, #3
 80037d6:	409a      	lsls	r2, r3
 80037d8:	0013      	movs	r3, r2
 80037da:	43da      	mvns	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	409a      	lsls	r2, r3
 80037ec:	0013      	movs	r3, r2
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2203      	movs	r2, #3
 8003800:	4013      	ands	r3, r2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d123      	bne.n	800384e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	58d3      	ldr	r3, [r2, r3]
 8003812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2207      	movs	r2, #7
 8003818:	4013      	ands	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	220f      	movs	r2, #15
 800381e:	409a      	lsls	r2, r3
 8003820:	0013      	movs	r3, r2
 8003822:	43da      	mvns	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2107      	movs	r1, #7
 8003832:	400b      	ands	r3, r1
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	409a      	lsls	r2, r3
 8003838:	0013      	movs	r3, r2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	08da      	lsrs	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3208      	adds	r2, #8
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	6939      	ldr	r1, [r7, #16]
 800384c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	409a      	lsls	r2, r3
 800385c:	0013      	movs	r3, r2
 800385e:	43da      	mvns	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2203      	movs	r2, #3
 800386c:	401a      	ands	r2, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	409a      	lsls	r2, r3
 8003874:	0013      	movs	r3, r2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	23c0      	movs	r3, #192	@ 0xc0
 8003888:	029b      	lsls	r3, r3, #10
 800388a:	4013      	ands	r3, r2
 800388c:	d100      	bne.n	8003890 <HAL_GPIO_Init+0x174>
 800388e:	e094      	b.n	80039ba <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003890:	4b51      	ldr	r3, [pc, #324]	@ (80039d8 <HAL_GPIO_Init+0x2bc>)
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	4b50      	ldr	r3, [pc, #320]	@ (80039d8 <HAL_GPIO_Init+0x2bc>)
 8003896:	2101      	movs	r1, #1
 8003898:	430a      	orrs	r2, r1
 800389a:	619a      	str	r2, [r3, #24]
 800389c:	4b4e      	ldr	r3, [pc, #312]	@ (80039d8 <HAL_GPIO_Init+0x2bc>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2201      	movs	r2, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038a8:	4a4c      	ldr	r2, [pc, #304]	@ (80039dc <HAL_GPIO_Init+0x2c0>)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	3302      	adds	r3, #2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	589b      	ldr	r3, [r3, r2]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2203      	movs	r2, #3
 80038ba:	4013      	ands	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	220f      	movs	r2, #15
 80038c0:	409a      	lsls	r2, r3
 80038c2:	0013      	movs	r3, r2
 80038c4:	43da      	mvns	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	2390      	movs	r3, #144	@ 0x90
 80038d0:	05db      	lsls	r3, r3, #23
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d00d      	beq.n	80038f2 <HAL_GPIO_Init+0x1d6>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a41      	ldr	r2, [pc, #260]	@ (80039e0 <HAL_GPIO_Init+0x2c4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <HAL_GPIO_Init+0x1d2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a40      	ldr	r2, [pc, #256]	@ (80039e4 <HAL_GPIO_Init+0x2c8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_GPIO_Init+0x1ce>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e004      	b.n	80038f4 <HAL_GPIO_Init+0x1d8>
 80038ea:	2305      	movs	r3, #5
 80038ec:	e002      	b.n	80038f4 <HAL_GPIO_Init+0x1d8>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_GPIO_Init+0x1d8>
 80038f2:	2300      	movs	r3, #0
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	2103      	movs	r1, #3
 80038f8:	400a      	ands	r2, r1
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	4093      	lsls	r3, r2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003904:	4935      	ldr	r1, [pc, #212]	@ (80039dc <HAL_GPIO_Init+0x2c0>)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003912:	4b35      	ldr	r3, [pc, #212]	@ (80039e8 <HAL_GPIO_Init+0x2cc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43da      	mvns	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	035b      	lsls	r3, r3, #13
 800392a:	4013      	ands	r3, r2
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003936:	4b2c      	ldr	r3, [pc, #176]	@ (80039e8 <HAL_GPIO_Init+0x2cc>)
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800393c:	4b2a      	ldr	r3, [pc, #168]	@ (80039e8 <HAL_GPIO_Init+0x2cc>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43da      	mvns	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	2380      	movs	r3, #128	@ 0x80
 8003952:	039b      	lsls	r3, r3, #14
 8003954:	4013      	ands	r3, r2
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003960:	4b21      	ldr	r3, [pc, #132]	@ (80039e8 <HAL_GPIO_Init+0x2cc>)
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003966:	4b20      	ldr	r3, [pc, #128]	@ (80039e8 <HAL_GPIO_Init+0x2cc>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43da      	mvns	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	4013      	ands	r3, r2
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800398a:	4b17      	ldr	r3, [pc, #92]	@ (80039e8 <HAL_GPIO_Init+0x2cc>)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003990:	4b15      	ldr	r3, [pc, #84]	@ (80039e8 <HAL_GPIO_Init+0x2cc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43da      	mvns	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	025b      	lsls	r3, r3, #9
 80039a8:	4013      	ands	r3, r2
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <HAL_GPIO_Init+0x2cc>)
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	40da      	lsrs	r2, r3
 80039c8:	1e13      	subs	r3, r2, #0
 80039ca:	d000      	beq.n	80039ce <HAL_GPIO_Init+0x2b2>
 80039cc:	e6ae      	b.n	800372c <HAL_GPIO_Init+0x10>
  } 
}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	46c0      	nop			@ (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b006      	add	sp, #24
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	000a      	movs	r2, r1
 80039f6:	1cbb      	adds	r3, r7, #2
 80039f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	1cba      	adds	r2, r7, #2
 8003a00:	8812      	ldrh	r2, [r2, #0]
 8003a02:	4013      	ands	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003a06:	230f      	movs	r3, #15
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e003      	b.n	8003a18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a10:	230f      	movs	r3, #15
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003a18:	230f      	movs	r3, #15
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	781b      	ldrb	r3, [r3, #0]
  }
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	0008      	movs	r0, r1
 8003a30:	0011      	movs	r1, r2
 8003a32:	1cbb      	adds	r3, r7, #2
 8003a34:	1c02      	adds	r2, r0, #0
 8003a36:	801a      	strh	r2, [r3, #0]
 8003a38:	1c7b      	adds	r3, r7, #1
 8003a3a:	1c0a      	adds	r2, r1, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a3e:	1c7b      	adds	r3, r7, #1
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a46:	1cbb      	adds	r3, r7, #2
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a4e:	e003      	b.n	8003a58 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a50:	1cbb      	adds	r3, r7, #2
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a58:	46c0      	nop			@ (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e08f      	b.n	8003b92 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2241      	movs	r2, #65	@ 0x41
 8003a76:	5c9b      	ldrb	r3, [r3, r2]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2240      	movs	r2, #64	@ 0x40
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff fbcb 	bl	8003224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2241      	movs	r2, #65	@ 0x41
 8003a92:	2124      	movs	r1, #36	@ 0x24
 8003a94:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	493b      	ldr	r1, [pc, #236]	@ (8003b9c <HAL_I2C_Init+0x13c>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4938      	ldr	r1, [pc, #224]	@ (8003ba0 <HAL_I2C_Init+0x140>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d108      	bne.n	8003ade <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2180      	movs	r1, #128	@ 0x80
 8003ad6:	0209      	lsls	r1, r1, #8
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	e007      	b.n	8003aee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2184      	movs	r1, #132	@ 0x84
 8003ae8:	0209      	lsls	r1, r1, #8
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d109      	bne.n	8003b0a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2180      	movs	r1, #128	@ 0x80
 8003b02:	0109      	lsls	r1, r1, #4
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	e007      	b.n	8003b1a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4923      	ldr	r1, [pc, #140]	@ (8003ba4 <HAL_I2C_Init+0x144>)
 8003b16:	400a      	ands	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4920      	ldr	r1, [pc, #128]	@ (8003ba8 <HAL_I2C_Init+0x148>)
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	491a      	ldr	r1, [pc, #104]	@ (8003ba0 <HAL_I2C_Init+0x140>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69d9      	ldr	r1, [r3, #28]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2241      	movs	r2, #65	@ 0x41
 8003b7e:	2120      	movs	r1, #32
 8003b80:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2242      	movs	r2, #66	@ 0x42
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	f0ffffff 	.word	0xf0ffffff
 8003ba0:	ffff7fff 	.word	0xffff7fff
 8003ba4:	fffff7ff 	.word	0xfffff7ff
 8003ba8:	02008000 	.word	0x02008000

08003bac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b089      	sub	sp, #36	@ 0x24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	0008      	movs	r0, r1
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	0019      	movs	r1, r3
 8003bba:	230a      	movs	r3, #10
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	1c02      	adds	r2, r0, #0
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	1c0a      	adds	r2, r1, #0
 8003bc8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2241      	movs	r2, #65	@ 0x41
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d000      	beq.n	8003bd8 <HAL_I2C_Master_Transmit+0x2c>
 8003bd6:	e10a      	b.n	8003dee <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2240      	movs	r2, #64	@ 0x40
 8003bdc:	5c9b      	ldrb	r3, [r3, r2]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_I2C_Master_Transmit+0x3a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e104      	b.n	8003df0 <HAL_I2C_Master_Transmit+0x244>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2240      	movs	r2, #64	@ 0x40
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bee:	f7ff fc89 	bl	8003504 <HAL_GetTick>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bf6:	2380      	movs	r3, #128	@ 0x80
 8003bf8:	0219      	lsls	r1, r3, #8
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2319      	movs	r3, #25
 8003c02:	2201      	movs	r2, #1
 8003c04:	f000 fb22 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003c08:	1e03      	subs	r3, r0, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0ef      	b.n	8003df0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2241      	movs	r2, #65	@ 0x41
 8003c14:	2121      	movs	r1, #33	@ 0x21
 8003c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2242      	movs	r2, #66	@ 0x42
 8003c1c:	2110      	movs	r1, #16
 8003c1e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2208      	movs	r2, #8
 8003c30:	18ba      	adds	r2, r7, r2
 8003c32:	8812      	ldrh	r2, [r2, #0]
 8003c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2bff      	cmp	r3, #255	@ 0xff
 8003c44:	d906      	bls.n	8003c54 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	22ff      	movs	r2, #255	@ 0xff
 8003c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c4c:	2380      	movs	r3, #128	@ 0x80
 8003c4e:	045b      	lsls	r3, r3, #17
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e007      	b.n	8003c64 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	049b      	lsls	r3, r3, #18
 8003c62:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d027      	beq.n	8003cbc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	697c      	ldr	r4, [r7, #20]
 8003ca8:	230a      	movs	r3, #10
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	8819      	ldrh	r1, [r3, #0]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	4b51      	ldr	r3, [pc, #324]	@ (8003df8 <HAL_I2C_Master_Transmit+0x24c>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	0023      	movs	r3, r4
 8003cb6:	f000 fd41 	bl	800473c <I2C_TransferConfig>
 8003cba:	e06f      	b.n	8003d9c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	697c      	ldr	r4, [r7, #20]
 8003cc4:	230a      	movs	r3, #10
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	8819      	ldrh	r1, [r3, #0]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8003df8 <HAL_I2C_Master_Transmit+0x24c>)
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	0023      	movs	r3, r4
 8003cd2:	f000 fd33 	bl	800473c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cd6:	e061      	b.n	8003d9c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 fb0c 	bl	80042fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce4:	1e03      	subs	r3, r0, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e081      	b.n	8003df0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d03a      	beq.n	8003d9c <HAL_I2C_Master_Transmit+0x1f0>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d136      	bne.n	8003d9c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	0013      	movs	r3, r2
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	@ 0x80
 8003d3c:	f000 fa86 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e053      	b.n	8003df0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2bff      	cmp	r3, #255	@ 0xff
 8003d50:	d911      	bls.n	8003d76 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	22ff      	movs	r2, #255	@ 0xff
 8003d56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	2380      	movs	r3, #128	@ 0x80
 8003d60:	045c      	lsls	r4, r3, #17
 8003d62:	230a      	movs	r3, #10
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	8819      	ldrh	r1, [r3, #0]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	0023      	movs	r3, r4
 8003d70:	f000 fce4 	bl	800473c <I2C_TransferConfig>
 8003d74:	e012      	b.n	8003d9c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	049c      	lsls	r4, r3, #18
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	8819      	ldrh	r1, [r3, #0]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	0023      	movs	r3, r4
 8003d98:	f000 fcd0 	bl	800473c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d198      	bne.n	8003cd8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 faeb 	bl	8004388 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e01a      	b.n	8003df0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	490b      	ldr	r1, [pc, #44]	@ (8003dfc <HAL_I2C_Master_Transmit+0x250>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2241      	movs	r2, #65	@ 0x41
 8003dd6:	2120      	movs	r1, #32
 8003dd8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2242      	movs	r2, #66	@ 0x42
 8003dde:	2100      	movs	r1, #0
 8003de0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2240      	movs	r2, #64	@ 0x40
 8003de6:	2100      	movs	r1, #0
 8003de8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
  }
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b007      	add	sp, #28
 8003df6:	bd90      	pop	{r4, r7, pc}
 8003df8:	80002000 	.word	0x80002000
 8003dfc:	fe00e800 	.word	0xfe00e800

08003e00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b089      	sub	sp, #36	@ 0x24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	0008      	movs	r0, r1
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	230a      	movs	r3, #10
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	1c02      	adds	r2, r0, #0
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	2308      	movs	r3, #8
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	1c0a      	adds	r2, r1, #0
 8003e1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2241      	movs	r2, #65	@ 0x41
 8003e22:	5c9b      	ldrb	r3, [r3, r2]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d000      	beq.n	8003e2c <HAL_I2C_Master_Receive+0x2c>
 8003e2a:	e0e8      	b.n	8003ffe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2240      	movs	r2, #64	@ 0x40
 8003e30:	5c9b      	ldrb	r3, [r3, r2]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_I2C_Master_Receive+0x3a>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0e2      	b.n	8004000 <HAL_I2C_Master_Receive+0x200>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2240      	movs	r2, #64	@ 0x40
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e42:	f7ff fb5f 	bl	8003504 <HAL_GetTick>
 8003e46:	0003      	movs	r3, r0
 8003e48:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	0219      	lsls	r1, r3, #8
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2319      	movs	r3, #25
 8003e56:	2201      	movs	r2, #1
 8003e58:	f000 f9f8 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cd      	b.n	8004000 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2241      	movs	r2, #65	@ 0x41
 8003e68:	2122      	movs	r1, #34	@ 0x22
 8003e6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2242      	movs	r2, #66	@ 0x42
 8003e70:	2110      	movs	r1, #16
 8003e72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2208      	movs	r2, #8
 8003e84:	18ba      	adds	r2, r7, r2
 8003e86:	8812      	ldrh	r2, [r2, #0]
 8003e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2bff      	cmp	r3, #255	@ 0xff
 8003e98:	d911      	bls.n	8003ebe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	045c      	lsls	r4, r3, #17
 8003eaa:	230a      	movs	r3, #10
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	8819      	ldrh	r1, [r3, #0]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	4b55      	ldr	r3, [pc, #340]	@ (8004008 <HAL_I2C_Master_Receive+0x208>)
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	0023      	movs	r3, r4
 8003eb8:	f000 fc40 	bl	800473c <I2C_TransferConfig>
 8003ebc:	e076      	b.n	8003fac <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	2380      	movs	r3, #128	@ 0x80
 8003ed0:	049c      	lsls	r4, r3, #18
 8003ed2:	230a      	movs	r3, #10
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	8819      	ldrh	r1, [r3, #0]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	4b4b      	ldr	r3, [pc, #300]	@ (8004008 <HAL_I2C_Master_Receive+0x208>)
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	0023      	movs	r3, r4
 8003ee0:	f000 fc2c 	bl	800473c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ee4:	e062      	b.n	8003fac <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 fa8f 	bl	8004410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ef2:	1e03      	subs	r3, r0, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e082      	b.n	8004000 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03a      	beq.n	8003fac <HAL_I2C_Master_Receive+0x1ac>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d136      	bne.n	8003fac <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	0013      	movs	r3, r2
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2180      	movs	r1, #128	@ 0x80
 8003f4c:	f000 f97e 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8003f50:	1e03      	subs	r3, r0, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e053      	b.n	8004000 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2bff      	cmp	r3, #255	@ 0xff
 8003f60:	d911      	bls.n	8003f86 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	22ff      	movs	r2, #255	@ 0xff
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	2380      	movs	r3, #128	@ 0x80
 8003f70:	045c      	lsls	r4, r3, #17
 8003f72:	230a      	movs	r3, #10
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	8819      	ldrh	r1, [r3, #0]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	0023      	movs	r3, r4
 8003f80:	f000 fbdc 	bl	800473c <I2C_TransferConfig>
 8003f84:	e012      	b.n	8003fac <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	049c      	lsls	r4, r3, #18
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	8819      	ldrh	r1, [r3, #0]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	0023      	movs	r3, r4
 8003fa8:	f000 fbc8 	bl	800473c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d197      	bne.n	8003ee6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f000 f9e3 	bl	8004388 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fc2:	1e03      	subs	r3, r0, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e01a      	b.n	8004000 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	490b      	ldr	r1, [pc, #44]	@ (800400c <HAL_I2C_Master_Receive+0x20c>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2241      	movs	r2, #65	@ 0x41
 8003fe6:	2120      	movs	r1, #32
 8003fe8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2242      	movs	r2, #66	@ 0x42
 8003fee:	2100      	movs	r1, #0
 8003ff0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2240      	movs	r2, #64	@ 0x40
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b007      	add	sp, #28
 8004006:	bd90      	pop	{r4, r7, pc}
 8004008:	80002400 	.word	0x80002400
 800400c:	fe00e800 	.word	0xfe00e800

08004010 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	230a      	movs	r3, #10
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	1c0a      	adds	r2, r1, #0
 8004022:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2241      	movs	r2, #65	@ 0x41
 800402c:	5c9b      	ldrb	r3, [r3, r2]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	d000      	beq.n	8004036 <HAL_I2C_IsDeviceReady+0x26>
 8004034:	e0df      	b.n	80041f6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	2380      	movs	r3, #128	@ 0x80
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	401a      	ands	r2, r3
 8004042:	2380      	movs	r3, #128	@ 0x80
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	429a      	cmp	r2, r3
 8004048:	d101      	bne.n	800404e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
 800404c:	e0d4      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2240      	movs	r2, #64	@ 0x40
 8004052:	5c9b      	ldrb	r3, [r3, r2]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_I2C_IsDeviceReady+0x4c>
 8004058:	2302      	movs	r3, #2
 800405a:	e0cd      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x1e8>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2240      	movs	r2, #64	@ 0x40
 8004060:	2101      	movs	r1, #1
 8004062:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2241      	movs	r2, #65	@ 0x41
 8004068:	2124      	movs	r1, #36	@ 0x24
 800406a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <HAL_I2C_IsDeviceReady+0x7a>
 800407a:	230a      	movs	r3, #10
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	059b      	lsls	r3, r3, #22
 8004082:	0d9b      	lsrs	r3, r3, #22
 8004084:	4a5e      	ldr	r2, [pc, #376]	@ (8004200 <HAL_I2C_IsDeviceReady+0x1f0>)
 8004086:	431a      	orrs	r2, r3
 8004088:	e006      	b.n	8004098 <HAL_I2C_IsDeviceReady+0x88>
 800408a:	230a      	movs	r3, #10
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	059b      	lsls	r3, r3, #22
 8004092:	0d9b      	lsrs	r3, r3, #22
 8004094:	4a5b      	ldr	r2, [pc, #364]	@ (8004204 <HAL_I2C_IsDeviceReady+0x1f4>)
 8004096:	431a      	orrs	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800409e:	f7ff fa31 	bl	8003504 <HAL_GetTick>
 80040a2:	0003      	movs	r3, r0
 80040a4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2220      	movs	r2, #32
 80040ae:	4013      	ands	r3, r2
 80040b0:	3b20      	subs	r3, #32
 80040b2:	425a      	negs	r2, r3
 80040b4:	4153      	adcs	r3, r2
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	231f      	movs	r3, #31
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2210      	movs	r2, #16
 80040c6:	4013      	ands	r3, r2
 80040c8:	3b10      	subs	r3, #16
 80040ca:	425a      	negs	r2, r3
 80040cc:	4153      	adcs	r3, r2
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	231e      	movs	r3, #30
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80040d6:	e035      	b.n	8004144 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	d01a      	beq.n	8004114 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7ff fa11 	bl	8003504 <HAL_GetTick>
 80040e2:	0002      	movs	r2, r0
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <HAL_I2C_IsDeviceReady+0xe4>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10f      	bne.n	8004114 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2241      	movs	r2, #65	@ 0x41
 80040f8:	2120      	movs	r1, #32
 80040fa:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004100:	2220      	movs	r2, #32
 8004102:	431a      	orrs	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2240      	movs	r2, #64	@ 0x40
 800410c:	2100      	movs	r1, #0
 800410e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e071      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2220      	movs	r2, #32
 800411c:	4013      	ands	r3, r2
 800411e:	3b20      	subs	r3, #32
 8004120:	425a      	negs	r2, r3
 8004122:	4153      	adcs	r3, r2
 8004124:	b2da      	uxtb	r2, r3
 8004126:	231f      	movs	r3, #31
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2210      	movs	r2, #16
 8004134:	4013      	ands	r3, r2
 8004136:	3b10      	subs	r3, #16
 8004138:	425a      	negs	r2, r3
 800413a:	4153      	adcs	r3, r2
 800413c:	b2da      	uxtb	r2, r3
 800413e:	231e      	movs	r3, #30
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004144:	231f      	movs	r3, #31
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <HAL_I2C_IsDeviceReady+0x148>
 800414e:	231e      	movs	r3, #30
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0bf      	beq.n	80040d8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2210      	movs	r2, #16
 8004160:	4013      	ands	r3, r2
 8004162:	2b10      	cmp	r3, #16
 8004164:	d01a      	beq.n	800419c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	0013      	movs	r3, r2
 8004170:	2200      	movs	r2, #0
 8004172:	2120      	movs	r1, #32
 8004174:	f000 f86a 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e03b      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2220      	movs	r2, #32
 8004186:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2241      	movs	r2, #65	@ 0x41
 800418c:	2120      	movs	r1, #32
 800418e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e02d      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	0013      	movs	r3, r2
 80041a6:	2200      	movs	r2, #0
 80041a8:	2120      	movs	r1, #32
 80041aa:	f000 f84f 	bl	800424c <I2C_WaitOnFlagUntilTimeout>
 80041ae:	1e03      	subs	r3, r0, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e020      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2210      	movs	r2, #16
 80041bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2220      	movs	r2, #32
 80041c4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3301      	adds	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d900      	bls.n	80041d6 <HAL_I2C_IsDeviceReady+0x1c6>
 80041d4:	e74d      	b.n	8004072 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2241      	movs	r2, #65	@ 0x41
 80041da:	2120      	movs	r1, #32
 80041dc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	2220      	movs	r2, #32
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2240      	movs	r2, #64	@ 0x40
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b008      	add	sp, #32
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	02002000 	.word	0x02002000
 8004204:	02002800 	.word	0x02002800

08004208 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2202      	movs	r2, #2
 8004218:	4013      	ands	r3, r2
 800421a:	2b02      	cmp	r3, #2
 800421c:	d103      	bne.n	8004226 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2201      	movs	r2, #1
 800422e:	4013      	ands	r3, r2
 8004230:	2b01      	cmp	r3, #1
 8004232:	d007      	beq.n	8004244 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2101      	movs	r1, #1
 8004240:	430a      	orrs	r2, r1
 8004242:	619a      	str	r2, [r3, #24]
  }
}
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	1dfb      	adds	r3, r7, #7
 800425a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800425c:	e03a      	b.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	0018      	movs	r0, r3
 8004266:	f000 f971 	bl	800454c <I2C_IsErrorOccurred>
 800426a:	1e03      	subs	r3, r0, #0
 800426c:	d001      	beq.n	8004272 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e040      	b.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	d02d      	beq.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004278:	f7ff f944 	bl	8003504 <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d122      	bne.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	425a      	negs	r2, r3
 800429e:	4153      	adcs	r3, r2
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	001a      	movs	r2, r3
 80042a4:	1dfb      	adds	r3, r7, #7
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d113      	bne.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b0:	2220      	movs	r2, #32
 80042b2:	431a      	orrs	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2241      	movs	r2, #65	@ 0x41
 80042bc:	2120      	movs	r1, #32
 80042be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2242      	movs	r2, #66	@ 0x42
 80042c4:	2100      	movs	r1, #0
 80042c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2240      	movs	r2, #64	@ 0x40
 80042cc:	2100      	movs	r1, #0
 80042ce:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e00f      	b.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	425a      	negs	r2, r3
 80042e4:	4153      	adcs	r3, r2
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	001a      	movs	r2, r3
 80042ea:	1dfb      	adds	r3, r7, #7
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d0b5      	beq.n	800425e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b004      	add	sp, #16
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004308:	e032      	b.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	0018      	movs	r0, r3
 8004312:	f000 f91b 	bl	800454c <I2C_IsErrorOccurred>
 8004316:	1e03      	subs	r3, r0, #0
 8004318:	d001      	beq.n	800431e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e030      	b.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3301      	adds	r3, #1
 8004322:	d025      	beq.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7ff f8ee 	bl	8003504 <HAL_GetTick>
 8004328:	0002      	movs	r2, r0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11a      	bne.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2202      	movs	r2, #2
 8004342:	4013      	ands	r3, r2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d013      	beq.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434c:	2220      	movs	r2, #32
 800434e:	431a      	orrs	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2241      	movs	r2, #65	@ 0x41
 8004358:	2120      	movs	r1, #32
 800435a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2242      	movs	r2, #66	@ 0x42
 8004360:	2100      	movs	r1, #0
 8004362:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	@ 0x40
 8004368:	2100      	movs	r1, #0
 800436a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e007      	b.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2202      	movs	r2, #2
 8004378:	4013      	ands	r3, r2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d1c5      	bne.n	800430a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b004      	add	sp, #16
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004394:	e02f      	b.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	0018      	movs	r0, r3
 800439e:	f000 f8d5 	bl	800454c <I2C_IsErrorOccurred>
 80043a2:	1e03      	subs	r3, r0, #0
 80043a4:	d001      	beq.n	80043aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e02d      	b.n	8004406 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7ff f8ab 	bl	8003504 <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d11a      	bne.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2220      	movs	r2, #32
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d013      	beq.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d2:	2220      	movs	r2, #32
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2241      	movs	r2, #65	@ 0x41
 80043de:	2120      	movs	r1, #32
 80043e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2242      	movs	r2, #66	@ 0x42
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2240      	movs	r2, #64	@ 0x40
 80043ee:	2100      	movs	r1, #0
 80043f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e007      	b.n	8004406 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2220      	movs	r2, #32
 80043fe:	4013      	ands	r3, r2
 8004400:	2b20      	cmp	r3, #32
 8004402:	d1c8      	bne.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	0018      	movs	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	b004      	add	sp, #16
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800441c:	2317      	movs	r3, #23
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004424:	e07b      	b.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	0018      	movs	r0, r3
 800442e:	f000 f88d 	bl	800454c <I2C_IsErrorOccurred>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d003      	beq.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004436:	2317      	movs	r3, #23
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2220      	movs	r2, #32
 8004446:	4013      	ands	r3, r2
 8004448:	2b20      	cmp	r3, #32
 800444a:	d140      	bne.n	80044ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800444c:	2117      	movs	r1, #23
 800444e:	187b      	adds	r3, r7, r1
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d13b      	bne.n	80044ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2204      	movs	r2, #4
 800445e:	4013      	ands	r3, r2
 8004460:	2b04      	cmp	r3, #4
 8004462:	d106      	bne.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800446c:	187b      	adds	r3, r7, r1
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	2210      	movs	r2, #16
 800447a:	4013      	ands	r3, r2
 800447c:	2b10      	cmp	r3, #16
 800447e:	d123      	bne.n	80044c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2210      	movs	r2, #16
 8004486:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2204      	movs	r2, #4
 800448c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2220      	movs	r2, #32
 8004494:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4929      	ldr	r1, [pc, #164]	@ (8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80044a2:	400a      	ands	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2241      	movs	r2, #65	@ 0x41
 80044aa:	2120      	movs	r1, #32
 80044ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2242      	movs	r2, #66	@ 0x42
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80044be:	2317      	movs	r3, #23
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e002      	b.n	80044ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80044ce:	f7ff f819 	bl	8003504 <HAL_GetTick>
 80044d2:	0002      	movs	r2, r0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d302      	bcc.n	80044e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d11c      	bne.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80044e4:	2017      	movs	r0, #23
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d117      	bne.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2204      	movs	r2, #4
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d010      	beq.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004500:	2220      	movs	r2, #32
 8004502:	431a      	orrs	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2241      	movs	r2, #65	@ 0x41
 800450c:	2120      	movs	r1, #32
 800450e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	@ 0x40
 8004514:	2100      	movs	r1, #0
 8004516:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004518:	183b      	adds	r3, r7, r0
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2204      	movs	r2, #4
 8004526:	4013      	ands	r3, r2
 8004528:	2b04      	cmp	r3, #4
 800452a:	d005      	beq.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800452c:	2317      	movs	r3, #23
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d100      	bne.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004536:	e776      	b.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004538:	2317      	movs	r3, #23
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	781b      	ldrb	r3, [r3, #0]
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b006      	add	sp, #24
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	fe00e800 	.word	0xfe00e800

0800454c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	@ 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004558:	2327      	movs	r3, #39	@ 0x27
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2210      	movs	r2, #16
 8004574:	4013      	ands	r3, r2
 8004576:	d100      	bne.n	800457a <I2C_IsErrorOccurred+0x2e>
 8004578:	e079      	b.n	800466e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2210      	movs	r2, #16
 8004580:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004582:	e057      	b.n	8004634 <I2C_IsErrorOccurred+0xe8>
 8004584:	2227      	movs	r2, #39	@ 0x27
 8004586:	18bb      	adds	r3, r7, r2
 8004588:	18ba      	adds	r2, r7, r2
 800458a:	7812      	ldrb	r2, [r2, #0]
 800458c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3301      	adds	r3, #1
 8004592:	d04f      	beq.n	8004634 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004594:	f7fe ffb6 	bl	8003504 <HAL_GetTick>
 8004598:	0002      	movs	r2, r0
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <I2C_IsErrorOccurred+0x5e>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d144      	bne.n	8004634 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	2380      	movs	r3, #128	@ 0x80
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	4013      	ands	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045b8:	2013      	movs	r0, #19
 80045ba:	183b      	adds	r3, r7, r0
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	2142      	movs	r1, #66	@ 0x42
 80045c0:	5c52      	ldrb	r2, [r2, r1]
 80045c2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	401a      	ands	r2, r3
 80045d0:	2380      	movs	r3, #128	@ 0x80
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d126      	bne.n	8004626 <I2C_IsErrorOccurred+0xda>
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	2380      	movs	r3, #128	@ 0x80
 80045dc:	01db      	lsls	r3, r3, #7
 80045de:	429a      	cmp	r2, r3
 80045e0:	d021      	beq.n	8004626 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80045e2:	183b      	adds	r3, r7, r0
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d01d      	beq.n	8004626 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2180      	movs	r1, #128	@ 0x80
 80045f6:	01c9      	lsls	r1, r1, #7
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045fc:	f7fe ff82 	bl	8003504 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004604:	e00f      	b.n	8004626 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004606:	f7fe ff7d 	bl	8003504 <HAL_GetTick>
 800460a:	0002      	movs	r2, r0
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b19      	cmp	r3, #25
 8004612:	d908      	bls.n	8004626 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	2220      	movs	r2, #32
 8004618:	4313      	orrs	r3, r2
 800461a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800461c:	2327      	movs	r3, #39	@ 0x27
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]

              break;
 8004624:	e006      	b.n	8004634 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2220      	movs	r2, #32
 800462e:	4013      	ands	r3, r2
 8004630:	2b20      	cmp	r3, #32
 8004632:	d1e8      	bne.n	8004606 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2220      	movs	r2, #32
 800463c:	4013      	ands	r3, r2
 800463e:	2b20      	cmp	r3, #32
 8004640:	d004      	beq.n	800464c <I2C_IsErrorOccurred+0x100>
 8004642:	2327      	movs	r3, #39	@ 0x27
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d09b      	beq.n	8004584 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800464c:	2327      	movs	r3, #39	@ 0x27
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2220      	movs	r2, #32
 800465c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	2204      	movs	r2, #4
 8004662:	4313      	orrs	r3, r2
 8004664:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004666:	2327      	movs	r3, #39	@ 0x27
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4013      	ands	r3, r2
 800467e:	d00c      	beq.n	800469a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2201      	movs	r2, #1
 8004684:	4313      	orrs	r3, r2
 8004686:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2280      	movs	r2, #128	@ 0x80
 800468e:	0052      	lsls	r2, r2, #1
 8004690:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004692:	2327      	movs	r3, #39	@ 0x27
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4013      	ands	r3, r2
 80046a2:	d00c      	beq.n	80046be <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	2208      	movs	r2, #8
 80046a8:	4313      	orrs	r3, r2
 80046aa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2280      	movs	r2, #128	@ 0x80
 80046b2:	00d2      	lsls	r2, r2, #3
 80046b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046b6:	2327      	movs	r3, #39	@ 0x27
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4013      	ands	r3, r2
 80046c6:	d00c      	beq.n	80046e2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	2202      	movs	r2, #2
 80046cc:	4313      	orrs	r3, r2
 80046ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2280      	movs	r2, #128	@ 0x80
 80046d6:	0092      	lsls	r2, r2, #2
 80046d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046da:	2327      	movs	r3, #39	@ 0x27
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	2201      	movs	r2, #1
 80046e0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80046e2:	2327      	movs	r3, #39	@ 0x27
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01d      	beq.n	8004728 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7ff fd8a 	bl	8004208 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	490e      	ldr	r1, [pc, #56]	@ (8004738 <I2C_IsErrorOccurred+0x1ec>)
 8004700:	400a      	ands	r2, r1
 8004702:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	431a      	orrs	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2241      	movs	r2, #65	@ 0x41
 8004714:	2120      	movs	r1, #32
 8004716:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2242      	movs	r2, #66	@ 0x42
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2240      	movs	r2, #64	@ 0x40
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004728:	2327      	movs	r3, #39	@ 0x27
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b00a      	add	sp, #40	@ 0x28
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	fe00e800 	.word	0xfe00e800

0800473c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	0008      	movs	r0, r1
 8004746:	0011      	movs	r1, r2
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	240a      	movs	r4, #10
 800474c:	193b      	adds	r3, r7, r4
 800474e:	1c02      	adds	r2, r0, #0
 8004750:	801a      	strh	r2, [r3, #0]
 8004752:	2009      	movs	r0, #9
 8004754:	183b      	adds	r3, r7, r0
 8004756:	1c0a      	adds	r2, r1, #0
 8004758:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800475a:	193b      	adds	r3, r7, r4
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	059b      	lsls	r3, r3, #22
 8004760:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004762:	183b      	adds	r3, r7, r0
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	0419      	lsls	r1, r3, #16
 8004768:	23ff      	movs	r3, #255	@ 0xff
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800476e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	4313      	orrs	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004786:	0d51      	lsrs	r1, r2, #21
 8004788:	2280      	movs	r2, #128	@ 0x80
 800478a:	00d2      	lsls	r2, r2, #3
 800478c:	400a      	ands	r2, r1
 800478e:	4907      	ldr	r1, [pc, #28]	@ (80047ac <I2C_TransferConfig+0x70>)
 8004790:	430a      	orrs	r2, r1
 8004792:	43d2      	mvns	r2, r2
 8004794:	401a      	ands	r2, r3
 8004796:	0011      	movs	r1, r2
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b007      	add	sp, #28
 80047a8:	bd90      	pop	{r4, r7, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	03ff63ff 	.word	0x03ff63ff

080047b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2241      	movs	r2, #65	@ 0x41
 80047be:	5c9b      	ldrb	r3, [r3, r2]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d138      	bne.n	8004838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2240      	movs	r2, #64	@ 0x40
 80047ca:	5c9b      	ldrb	r3, [r3, r2]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e032      	b.n	800483a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2240      	movs	r2, #64	@ 0x40
 80047d8:	2101      	movs	r1, #1
 80047da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2241      	movs	r2, #65	@ 0x41
 80047e0:	2124      	movs	r1, #36	@ 0x24
 80047e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2101      	movs	r1, #1
 80047f0:	438a      	bics	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4911      	ldr	r1, [pc, #68]	@ (8004844 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004800:	400a      	ands	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2101      	movs	r1, #1
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2241      	movs	r2, #65	@ 0x41
 8004828:	2120      	movs	r1, #32
 800482a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2240      	movs	r2, #64	@ 0x40
 8004830:	2100      	movs	r1, #0
 8004832:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b002      	add	sp, #8
 8004840:	bd80      	pop	{r7, pc}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	ffffefff 	.word	0xffffefff

08004848 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2241      	movs	r2, #65	@ 0x41
 8004856:	5c9b      	ldrb	r3, [r3, r2]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b20      	cmp	r3, #32
 800485c:	d139      	bne.n	80048d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2240      	movs	r2, #64	@ 0x40
 8004862:	5c9b      	ldrb	r3, [r3, r2]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004868:	2302      	movs	r3, #2
 800486a:	e033      	b.n	80048d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2240      	movs	r2, #64	@ 0x40
 8004870:	2101      	movs	r1, #1
 8004872:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2241      	movs	r2, #65	@ 0x41
 8004878:	2124      	movs	r1, #36	@ 0x24
 800487a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2101      	movs	r1, #1
 8004888:	438a      	bics	r2, r1
 800488a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a11      	ldr	r2, [pc, #68]	@ (80048dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004898:	4013      	ands	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2101      	movs	r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2241      	movs	r2, #65	@ 0x41
 80048c2:	2120      	movs	r1, #32
 80048c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2240      	movs	r2, #64	@ 0x40
 80048ca:	2100      	movs	r1, #0
 80048cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b004      	add	sp, #16
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	fffff0ff 	.word	0xfffff0ff

080048e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f000 fb76 	bl	8004fe0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2201      	movs	r2, #1
 80048fa:	4013      	ands	r3, r2
 80048fc:	d100      	bne.n	8004900 <HAL_RCC_OscConfig+0x20>
 80048fe:	e08e      	b.n	8004a1e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004900:	4bc5      	ldr	r3, [pc, #788]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	220c      	movs	r2, #12
 8004906:	4013      	ands	r3, r2
 8004908:	2b04      	cmp	r3, #4
 800490a:	d00e      	beq.n	800492a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800490c:	4bc2      	ldr	r3, [pc, #776]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	220c      	movs	r2, #12
 8004912:	4013      	ands	r3, r2
 8004914:	2b08      	cmp	r3, #8
 8004916:	d117      	bne.n	8004948 <HAL_RCC_OscConfig+0x68>
 8004918:	4bbf      	ldr	r3, [pc, #764]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	23c0      	movs	r3, #192	@ 0xc0
 800491e:	025b      	lsls	r3, r3, #9
 8004920:	401a      	ands	r2, r3
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	025b      	lsls	r3, r3, #9
 8004926:	429a      	cmp	r2, r3
 8004928:	d10e      	bne.n	8004948 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492a:	4bbb      	ldr	r3, [pc, #748]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	029b      	lsls	r3, r3, #10
 8004932:	4013      	ands	r3, r2
 8004934:	d100      	bne.n	8004938 <HAL_RCC_OscConfig+0x58>
 8004936:	e071      	b.n	8004a1c <HAL_RCC_OscConfig+0x13c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d000      	beq.n	8004942 <HAL_RCC_OscConfig+0x62>
 8004940:	e06c      	b.n	8004a1c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f000 fb4c 	bl	8004fe0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <HAL_RCC_OscConfig+0x80>
 8004950:	4bb1      	ldr	r3, [pc, #708]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4bb0      	ldr	r3, [pc, #704]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004956:	2180      	movs	r1, #128	@ 0x80
 8004958:	0249      	lsls	r1, r1, #9
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e02f      	b.n	80049c0 <HAL_RCC_OscConfig+0xe0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10c      	bne.n	8004982 <HAL_RCC_OscConfig+0xa2>
 8004968:	4bab      	ldr	r3, [pc, #684]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4baa      	ldr	r3, [pc, #680]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800496e:	49ab      	ldr	r1, [pc, #684]	@ (8004c1c <HAL_RCC_OscConfig+0x33c>)
 8004970:	400a      	ands	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	4ba8      	ldr	r3, [pc, #672]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4ba7      	ldr	r3, [pc, #668]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800497a:	49a9      	ldr	r1, [pc, #676]	@ (8004c20 <HAL_RCC_OscConfig+0x340>)
 800497c:	400a      	ands	r2, r1
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e01e      	b.n	80049c0 <HAL_RCC_OscConfig+0xe0>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b05      	cmp	r3, #5
 8004988:	d10e      	bne.n	80049a8 <HAL_RCC_OscConfig+0xc8>
 800498a:	4ba3      	ldr	r3, [pc, #652]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4ba2      	ldr	r3, [pc, #648]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004990:	2180      	movs	r1, #128	@ 0x80
 8004992:	02c9      	lsls	r1, r1, #11
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	4b9f      	ldr	r3, [pc, #636]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b9e      	ldr	r3, [pc, #632]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 800499e:	2180      	movs	r1, #128	@ 0x80
 80049a0:	0249      	lsls	r1, r1, #9
 80049a2:	430a      	orrs	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0xe0>
 80049a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b9a      	ldr	r3, [pc, #616]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 80049ae:	499b      	ldr	r1, [pc, #620]	@ (8004c1c <HAL_RCC_OscConfig+0x33c>)
 80049b0:	400a      	ands	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	4b98      	ldr	r3, [pc, #608]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b97      	ldr	r3, [pc, #604]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 80049ba:	4999      	ldr	r1, [pc, #612]	@ (8004c20 <HAL_RCC_OscConfig+0x340>)
 80049bc:	400a      	ands	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d014      	beq.n	80049f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fe fd9c 	bl	8003504 <HAL_GetTick>
 80049cc:	0003      	movs	r3, r0
 80049ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d2:	f7fe fd97 	bl	8003504 <HAL_GetTick>
 80049d6:	0002      	movs	r2, r0
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b64      	cmp	r3, #100	@ 0x64
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e2fd      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	2380      	movs	r3, #128	@ 0x80
 80049ea:	029b      	lsls	r3, r3, #10
 80049ec:	4013      	ands	r3, r2
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0xf2>
 80049f0:	e015      	b.n	8004a1e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fe fd87 	bl	8003504 <HAL_GetTick>
 80049f6:	0003      	movs	r3, r0
 80049f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fe fd82 	bl	8003504 <HAL_GetTick>
 8004a00:	0002      	movs	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	@ 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e2e8      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0e:	4b82      	ldr	r3, [pc, #520]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	4013      	ands	r3, r2
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x11c>
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a1c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2202      	movs	r2, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	d100      	bne.n	8004a2a <HAL_RCC_OscConfig+0x14a>
 8004a28:	e06c      	b.n	8004b04 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	220c      	movs	r2, #12
 8004a30:	4013      	ands	r3, r2
 8004a32:	d00e      	beq.n	8004a52 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a34:	4b78      	ldr	r3, [pc, #480]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	220c      	movs	r2, #12
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d11f      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1a0>
 8004a40:	4b75      	ldr	r3, [pc, #468]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	23c0      	movs	r3, #192	@ 0xc0
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	401a      	ands	r2, r3
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d116      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	4b71      	ldr	r3, [pc, #452]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2202      	movs	r2, #2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_OscConfig+0x188>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e2bb      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b6b      	ldr	r3, [pc, #428]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	22f8      	movs	r2, #248	@ 0xf8
 8004a6e:	4393      	bics	r3, r2
 8004a70:	0019      	movs	r1, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00da      	lsls	r2, r3, #3
 8004a78:	4b67      	ldr	r3, [pc, #412]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	e041      	b.n	8004b04 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d024      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a88:	4b63      	ldr	r3, [pc, #396]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b62      	ldr	r3, [pc, #392]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004a8e:	2101      	movs	r1, #1
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fe fd36 	bl	8003504 <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a9e:	f7fe fd31 	bl	8003504 <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e297      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab0:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d0f1      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aba:	4b57      	ldr	r3, [pc, #348]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	22f8      	movs	r2, #248	@ 0xf8
 8004ac0:	4393      	bics	r3, r2
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	00da      	lsls	r2, r3, #3
 8004aca:	4b53      	ldr	r3, [pc, #332]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	e018      	b.n	8004b04 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad2:	4b51      	ldr	r3, [pc, #324]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b50      	ldr	r3, [pc, #320]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004ad8:	2101      	movs	r1, #1
 8004ada:	438a      	bics	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fe fd11 	bl	8003504 <HAL_GetTick>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae8:	f7fe fd0c 	bl	8003504 <HAL_GetTick>
 8004aec:	0002      	movs	r2, r0
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e272      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2202      	movs	r2, #2
 8004b00:	4013      	ands	r3, r2
 8004b02:	d1f1      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d036      	beq.n	8004b7c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d019      	beq.n	8004b4a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b16:	4b40      	ldr	r3, [pc, #256]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b22:	f7fe fcef 	bl	8003504 <HAL_GetTick>
 8004b26:	0003      	movs	r3, r0
 8004b28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2c:	f7fe fcea 	bl	8003504 <HAL_GetTick>
 8004b30:	0002      	movs	r2, r0
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e250      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	4b36      	ldr	r3, [pc, #216]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	2202      	movs	r2, #2
 8004b44:	4013      	ands	r3, r2
 8004b46:	d0f1      	beq.n	8004b2c <HAL_RCC_OscConfig+0x24c>
 8004b48:	e018      	b.n	8004b7c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b4a:	4b33      	ldr	r3, [pc, #204]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b4e:	4b32      	ldr	r3, [pc, #200]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004b50:	2101      	movs	r1, #1
 8004b52:	438a      	bics	r2, r1
 8004b54:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b56:	f7fe fcd5 	bl	8003504 <HAL_GetTick>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b60:	f7fe fcd0 	bl	8003504 <HAL_GetTick>
 8004b64:	0002      	movs	r2, r0
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e236      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b72:	4b29      	ldr	r3, [pc, #164]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	2202      	movs	r2, #2
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d1f1      	bne.n	8004b60 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2204      	movs	r2, #4
 8004b82:	4013      	ands	r3, r2
 8004b84:	d100      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2a8>
 8004b86:	e0b5      	b.n	8004cf4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b88:	201f      	movs	r0, #31
 8004b8a:	183b      	adds	r3, r7, r0
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b90:	4b21      	ldr	r3, [pc, #132]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	2380      	movs	r3, #128	@ 0x80
 8004b96:	055b      	lsls	r3, r3, #21
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d110      	bne.n	8004bbe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004ba2:	2180      	movs	r1, #128	@ 0x80
 8004ba4:	0549      	lsls	r1, r1, #21
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	61da      	str	r2, [r3, #28]
 8004baa:	4b1b      	ldr	r3, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004bac:	69da      	ldr	r2, [r3, #28]
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	055b      	lsls	r3, r3, #21
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bb8:	183b      	adds	r3, r7, r0
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbe:	4b19      	ldr	r3, [pc, #100]	@ (8004c24 <HAL_RCC_OscConfig+0x344>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	2380      	movs	r3, #128	@ 0x80
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d11a      	bne.n	8004c00 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bca:	4b16      	ldr	r3, [pc, #88]	@ (8004c24 <HAL_RCC_OscConfig+0x344>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4b15      	ldr	r3, [pc, #84]	@ (8004c24 <HAL_RCC_OscConfig+0x344>)
 8004bd0:	2180      	movs	r1, #128	@ 0x80
 8004bd2:	0049      	lsls	r1, r1, #1
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd8:	f7fe fc94 	bl	8003504 <HAL_GetTick>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be2:	f7fe fc8f 	bl	8003504 <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b64      	cmp	r3, #100	@ 0x64
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e1f5      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <HAL_RCC_OscConfig+0x344>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d10f      	bne.n	8004c28 <HAL_RCC_OscConfig+0x348>
 8004c08:	4b03      	ldr	r3, [pc, #12]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004c0a:	6a1a      	ldr	r2, [r3, #32]
 8004c0c:	4b02      	ldr	r3, [pc, #8]	@ (8004c18 <HAL_RCC_OscConfig+0x338>)
 8004c0e:	2101      	movs	r1, #1
 8004c10:	430a      	orrs	r2, r1
 8004c12:	621a      	str	r2, [r3, #32]
 8004c14:	e036      	b.n	8004c84 <HAL_RCC_OscConfig+0x3a4>
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	fffeffff 	.word	0xfffeffff
 8004c20:	fffbffff 	.word	0xfffbffff
 8004c24:	40007000 	.word	0x40007000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCC_OscConfig+0x36a>
 8004c30:	4bca      	ldr	r3, [pc, #808]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	4bc9      	ldr	r3, [pc, #804]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c36:	2101      	movs	r1, #1
 8004c38:	438a      	bics	r2, r1
 8004c3a:	621a      	str	r2, [r3, #32]
 8004c3c:	4bc7      	ldr	r3, [pc, #796]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c3e:	6a1a      	ldr	r2, [r3, #32]
 8004c40:	4bc6      	ldr	r3, [pc, #792]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c42:	2104      	movs	r1, #4
 8004c44:	438a      	bics	r2, r1
 8004c46:	621a      	str	r2, [r3, #32]
 8004c48:	e01c      	b.n	8004c84 <HAL_RCC_OscConfig+0x3a4>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x38c>
 8004c52:	4bc2      	ldr	r3, [pc, #776]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c54:	6a1a      	ldr	r2, [r3, #32]
 8004c56:	4bc1      	ldr	r3, [pc, #772]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c58:	2104      	movs	r1, #4
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	621a      	str	r2, [r3, #32]
 8004c5e:	4bbf      	ldr	r3, [pc, #764]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c60:	6a1a      	ldr	r2, [r3, #32]
 8004c62:	4bbe      	ldr	r3, [pc, #760]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c64:	2101      	movs	r1, #1
 8004c66:	430a      	orrs	r2, r1
 8004c68:	621a      	str	r2, [r3, #32]
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCC_OscConfig+0x3a4>
 8004c6c:	4bbb      	ldr	r3, [pc, #748]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	4bba      	ldr	r3, [pc, #744]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c72:	2101      	movs	r1, #1
 8004c74:	438a      	bics	r2, r1
 8004c76:	621a      	str	r2, [r3, #32]
 8004c78:	4bb8      	ldr	r3, [pc, #736]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c7a:	6a1a      	ldr	r2, [r3, #32]
 8004c7c:	4bb7      	ldr	r3, [pc, #732]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004c7e:	2104      	movs	r1, #4
 8004c80:	438a      	bics	r2, r1
 8004c82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d014      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8c:	f7fe fc3a 	bl	8003504 <HAL_GetTick>
 8004c90:	0003      	movs	r3, r0
 8004c92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	e009      	b.n	8004caa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fe fc35 	bl	8003504 <HAL_GetTick>
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	4aaf      	ldr	r2, [pc, #700]	@ (8004f60 <HAL_RCC_OscConfig+0x680>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e19a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004caa:	4bac      	ldr	r3, [pc, #688]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x3b6>
 8004cb4:	e013      	b.n	8004cde <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb6:	f7fe fc25 	bl	8003504 <HAL_GetTick>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc0:	f7fe fc20 	bl	8003504 <HAL_GetTick>
 8004cc4:	0002      	movs	r2, r0
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	4aa5      	ldr	r2, [pc, #660]	@ (8004f60 <HAL_RCC_OscConfig+0x680>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e185      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd4:	4ba1      	ldr	r3, [pc, #644]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cde:	231f      	movs	r3, #31
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d105      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce8:	4b9c      	ldr	r3, [pc, #624]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004cea:	69da      	ldr	r2, [r3, #28]
 8004cec:	4b9b      	ldr	r3, [pc, #620]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004cee:	499d      	ldr	r1, [pc, #628]	@ (8004f64 <HAL_RCC_OscConfig+0x684>)
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d063      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d12a      	bne.n	8004d5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d06:	4b95      	ldr	r3, [pc, #596]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0a:	4b94      	ldr	r3, [pc, #592]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004d12:	4b92      	ldr	r3, [pc, #584]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d16:	4b91      	ldr	r3, [pc, #580]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d18:	2101      	movs	r1, #1
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1e:	f7fe fbf1 	bl	8003504 <HAL_GetTick>
 8004d22:	0003      	movs	r3, r0
 8004d24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d28:	f7fe fbec 	bl	8003504 <HAL_GetTick>
 8004d2c:	0002      	movs	r2, r0
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e152      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d3a:	4b88      	ldr	r3, [pc, #544]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3e:	2202      	movs	r2, #2
 8004d40:	4013      	ands	r3, r2
 8004d42:	d0f1      	beq.n	8004d28 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d44:	4b85      	ldr	r3, [pc, #532]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d48:	22f8      	movs	r2, #248	@ 0xf8
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	00da      	lsls	r2, r3, #3
 8004d54:	4b81      	ldr	r3, [pc, #516]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d56:	430a      	orrs	r2, r1
 8004d58:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d5a:	e034      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	3305      	adds	r3, #5
 8004d62:	d111      	bne.n	8004d88 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004d64:	4b7d      	ldr	r3, [pc, #500]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d68:	4b7c      	ldr	r3, [pc, #496]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d70:	4b7a      	ldr	r3, [pc, #488]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d74:	22f8      	movs	r2, #248	@ 0xf8
 8004d76:	4393      	bics	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	00da      	lsls	r2, r3, #3
 8004d80:	4b76      	ldr	r3, [pc, #472]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d82:	430a      	orrs	r2, r1
 8004d84:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d86:	e01e      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d88:	4b74      	ldr	r3, [pc, #464]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d8c:	4b73      	ldr	r3, [pc, #460]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d8e:	2104      	movs	r1, #4
 8004d90:	430a      	orrs	r2, r1
 8004d92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d94:	4b71      	ldr	r3, [pc, #452]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d98:	4b70      	ldr	r3, [pc, #448]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da0:	f7fe fbb0 	bl	8003504 <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004daa:	f7fe fbab 	bl	8003504 <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e111      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004dbc:	4b67      	ldr	r3, [pc, #412]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d1f1      	bne.n	8004daa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d05c      	beq.n	8004e8a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004dd0:	4b62      	ldr	r3, [pc, #392]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	220c      	movs	r2, #12
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b0c      	cmp	r3, #12
 8004dda:	d00e      	beq.n	8004dfa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	220c      	movs	r2, #12
 8004de2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d114      	bne.n	8004e12 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004de8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	23c0      	movs	r3, #192	@ 0xc0
 8004dee:	025b      	lsls	r3, r3, #9
 8004df0:	401a      	ands	r2, r3
 8004df2:	23c0      	movs	r3, #192	@ 0xc0
 8004df4:	025b      	lsls	r3, r3, #9
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d10b      	bne.n	8004e12 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004dfa:	4b58      	ldr	r3, [pc, #352]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dfe:	2380      	movs	r3, #128	@ 0x80
 8004e00:	029b      	lsls	r3, r3, #10
 8004e02:	4013      	ands	r3, r2
 8004e04:	d040      	beq.n	8004e88 <HAL_RCC_OscConfig+0x5a8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d03c      	beq.n	8004e88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0e6      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01b      	beq.n	8004e52 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004e1a:	4b50      	ldr	r3, [pc, #320]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004e20:	2180      	movs	r1, #128	@ 0x80
 8004e22:	0249      	lsls	r1, r1, #9
 8004e24:	430a      	orrs	r2, r1
 8004e26:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fe fb6c 	bl	8003504 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e32:	f7fe fb67 	bl	8003504 <HAL_GetTick>
 8004e36:	0002      	movs	r2, r0
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0cd      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004e44:	4b45      	ldr	r3, [pc, #276]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	029b      	lsls	r3, r3, #10
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x552>
 8004e50:	e01b      	b.n	8004e8a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004e52:	4b42      	ldr	r3, [pc, #264]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e56:	4b41      	ldr	r3, [pc, #260]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004e58:	4943      	ldr	r1, [pc, #268]	@ (8004f68 <HAL_RCC_OscConfig+0x688>)
 8004e5a:	400a      	ands	r2, r1
 8004e5c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fe fb51 	bl	8003504 <HAL_GetTick>
 8004e62:	0003      	movs	r3, r0
 8004e64:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e68:	f7fe fb4c 	bl	8003504 <HAL_GetTick>
 8004e6c:	0002      	movs	r2, r0
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e0b2      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004e7a:	4b38      	ldr	r3, [pc, #224]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e7e:	2380      	movs	r3, #128	@ 0x80
 8004e80:	029b      	lsls	r3, r3, #10
 8004e82:	4013      	ands	r3, r2
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x588>
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004e88:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d100      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5b4>
 8004e92:	e0a4      	b.n	8004fde <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e94:	4b31      	ldr	r3, [pc, #196]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	220c      	movs	r2, #12
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d100      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x5c2>
 8004ea0:	e078      	b.n	8004f94 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d14c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004eb0:	492e      	ldr	r1, [pc, #184]	@ (8004f6c <HAL_RCC_OscConfig+0x68c>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb6:	f7fe fb25 	bl	8003504 <HAL_GetTick>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fe fb20 	bl	8003504 <HAL_GetTick>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e086      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed2:	4b22      	ldr	r3, [pc, #136]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2380      	movs	r3, #128	@ 0x80
 8004ed8:	049b      	lsls	r3, r3, #18
 8004eda:	4013      	ands	r3, r2
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ede:	4b1f      	ldr	r3, [pc, #124]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	220f      	movs	r2, #15
 8004ee4:	4393      	bics	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eec:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f70 <HAL_RCC_OscConfig+0x690>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	431a      	orrs	r2, r3
 8004f06:	4b15      	ldr	r3, [pc, #84]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f0c:	4b13      	ldr	r3, [pc, #76]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b12      	ldr	r3, [pc, #72]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004f12:	2180      	movs	r1, #128	@ 0x80
 8004f14:	0449      	lsls	r1, r1, #17
 8004f16:	430a      	orrs	r2, r1
 8004f18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1a:	f7fe faf3 	bl	8003504 <HAL_GetTick>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fe faee 	bl	8003504 <HAL_GetTick>
 8004f28:	0002      	movs	r2, r0
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e054      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f36:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2380      	movs	r3, #128	@ 0x80
 8004f3c:	049b      	lsls	r3, r3, #18
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x644>
 8004f42:	e04c      	b.n	8004fde <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b04      	ldr	r3, [pc, #16]	@ (8004f5c <HAL_RCC_OscConfig+0x67c>)
 8004f4a:	4908      	ldr	r1, [pc, #32]	@ (8004f6c <HAL_RCC_OscConfig+0x68c>)
 8004f4c:	400a      	ands	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fe fad8 	bl	8003504 <HAL_GetTick>
 8004f54:	0003      	movs	r3, r0
 8004f56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f58:	e015      	b.n	8004f86 <HAL_RCC_OscConfig+0x6a6>
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	00001388 	.word	0x00001388
 8004f64:	efffffff 	.word	0xefffffff
 8004f68:	fffeffff 	.word	0xfffeffff
 8004f6c:	feffffff 	.word	0xfeffffff
 8004f70:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f74:	f7fe fac6 	bl	8003504 <HAL_GetTick>
 8004f78:	0002      	movs	r2, r0
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e02c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f86:	4b18      	ldr	r3, [pc, #96]	@ (8004fe8 <HAL_RCC_OscConfig+0x708>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	2380      	movs	r3, #128	@ 0x80
 8004f8c:	049b      	lsls	r3, r3, #18
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x694>
 8004f92:	e024      	b.n	8004fde <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e01f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004fa0:	4b11      	ldr	r3, [pc, #68]	@ (8004fe8 <HAL_RCC_OscConfig+0x708>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004fa6:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_RCC_OscConfig+0x708>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	23c0      	movs	r3, #192	@ 0xc0
 8004fb0:	025b      	lsls	r3, r3, #9
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d10e      	bne.n	8004fda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	220f      	movs	r2, #15
 8004fc0:	401a      	ands	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d107      	bne.n	8004fda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	23f0      	movs	r3, #240	@ 0xf0
 8004fce:	039b      	lsls	r3, r3, #14
 8004fd0:	401a      	ands	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b008      	add	sp, #32
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000

08004fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0bf      	b.n	8005180 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b61      	ldr	r3, [pc, #388]	@ (8005188 <HAL_RCC_ClockConfig+0x19c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2201      	movs	r2, #1
 8005006:	4013      	ands	r3, r2
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d911      	bls.n	8005032 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b5e      	ldr	r3, [pc, #376]	@ (8005188 <HAL_RCC_ClockConfig+0x19c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2201      	movs	r2, #1
 8005014:	4393      	bics	r3, r2
 8005016:	0019      	movs	r1, r3
 8005018:	4b5b      	ldr	r3, [pc, #364]	@ (8005188 <HAL_RCC_ClockConfig+0x19c>)
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005020:	4b59      	ldr	r3, [pc, #356]	@ (8005188 <HAL_RCC_ClockConfig+0x19c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2201      	movs	r2, #1
 8005026:	4013      	ands	r3, r2
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d001      	beq.n	8005032 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0a6      	b.n	8005180 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2202      	movs	r2, #2
 8005038:	4013      	ands	r3, r2
 800503a:	d015      	beq.n	8005068 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2204      	movs	r2, #4
 8005042:	4013      	ands	r3, r2
 8005044:	d006      	beq.n	8005054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005046:	4b51      	ldr	r3, [pc, #324]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4b50      	ldr	r3, [pc, #320]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 800504c:	21e0      	movs	r1, #224	@ 0xe0
 800504e:	00c9      	lsls	r1, r1, #3
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005054:	4b4d      	ldr	r3, [pc, #308]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	22f0      	movs	r2, #240	@ 0xf0
 800505a:	4393      	bics	r3, r2
 800505c:	0019      	movs	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	4b4a      	ldr	r3, [pc, #296]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2201      	movs	r2, #1
 800506e:	4013      	ands	r3, r2
 8005070:	d04c      	beq.n	800510c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	4b44      	ldr	r3, [pc, #272]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	2380      	movs	r3, #128	@ 0x80
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	4013      	ands	r3, r2
 8005084:	d120      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e07a      	b.n	8005180 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b3e      	ldr	r3, [pc, #248]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	2380      	movs	r3, #128	@ 0x80
 8005098:	049b      	lsls	r3, r3, #18
 800509a:	4013      	ands	r3, r2
 800509c:	d114      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06e      	b.n	8005180 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80050aa:	4b38      	ldr	r3, [pc, #224]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 80050ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ae:	2380      	movs	r3, #128	@ 0x80
 80050b0:	029b      	lsls	r3, r3, #10
 80050b2:	4013      	ands	r3, r2
 80050b4:	d108      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e062      	b.n	8005180 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b34      	ldr	r3, [pc, #208]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e05b      	b.n	8005180 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c8:	4b30      	ldr	r3, [pc, #192]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2203      	movs	r2, #3
 80050ce:	4393      	bics	r3, r2
 80050d0:	0019      	movs	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	4b2d      	ldr	r3, [pc, #180]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050dc:	f7fe fa12 	bl	8003504 <HAL_GetTick>
 80050e0:	0003      	movs	r3, r0
 80050e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e4:	e009      	b.n	80050fa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e6:	f7fe fa0d 	bl	8003504 <HAL_GetTick>
 80050ea:	0002      	movs	r2, r0
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	4a27      	ldr	r2, [pc, #156]	@ (8005190 <HAL_RCC_ClockConfig+0x1a4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e042      	b.n	8005180 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b24      	ldr	r3, [pc, #144]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	220c      	movs	r2, #12
 8005100:	401a      	ands	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1ec      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b1e      	ldr	r3, [pc, #120]	@ (8005188 <HAL_RCC_ClockConfig+0x19c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2201      	movs	r2, #1
 8005112:	4013      	ands	r3, r2
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d211      	bcs.n	800513e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b1b      	ldr	r3, [pc, #108]	@ (8005188 <HAL_RCC_ClockConfig+0x19c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2201      	movs	r2, #1
 8005120:	4393      	bics	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	4b18      	ldr	r3, [pc, #96]	@ (8005188 <HAL_RCC_ClockConfig+0x19c>)
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512c:	4b16      	ldr	r3, [pc, #88]	@ (8005188 <HAL_RCC_ClockConfig+0x19c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2201      	movs	r2, #1
 8005132:	4013      	ands	r3, r2
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d001      	beq.n	800513e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e020      	b.n	8005180 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2204      	movs	r2, #4
 8005144:	4013      	ands	r3, r2
 8005146:	d009      	beq.n	800515c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b10      	ldr	r3, [pc, #64]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a11      	ldr	r2, [pc, #68]	@ (8005194 <HAL_RCC_ClockConfig+0x1a8>)
 800514e:	4013      	ands	r3, r2
 8005150:	0019      	movs	r1, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 8005158:	430a      	orrs	r2, r1
 800515a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800515c:	f000 f820 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8005160:	0001      	movs	r1, r0
 8005162:	4b0a      	ldr	r3, [pc, #40]	@ (800518c <HAL_RCC_ClockConfig+0x1a0>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	220f      	movs	r2, #15
 800516a:	4013      	ands	r3, r2
 800516c:	4a0a      	ldr	r2, [pc, #40]	@ (8005198 <HAL_RCC_ClockConfig+0x1ac>)
 800516e:	5cd3      	ldrb	r3, [r2, r3]
 8005170:	000a      	movs	r2, r1
 8005172:	40da      	lsrs	r2, r3
 8005174:	4b09      	ldr	r3, [pc, #36]	@ (800519c <HAL_RCC_ClockConfig+0x1b0>)
 8005176:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005178:	2003      	movs	r0, #3
 800517a:	f7fe f97d 	bl	8003478 <HAL_InitTick>
  
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b004      	add	sp, #16
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40022000 	.word	0x40022000
 800518c:	40021000 	.word	0x40021000
 8005190:	00001388 	.word	0x00001388
 8005194:	fffff8ff 	.word	0xfffff8ff
 8005198:	08006678 	.word	0x08006678
 800519c:	20000004 	.word	0x20000004

080051a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	2300      	movs	r3, #0
 80051b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80051ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005270 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	220c      	movs	r2, #12
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d046      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0xb8>
 80051ca:	d848      	bhi.n	800525e <HAL_RCC_GetSysClockFreq+0xbe>
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d002      	beq.n	80051d6 <HAL_RCC_GetSysClockFreq+0x36>
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d003      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x3c>
 80051d4:	e043      	b.n	800525e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051d6:	4b27      	ldr	r3, [pc, #156]	@ (8005274 <HAL_RCC_GetSysClockFreq+0xd4>)
 80051d8:	613b      	str	r3, [r7, #16]
      break;
 80051da:	e043      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	0c9b      	lsrs	r3, r3, #18
 80051e0:	220f      	movs	r2, #15
 80051e2:	4013      	ands	r3, r2
 80051e4:	4a24      	ldr	r2, [pc, #144]	@ (8005278 <HAL_RCC_GetSysClockFreq+0xd8>)
 80051e6:	5cd3      	ldrb	r3, [r2, r3]
 80051e8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80051ea:	4b21      	ldr	r3, [pc, #132]	@ (8005270 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	220f      	movs	r2, #15
 80051f0:	4013      	ands	r3, r2
 80051f2:	4a22      	ldr	r2, [pc, #136]	@ (800527c <HAL_RCC_GetSysClockFreq+0xdc>)
 80051f4:	5cd3      	ldrb	r3, [r2, r3]
 80051f6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	23c0      	movs	r3, #192	@ 0xc0
 80051fc:	025b      	lsls	r3, r3, #9
 80051fe:	401a      	ands	r2, r3
 8005200:	2380      	movs	r3, #128	@ 0x80
 8005202:	025b      	lsls	r3, r3, #9
 8005204:	429a      	cmp	r2, r3
 8005206:	d109      	bne.n	800521c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	481a      	ldr	r0, [pc, #104]	@ (8005274 <HAL_RCC_GetSysClockFreq+0xd4>)
 800520c:	f7fa ff86 	bl	800011c <__udivsi3>
 8005210:	0003      	movs	r3, r0
 8005212:	001a      	movs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4353      	muls	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e01a      	b.n	8005252 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	23c0      	movs	r3, #192	@ 0xc0
 8005220:	025b      	lsls	r3, r3, #9
 8005222:	401a      	ands	r2, r3
 8005224:	23c0      	movs	r3, #192	@ 0xc0
 8005226:	025b      	lsls	r3, r3, #9
 8005228:	429a      	cmp	r2, r3
 800522a:	d109      	bne.n	8005240 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4814      	ldr	r0, [pc, #80]	@ (8005280 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005230:	f7fa ff74 	bl	800011c <__udivsi3>
 8005234:	0003      	movs	r3, r0
 8005236:	001a      	movs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4353      	muls	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e008      	b.n	8005252 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	480c      	ldr	r0, [pc, #48]	@ (8005274 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005244:	f7fa ff6a 	bl	800011c <__udivsi3>
 8005248:	0003      	movs	r3, r0
 800524a:	001a      	movs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4353      	muls	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	613b      	str	r3, [r7, #16]
      break;
 8005256:	e005      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005258:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <HAL_RCC_GetSysClockFreq+0xe0>)
 800525a:	613b      	str	r3, [r7, #16]
      break;
 800525c:	e002      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800525e:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005260:	613b      	str	r3, [r7, #16]
      break;
 8005262:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005264:	693b      	ldr	r3, [r7, #16]
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b006      	add	sp, #24
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	40021000 	.word	0x40021000
 8005274:	007a1200 	.word	0x007a1200
 8005278:	08006688 	.word	0x08006688
 800527c:	08006698 	.word	0x08006698
 8005280:	02dc6c00 	.word	0x02dc6c00

08005284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	2380      	movs	r3, #128	@ 0x80
 800529a:	025b      	lsls	r3, r3, #9
 800529c:	4013      	ands	r3, r2
 800529e:	d100      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80052a0:	e08e      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80052a2:	2017      	movs	r0, #23
 80052a4:	183b      	adds	r3, r7, r0
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052aa:	4b67      	ldr	r3, [pc, #412]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052ac:	69da      	ldr	r2, [r3, #28]
 80052ae:	2380      	movs	r3, #128	@ 0x80
 80052b0:	055b      	lsls	r3, r3, #21
 80052b2:	4013      	ands	r3, r2
 80052b4:	d110      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052b6:	4b64      	ldr	r3, [pc, #400]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	4b63      	ldr	r3, [pc, #396]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052bc:	2180      	movs	r1, #128	@ 0x80
 80052be:	0549      	lsls	r1, r1, #21
 80052c0:	430a      	orrs	r2, r1
 80052c2:	61da      	str	r2, [r3, #28]
 80052c4:	4b60      	ldr	r3, [pc, #384]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	055b      	lsls	r3, r3, #21
 80052cc:	4013      	ands	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d2:	183b      	adds	r3, r7, r0
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	4b5c      	ldr	r3, [pc, #368]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4013      	ands	r3, r2
 80052e2:	d11a      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052e4:	4b59      	ldr	r3, [pc, #356]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b58      	ldr	r3, [pc, #352]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80052ea:	2180      	movs	r1, #128	@ 0x80
 80052ec:	0049      	lsls	r1, r1, #1
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052f2:	f7fe f907 	bl	8003504 <HAL_GetTick>
 80052f6:	0003      	movs	r3, r0
 80052f8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fa:	e008      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fc:	f7fe f902 	bl	8003504 <HAL_GetTick>
 8005300:	0002      	movs	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	@ 0x64
 8005308:	d901      	bls.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e097      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530e:	4b4f      	ldr	r3, [pc, #316]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	2380      	movs	r3, #128	@ 0x80
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4013      	ands	r3, r2
 8005318:	d0f0      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800531a:	4b4b      	ldr	r3, [pc, #300]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	23c0      	movs	r3, #192	@ 0xc0
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4013      	ands	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d034      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	23c0      	movs	r3, #192	@ 0xc0
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4013      	ands	r3, r2
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	429a      	cmp	r2, r3
 800533a:	d02c      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800533c:	4b42      	ldr	r3, [pc, #264]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4a43      	ldr	r2, [pc, #268]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005342:	4013      	ands	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005346:	4b40      	ldr	r3, [pc, #256]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005348:	6a1a      	ldr	r2, [r3, #32]
 800534a:	4b3f      	ldr	r3, [pc, #252]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800534c:	2180      	movs	r1, #128	@ 0x80
 800534e:	0249      	lsls	r1, r1, #9
 8005350:	430a      	orrs	r2, r1
 8005352:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005354:	4b3c      	ldr	r3, [pc, #240]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	4b3b      	ldr	r3, [pc, #236]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800535a:	493e      	ldr	r1, [pc, #248]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535c:	400a      	ands	r2, r1
 800535e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005360:	4b39      	ldr	r3, [pc, #228]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	4013      	ands	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fe f8c9 	bl	8003504 <HAL_GetTick>
 8005372:	0003      	movs	r3, r0
 8005374:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005376:	e009      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fe f8c4 	bl	8003504 <HAL_GetTick>
 800537c:	0002      	movs	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	4a35      	ldr	r2, [pc, #212]	@ (8005458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e058      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538c:	4b2e      	ldr	r3, [pc, #184]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	2202      	movs	r2, #2
 8005392:	4013      	ands	r3, r2
 8005394:	d0f0      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005396:	4b2c      	ldr	r3, [pc, #176]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	4a2d      	ldr	r2, [pc, #180]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800539c:	4013      	ands	r3, r2
 800539e:	0019      	movs	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	4b28      	ldr	r3, [pc, #160]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053a6:	430a      	orrs	r2, r1
 80053a8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053aa:	2317      	movs	r3, #23
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b4:	4b24      	ldr	r3, [pc, #144]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	4b23      	ldr	r3, [pc, #140]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053ba:	4928      	ldr	r1, [pc, #160]	@ (800545c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053bc:	400a      	ands	r2, r1
 80053be:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ce:	2203      	movs	r2, #3
 80053d0:	4393      	bics	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053da:	430a      	orrs	r2, r1
 80053dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2220      	movs	r2, #32
 80053e4:	4013      	ands	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053e8:	4b17      	ldr	r3, [pc, #92]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ec:	2210      	movs	r2, #16
 80053ee:	4393      	bics	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	4b14      	ldr	r3, [pc, #80]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053f8:	430a      	orrs	r2, r1
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	2380      	movs	r3, #128	@ 0x80
 8005402:	029b      	lsls	r3, r3, #10
 8005404:	4013      	ands	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005408:	4b0f      	ldr	r3, [pc, #60]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540c:	2280      	movs	r2, #128	@ 0x80
 800540e:	4393      	bics	r3, r2
 8005410:	0019      	movs	r1, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005418:	430a      	orrs	r2, r1
 800541a:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4013      	ands	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005428:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	2240      	movs	r2, #64	@ 0x40
 800542e:	4393      	bics	r3, r2
 8005430:	0019      	movs	r1, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005438:	430a      	orrs	r2, r1
 800543a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b006      	add	sp, #24
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	40021000 	.word	0x40021000
 800544c:	40007000 	.word	0x40007000
 8005450:	fffffcff 	.word	0xfffffcff
 8005454:	fffeffff 	.word	0xfffeffff
 8005458:	00001388 	.word	0x00001388
 800545c:	efffffff 	.word	0xefffffff

08005460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e042      	b.n	80054f8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	223d      	movs	r2, #61	@ 0x3d
 8005476:	5c9b      	ldrb	r3, [r3, r2]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d107      	bne.n	800548e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	223c      	movs	r2, #60	@ 0x3c
 8005482:	2100      	movs	r1, #0
 8005484:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	0018      	movs	r0, r3
 800548a:	f7fd ff19 	bl	80032c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	223d      	movs	r2, #61	@ 0x3d
 8005492:	2102      	movs	r1, #2
 8005494:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3304      	adds	r3, #4
 800549e:	0019      	movs	r1, r3
 80054a0:	0010      	movs	r0, r2
 80054a2:	f000 fa5b 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2246      	movs	r2, #70	@ 0x46
 80054aa:	2101      	movs	r1, #1
 80054ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	223e      	movs	r2, #62	@ 0x3e
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	223f      	movs	r2, #63	@ 0x3f
 80054ba:	2101      	movs	r1, #1
 80054bc:	5499      	strb	r1, [r3, r2]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2240      	movs	r2, #64	@ 0x40
 80054c2:	2101      	movs	r1, #1
 80054c4:	5499      	strb	r1, [r3, r2]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2241      	movs	r2, #65	@ 0x41
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2242      	movs	r2, #66	@ 0x42
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2243      	movs	r2, #67	@ 0x43
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2244      	movs	r2, #68	@ 0x44
 80054e2:	2101      	movs	r1, #1
 80054e4:	5499      	strb	r1, [r3, r2]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2245      	movs	r2, #69	@ 0x45
 80054ea:	2101      	movs	r1, #1
 80054ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	223d      	movs	r2, #61	@ 0x3d
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	0018      	movs	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	b002      	add	sp, #8
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	223d      	movs	r2, #61	@ 0x3d
 800550c:	5c9b      	ldrb	r3, [r3, r2]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e036      	b.n	8005586 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	223d      	movs	r2, #61	@ 0x3d
 800551c:	2102      	movs	r1, #2
 800551e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2101      	movs	r1, #1
 800552c:	430a      	orrs	r2, r1
 800552e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a16      	ldr	r2, [pc, #88]	@ (8005590 <HAL_TIM_Base_Start_IT+0x90>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00a      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x50>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	2380      	movs	r3, #128	@ 0x80
 8005540:	05db      	lsls	r3, r3, #23
 8005542:	429a      	cmp	r2, r3
 8005544:	d004      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x50>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a12      	ldr	r2, [pc, #72]	@ (8005594 <HAL_TIM_Base_Start_IT+0x94>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d111      	bne.n	8005574 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2207      	movs	r2, #7
 8005558:	4013      	ands	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b06      	cmp	r3, #6
 8005560:	d010      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2101      	movs	r1, #1
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	e007      	b.n	8005584 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2101      	movs	r1, #1
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b004      	add	sp, #16
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40000400 	.word	0x40000400

08005598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2202      	movs	r2, #2
 80055b4:	4013      	ands	r3, r2
 80055b6:	d021      	beq.n	80055fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2202      	movs	r2, #2
 80055bc:	4013      	ands	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2203      	movs	r2, #3
 80055c6:	4252      	negs	r2, r2
 80055c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2203      	movs	r2, #3
 80055d8:	4013      	ands	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	0018      	movs	r0, r3
 80055e0:	f000 f9a4 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 80055e4:	e007      	b.n	80055f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0018      	movs	r0, r3
 80055ea:	f000 f997 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f000 f9a3 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2204      	movs	r2, #4
 8005600:	4013      	ands	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2204      	movs	r2, #4
 8005608:	4013      	ands	r3, r2
 800560a:	d01e      	beq.n	800564a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2205      	movs	r2, #5
 8005612:	4252      	negs	r2, r2
 8005614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	23c0      	movs	r3, #192	@ 0xc0
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4013      	ands	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f000 f97d 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 8005632:	e007      	b.n	8005644 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	0018      	movs	r0, r3
 8005638:	f000 f970 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	0018      	movs	r0, r3
 8005640:	f000 f97c 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2208      	movs	r2, #8
 800564e:	4013      	ands	r3, r2
 8005650:	d021      	beq.n	8005696 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2208      	movs	r2, #8
 8005656:	4013      	ands	r3, r2
 8005658:	d01d      	beq.n	8005696 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2209      	movs	r2, #9
 8005660:	4252      	negs	r2, r2
 8005662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2203      	movs	r2, #3
 8005672:	4013      	ands	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	0018      	movs	r0, r3
 800567a:	f000 f957 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 800567e:	e007      	b.n	8005690 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	0018      	movs	r0, r3
 8005684:	f000 f94a 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	0018      	movs	r0, r3
 800568c:	f000 f956 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2210      	movs	r2, #16
 800569a:	4013      	ands	r3, r2
 800569c:	d022      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2210      	movs	r2, #16
 80056a2:	4013      	ands	r3, r2
 80056a4:	d01e      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2211      	movs	r2, #17
 80056ac:	4252      	negs	r2, r2
 80056ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2208      	movs	r2, #8
 80056b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	23c0      	movs	r3, #192	@ 0xc0
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4013      	ands	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 f930 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 80056cc:	e007      	b.n	80056de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f000 f923 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0018      	movs	r0, r3
 80056da:	f000 f92f 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	d00c      	beq.n	8005706 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	4013      	ands	r3, r2
 80056f2:	d008      	beq.n	8005706 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2202      	movs	r2, #2
 80056fa:	4252      	negs	r2, r2
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f7fd f949 	bl	8002998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2280      	movs	r2, #128	@ 0x80
 800570a:	4013      	ands	r3, r2
 800570c:	d00c      	beq.n	8005728 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2280      	movs	r2, #128	@ 0x80
 8005712:	4013      	ands	r3, r2
 8005714:	d008      	beq.n	8005728 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2281      	movs	r2, #129	@ 0x81
 800571c:	4252      	negs	r2, r2
 800571e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0018      	movs	r0, r3
 8005724:	f000 fa98 	bl	8005c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2240      	movs	r2, #64	@ 0x40
 800572c:	4013      	ands	r3, r2
 800572e:	d00c      	beq.n	800574a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2240      	movs	r2, #64	@ 0x40
 8005734:	4013      	ands	r3, r2
 8005736:	d008      	beq.n	800574a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2241      	movs	r2, #65	@ 0x41
 800573e:	4252      	negs	r2, r2
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0018      	movs	r0, r3
 8005746:	f000 f901 	bl	800594c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2220      	movs	r2, #32
 800574e:	4013      	ands	r3, r2
 8005750:	d00c      	beq.n	800576c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	4013      	ands	r3, r2
 8005758:	d008      	beq.n	800576c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2221      	movs	r2, #33	@ 0x21
 8005760:	4252      	negs	r2, r2
 8005762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	0018      	movs	r0, r3
 8005768:	f000 fa6e 	bl	8005c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800576c:	46c0      	nop			@ (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	b004      	add	sp, #16
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800577e:	230f      	movs	r3, #15
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	223c      	movs	r2, #60	@ 0x3c
 800578a:	5c9b      	ldrb	r3, [r3, r2]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x20>
 8005790:	2302      	movs	r3, #2
 8005792:	e0bc      	b.n	800590e <HAL_TIM_ConfigClockSource+0x19a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	223c      	movs	r2, #60	@ 0x3c
 8005798:	2101      	movs	r1, #1
 800579a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	223d      	movs	r2, #61	@ 0x3d
 80057a0:	2102      	movs	r1, #2
 80057a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2277      	movs	r2, #119	@ 0x77
 80057b0:	4393      	bics	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a58      	ldr	r2, [pc, #352]	@ (8005918 <HAL_TIM_ConfigClockSource+0x1a4>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2280      	movs	r2, #128	@ 0x80
 80057ca:	0192      	lsls	r2, r2, #6
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d040      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xde>
 80057d0:	2280      	movs	r2, #128	@ 0x80
 80057d2:	0192      	lsls	r2, r2, #6
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d900      	bls.n	80057da <HAL_TIM_ConfigClockSource+0x66>
 80057d8:	e088      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 80057da:	2280      	movs	r2, #128	@ 0x80
 80057dc:	0152      	lsls	r2, r2, #5
 80057de:	4293      	cmp	r3, r2
 80057e0:	d100      	bne.n	80057e4 <HAL_TIM_ConfigClockSource+0x70>
 80057e2:	e088      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x182>
 80057e4:	2280      	movs	r2, #128	@ 0x80
 80057e6:	0152      	lsls	r2, r2, #5
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d900      	bls.n	80057ee <HAL_TIM_ConfigClockSource+0x7a>
 80057ec:	e07e      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 80057ee:	2b70      	cmp	r3, #112	@ 0x70
 80057f0:	d018      	beq.n	8005824 <HAL_TIM_ConfigClockSource+0xb0>
 80057f2:	d900      	bls.n	80057f6 <HAL_TIM_ConfigClockSource+0x82>
 80057f4:	e07a      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 80057f6:	2b60      	cmp	r3, #96	@ 0x60
 80057f8:	d04f      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x126>
 80057fa:	d900      	bls.n	80057fe <HAL_TIM_ConfigClockSource+0x8a>
 80057fc:	e076      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 80057fe:	2b50      	cmp	r3, #80	@ 0x50
 8005800:	d03b      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x106>
 8005802:	d900      	bls.n	8005806 <HAL_TIM_ConfigClockSource+0x92>
 8005804:	e072      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 8005806:	2b40      	cmp	r3, #64	@ 0x40
 8005808:	d057      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x146>
 800580a:	d900      	bls.n	800580e <HAL_TIM_ConfigClockSource+0x9a>
 800580c:	e06e      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 800580e:	2b30      	cmp	r3, #48	@ 0x30
 8005810:	d063      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x166>
 8005812:	d86b      	bhi.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 8005814:	2b20      	cmp	r3, #32
 8005816:	d060      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x166>
 8005818:	d868      	bhi.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d05d      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x166>
 800581e:	2b10      	cmp	r3, #16
 8005820:	d05b      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x166>
 8005822:	e063      	b.n	80058ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005834:	f000 f990 	bl	8005b58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2277      	movs	r2, #119	@ 0x77
 8005844:	4313      	orrs	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	609a      	str	r2, [r3, #8]
      break;
 8005850:	e052      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005862:	f000 f979 	bl	8005b58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2180      	movs	r1, #128	@ 0x80
 8005872:	01c9      	lsls	r1, r1, #7
 8005874:	430a      	orrs	r2, r1
 8005876:	609a      	str	r2, [r3, #8]
      break;
 8005878:	e03e      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005886:	001a      	movs	r2, r3
 8005888:	f000 f8ec 	bl	8005a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2150      	movs	r1, #80	@ 0x50
 8005892:	0018      	movs	r0, r3
 8005894:	f000 f946 	bl	8005b24 <TIM_ITRx_SetConfig>
      break;
 8005898:	e02e      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058a6:	001a      	movs	r2, r3
 80058a8:	f000 f90a 	bl	8005ac0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2160      	movs	r1, #96	@ 0x60
 80058b2:	0018      	movs	r0, r3
 80058b4:	f000 f936 	bl	8005b24 <TIM_ITRx_SetConfig>
      break;
 80058b8:	e01e      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c6:	001a      	movs	r2, r3
 80058c8:	f000 f8cc 	bl	8005a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2140      	movs	r1, #64	@ 0x40
 80058d2:	0018      	movs	r0, r3
 80058d4:	f000 f926 	bl	8005b24 <TIM_ITRx_SetConfig>
      break;
 80058d8:	e00e      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	0019      	movs	r1, r3
 80058e4:	0010      	movs	r0, r2
 80058e6:	f000 f91d 	bl	8005b24 <TIM_ITRx_SetConfig>
      break;
 80058ea:	e005      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80058ec:	230f      	movs	r3, #15
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
      break;
 80058f4:	e000      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80058f6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	223d      	movs	r2, #61	@ 0x3d
 80058fc:	2101      	movs	r1, #1
 80058fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	223c      	movs	r2, #60	@ 0x3c
 8005904:	2100      	movs	r1, #0
 8005906:	5499      	strb	r1, [r3, r2]

  return status;
 8005908:	230f      	movs	r3, #15
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	781b      	ldrb	r3, [r3, #0]
}
 800590e:	0018      	movs	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	b004      	add	sp, #16
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	ffff00ff 	.word	0xffff00ff

0800591c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005924:	46c0      	nop			@ (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	b002      	add	sp, #8
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005934:	46c0      	nop			@ (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b002      	add	sp, #8
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005944:	46c0      	nop			@ (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005954:	46c0      	nop			@ (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a37      	ldr	r2, [pc, #220]	@ (8005a4c <TIM_Base_SetConfig+0xf0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d008      	beq.n	8005986 <TIM_Base_SetConfig+0x2a>
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	2380      	movs	r3, #128	@ 0x80
 8005978:	05db      	lsls	r3, r3, #23
 800597a:	429a      	cmp	r2, r3
 800597c:	d003      	beq.n	8005986 <TIM_Base_SetConfig+0x2a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a33      	ldr	r2, [pc, #204]	@ (8005a50 <TIM_Base_SetConfig+0xf4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2270      	movs	r2, #112	@ 0x70
 800598a:	4393      	bics	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a4c <TIM_Base_SetConfig+0xf0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d014      	beq.n	80059ca <TIM_Base_SetConfig+0x6e>
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	2380      	movs	r3, #128	@ 0x80
 80059a4:	05db      	lsls	r3, r3, #23
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d00f      	beq.n	80059ca <TIM_Base_SetConfig+0x6e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a28      	ldr	r2, [pc, #160]	@ (8005a50 <TIM_Base_SetConfig+0xf4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0x6e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a27      	ldr	r2, [pc, #156]	@ (8005a54 <TIM_Base_SetConfig+0xf8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0x6e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a26      	ldr	r2, [pc, #152]	@ (8005a58 <TIM_Base_SetConfig+0xfc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0x6e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a25      	ldr	r2, [pc, #148]	@ (8005a5c <TIM_Base_SetConfig+0x100>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4a24      	ldr	r2, [pc, #144]	@ (8005a60 <TIM_Base_SetConfig+0x104>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2280      	movs	r2, #128	@ 0x80
 80059e0:	4393      	bics	r3, r2
 80059e2:	001a      	movs	r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a11      	ldr	r2, [pc, #68]	@ (8005a4c <TIM_Base_SetConfig+0xf0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0xbe>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a12      	ldr	r2, [pc, #72]	@ (8005a58 <TIM_Base_SetConfig+0xfc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0xbe>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a11      	ldr	r2, [pc, #68]	@ (8005a5c <TIM_Base_SetConfig+0x100>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d103      	bne.n	8005a22 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d106      	bne.n	8005a42 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	4393      	bics	r3, r2
 8005a3c:	001a      	movs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	611a      	str	r2, [r3, #16]
  }
}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b004      	add	sp, #16
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40002000 	.word	0x40002000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	fffffcff 	.word	0xfffffcff

08005a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	4393      	bics	r3, r2
 8005a7e:	001a      	movs	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	22f0      	movs	r2, #240	@ 0xf0
 8005a8e:	4393      	bics	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	220a      	movs	r2, #10
 8005aa0:	4393      	bics	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	621a      	str	r2, [r3, #32]
}
 8005ab8:	46c0      	nop			@ (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b006      	add	sp, #24
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	2210      	movs	r2, #16
 8005ad8:	4393      	bics	r3, r2
 8005ada:	001a      	movs	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8005b20 <TIM_TI2_ConfigInputStage+0x60>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	22a0      	movs	r2, #160	@ 0xa0
 8005afc:	4393      	bics	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	46c0      	nop			@ (mov r8, r8)
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	b006      	add	sp, #24
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	ffff0fff 	.word	0xffff0fff

08005b24 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2270      	movs	r2, #112	@ 0x70
 8005b38:	4393      	bics	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	2207      	movs	r2, #7
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	609a      	str	r2, [r3, #8]
}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b004      	add	sp, #16
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4a09      	ldr	r2, [pc, #36]	@ (8005b94 <TIM_ETR_SetConfig+0x3c>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	46c0      	nop			@ (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b006      	add	sp, #24
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	ffff00ff 	.word	0xffff00ff

08005b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	223c      	movs	r2, #60	@ 0x3c
 8005ba6:	5c9b      	ldrb	r3, [r3, r2]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e042      	b.n	8005c36 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	223c      	movs	r2, #60	@ 0x3c
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	223d      	movs	r2, #61	@ 0x3d
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2270      	movs	r2, #112	@ 0x70
 8005bd4:	4393      	bics	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a14      	ldr	r2, [pc, #80]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00a      	beq.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	05db      	lsls	r3, r3, #23
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d004      	beq.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a0f      	ldr	r2, [pc, #60]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10c      	bne.n	8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2280      	movs	r2, #128	@ 0x80
 8005c0e:	4393      	bics	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	223d      	movs	r2, #61	@ 0x3d
 8005c28:	2101      	movs	r1, #1
 8005c2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	223c      	movs	r2, #60	@ 0x3c
 8005c30:	2100      	movs	r1, #0
 8005c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	0018      	movs	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b004      	add	sp, #16
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40000400 	.word	0x40000400

08005c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c50:	46c0      	nop			@ (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c60:	46c0      	nop			@ (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b002      	add	sp, #8
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <siprintf>:
 8005c68:	b40e      	push	{r1, r2, r3}
 8005c6a:	b500      	push	{lr}
 8005c6c:	490b      	ldr	r1, [pc, #44]	@ (8005c9c <siprintf+0x34>)
 8005c6e:	b09c      	sub	sp, #112	@ 0x70
 8005c70:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c72:	9002      	str	r0, [sp, #8]
 8005c74:	9006      	str	r0, [sp, #24]
 8005c76:	9107      	str	r1, [sp, #28]
 8005c78:	9104      	str	r1, [sp, #16]
 8005c7a:	4809      	ldr	r0, [pc, #36]	@ (8005ca0 <siprintf+0x38>)
 8005c7c:	4909      	ldr	r1, [pc, #36]	@ (8005ca4 <siprintf+0x3c>)
 8005c7e:	cb04      	ldmia	r3!, {r2}
 8005c80:	9105      	str	r1, [sp, #20]
 8005c82:	6800      	ldr	r0, [r0, #0]
 8005c84:	a902      	add	r1, sp, #8
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	f000 f9a8 	bl	8005fdc <_svfiprintf_r>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	9b02      	ldr	r3, [sp, #8]
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	b01c      	add	sp, #112	@ 0x70
 8005c94:	bc08      	pop	{r3}
 8005c96:	b003      	add	sp, #12
 8005c98:	4718      	bx	r3
 8005c9a:	46c0      	nop			@ (mov r8, r8)
 8005c9c:	7fffffff 	.word	0x7fffffff
 8005ca0:	20000010 	.word	0x20000010
 8005ca4:	ffff0208 	.word	0xffff0208

08005ca8 <memset>:
 8005ca8:	0003      	movs	r3, r0
 8005caa:	1882      	adds	r2, r0, r2
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d100      	bne.n	8005cb2 <memset+0xa>
 8005cb0:	4770      	bx	lr
 8005cb2:	7019      	strb	r1, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	e7f9      	b.n	8005cac <memset+0x4>

08005cb8 <__errno>:
 8005cb8:	4b01      	ldr	r3, [pc, #4]	@ (8005cc0 <__errno+0x8>)
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	4770      	bx	lr
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	20000010 	.word	0x20000010

08005cc4 <__libc_init_array>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	4c0c      	ldr	r4, [pc, #48]	@ (8005cfc <__libc_init_array+0x38>)
 8005cca:	4d0d      	ldr	r5, [pc, #52]	@ (8005d00 <__libc_init_array+0x3c>)
 8005ccc:	1b64      	subs	r4, r4, r5
 8005cce:	10a4      	asrs	r4, r4, #2
 8005cd0:	42a6      	cmp	r6, r4
 8005cd2:	d109      	bne.n	8005ce8 <__libc_init_array+0x24>
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	f000 fc65 	bl	80065a4 <_init>
 8005cda:	4c0a      	ldr	r4, [pc, #40]	@ (8005d04 <__libc_init_array+0x40>)
 8005cdc:	4d0a      	ldr	r5, [pc, #40]	@ (8005d08 <__libc_init_array+0x44>)
 8005cde:	1b64      	subs	r4, r4, r5
 8005ce0:	10a4      	asrs	r4, r4, #2
 8005ce2:	42a6      	cmp	r6, r4
 8005ce4:	d105      	bne.n	8005cf2 <__libc_init_array+0x2e>
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	00b3      	lsls	r3, r6, #2
 8005cea:	58eb      	ldr	r3, [r5, r3]
 8005cec:	4798      	blx	r3
 8005cee:	3601      	adds	r6, #1
 8005cf0:	e7ee      	b.n	8005cd0 <__libc_init_array+0xc>
 8005cf2:	00b3      	lsls	r3, r6, #2
 8005cf4:	58eb      	ldr	r3, [r5, r3]
 8005cf6:	4798      	blx	r3
 8005cf8:	3601      	adds	r6, #1
 8005cfa:	e7f2      	b.n	8005ce2 <__libc_init_array+0x1e>
 8005cfc:	080066dc 	.word	0x080066dc
 8005d00:	080066dc 	.word	0x080066dc
 8005d04:	080066e0 	.word	0x080066e0
 8005d08:	080066dc 	.word	0x080066dc

08005d0c <__retarget_lock_acquire_recursive>:
 8005d0c:	4770      	bx	lr

08005d0e <__retarget_lock_release_recursive>:
 8005d0e:	4770      	bx	lr

08005d10 <memcpy>:
 8005d10:	2300      	movs	r3, #0
 8005d12:	b510      	push	{r4, lr}
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d100      	bne.n	8005d1a <memcpy+0xa>
 8005d18:	bd10      	pop	{r4, pc}
 8005d1a:	5ccc      	ldrb	r4, [r1, r3]
 8005d1c:	54c4      	strb	r4, [r0, r3]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	e7f8      	b.n	8005d14 <memcpy+0x4>
	...

08005d24 <_free_r>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	0005      	movs	r5, r0
 8005d28:	1e0c      	subs	r4, r1, #0
 8005d2a:	d010      	beq.n	8005d4e <_free_r+0x2a>
 8005d2c:	3c04      	subs	r4, #4
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	da00      	bge.n	8005d36 <_free_r+0x12>
 8005d34:	18e4      	adds	r4, r4, r3
 8005d36:	0028      	movs	r0, r5
 8005d38:	f000 f8e0 	bl	8005efc <__malloc_lock>
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005db4 <_free_r+0x90>)
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <_free_r+0x2c>
 8005d44:	6063      	str	r3, [r4, #4]
 8005d46:	6014      	str	r4, [r2, #0]
 8005d48:	0028      	movs	r0, r5
 8005d4a:	f000 f8df 	bl	8005f0c <__malloc_unlock>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d908      	bls.n	8005d66 <_free_r+0x42>
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	1821      	adds	r1, r4, r0
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	d1f3      	bne.n	8005d44 <_free_r+0x20>
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	1809      	adds	r1, r1, r0
 8005d62:	6021      	str	r1, [r4, #0]
 8005d64:	e7ee      	b.n	8005d44 <_free_r+0x20>
 8005d66:	001a      	movs	r2, r3
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <_free_r+0x4e>
 8005d6e:	42a3      	cmp	r3, r4
 8005d70:	d9f9      	bls.n	8005d66 <_free_r+0x42>
 8005d72:	6811      	ldr	r1, [r2, #0]
 8005d74:	1850      	adds	r0, r2, r1
 8005d76:	42a0      	cmp	r0, r4
 8005d78:	d10b      	bne.n	8005d92 <_free_r+0x6e>
 8005d7a:	6820      	ldr	r0, [r4, #0]
 8005d7c:	1809      	adds	r1, r1, r0
 8005d7e:	1850      	adds	r0, r2, r1
 8005d80:	6011      	str	r1, [r2, #0]
 8005d82:	4283      	cmp	r3, r0
 8005d84:	d1e0      	bne.n	8005d48 <_free_r+0x24>
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	1841      	adds	r1, r0, r1
 8005d8c:	6011      	str	r1, [r2, #0]
 8005d8e:	6053      	str	r3, [r2, #4]
 8005d90:	e7da      	b.n	8005d48 <_free_r+0x24>
 8005d92:	42a0      	cmp	r0, r4
 8005d94:	d902      	bls.n	8005d9c <_free_r+0x78>
 8005d96:	230c      	movs	r3, #12
 8005d98:	602b      	str	r3, [r5, #0]
 8005d9a:	e7d5      	b.n	8005d48 <_free_r+0x24>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	1821      	adds	r1, r4, r0
 8005da0:	428b      	cmp	r3, r1
 8005da2:	d103      	bne.n	8005dac <_free_r+0x88>
 8005da4:	6819      	ldr	r1, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	1809      	adds	r1, r1, r0
 8005daa:	6021      	str	r1, [r4, #0]
 8005dac:	6063      	str	r3, [r4, #4]
 8005dae:	6054      	str	r4, [r2, #4]
 8005db0:	e7ca      	b.n	8005d48 <_free_r+0x24>
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	200002a0 	.word	0x200002a0

08005db8 <sbrk_aligned>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4e0f      	ldr	r6, [pc, #60]	@ (8005df8 <sbrk_aligned+0x40>)
 8005dbc:	000d      	movs	r5, r1
 8005dbe:	6831      	ldr	r1, [r6, #0]
 8005dc0:	0004      	movs	r4, r0
 8005dc2:	2900      	cmp	r1, #0
 8005dc4:	d102      	bne.n	8005dcc <sbrk_aligned+0x14>
 8005dc6:	f000 fb99 	bl	80064fc <_sbrk_r>
 8005dca:	6030      	str	r0, [r6, #0]
 8005dcc:	0029      	movs	r1, r5
 8005dce:	0020      	movs	r0, r4
 8005dd0:	f000 fb94 	bl	80064fc <_sbrk_r>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d103      	bne.n	8005de0 <sbrk_aligned+0x28>
 8005dd8:	2501      	movs	r5, #1
 8005dda:	426d      	negs	r5, r5
 8005ddc:	0028      	movs	r0, r5
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	2303      	movs	r3, #3
 8005de2:	1cc5      	adds	r5, r0, #3
 8005de4:	439d      	bics	r5, r3
 8005de6:	42a8      	cmp	r0, r5
 8005de8:	d0f8      	beq.n	8005ddc <sbrk_aligned+0x24>
 8005dea:	1a29      	subs	r1, r5, r0
 8005dec:	0020      	movs	r0, r4
 8005dee:	f000 fb85 	bl	80064fc <_sbrk_r>
 8005df2:	3001      	adds	r0, #1
 8005df4:	d1f2      	bne.n	8005ddc <sbrk_aligned+0x24>
 8005df6:	e7ef      	b.n	8005dd8 <sbrk_aligned+0x20>
 8005df8:	2000029c 	.word	0x2000029c

08005dfc <_malloc_r>:
 8005dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dfe:	2203      	movs	r2, #3
 8005e00:	1ccb      	adds	r3, r1, #3
 8005e02:	4393      	bics	r3, r2
 8005e04:	3308      	adds	r3, #8
 8005e06:	0005      	movs	r5, r0
 8005e08:	001f      	movs	r7, r3
 8005e0a:	2b0c      	cmp	r3, #12
 8005e0c:	d234      	bcs.n	8005e78 <_malloc_r+0x7c>
 8005e0e:	270c      	movs	r7, #12
 8005e10:	42b9      	cmp	r1, r7
 8005e12:	d833      	bhi.n	8005e7c <_malloc_r+0x80>
 8005e14:	0028      	movs	r0, r5
 8005e16:	f000 f871 	bl	8005efc <__malloc_lock>
 8005e1a:	4e37      	ldr	r6, [pc, #220]	@ (8005ef8 <_malloc_r+0xfc>)
 8005e1c:	6833      	ldr	r3, [r6, #0]
 8005e1e:	001c      	movs	r4, r3
 8005e20:	2c00      	cmp	r4, #0
 8005e22:	d12f      	bne.n	8005e84 <_malloc_r+0x88>
 8005e24:	0039      	movs	r1, r7
 8005e26:	0028      	movs	r0, r5
 8005e28:	f7ff ffc6 	bl	8005db8 <sbrk_aligned>
 8005e2c:	0004      	movs	r4, r0
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	d15f      	bne.n	8005ef2 <_malloc_r+0xf6>
 8005e32:	6834      	ldr	r4, [r6, #0]
 8005e34:	9400      	str	r4, [sp, #0]
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d14a      	bne.n	8005ed2 <_malloc_r+0xd6>
 8005e3c:	2c00      	cmp	r4, #0
 8005e3e:	d052      	beq.n	8005ee6 <_malloc_r+0xea>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	0028      	movs	r0, r5
 8005e44:	18e3      	adds	r3, r4, r3
 8005e46:	9900      	ldr	r1, [sp, #0]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	f000 fb57 	bl	80064fc <_sbrk_r>
 8005e4e:	9b01      	ldr	r3, [sp, #4]
 8005e50:	4283      	cmp	r3, r0
 8005e52:	d148      	bne.n	8005ee6 <_malloc_r+0xea>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	0028      	movs	r0, r5
 8005e58:	1aff      	subs	r7, r7, r3
 8005e5a:	0039      	movs	r1, r7
 8005e5c:	f7ff ffac 	bl	8005db8 <sbrk_aligned>
 8005e60:	3001      	adds	r0, #1
 8005e62:	d040      	beq.n	8005ee6 <_malloc_r+0xea>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	19db      	adds	r3, r3, r7
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	6833      	ldr	r3, [r6, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	d133      	bne.n	8005eda <_malloc_r+0xde>
 8005e72:	9b00      	ldr	r3, [sp, #0]
 8005e74:	6033      	str	r3, [r6, #0]
 8005e76:	e019      	b.n	8005eac <_malloc_r+0xb0>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dac9      	bge.n	8005e10 <_malloc_r+0x14>
 8005e7c:	230c      	movs	r3, #12
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	2000      	movs	r0, #0
 8005e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e84:	6821      	ldr	r1, [r4, #0]
 8005e86:	1bc9      	subs	r1, r1, r7
 8005e88:	d420      	bmi.n	8005ecc <_malloc_r+0xd0>
 8005e8a:	290b      	cmp	r1, #11
 8005e8c:	d90a      	bls.n	8005ea4 <_malloc_r+0xa8>
 8005e8e:	19e2      	adds	r2, r4, r7
 8005e90:	6027      	str	r7, [r4, #0]
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	d104      	bne.n	8005ea0 <_malloc_r+0xa4>
 8005e96:	6032      	str	r2, [r6, #0]
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	6011      	str	r1, [r2, #0]
 8005e9c:	6053      	str	r3, [r2, #4]
 8005e9e:	e005      	b.n	8005eac <_malloc_r+0xb0>
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	e7f9      	b.n	8005e98 <_malloc_r+0x9c>
 8005ea4:	6862      	ldr	r2, [r4, #4]
 8005ea6:	42a3      	cmp	r3, r4
 8005ea8:	d10e      	bne.n	8005ec8 <_malloc_r+0xcc>
 8005eaa:	6032      	str	r2, [r6, #0]
 8005eac:	0028      	movs	r0, r5
 8005eae:	f000 f82d 	bl	8005f0c <__malloc_unlock>
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	2207      	movs	r2, #7
 8005eb6:	300b      	adds	r0, #11
 8005eb8:	1d23      	adds	r3, r4, #4
 8005eba:	4390      	bics	r0, r2
 8005ebc:	1ac2      	subs	r2, r0, r3
 8005ebe:	4298      	cmp	r0, r3
 8005ec0:	d0df      	beq.n	8005e82 <_malloc_r+0x86>
 8005ec2:	1a1b      	subs	r3, r3, r0
 8005ec4:	50a3      	str	r3, [r4, r2]
 8005ec6:	e7dc      	b.n	8005e82 <_malloc_r+0x86>
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	e7ef      	b.n	8005eac <_malloc_r+0xb0>
 8005ecc:	0023      	movs	r3, r4
 8005ece:	6864      	ldr	r4, [r4, #4]
 8005ed0:	e7a6      	b.n	8005e20 <_malloc_r+0x24>
 8005ed2:	9c00      	ldr	r4, [sp, #0]
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	e7ad      	b.n	8005e36 <_malloc_r+0x3a>
 8005eda:	001a      	movs	r2, r3
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	d1fb      	bne.n	8005eda <_malloc_r+0xde>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e7da      	b.n	8005e9c <_malloc_r+0xa0>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	0028      	movs	r0, r5
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	f000 f80e 	bl	8005f0c <__malloc_unlock>
 8005ef0:	e7c6      	b.n	8005e80 <_malloc_r+0x84>
 8005ef2:	6007      	str	r7, [r0, #0]
 8005ef4:	e7da      	b.n	8005eac <_malloc_r+0xb0>
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	200002a0 	.word	0x200002a0

08005efc <__malloc_lock>:
 8005efc:	b510      	push	{r4, lr}
 8005efe:	4802      	ldr	r0, [pc, #8]	@ (8005f08 <__malloc_lock+0xc>)
 8005f00:	f7ff ff04 	bl	8005d0c <__retarget_lock_acquire_recursive>
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	46c0      	nop			@ (mov r8, r8)
 8005f08:	20000298 	.word	0x20000298

08005f0c <__malloc_unlock>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	4802      	ldr	r0, [pc, #8]	@ (8005f18 <__malloc_unlock+0xc>)
 8005f10:	f7ff fefd 	bl	8005d0e <__retarget_lock_release_recursive>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	20000298 	.word	0x20000298

08005f1c <__ssputs_r>:
 8005f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f1e:	688e      	ldr	r6, [r1, #8]
 8005f20:	b085      	sub	sp, #20
 8005f22:	001f      	movs	r7, r3
 8005f24:	000c      	movs	r4, r1
 8005f26:	680b      	ldr	r3, [r1, #0]
 8005f28:	9002      	str	r0, [sp, #8]
 8005f2a:	9203      	str	r2, [sp, #12]
 8005f2c:	42be      	cmp	r6, r7
 8005f2e:	d830      	bhi.n	8005f92 <__ssputs_r+0x76>
 8005f30:	210c      	movs	r1, #12
 8005f32:	5e62      	ldrsh	r2, [r4, r1]
 8005f34:	2190      	movs	r1, #144	@ 0x90
 8005f36:	00c9      	lsls	r1, r1, #3
 8005f38:	420a      	tst	r2, r1
 8005f3a:	d028      	beq.n	8005f8e <__ssputs_r+0x72>
 8005f3c:	2003      	movs	r0, #3
 8005f3e:	6921      	ldr	r1, [r4, #16]
 8005f40:	1a5b      	subs	r3, r3, r1
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	6963      	ldr	r3, [r4, #20]
 8005f46:	4343      	muls	r3, r0
 8005f48:	9801      	ldr	r0, [sp, #4]
 8005f4a:	0fdd      	lsrs	r5, r3, #31
 8005f4c:	18ed      	adds	r5, r5, r3
 8005f4e:	1c7b      	adds	r3, r7, #1
 8005f50:	181b      	adds	r3, r3, r0
 8005f52:	106d      	asrs	r5, r5, #1
 8005f54:	42ab      	cmp	r3, r5
 8005f56:	d900      	bls.n	8005f5a <__ssputs_r+0x3e>
 8005f58:	001d      	movs	r5, r3
 8005f5a:	0552      	lsls	r2, r2, #21
 8005f5c:	d528      	bpl.n	8005fb0 <__ssputs_r+0x94>
 8005f5e:	0029      	movs	r1, r5
 8005f60:	9802      	ldr	r0, [sp, #8]
 8005f62:	f7ff ff4b 	bl	8005dfc <_malloc_r>
 8005f66:	1e06      	subs	r6, r0, #0
 8005f68:	d02c      	beq.n	8005fc4 <__ssputs_r+0xa8>
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	6921      	ldr	r1, [r4, #16]
 8005f6e:	f7ff fecf 	bl	8005d10 <memcpy>
 8005f72:	89a2      	ldrh	r2, [r4, #12]
 8005f74:	4b18      	ldr	r3, [pc, #96]	@ (8005fd8 <__ssputs_r+0xbc>)
 8005f76:	401a      	ands	r2, r3
 8005f78:	2380      	movs	r3, #128	@ 0x80
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	6126      	str	r6, [r4, #16]
 8005f82:	18f6      	adds	r6, r6, r3
 8005f84:	6026      	str	r6, [r4, #0]
 8005f86:	003e      	movs	r6, r7
 8005f88:	6165      	str	r5, [r4, #20]
 8005f8a:	1aed      	subs	r5, r5, r3
 8005f8c:	60a5      	str	r5, [r4, #8]
 8005f8e:	42be      	cmp	r6, r7
 8005f90:	d900      	bls.n	8005f94 <__ssputs_r+0x78>
 8005f92:	003e      	movs	r6, r7
 8005f94:	0032      	movs	r2, r6
 8005f96:	9903      	ldr	r1, [sp, #12]
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	f000 fa9b 	bl	80064d4 <memmove>
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	68a3      	ldr	r3, [r4, #8]
 8005fa2:	1b9b      	subs	r3, r3, r6
 8005fa4:	60a3      	str	r3, [r4, #8]
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	199b      	adds	r3, r3, r6
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	b005      	add	sp, #20
 8005fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb0:	002a      	movs	r2, r5
 8005fb2:	9802      	ldr	r0, [sp, #8]
 8005fb4:	f000 fabf 	bl	8006536 <_realloc_r>
 8005fb8:	1e06      	subs	r6, r0, #0
 8005fba:	d1e0      	bne.n	8005f7e <__ssputs_r+0x62>
 8005fbc:	6921      	ldr	r1, [r4, #16]
 8005fbe:	9802      	ldr	r0, [sp, #8]
 8005fc0:	f7ff feb0 	bl	8005d24 <_free_r>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	9a02      	ldr	r2, [sp, #8]
 8005fca:	4240      	negs	r0, r0
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	89a2      	ldrh	r2, [r4, #12]
 8005fd0:	3334      	adds	r3, #52	@ 0x34
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	e7e9      	b.n	8005fac <__ssputs_r+0x90>
 8005fd8:	fffffb7f 	.word	0xfffffb7f

08005fdc <_svfiprintf_r>:
 8005fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fde:	b0a1      	sub	sp, #132	@ 0x84
 8005fe0:	9003      	str	r0, [sp, #12]
 8005fe2:	001d      	movs	r5, r3
 8005fe4:	898b      	ldrh	r3, [r1, #12]
 8005fe6:	000f      	movs	r7, r1
 8005fe8:	0016      	movs	r6, r2
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	d511      	bpl.n	8006012 <_svfiprintf_r+0x36>
 8005fee:	690b      	ldr	r3, [r1, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10e      	bne.n	8006012 <_svfiprintf_r+0x36>
 8005ff4:	2140      	movs	r1, #64	@ 0x40
 8005ff6:	f7ff ff01 	bl	8005dfc <_malloc_r>
 8005ffa:	6038      	str	r0, [r7, #0]
 8005ffc:	6138      	str	r0, [r7, #16]
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d105      	bne.n	800600e <_svfiprintf_r+0x32>
 8006002:	230c      	movs	r3, #12
 8006004:	9a03      	ldr	r2, [sp, #12]
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	2001      	movs	r0, #1
 800600a:	4240      	negs	r0, r0
 800600c:	e0cf      	b.n	80061ae <_svfiprintf_r+0x1d2>
 800600e:	2340      	movs	r3, #64	@ 0x40
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	2300      	movs	r3, #0
 8006014:	ac08      	add	r4, sp, #32
 8006016:	6163      	str	r3, [r4, #20]
 8006018:	3320      	adds	r3, #32
 800601a:	7663      	strb	r3, [r4, #25]
 800601c:	3310      	adds	r3, #16
 800601e:	76a3      	strb	r3, [r4, #26]
 8006020:	9507      	str	r5, [sp, #28]
 8006022:	0035      	movs	r5, r6
 8006024:	782b      	ldrb	r3, [r5, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <_svfiprintf_r+0x52>
 800602a:	2b25      	cmp	r3, #37	@ 0x25
 800602c:	d148      	bne.n	80060c0 <_svfiprintf_r+0xe4>
 800602e:	1bab      	subs	r3, r5, r6
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	42b5      	cmp	r5, r6
 8006034:	d00b      	beq.n	800604e <_svfiprintf_r+0x72>
 8006036:	0032      	movs	r2, r6
 8006038:	0039      	movs	r1, r7
 800603a:	9803      	ldr	r0, [sp, #12]
 800603c:	f7ff ff6e 	bl	8005f1c <__ssputs_r>
 8006040:	3001      	adds	r0, #1
 8006042:	d100      	bne.n	8006046 <_svfiprintf_r+0x6a>
 8006044:	e0ae      	b.n	80061a4 <_svfiprintf_r+0x1c8>
 8006046:	6963      	ldr	r3, [r4, #20]
 8006048:	9a05      	ldr	r2, [sp, #20]
 800604a:	189b      	adds	r3, r3, r2
 800604c:	6163      	str	r3, [r4, #20]
 800604e:	782b      	ldrb	r3, [r5, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d100      	bne.n	8006056 <_svfiprintf_r+0x7a>
 8006054:	e0a6      	b.n	80061a4 <_svfiprintf_r+0x1c8>
 8006056:	2201      	movs	r2, #1
 8006058:	2300      	movs	r3, #0
 800605a:	4252      	negs	r2, r2
 800605c:	6062      	str	r2, [r4, #4]
 800605e:	a904      	add	r1, sp, #16
 8006060:	3254      	adds	r2, #84	@ 0x54
 8006062:	1852      	adds	r2, r2, r1
 8006064:	1c6e      	adds	r6, r5, #1
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	60e3      	str	r3, [r4, #12]
 800606a:	60a3      	str	r3, [r4, #8]
 800606c:	7013      	strb	r3, [r2, #0]
 800606e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006070:	4b54      	ldr	r3, [pc, #336]	@ (80061c4 <_svfiprintf_r+0x1e8>)
 8006072:	2205      	movs	r2, #5
 8006074:	0018      	movs	r0, r3
 8006076:	7831      	ldrb	r1, [r6, #0]
 8006078:	9305      	str	r3, [sp, #20]
 800607a:	f000 fa51 	bl	8006520 <memchr>
 800607e:	1c75      	adds	r5, r6, #1
 8006080:	2800      	cmp	r0, #0
 8006082:	d11f      	bne.n	80060c4 <_svfiprintf_r+0xe8>
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	06d3      	lsls	r3, r2, #27
 8006088:	d504      	bpl.n	8006094 <_svfiprintf_r+0xb8>
 800608a:	2353      	movs	r3, #83	@ 0x53
 800608c:	a904      	add	r1, sp, #16
 800608e:	185b      	adds	r3, r3, r1
 8006090:	2120      	movs	r1, #32
 8006092:	7019      	strb	r1, [r3, #0]
 8006094:	0713      	lsls	r3, r2, #28
 8006096:	d504      	bpl.n	80060a2 <_svfiprintf_r+0xc6>
 8006098:	2353      	movs	r3, #83	@ 0x53
 800609a:	a904      	add	r1, sp, #16
 800609c:	185b      	adds	r3, r3, r1
 800609e:	212b      	movs	r1, #43	@ 0x2b
 80060a0:	7019      	strb	r1, [r3, #0]
 80060a2:	7833      	ldrb	r3, [r6, #0]
 80060a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80060a6:	d016      	beq.n	80060d6 <_svfiprintf_r+0xfa>
 80060a8:	0035      	movs	r5, r6
 80060aa:	2100      	movs	r1, #0
 80060ac:	200a      	movs	r0, #10
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	782a      	ldrb	r2, [r5, #0]
 80060b2:	1c6e      	adds	r6, r5, #1
 80060b4:	3a30      	subs	r2, #48	@ 0x30
 80060b6:	2a09      	cmp	r2, #9
 80060b8:	d950      	bls.n	800615c <_svfiprintf_r+0x180>
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d111      	bne.n	80060e2 <_svfiprintf_r+0x106>
 80060be:	e017      	b.n	80060f0 <_svfiprintf_r+0x114>
 80060c0:	3501      	adds	r5, #1
 80060c2:	e7af      	b.n	8006024 <_svfiprintf_r+0x48>
 80060c4:	9b05      	ldr	r3, [sp, #20]
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	1ac0      	subs	r0, r0, r3
 80060ca:	2301      	movs	r3, #1
 80060cc:	4083      	lsls	r3, r0
 80060ce:	4313      	orrs	r3, r2
 80060d0:	002e      	movs	r6, r5
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	e7cc      	b.n	8006070 <_svfiprintf_r+0x94>
 80060d6:	9b07      	ldr	r3, [sp, #28]
 80060d8:	1d19      	adds	r1, r3, #4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	9107      	str	r1, [sp, #28]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	db01      	blt.n	80060e6 <_svfiprintf_r+0x10a>
 80060e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e4:	e004      	b.n	80060f0 <_svfiprintf_r+0x114>
 80060e6:	425b      	negs	r3, r3
 80060e8:	60e3      	str	r3, [r4, #12]
 80060ea:	2302      	movs	r3, #2
 80060ec:	4313      	orrs	r3, r2
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	782b      	ldrb	r3, [r5, #0]
 80060f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80060f4:	d10c      	bne.n	8006110 <_svfiprintf_r+0x134>
 80060f6:	786b      	ldrb	r3, [r5, #1]
 80060f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060fa:	d134      	bne.n	8006166 <_svfiprintf_r+0x18a>
 80060fc:	9b07      	ldr	r3, [sp, #28]
 80060fe:	3502      	adds	r5, #2
 8006100:	1d1a      	adds	r2, r3, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	9207      	str	r2, [sp, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	da01      	bge.n	800610e <_svfiprintf_r+0x132>
 800610a:	2301      	movs	r3, #1
 800610c:	425b      	negs	r3, r3
 800610e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006110:	4e2d      	ldr	r6, [pc, #180]	@ (80061c8 <_svfiprintf_r+0x1ec>)
 8006112:	2203      	movs	r2, #3
 8006114:	0030      	movs	r0, r6
 8006116:	7829      	ldrb	r1, [r5, #0]
 8006118:	f000 fa02 	bl	8006520 <memchr>
 800611c:	2800      	cmp	r0, #0
 800611e:	d006      	beq.n	800612e <_svfiprintf_r+0x152>
 8006120:	2340      	movs	r3, #64	@ 0x40
 8006122:	1b80      	subs	r0, r0, r6
 8006124:	4083      	lsls	r3, r0
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	3501      	adds	r5, #1
 800612a:	4313      	orrs	r3, r2
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	7829      	ldrb	r1, [r5, #0]
 8006130:	2206      	movs	r2, #6
 8006132:	4826      	ldr	r0, [pc, #152]	@ (80061cc <_svfiprintf_r+0x1f0>)
 8006134:	1c6e      	adds	r6, r5, #1
 8006136:	7621      	strb	r1, [r4, #24]
 8006138:	f000 f9f2 	bl	8006520 <memchr>
 800613c:	2800      	cmp	r0, #0
 800613e:	d038      	beq.n	80061b2 <_svfiprintf_r+0x1d6>
 8006140:	4b23      	ldr	r3, [pc, #140]	@ (80061d0 <_svfiprintf_r+0x1f4>)
 8006142:	2b00      	cmp	r3, #0
 8006144:	d122      	bne.n	800618c <_svfiprintf_r+0x1b0>
 8006146:	2207      	movs	r2, #7
 8006148:	9b07      	ldr	r3, [sp, #28]
 800614a:	3307      	adds	r3, #7
 800614c:	4393      	bics	r3, r2
 800614e:	3308      	adds	r3, #8
 8006150:	9307      	str	r3, [sp, #28]
 8006152:	6963      	ldr	r3, [r4, #20]
 8006154:	9a04      	ldr	r2, [sp, #16]
 8006156:	189b      	adds	r3, r3, r2
 8006158:	6163      	str	r3, [r4, #20]
 800615a:	e762      	b.n	8006022 <_svfiprintf_r+0x46>
 800615c:	4343      	muls	r3, r0
 800615e:	0035      	movs	r5, r6
 8006160:	2101      	movs	r1, #1
 8006162:	189b      	adds	r3, r3, r2
 8006164:	e7a4      	b.n	80060b0 <_svfiprintf_r+0xd4>
 8006166:	2300      	movs	r3, #0
 8006168:	200a      	movs	r0, #10
 800616a:	0019      	movs	r1, r3
 800616c:	3501      	adds	r5, #1
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	782a      	ldrb	r2, [r5, #0]
 8006172:	1c6e      	adds	r6, r5, #1
 8006174:	3a30      	subs	r2, #48	@ 0x30
 8006176:	2a09      	cmp	r2, #9
 8006178:	d903      	bls.n	8006182 <_svfiprintf_r+0x1a6>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0c8      	beq.n	8006110 <_svfiprintf_r+0x134>
 800617e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006180:	e7c6      	b.n	8006110 <_svfiprintf_r+0x134>
 8006182:	4341      	muls	r1, r0
 8006184:	0035      	movs	r5, r6
 8006186:	2301      	movs	r3, #1
 8006188:	1889      	adds	r1, r1, r2
 800618a:	e7f1      	b.n	8006170 <_svfiprintf_r+0x194>
 800618c:	aa07      	add	r2, sp, #28
 800618e:	9200      	str	r2, [sp, #0]
 8006190:	0021      	movs	r1, r4
 8006192:	003a      	movs	r2, r7
 8006194:	4b0f      	ldr	r3, [pc, #60]	@ (80061d4 <_svfiprintf_r+0x1f8>)
 8006196:	9803      	ldr	r0, [sp, #12]
 8006198:	e000      	b.n	800619c <_svfiprintf_r+0x1c0>
 800619a:	bf00      	nop
 800619c:	9004      	str	r0, [sp, #16]
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	3301      	adds	r3, #1
 80061a2:	d1d6      	bne.n	8006152 <_svfiprintf_r+0x176>
 80061a4:	89bb      	ldrh	r3, [r7, #12]
 80061a6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80061a8:	065b      	lsls	r3, r3, #25
 80061aa:	d500      	bpl.n	80061ae <_svfiprintf_r+0x1d2>
 80061ac:	e72c      	b.n	8006008 <_svfiprintf_r+0x2c>
 80061ae:	b021      	add	sp, #132	@ 0x84
 80061b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b2:	aa07      	add	r2, sp, #28
 80061b4:	9200      	str	r2, [sp, #0]
 80061b6:	0021      	movs	r1, r4
 80061b8:	003a      	movs	r2, r7
 80061ba:	4b06      	ldr	r3, [pc, #24]	@ (80061d4 <_svfiprintf_r+0x1f8>)
 80061bc:	9803      	ldr	r0, [sp, #12]
 80061be:	f000 f87b 	bl	80062b8 <_printf_i>
 80061c2:	e7eb      	b.n	800619c <_svfiprintf_r+0x1c0>
 80061c4:	080066a8 	.word	0x080066a8
 80061c8:	080066ae 	.word	0x080066ae
 80061cc:	080066b2 	.word	0x080066b2
 80061d0:	00000000 	.word	0x00000000
 80061d4:	08005f1d 	.word	0x08005f1d

080061d8 <_printf_common>:
 80061d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061da:	0016      	movs	r6, r2
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	688a      	ldr	r2, [r1, #8]
 80061e0:	690b      	ldr	r3, [r1, #16]
 80061e2:	000c      	movs	r4, r1
 80061e4:	9000      	str	r0, [sp, #0]
 80061e6:	4293      	cmp	r3, r2
 80061e8:	da00      	bge.n	80061ec <_printf_common+0x14>
 80061ea:	0013      	movs	r3, r2
 80061ec:	0022      	movs	r2, r4
 80061ee:	6033      	str	r3, [r6, #0]
 80061f0:	3243      	adds	r2, #67	@ 0x43
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	2a00      	cmp	r2, #0
 80061f6:	d001      	beq.n	80061fc <_printf_common+0x24>
 80061f8:	3301      	adds	r3, #1
 80061fa:	6033      	str	r3, [r6, #0]
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	069b      	lsls	r3, r3, #26
 8006200:	d502      	bpl.n	8006208 <_printf_common+0x30>
 8006202:	6833      	ldr	r3, [r6, #0]
 8006204:	3302      	adds	r3, #2
 8006206:	6033      	str	r3, [r6, #0]
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	2306      	movs	r3, #6
 800620c:	0015      	movs	r5, r2
 800620e:	401d      	ands	r5, r3
 8006210:	421a      	tst	r2, r3
 8006212:	d027      	beq.n	8006264 <_printf_common+0x8c>
 8006214:	0023      	movs	r3, r4
 8006216:	3343      	adds	r3, #67	@ 0x43
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	1e5a      	subs	r2, r3, #1
 800621c:	4193      	sbcs	r3, r2
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	0692      	lsls	r2, r2, #26
 8006222:	d430      	bmi.n	8006286 <_printf_common+0xae>
 8006224:	0022      	movs	r2, r4
 8006226:	9901      	ldr	r1, [sp, #4]
 8006228:	9800      	ldr	r0, [sp, #0]
 800622a:	9d08      	ldr	r5, [sp, #32]
 800622c:	3243      	adds	r2, #67	@ 0x43
 800622e:	47a8      	blx	r5
 8006230:	3001      	adds	r0, #1
 8006232:	d025      	beq.n	8006280 <_printf_common+0xa8>
 8006234:	2206      	movs	r2, #6
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	2500      	movs	r5, #0
 800623a:	4013      	ands	r3, r2
 800623c:	2b04      	cmp	r3, #4
 800623e:	d105      	bne.n	800624c <_printf_common+0x74>
 8006240:	6833      	ldr	r3, [r6, #0]
 8006242:	68e5      	ldr	r5, [r4, #12]
 8006244:	1aed      	subs	r5, r5, r3
 8006246:	43eb      	mvns	r3, r5
 8006248:	17db      	asrs	r3, r3, #31
 800624a:	401d      	ands	r5, r3
 800624c:	68a3      	ldr	r3, [r4, #8]
 800624e:	6922      	ldr	r2, [r4, #16]
 8006250:	4293      	cmp	r3, r2
 8006252:	dd01      	ble.n	8006258 <_printf_common+0x80>
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	18ed      	adds	r5, r5, r3
 8006258:	2600      	movs	r6, #0
 800625a:	42b5      	cmp	r5, r6
 800625c:	d120      	bne.n	80062a0 <_printf_common+0xc8>
 800625e:	2000      	movs	r0, #0
 8006260:	e010      	b.n	8006284 <_printf_common+0xac>
 8006262:	3501      	adds	r5, #1
 8006264:	68e3      	ldr	r3, [r4, #12]
 8006266:	6832      	ldr	r2, [r6, #0]
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	42ab      	cmp	r3, r5
 800626c:	ddd2      	ble.n	8006214 <_printf_common+0x3c>
 800626e:	0022      	movs	r2, r4
 8006270:	2301      	movs	r3, #1
 8006272:	9901      	ldr	r1, [sp, #4]
 8006274:	9800      	ldr	r0, [sp, #0]
 8006276:	9f08      	ldr	r7, [sp, #32]
 8006278:	3219      	adds	r2, #25
 800627a:	47b8      	blx	r7
 800627c:	3001      	adds	r0, #1
 800627e:	d1f0      	bne.n	8006262 <_printf_common+0x8a>
 8006280:	2001      	movs	r0, #1
 8006282:	4240      	negs	r0, r0
 8006284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006286:	2030      	movs	r0, #48	@ 0x30
 8006288:	18e1      	adds	r1, r4, r3
 800628a:	3143      	adds	r1, #67	@ 0x43
 800628c:	7008      	strb	r0, [r1, #0]
 800628e:	0021      	movs	r1, r4
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	3145      	adds	r1, #69	@ 0x45
 8006294:	7809      	ldrb	r1, [r1, #0]
 8006296:	18a2      	adds	r2, r4, r2
 8006298:	3243      	adds	r2, #67	@ 0x43
 800629a:	3302      	adds	r3, #2
 800629c:	7011      	strb	r1, [r2, #0]
 800629e:	e7c1      	b.n	8006224 <_printf_common+0x4c>
 80062a0:	0022      	movs	r2, r4
 80062a2:	2301      	movs	r3, #1
 80062a4:	9901      	ldr	r1, [sp, #4]
 80062a6:	9800      	ldr	r0, [sp, #0]
 80062a8:	9f08      	ldr	r7, [sp, #32]
 80062aa:	321a      	adds	r2, #26
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	d0e6      	beq.n	8006280 <_printf_common+0xa8>
 80062b2:	3601      	adds	r6, #1
 80062b4:	e7d1      	b.n	800625a <_printf_common+0x82>
	...

080062b8 <_printf_i>:
 80062b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ba:	b08b      	sub	sp, #44	@ 0x2c
 80062bc:	9206      	str	r2, [sp, #24]
 80062be:	000a      	movs	r2, r1
 80062c0:	3243      	adds	r2, #67	@ 0x43
 80062c2:	9307      	str	r3, [sp, #28]
 80062c4:	9005      	str	r0, [sp, #20]
 80062c6:	9203      	str	r2, [sp, #12]
 80062c8:	7e0a      	ldrb	r2, [r1, #24]
 80062ca:	000c      	movs	r4, r1
 80062cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062ce:	2a78      	cmp	r2, #120	@ 0x78
 80062d0:	d809      	bhi.n	80062e6 <_printf_i+0x2e>
 80062d2:	2a62      	cmp	r2, #98	@ 0x62
 80062d4:	d80b      	bhi.n	80062ee <_printf_i+0x36>
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	d100      	bne.n	80062dc <_printf_i+0x24>
 80062da:	e0bc      	b.n	8006456 <_printf_i+0x19e>
 80062dc:	497b      	ldr	r1, [pc, #492]	@ (80064cc <_printf_i+0x214>)
 80062de:	9104      	str	r1, [sp, #16]
 80062e0:	2a58      	cmp	r2, #88	@ 0x58
 80062e2:	d100      	bne.n	80062e6 <_printf_i+0x2e>
 80062e4:	e090      	b.n	8006408 <_printf_i+0x150>
 80062e6:	0025      	movs	r5, r4
 80062e8:	3542      	adds	r5, #66	@ 0x42
 80062ea:	702a      	strb	r2, [r5, #0]
 80062ec:	e022      	b.n	8006334 <_printf_i+0x7c>
 80062ee:	0010      	movs	r0, r2
 80062f0:	3863      	subs	r0, #99	@ 0x63
 80062f2:	2815      	cmp	r0, #21
 80062f4:	d8f7      	bhi.n	80062e6 <_printf_i+0x2e>
 80062f6:	f7f9 ff07 	bl	8000108 <__gnu_thumb1_case_shi>
 80062fa:	0016      	.short	0x0016
 80062fc:	fff6001f 	.word	0xfff6001f
 8006300:	fff6fff6 	.word	0xfff6fff6
 8006304:	001ffff6 	.word	0x001ffff6
 8006308:	fff6fff6 	.word	0xfff6fff6
 800630c:	fff6fff6 	.word	0xfff6fff6
 8006310:	003600a1 	.word	0x003600a1
 8006314:	fff60080 	.word	0xfff60080
 8006318:	00b2fff6 	.word	0x00b2fff6
 800631c:	0036fff6 	.word	0x0036fff6
 8006320:	fff6fff6 	.word	0xfff6fff6
 8006324:	0084      	.short	0x0084
 8006326:	0025      	movs	r5, r4
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	3542      	adds	r5, #66	@ 0x42
 800632c:	1d11      	adds	r1, r2, #4
 800632e:	6019      	str	r1, [r3, #0]
 8006330:	6813      	ldr	r3, [r2, #0]
 8006332:	702b      	strb	r3, [r5, #0]
 8006334:	2301      	movs	r3, #1
 8006336:	e0a0      	b.n	800647a <_printf_i+0x1c2>
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	6809      	ldr	r1, [r1, #0]
 800633c:	1d02      	adds	r2, r0, #4
 800633e:	060d      	lsls	r5, r1, #24
 8006340:	d50b      	bpl.n	800635a <_printf_i+0xa2>
 8006342:	6806      	ldr	r6, [r0, #0]
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	2e00      	cmp	r6, #0
 8006348:	da03      	bge.n	8006352 <_printf_i+0x9a>
 800634a:	232d      	movs	r3, #45	@ 0x2d
 800634c:	9a03      	ldr	r2, [sp, #12]
 800634e:	4276      	negs	r6, r6
 8006350:	7013      	strb	r3, [r2, #0]
 8006352:	4b5e      	ldr	r3, [pc, #376]	@ (80064cc <_printf_i+0x214>)
 8006354:	270a      	movs	r7, #10
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	e018      	b.n	800638c <_printf_i+0xd4>
 800635a:	6806      	ldr	r6, [r0, #0]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	0649      	lsls	r1, r1, #25
 8006360:	d5f1      	bpl.n	8006346 <_printf_i+0x8e>
 8006362:	b236      	sxth	r6, r6
 8006364:	e7ef      	b.n	8006346 <_printf_i+0x8e>
 8006366:	6808      	ldr	r0, [r1, #0]
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	c940      	ldmia	r1!, {r6}
 800636c:	0605      	lsls	r5, r0, #24
 800636e:	d402      	bmi.n	8006376 <_printf_i+0xbe>
 8006370:	0640      	lsls	r0, r0, #25
 8006372:	d500      	bpl.n	8006376 <_printf_i+0xbe>
 8006374:	b2b6      	uxth	r6, r6
 8006376:	6019      	str	r1, [r3, #0]
 8006378:	4b54      	ldr	r3, [pc, #336]	@ (80064cc <_printf_i+0x214>)
 800637a:	270a      	movs	r7, #10
 800637c:	9304      	str	r3, [sp, #16]
 800637e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006380:	d100      	bne.n	8006384 <_printf_i+0xcc>
 8006382:	3f02      	subs	r7, #2
 8006384:	0023      	movs	r3, r4
 8006386:	2200      	movs	r2, #0
 8006388:	3343      	adds	r3, #67	@ 0x43
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	6863      	ldr	r3, [r4, #4]
 800638e:	60a3      	str	r3, [r4, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	db03      	blt.n	800639c <_printf_i+0xe4>
 8006394:	2104      	movs	r1, #4
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	438a      	bics	r2, r1
 800639a:	6022      	str	r2, [r4, #0]
 800639c:	2e00      	cmp	r6, #0
 800639e:	d102      	bne.n	80063a6 <_printf_i+0xee>
 80063a0:	9d03      	ldr	r5, [sp, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <_printf_i+0x108>
 80063a6:	9d03      	ldr	r5, [sp, #12]
 80063a8:	0030      	movs	r0, r6
 80063aa:	0039      	movs	r1, r7
 80063ac:	f7f9 ff3c 	bl	8000228 <__aeabi_uidivmod>
 80063b0:	9b04      	ldr	r3, [sp, #16]
 80063b2:	3d01      	subs	r5, #1
 80063b4:	5c5b      	ldrb	r3, [r3, r1]
 80063b6:	702b      	strb	r3, [r5, #0]
 80063b8:	0033      	movs	r3, r6
 80063ba:	0006      	movs	r6, r0
 80063bc:	429f      	cmp	r7, r3
 80063be:	d9f3      	bls.n	80063a8 <_printf_i+0xf0>
 80063c0:	2f08      	cmp	r7, #8
 80063c2:	d109      	bne.n	80063d8 <_printf_i+0x120>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d506      	bpl.n	80063d8 <_printf_i+0x120>
 80063ca:	6862      	ldr	r2, [r4, #4]
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	dc02      	bgt.n	80063d8 <_printf_i+0x120>
 80063d2:	2330      	movs	r3, #48	@ 0x30
 80063d4:	3d01      	subs	r5, #1
 80063d6:	702b      	strb	r3, [r5, #0]
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	1b5b      	subs	r3, r3, r5
 80063dc:	6123      	str	r3, [r4, #16]
 80063de:	9b07      	ldr	r3, [sp, #28]
 80063e0:	0021      	movs	r1, r4
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	9805      	ldr	r0, [sp, #20]
 80063e6:	9b06      	ldr	r3, [sp, #24]
 80063e8:	aa09      	add	r2, sp, #36	@ 0x24
 80063ea:	f7ff fef5 	bl	80061d8 <_printf_common>
 80063ee:	3001      	adds	r0, #1
 80063f0:	d148      	bne.n	8006484 <_printf_i+0x1cc>
 80063f2:	2001      	movs	r0, #1
 80063f4:	4240      	negs	r0, r0
 80063f6:	b00b      	add	sp, #44	@ 0x2c
 80063f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063fa:	2220      	movs	r2, #32
 80063fc:	6809      	ldr	r1, [r1, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	6022      	str	r2, [r4, #0]
 8006402:	2278      	movs	r2, #120	@ 0x78
 8006404:	4932      	ldr	r1, [pc, #200]	@ (80064d0 <_printf_i+0x218>)
 8006406:	9104      	str	r1, [sp, #16]
 8006408:	0021      	movs	r1, r4
 800640a:	3145      	adds	r1, #69	@ 0x45
 800640c:	700a      	strb	r2, [r1, #0]
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	6822      	ldr	r2, [r4, #0]
 8006412:	c940      	ldmia	r1!, {r6}
 8006414:	0610      	lsls	r0, r2, #24
 8006416:	d402      	bmi.n	800641e <_printf_i+0x166>
 8006418:	0650      	lsls	r0, r2, #25
 800641a:	d500      	bpl.n	800641e <_printf_i+0x166>
 800641c:	b2b6      	uxth	r6, r6
 800641e:	6019      	str	r1, [r3, #0]
 8006420:	07d3      	lsls	r3, r2, #31
 8006422:	d502      	bpl.n	800642a <_printf_i+0x172>
 8006424:	2320      	movs	r3, #32
 8006426:	4313      	orrs	r3, r2
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	2e00      	cmp	r6, #0
 800642c:	d001      	beq.n	8006432 <_printf_i+0x17a>
 800642e:	2710      	movs	r7, #16
 8006430:	e7a8      	b.n	8006384 <_printf_i+0xcc>
 8006432:	2220      	movs	r2, #32
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	4393      	bics	r3, r2
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	e7f8      	b.n	800642e <_printf_i+0x176>
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	680d      	ldr	r5, [r1, #0]
 8006440:	1d10      	adds	r0, r2, #4
 8006442:	6949      	ldr	r1, [r1, #20]
 8006444:	6018      	str	r0, [r3, #0]
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	062e      	lsls	r6, r5, #24
 800644a:	d501      	bpl.n	8006450 <_printf_i+0x198>
 800644c:	6019      	str	r1, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0x19e>
 8006450:	066d      	lsls	r5, r5, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0x194>
 8006454:	8019      	strh	r1, [r3, #0]
 8006456:	2300      	movs	r3, #0
 8006458:	9d03      	ldr	r5, [sp, #12]
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	e7bf      	b.n	80063de <_printf_i+0x126>
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	1d11      	adds	r1, r2, #4
 8006462:	6019      	str	r1, [r3, #0]
 8006464:	6815      	ldr	r5, [r2, #0]
 8006466:	2100      	movs	r1, #0
 8006468:	0028      	movs	r0, r5
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	f000 f858 	bl	8006520 <memchr>
 8006470:	2800      	cmp	r0, #0
 8006472:	d001      	beq.n	8006478 <_printf_i+0x1c0>
 8006474:	1b40      	subs	r0, r0, r5
 8006476:	6060      	str	r0, [r4, #4]
 8006478:	6863      	ldr	r3, [r4, #4]
 800647a:	6123      	str	r3, [r4, #16]
 800647c:	2300      	movs	r3, #0
 800647e:	9a03      	ldr	r2, [sp, #12]
 8006480:	7013      	strb	r3, [r2, #0]
 8006482:	e7ac      	b.n	80063de <_printf_i+0x126>
 8006484:	002a      	movs	r2, r5
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	9906      	ldr	r1, [sp, #24]
 800648a:	9805      	ldr	r0, [sp, #20]
 800648c:	9d07      	ldr	r5, [sp, #28]
 800648e:	47a8      	blx	r5
 8006490:	3001      	adds	r0, #1
 8006492:	d0ae      	beq.n	80063f2 <_printf_i+0x13a>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	079b      	lsls	r3, r3, #30
 8006498:	d415      	bmi.n	80064c6 <_printf_i+0x20e>
 800649a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800649c:	68e0      	ldr	r0, [r4, #12]
 800649e:	4298      	cmp	r0, r3
 80064a0:	daa9      	bge.n	80063f6 <_printf_i+0x13e>
 80064a2:	0018      	movs	r0, r3
 80064a4:	e7a7      	b.n	80063f6 <_printf_i+0x13e>
 80064a6:	0022      	movs	r2, r4
 80064a8:	2301      	movs	r3, #1
 80064aa:	9906      	ldr	r1, [sp, #24]
 80064ac:	9805      	ldr	r0, [sp, #20]
 80064ae:	9e07      	ldr	r6, [sp, #28]
 80064b0:	3219      	adds	r2, #25
 80064b2:	47b0      	blx	r6
 80064b4:	3001      	adds	r0, #1
 80064b6:	d09c      	beq.n	80063f2 <_printf_i+0x13a>
 80064b8:	3501      	adds	r5, #1
 80064ba:	68e3      	ldr	r3, [r4, #12]
 80064bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	42ab      	cmp	r3, r5
 80064c2:	dcf0      	bgt.n	80064a6 <_printf_i+0x1ee>
 80064c4:	e7e9      	b.n	800649a <_printf_i+0x1e2>
 80064c6:	2500      	movs	r5, #0
 80064c8:	e7f7      	b.n	80064ba <_printf_i+0x202>
 80064ca:	46c0      	nop			@ (mov r8, r8)
 80064cc:	080066b9 	.word	0x080066b9
 80064d0:	080066ca 	.word	0x080066ca

080064d4 <memmove>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	4288      	cmp	r0, r1
 80064d8:	d806      	bhi.n	80064e8 <memmove+0x14>
 80064da:	2300      	movs	r3, #0
 80064dc:	429a      	cmp	r2, r3
 80064de:	d008      	beq.n	80064f2 <memmove+0x1e>
 80064e0:	5ccc      	ldrb	r4, [r1, r3]
 80064e2:	54c4      	strb	r4, [r0, r3]
 80064e4:	3301      	adds	r3, #1
 80064e6:	e7f9      	b.n	80064dc <memmove+0x8>
 80064e8:	188b      	adds	r3, r1, r2
 80064ea:	4298      	cmp	r0, r3
 80064ec:	d2f5      	bcs.n	80064da <memmove+0x6>
 80064ee:	3a01      	subs	r2, #1
 80064f0:	d200      	bcs.n	80064f4 <memmove+0x20>
 80064f2:	bd10      	pop	{r4, pc}
 80064f4:	5c8b      	ldrb	r3, [r1, r2]
 80064f6:	5483      	strb	r3, [r0, r2]
 80064f8:	e7f9      	b.n	80064ee <memmove+0x1a>
	...

080064fc <_sbrk_r>:
 80064fc:	2300      	movs	r3, #0
 80064fe:	b570      	push	{r4, r5, r6, lr}
 8006500:	4d06      	ldr	r5, [pc, #24]	@ (800651c <_sbrk_r+0x20>)
 8006502:	0004      	movs	r4, r0
 8006504:	0008      	movs	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fc ff24 	bl	8003354 <_sbrk>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d103      	bne.n	8006518 <_sbrk_r+0x1c>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d000      	beq.n	8006518 <_sbrk_r+0x1c>
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	bd70      	pop	{r4, r5, r6, pc}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	20000294 	.word	0x20000294

08006520 <memchr>:
 8006520:	b2c9      	uxtb	r1, r1
 8006522:	1882      	adds	r2, r0, r2
 8006524:	4290      	cmp	r0, r2
 8006526:	d101      	bne.n	800652c <memchr+0xc>
 8006528:	2000      	movs	r0, #0
 800652a:	4770      	bx	lr
 800652c:	7803      	ldrb	r3, [r0, #0]
 800652e:	428b      	cmp	r3, r1
 8006530:	d0fb      	beq.n	800652a <memchr+0xa>
 8006532:	3001      	adds	r0, #1
 8006534:	e7f6      	b.n	8006524 <memchr+0x4>

08006536 <_realloc_r>:
 8006536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006538:	0006      	movs	r6, r0
 800653a:	000c      	movs	r4, r1
 800653c:	0015      	movs	r5, r2
 800653e:	2900      	cmp	r1, #0
 8006540:	d105      	bne.n	800654e <_realloc_r+0x18>
 8006542:	0011      	movs	r1, r2
 8006544:	f7ff fc5a 	bl	8005dfc <_malloc_r>
 8006548:	0004      	movs	r4, r0
 800654a:	0020      	movs	r0, r4
 800654c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800654e:	2a00      	cmp	r2, #0
 8006550:	d103      	bne.n	800655a <_realloc_r+0x24>
 8006552:	f7ff fbe7 	bl	8005d24 <_free_r>
 8006556:	2400      	movs	r4, #0
 8006558:	e7f7      	b.n	800654a <_realloc_r+0x14>
 800655a:	f000 f81b 	bl	8006594 <_malloc_usable_size_r>
 800655e:	0007      	movs	r7, r0
 8006560:	4285      	cmp	r5, r0
 8006562:	d802      	bhi.n	800656a <_realloc_r+0x34>
 8006564:	0843      	lsrs	r3, r0, #1
 8006566:	42ab      	cmp	r3, r5
 8006568:	d3ef      	bcc.n	800654a <_realloc_r+0x14>
 800656a:	0029      	movs	r1, r5
 800656c:	0030      	movs	r0, r6
 800656e:	f7ff fc45 	bl	8005dfc <_malloc_r>
 8006572:	9001      	str	r0, [sp, #4]
 8006574:	2800      	cmp	r0, #0
 8006576:	d0ee      	beq.n	8006556 <_realloc_r+0x20>
 8006578:	002a      	movs	r2, r5
 800657a:	42bd      	cmp	r5, r7
 800657c:	d900      	bls.n	8006580 <_realloc_r+0x4a>
 800657e:	003a      	movs	r2, r7
 8006580:	0021      	movs	r1, r4
 8006582:	9801      	ldr	r0, [sp, #4]
 8006584:	f7ff fbc4 	bl	8005d10 <memcpy>
 8006588:	0021      	movs	r1, r4
 800658a:	0030      	movs	r0, r6
 800658c:	f7ff fbca 	bl	8005d24 <_free_r>
 8006590:	9c01      	ldr	r4, [sp, #4]
 8006592:	e7da      	b.n	800654a <_realloc_r+0x14>

08006594 <_malloc_usable_size_r>:
 8006594:	1f0b      	subs	r3, r1, #4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	1f18      	subs	r0, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	da01      	bge.n	80065a2 <_malloc_usable_size_r+0xe>
 800659e:	580b      	ldr	r3, [r1, r0]
 80065a0:	18c0      	adds	r0, r0, r3
 80065a2:	4770      	bx	lr

080065a4 <_init>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr

080065b0 <_fini>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr
