
climate_info_f042k6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d20  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f20  08006f20  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006f20  08006f20  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f20  08006f20  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f24  08006f24  00007f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006f28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000060  08006f88  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006f88  000082c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec6a  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002662  00000000  00000000  00016cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00019358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfb  00000000  00000000  0001a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e1a  00000000  00000000  0001ae8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012941  00000000  00000000  0001dca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093487  00000000  00000000  000305e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3a6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  000c3ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c7874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006dc8 	.word	0x08006dc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006dc8 	.word	0x08006dc8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0008      	movs	r0, r1
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 f8ab 	bl	8000398 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f82b 	bl	80002a8 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f89d 	bl	8000398 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f893 	bl	8000398 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f839 	bl	80002f8 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f82f 	bl	80002f8 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			@ (mov r8, r8)

080002a8 <__eqsf2>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	0042      	lsls	r2, r0, #1
 80002ac:	024e      	lsls	r6, r1, #9
 80002ae:	004c      	lsls	r4, r1, #1
 80002b0:	0245      	lsls	r5, r0, #9
 80002b2:	0a6d      	lsrs	r5, r5, #9
 80002b4:	0e12      	lsrs	r2, r2, #24
 80002b6:	0fc3      	lsrs	r3, r0, #31
 80002b8:	0a76      	lsrs	r6, r6, #9
 80002ba:	0e24      	lsrs	r4, r4, #24
 80002bc:	0fc9      	lsrs	r1, r1, #31
 80002be:	2aff      	cmp	r2, #255	@ 0xff
 80002c0:	d010      	beq.n	80002e4 <__eqsf2+0x3c>
 80002c2:	2cff      	cmp	r4, #255	@ 0xff
 80002c4:	d00c      	beq.n	80002e0 <__eqsf2+0x38>
 80002c6:	2001      	movs	r0, #1
 80002c8:	42a2      	cmp	r2, r4
 80002ca:	d10a      	bne.n	80002e2 <__eqsf2+0x3a>
 80002cc:	42b5      	cmp	r5, r6
 80002ce:	d108      	bne.n	80002e2 <__eqsf2+0x3a>
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d00f      	beq.n	80002f4 <__eqsf2+0x4c>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	d104      	bne.n	80002e2 <__eqsf2+0x3a>
 80002d8:	0028      	movs	r0, r5
 80002da:	1e43      	subs	r3, r0, #1
 80002dc:	4198      	sbcs	r0, r3
 80002de:	e000      	b.n	80002e2 <__eqsf2+0x3a>
 80002e0:	2001      	movs	r0, #1
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	2001      	movs	r0, #1
 80002e6:	2cff      	cmp	r4, #255	@ 0xff
 80002e8:	d1fb      	bne.n	80002e2 <__eqsf2+0x3a>
 80002ea:	4335      	orrs	r5, r6
 80002ec:	d1f9      	bne.n	80002e2 <__eqsf2+0x3a>
 80002ee:	404b      	eors	r3, r1
 80002f0:	0018      	movs	r0, r3
 80002f2:	e7f6      	b.n	80002e2 <__eqsf2+0x3a>
 80002f4:	2000      	movs	r0, #0
 80002f6:	e7f4      	b.n	80002e2 <__eqsf2+0x3a>

080002f8 <__gesf2>:
 80002f8:	b530      	push	{r4, r5, lr}
 80002fa:	0042      	lsls	r2, r0, #1
 80002fc:	0244      	lsls	r4, r0, #9
 80002fe:	024d      	lsls	r5, r1, #9
 8000300:	0fc3      	lsrs	r3, r0, #31
 8000302:	0048      	lsls	r0, r1, #1
 8000304:	0a64      	lsrs	r4, r4, #9
 8000306:	0e12      	lsrs	r2, r2, #24
 8000308:	0a6d      	lsrs	r5, r5, #9
 800030a:	0e00      	lsrs	r0, r0, #24
 800030c:	0fc9      	lsrs	r1, r1, #31
 800030e:	2aff      	cmp	r2, #255	@ 0xff
 8000310:	d019      	beq.n	8000346 <__gesf2+0x4e>
 8000312:	28ff      	cmp	r0, #255	@ 0xff
 8000314:	d00b      	beq.n	800032e <__gesf2+0x36>
 8000316:	2a00      	cmp	r2, #0
 8000318:	d11e      	bne.n	8000358 <__gesf2+0x60>
 800031a:	2800      	cmp	r0, #0
 800031c:	d10b      	bne.n	8000336 <__gesf2+0x3e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	d027      	beq.n	8000372 <__gesf2+0x7a>
 8000322:	2c00      	cmp	r4, #0
 8000324:	d134      	bne.n	8000390 <__gesf2+0x98>
 8000326:	2900      	cmp	r1, #0
 8000328:	d02f      	beq.n	800038a <__gesf2+0x92>
 800032a:	0008      	movs	r0, r1
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2d00      	cmp	r5, #0
 8000330:	d128      	bne.n	8000384 <__gesf2+0x8c>
 8000332:	2a00      	cmp	r2, #0
 8000334:	d101      	bne.n	800033a <__gesf2+0x42>
 8000336:	2c00      	cmp	r4, #0
 8000338:	d0f5      	beq.n	8000326 <__gesf2+0x2e>
 800033a:	428b      	cmp	r3, r1
 800033c:	d107      	bne.n	800034e <__gesf2+0x56>
 800033e:	2b00      	cmp	r3, #0
 8000340:	d023      	beq.n	800038a <__gesf2+0x92>
 8000342:	0018      	movs	r0, r3
 8000344:	e7f2      	b.n	800032c <__gesf2+0x34>
 8000346:	2c00      	cmp	r4, #0
 8000348:	d11c      	bne.n	8000384 <__gesf2+0x8c>
 800034a:	28ff      	cmp	r0, #255	@ 0xff
 800034c:	d014      	beq.n	8000378 <__gesf2+0x80>
 800034e:	1e58      	subs	r0, r3, #1
 8000350:	2302      	movs	r3, #2
 8000352:	4018      	ands	r0, r3
 8000354:	3801      	subs	r0, #1
 8000356:	e7e9      	b.n	800032c <__gesf2+0x34>
 8000358:	2800      	cmp	r0, #0
 800035a:	d0f8      	beq.n	800034e <__gesf2+0x56>
 800035c:	428b      	cmp	r3, r1
 800035e:	d1f6      	bne.n	800034e <__gesf2+0x56>
 8000360:	4282      	cmp	r2, r0
 8000362:	dcf4      	bgt.n	800034e <__gesf2+0x56>
 8000364:	dbeb      	blt.n	800033e <__gesf2+0x46>
 8000366:	42ac      	cmp	r4, r5
 8000368:	d8f1      	bhi.n	800034e <__gesf2+0x56>
 800036a:	2000      	movs	r0, #0
 800036c:	42ac      	cmp	r4, r5
 800036e:	d2dd      	bcs.n	800032c <__gesf2+0x34>
 8000370:	e7e5      	b.n	800033e <__gesf2+0x46>
 8000372:	2c00      	cmp	r4, #0
 8000374:	d0da      	beq.n	800032c <__gesf2+0x34>
 8000376:	e7ea      	b.n	800034e <__gesf2+0x56>
 8000378:	2d00      	cmp	r5, #0
 800037a:	d103      	bne.n	8000384 <__gesf2+0x8c>
 800037c:	428b      	cmp	r3, r1
 800037e:	d1e6      	bne.n	800034e <__gesf2+0x56>
 8000380:	2000      	movs	r0, #0
 8000382:	e7d3      	b.n	800032c <__gesf2+0x34>
 8000384:	2002      	movs	r0, #2
 8000386:	4240      	negs	r0, r0
 8000388:	e7d0      	b.n	800032c <__gesf2+0x34>
 800038a:	2001      	movs	r0, #1
 800038c:	4240      	negs	r0, r0
 800038e:	e7cd      	b.n	800032c <__gesf2+0x34>
 8000390:	428b      	cmp	r3, r1
 8000392:	d0e8      	beq.n	8000366 <__gesf2+0x6e>
 8000394:	e7db      	b.n	800034e <__gesf2+0x56>
 8000396:	46c0      	nop			@ (mov r8, r8)

08000398 <__lesf2>:
 8000398:	b530      	push	{r4, r5, lr}
 800039a:	0042      	lsls	r2, r0, #1
 800039c:	0244      	lsls	r4, r0, #9
 800039e:	024d      	lsls	r5, r1, #9
 80003a0:	0fc3      	lsrs	r3, r0, #31
 80003a2:	0048      	lsls	r0, r1, #1
 80003a4:	0a64      	lsrs	r4, r4, #9
 80003a6:	0e12      	lsrs	r2, r2, #24
 80003a8:	0a6d      	lsrs	r5, r5, #9
 80003aa:	0e00      	lsrs	r0, r0, #24
 80003ac:	0fc9      	lsrs	r1, r1, #31
 80003ae:	2aff      	cmp	r2, #255	@ 0xff
 80003b0:	d01a      	beq.n	80003e8 <__lesf2+0x50>
 80003b2:	28ff      	cmp	r0, #255	@ 0xff
 80003b4:	d00e      	beq.n	80003d4 <__lesf2+0x3c>
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d11e      	bne.n	80003f8 <__lesf2+0x60>
 80003ba:	2800      	cmp	r0, #0
 80003bc:	d10e      	bne.n	80003dc <__lesf2+0x44>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d02a      	beq.n	8000418 <__lesf2+0x80>
 80003c2:	2c00      	cmp	r4, #0
 80003c4:	d00c      	beq.n	80003e0 <__lesf2+0x48>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d01d      	beq.n	8000406 <__lesf2+0x6e>
 80003ca:	1e58      	subs	r0, r3, #1
 80003cc:	2302      	movs	r3, #2
 80003ce:	4018      	ands	r0, r3
 80003d0:	3801      	subs	r0, #1
 80003d2:	e010      	b.n	80003f6 <__lesf2+0x5e>
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d10d      	bne.n	80003f4 <__lesf2+0x5c>
 80003d8:	2a00      	cmp	r2, #0
 80003da:	d120      	bne.n	800041e <__lesf2+0x86>
 80003dc:	2c00      	cmp	r4, #0
 80003de:	d11e      	bne.n	800041e <__lesf2+0x86>
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d023      	beq.n	800042c <__lesf2+0x94>
 80003e4:	0008      	movs	r0, r1
 80003e6:	e006      	b.n	80003f6 <__lesf2+0x5e>
 80003e8:	2c00      	cmp	r4, #0
 80003ea:	d103      	bne.n	80003f4 <__lesf2+0x5c>
 80003ec:	28ff      	cmp	r0, #255	@ 0xff
 80003ee:	d1ec      	bne.n	80003ca <__lesf2+0x32>
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d017      	beq.n	8000424 <__lesf2+0x8c>
 80003f4:	2002      	movs	r0, #2
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d0e6      	beq.n	80003ca <__lesf2+0x32>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d1e4      	bne.n	80003ca <__lesf2+0x32>
 8000400:	4282      	cmp	r2, r0
 8000402:	dce2      	bgt.n	80003ca <__lesf2+0x32>
 8000404:	db04      	blt.n	8000410 <__lesf2+0x78>
 8000406:	42ac      	cmp	r4, r5
 8000408:	d8df      	bhi.n	80003ca <__lesf2+0x32>
 800040a:	2000      	movs	r0, #0
 800040c:	42ac      	cmp	r4, r5
 800040e:	d2f2      	bcs.n	80003f6 <__lesf2+0x5e>
 8000410:	2b00      	cmp	r3, #0
 8000412:	d00b      	beq.n	800042c <__lesf2+0x94>
 8000414:	0018      	movs	r0, r3
 8000416:	e7ee      	b.n	80003f6 <__lesf2+0x5e>
 8000418:	2c00      	cmp	r4, #0
 800041a:	d0ec      	beq.n	80003f6 <__lesf2+0x5e>
 800041c:	e7d5      	b.n	80003ca <__lesf2+0x32>
 800041e:	428b      	cmp	r3, r1
 8000420:	d1d3      	bne.n	80003ca <__lesf2+0x32>
 8000422:	e7f5      	b.n	8000410 <__lesf2+0x78>
 8000424:	2000      	movs	r0, #0
 8000426:	428b      	cmp	r3, r1
 8000428:	d0e5      	beq.n	80003f6 <__lesf2+0x5e>
 800042a:	e7ce      	b.n	80003ca <__lesf2+0x32>
 800042c:	2001      	movs	r0, #1
 800042e:	4240      	negs	r0, r0
 8000430:	e7e1      	b.n	80003f6 <__lesf2+0x5e>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_f2iz>:
 8000434:	0241      	lsls	r1, r0, #9
 8000436:	0042      	lsls	r2, r0, #1
 8000438:	0fc3      	lsrs	r3, r0, #31
 800043a:	0a49      	lsrs	r1, r1, #9
 800043c:	2000      	movs	r0, #0
 800043e:	0e12      	lsrs	r2, r2, #24
 8000440:	2a7e      	cmp	r2, #126	@ 0x7e
 8000442:	dd03      	ble.n	800044c <__aeabi_f2iz+0x18>
 8000444:	2a9d      	cmp	r2, #157	@ 0x9d
 8000446:	dd02      	ble.n	800044e <__aeabi_f2iz+0x1a>
 8000448:	4a09      	ldr	r2, [pc, #36]	@ (8000470 <__aeabi_f2iz+0x3c>)
 800044a:	1898      	adds	r0, r3, r2
 800044c:	4770      	bx	lr
 800044e:	2080      	movs	r0, #128	@ 0x80
 8000450:	0400      	lsls	r0, r0, #16
 8000452:	4301      	orrs	r1, r0
 8000454:	2a95      	cmp	r2, #149	@ 0x95
 8000456:	dc07      	bgt.n	8000468 <__aeabi_f2iz+0x34>
 8000458:	2096      	movs	r0, #150	@ 0x96
 800045a:	1a82      	subs	r2, r0, r2
 800045c:	40d1      	lsrs	r1, r2
 800045e:	4248      	negs	r0, r1
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1f3      	bne.n	800044c <__aeabi_f2iz+0x18>
 8000464:	0008      	movs	r0, r1
 8000466:	e7f1      	b.n	800044c <__aeabi_f2iz+0x18>
 8000468:	3a96      	subs	r2, #150	@ 0x96
 800046a:	4091      	lsls	r1, r2
 800046c:	e7f7      	b.n	800045e <__aeabi_f2iz+0x2a>
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	7fffffff 	.word	0x7fffffff

08000474 <__aeabi_dadd>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	4657      	mov	r7, sl
 8000478:	464e      	mov	r6, r9
 800047a:	4645      	mov	r5, r8
 800047c:	46de      	mov	lr, fp
 800047e:	b5e0      	push	{r5, r6, r7, lr}
 8000480:	b083      	sub	sp, #12
 8000482:	9000      	str	r0, [sp, #0]
 8000484:	9101      	str	r1, [sp, #4]
 8000486:	030c      	lsls	r4, r1, #12
 8000488:	004f      	lsls	r7, r1, #1
 800048a:	0fce      	lsrs	r6, r1, #31
 800048c:	0a61      	lsrs	r1, r4, #9
 800048e:	9c00      	ldr	r4, [sp, #0]
 8000490:	031d      	lsls	r5, r3, #12
 8000492:	0f64      	lsrs	r4, r4, #29
 8000494:	430c      	orrs	r4, r1
 8000496:	9900      	ldr	r1, [sp, #0]
 8000498:	9200      	str	r2, [sp, #0]
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	00c8      	lsls	r0, r1, #3
 800049e:	0059      	lsls	r1, r3, #1
 80004a0:	0d4b      	lsrs	r3, r1, #21
 80004a2:	4699      	mov	r9, r3
 80004a4:	9a00      	ldr	r2, [sp, #0]
 80004a6:	9b01      	ldr	r3, [sp, #4]
 80004a8:	0a6d      	lsrs	r5, r5, #9
 80004aa:	0fd9      	lsrs	r1, r3, #31
 80004ac:	0f53      	lsrs	r3, r2, #29
 80004ae:	432b      	orrs	r3, r5
 80004b0:	469a      	mov	sl, r3
 80004b2:	9b00      	ldr	r3, [sp, #0]
 80004b4:	0d7f      	lsrs	r7, r7, #21
 80004b6:	00da      	lsls	r2, r3, #3
 80004b8:	4694      	mov	ip, r2
 80004ba:	464a      	mov	r2, r9
 80004bc:	46b0      	mov	r8, r6
 80004be:	1aba      	subs	r2, r7, r2
 80004c0:	428e      	cmp	r6, r1
 80004c2:	d100      	bne.n	80004c6 <__aeabi_dadd+0x52>
 80004c4:	e0b0      	b.n	8000628 <__aeabi_dadd+0x1b4>
 80004c6:	2a00      	cmp	r2, #0
 80004c8:	dc00      	bgt.n	80004cc <__aeabi_dadd+0x58>
 80004ca:	e078      	b.n	80005be <__aeabi_dadd+0x14a>
 80004cc:	4649      	mov	r1, r9
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d100      	bne.n	80004d4 <__aeabi_dadd+0x60>
 80004d2:	e0e9      	b.n	80006a8 <__aeabi_dadd+0x234>
 80004d4:	49c9      	ldr	r1, [pc, #804]	@ (80007fc <__aeabi_dadd+0x388>)
 80004d6:	428f      	cmp	r7, r1
 80004d8:	d100      	bne.n	80004dc <__aeabi_dadd+0x68>
 80004da:	e195      	b.n	8000808 <__aeabi_dadd+0x394>
 80004dc:	2501      	movs	r5, #1
 80004de:	2a38      	cmp	r2, #56	@ 0x38
 80004e0:	dc16      	bgt.n	8000510 <__aeabi_dadd+0x9c>
 80004e2:	2180      	movs	r1, #128	@ 0x80
 80004e4:	4653      	mov	r3, sl
 80004e6:	0409      	lsls	r1, r1, #16
 80004e8:	430b      	orrs	r3, r1
 80004ea:	469a      	mov	sl, r3
 80004ec:	2a1f      	cmp	r2, #31
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dadd+0x7e>
 80004f0:	e1e7      	b.n	80008c2 <__aeabi_dadd+0x44e>
 80004f2:	2120      	movs	r1, #32
 80004f4:	4655      	mov	r5, sl
 80004f6:	1a8b      	subs	r3, r1, r2
 80004f8:	4661      	mov	r1, ip
 80004fa:	409d      	lsls	r5, r3
 80004fc:	40d1      	lsrs	r1, r2
 80004fe:	430d      	orrs	r5, r1
 8000500:	4661      	mov	r1, ip
 8000502:	4099      	lsls	r1, r3
 8000504:	1e4b      	subs	r3, r1, #1
 8000506:	4199      	sbcs	r1, r3
 8000508:	4653      	mov	r3, sl
 800050a:	40d3      	lsrs	r3, r2
 800050c:	430d      	orrs	r5, r1
 800050e:	1ae4      	subs	r4, r4, r3
 8000510:	1b45      	subs	r5, r0, r5
 8000512:	42a8      	cmp	r0, r5
 8000514:	4180      	sbcs	r0, r0
 8000516:	4240      	negs	r0, r0
 8000518:	1a24      	subs	r4, r4, r0
 800051a:	0223      	lsls	r3, r4, #8
 800051c:	d400      	bmi.n	8000520 <__aeabi_dadd+0xac>
 800051e:	e10f      	b.n	8000740 <__aeabi_dadd+0x2cc>
 8000520:	0264      	lsls	r4, r4, #9
 8000522:	0a64      	lsrs	r4, r4, #9
 8000524:	2c00      	cmp	r4, #0
 8000526:	d100      	bne.n	800052a <__aeabi_dadd+0xb6>
 8000528:	e139      	b.n	800079e <__aeabi_dadd+0x32a>
 800052a:	0020      	movs	r0, r4
 800052c:	f001 fd7e 	bl	800202c <__clzsi2>
 8000530:	0003      	movs	r3, r0
 8000532:	3b08      	subs	r3, #8
 8000534:	2120      	movs	r1, #32
 8000536:	0028      	movs	r0, r5
 8000538:	1aca      	subs	r2, r1, r3
 800053a:	40d0      	lsrs	r0, r2
 800053c:	409c      	lsls	r4, r3
 800053e:	0002      	movs	r2, r0
 8000540:	409d      	lsls	r5, r3
 8000542:	4322      	orrs	r2, r4
 8000544:	429f      	cmp	r7, r3
 8000546:	dd00      	ble.n	800054a <__aeabi_dadd+0xd6>
 8000548:	e173      	b.n	8000832 <__aeabi_dadd+0x3be>
 800054a:	1bd8      	subs	r0, r3, r7
 800054c:	3001      	adds	r0, #1
 800054e:	1a09      	subs	r1, r1, r0
 8000550:	002c      	movs	r4, r5
 8000552:	408d      	lsls	r5, r1
 8000554:	40c4      	lsrs	r4, r0
 8000556:	1e6b      	subs	r3, r5, #1
 8000558:	419d      	sbcs	r5, r3
 800055a:	0013      	movs	r3, r2
 800055c:	40c2      	lsrs	r2, r0
 800055e:	408b      	lsls	r3, r1
 8000560:	4325      	orrs	r5, r4
 8000562:	2700      	movs	r7, #0
 8000564:	0014      	movs	r4, r2
 8000566:	431d      	orrs	r5, r3
 8000568:	076b      	lsls	r3, r5, #29
 800056a:	d009      	beq.n	8000580 <__aeabi_dadd+0x10c>
 800056c:	230f      	movs	r3, #15
 800056e:	402b      	ands	r3, r5
 8000570:	2b04      	cmp	r3, #4
 8000572:	d005      	beq.n	8000580 <__aeabi_dadd+0x10c>
 8000574:	1d2b      	adds	r3, r5, #4
 8000576:	42ab      	cmp	r3, r5
 8000578:	41ad      	sbcs	r5, r5
 800057a:	426d      	negs	r5, r5
 800057c:	1964      	adds	r4, r4, r5
 800057e:	001d      	movs	r5, r3
 8000580:	0223      	lsls	r3, r4, #8
 8000582:	d400      	bmi.n	8000586 <__aeabi_dadd+0x112>
 8000584:	e12d      	b.n	80007e2 <__aeabi_dadd+0x36e>
 8000586:	4a9d      	ldr	r2, [pc, #628]	@ (80007fc <__aeabi_dadd+0x388>)
 8000588:	3701      	adds	r7, #1
 800058a:	4297      	cmp	r7, r2
 800058c:	d100      	bne.n	8000590 <__aeabi_dadd+0x11c>
 800058e:	e0d3      	b.n	8000738 <__aeabi_dadd+0x2c4>
 8000590:	4646      	mov	r6, r8
 8000592:	499b      	ldr	r1, [pc, #620]	@ (8000800 <__aeabi_dadd+0x38c>)
 8000594:	08ed      	lsrs	r5, r5, #3
 8000596:	4021      	ands	r1, r4
 8000598:	074a      	lsls	r2, r1, #29
 800059a:	432a      	orrs	r2, r5
 800059c:	057c      	lsls	r4, r7, #21
 800059e:	024d      	lsls	r5, r1, #9
 80005a0:	0b2d      	lsrs	r5, r5, #12
 80005a2:	0d64      	lsrs	r4, r4, #21
 80005a4:	0524      	lsls	r4, r4, #20
 80005a6:	432c      	orrs	r4, r5
 80005a8:	07f6      	lsls	r6, r6, #31
 80005aa:	4334      	orrs	r4, r6
 80005ac:	0010      	movs	r0, r2
 80005ae:	0021      	movs	r1, r4
 80005b0:	b003      	add	sp, #12
 80005b2:	bcf0      	pop	{r4, r5, r6, r7}
 80005b4:	46bb      	mov	fp, r7
 80005b6:	46b2      	mov	sl, r6
 80005b8:	46a9      	mov	r9, r5
 80005ba:	46a0      	mov	r8, r4
 80005bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x150>
 80005c2:	e084      	b.n	80006ce <__aeabi_dadd+0x25a>
 80005c4:	464a      	mov	r2, r9
 80005c6:	1bd2      	subs	r2, r2, r7
 80005c8:	2f00      	cmp	r7, #0
 80005ca:	d000      	beq.n	80005ce <__aeabi_dadd+0x15a>
 80005cc:	e16d      	b.n	80008aa <__aeabi_dadd+0x436>
 80005ce:	0025      	movs	r5, r4
 80005d0:	4305      	orrs	r5, r0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x162>
 80005d4:	e127      	b.n	8000826 <__aeabi_dadd+0x3b2>
 80005d6:	1e56      	subs	r6, r2, #1
 80005d8:	2a01      	cmp	r2, #1
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x16a>
 80005dc:	e23b      	b.n	8000a56 <__aeabi_dadd+0x5e2>
 80005de:	4d87      	ldr	r5, [pc, #540]	@ (80007fc <__aeabi_dadd+0x388>)
 80005e0:	42aa      	cmp	r2, r5
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x172>
 80005e4:	e26a      	b.n	8000abc <__aeabi_dadd+0x648>
 80005e6:	2501      	movs	r5, #1
 80005e8:	2e38      	cmp	r6, #56	@ 0x38
 80005ea:	dc12      	bgt.n	8000612 <__aeabi_dadd+0x19e>
 80005ec:	0032      	movs	r2, r6
 80005ee:	2a1f      	cmp	r2, #31
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x180>
 80005f2:	e1f8      	b.n	80009e6 <__aeabi_dadd+0x572>
 80005f4:	2620      	movs	r6, #32
 80005f6:	0025      	movs	r5, r4
 80005f8:	1ab6      	subs	r6, r6, r2
 80005fa:	0007      	movs	r7, r0
 80005fc:	4653      	mov	r3, sl
 80005fe:	40b0      	lsls	r0, r6
 8000600:	40d4      	lsrs	r4, r2
 8000602:	40b5      	lsls	r5, r6
 8000604:	40d7      	lsrs	r7, r2
 8000606:	1e46      	subs	r6, r0, #1
 8000608:	41b0      	sbcs	r0, r6
 800060a:	1b1b      	subs	r3, r3, r4
 800060c:	469a      	mov	sl, r3
 800060e:	433d      	orrs	r5, r7
 8000610:	4305      	orrs	r5, r0
 8000612:	4662      	mov	r2, ip
 8000614:	1b55      	subs	r5, r2, r5
 8000616:	45ac      	cmp	ip, r5
 8000618:	4192      	sbcs	r2, r2
 800061a:	4653      	mov	r3, sl
 800061c:	4252      	negs	r2, r2
 800061e:	000e      	movs	r6, r1
 8000620:	464f      	mov	r7, r9
 8000622:	4688      	mov	r8, r1
 8000624:	1a9c      	subs	r4, r3, r2
 8000626:	e778      	b.n	800051a <__aeabi_dadd+0xa6>
 8000628:	2a00      	cmp	r2, #0
 800062a:	dc00      	bgt.n	800062e <__aeabi_dadd+0x1ba>
 800062c:	e08e      	b.n	800074c <__aeabi_dadd+0x2d8>
 800062e:	4649      	mov	r1, r9
 8000630:	2900      	cmp	r1, #0
 8000632:	d175      	bne.n	8000720 <__aeabi_dadd+0x2ac>
 8000634:	4661      	mov	r1, ip
 8000636:	4653      	mov	r3, sl
 8000638:	4319      	orrs	r1, r3
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x1ca>
 800063c:	e0f6      	b.n	800082c <__aeabi_dadd+0x3b8>
 800063e:	1e51      	subs	r1, r2, #1
 8000640:	2a01      	cmp	r2, #1
 8000642:	d100      	bne.n	8000646 <__aeabi_dadd+0x1d2>
 8000644:	e191      	b.n	800096a <__aeabi_dadd+0x4f6>
 8000646:	4d6d      	ldr	r5, [pc, #436]	@ (80007fc <__aeabi_dadd+0x388>)
 8000648:	42aa      	cmp	r2, r5
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x1da>
 800064c:	e0dc      	b.n	8000808 <__aeabi_dadd+0x394>
 800064e:	2501      	movs	r5, #1
 8000650:	2938      	cmp	r1, #56	@ 0x38
 8000652:	dc14      	bgt.n	800067e <__aeabi_dadd+0x20a>
 8000654:	000a      	movs	r2, r1
 8000656:	2a1f      	cmp	r2, #31
 8000658:	dd00      	ble.n	800065c <__aeabi_dadd+0x1e8>
 800065a:	e1a2      	b.n	80009a2 <__aeabi_dadd+0x52e>
 800065c:	2120      	movs	r1, #32
 800065e:	4653      	mov	r3, sl
 8000660:	1a89      	subs	r1, r1, r2
 8000662:	408b      	lsls	r3, r1
 8000664:	001d      	movs	r5, r3
 8000666:	4663      	mov	r3, ip
 8000668:	40d3      	lsrs	r3, r2
 800066a:	431d      	orrs	r5, r3
 800066c:	4663      	mov	r3, ip
 800066e:	408b      	lsls	r3, r1
 8000670:	0019      	movs	r1, r3
 8000672:	1e4b      	subs	r3, r1, #1
 8000674:	4199      	sbcs	r1, r3
 8000676:	4653      	mov	r3, sl
 8000678:	40d3      	lsrs	r3, r2
 800067a:	430d      	orrs	r5, r1
 800067c:	18e4      	adds	r4, r4, r3
 800067e:	182d      	adds	r5, r5, r0
 8000680:	4285      	cmp	r5, r0
 8000682:	4180      	sbcs	r0, r0
 8000684:	4240      	negs	r0, r0
 8000686:	1824      	adds	r4, r4, r0
 8000688:	0223      	lsls	r3, r4, #8
 800068a:	d559      	bpl.n	8000740 <__aeabi_dadd+0x2cc>
 800068c:	4b5b      	ldr	r3, [pc, #364]	@ (80007fc <__aeabi_dadd+0x388>)
 800068e:	3701      	adds	r7, #1
 8000690:	429f      	cmp	r7, r3
 8000692:	d051      	beq.n	8000738 <__aeabi_dadd+0x2c4>
 8000694:	2101      	movs	r1, #1
 8000696:	4b5a      	ldr	r3, [pc, #360]	@ (8000800 <__aeabi_dadd+0x38c>)
 8000698:	086a      	lsrs	r2, r5, #1
 800069a:	401c      	ands	r4, r3
 800069c:	4029      	ands	r1, r5
 800069e:	430a      	orrs	r2, r1
 80006a0:	07e5      	lsls	r5, r4, #31
 80006a2:	4315      	orrs	r5, r2
 80006a4:	0864      	lsrs	r4, r4, #1
 80006a6:	e75f      	b.n	8000568 <__aeabi_dadd+0xf4>
 80006a8:	4661      	mov	r1, ip
 80006aa:	4653      	mov	r3, sl
 80006ac:	4319      	orrs	r1, r3
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x23e>
 80006b0:	e0bc      	b.n	800082c <__aeabi_dadd+0x3b8>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x246>
 80006b8:	e164      	b.n	8000984 <__aeabi_dadd+0x510>
 80006ba:	4d50      	ldr	r5, [pc, #320]	@ (80007fc <__aeabi_dadd+0x388>)
 80006bc:	42aa      	cmp	r2, r5
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x24e>
 80006c0:	e16a      	b.n	8000998 <__aeabi_dadd+0x524>
 80006c2:	2501      	movs	r5, #1
 80006c4:	2938      	cmp	r1, #56	@ 0x38
 80006c6:	dd00      	ble.n	80006ca <__aeabi_dadd+0x256>
 80006c8:	e722      	b.n	8000510 <__aeabi_dadd+0x9c>
 80006ca:	000a      	movs	r2, r1
 80006cc:	e70e      	b.n	80004ec <__aeabi_dadd+0x78>
 80006ce:	4a4d      	ldr	r2, [pc, #308]	@ (8000804 <__aeabi_dadd+0x390>)
 80006d0:	1c7d      	adds	r5, r7, #1
 80006d2:	4215      	tst	r5, r2
 80006d4:	d000      	beq.n	80006d8 <__aeabi_dadd+0x264>
 80006d6:	e0d0      	b.n	800087a <__aeabi_dadd+0x406>
 80006d8:	0025      	movs	r5, r4
 80006da:	4662      	mov	r2, ip
 80006dc:	4653      	mov	r3, sl
 80006de:	4305      	orrs	r5, r0
 80006e0:	431a      	orrs	r2, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d000      	beq.n	80006e8 <__aeabi_dadd+0x274>
 80006e6:	e137      	b.n	8000958 <__aeabi_dadd+0x4e4>
 80006e8:	2d00      	cmp	r5, #0
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x27a>
 80006ec:	e1a8      	b.n	8000a40 <__aeabi_dadd+0x5cc>
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d100      	bne.n	80006f4 <__aeabi_dadd+0x280>
 80006f2:	e16a      	b.n	80009ca <__aeabi_dadd+0x556>
 80006f4:	4663      	mov	r3, ip
 80006f6:	1ac5      	subs	r5, r0, r3
 80006f8:	4653      	mov	r3, sl
 80006fa:	1ae2      	subs	r2, r4, r3
 80006fc:	42a8      	cmp	r0, r5
 80006fe:	419b      	sbcs	r3, r3
 8000700:	425b      	negs	r3, r3
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	021a      	lsls	r2, r3, #8
 8000706:	d400      	bmi.n	800070a <__aeabi_dadd+0x296>
 8000708:	e203      	b.n	8000b12 <__aeabi_dadd+0x69e>
 800070a:	4663      	mov	r3, ip
 800070c:	1a1d      	subs	r5, r3, r0
 800070e:	45ac      	cmp	ip, r5
 8000710:	4192      	sbcs	r2, r2
 8000712:	4653      	mov	r3, sl
 8000714:	4252      	negs	r2, r2
 8000716:	1b1c      	subs	r4, r3, r4
 8000718:	000e      	movs	r6, r1
 800071a:	4688      	mov	r8, r1
 800071c:	1aa4      	subs	r4, r4, r2
 800071e:	e723      	b.n	8000568 <__aeabi_dadd+0xf4>
 8000720:	4936      	ldr	r1, [pc, #216]	@ (80007fc <__aeabi_dadd+0x388>)
 8000722:	428f      	cmp	r7, r1
 8000724:	d070      	beq.n	8000808 <__aeabi_dadd+0x394>
 8000726:	2501      	movs	r5, #1
 8000728:	2a38      	cmp	r2, #56	@ 0x38
 800072a:	dca8      	bgt.n	800067e <__aeabi_dadd+0x20a>
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	4653      	mov	r3, sl
 8000730:	0409      	lsls	r1, r1, #16
 8000732:	430b      	orrs	r3, r1
 8000734:	469a      	mov	sl, r3
 8000736:	e78e      	b.n	8000656 <__aeabi_dadd+0x1e2>
 8000738:	003c      	movs	r4, r7
 800073a:	2500      	movs	r5, #0
 800073c:	2200      	movs	r2, #0
 800073e:	e731      	b.n	80005a4 <__aeabi_dadd+0x130>
 8000740:	2307      	movs	r3, #7
 8000742:	402b      	ands	r3, r5
 8000744:	2b00      	cmp	r3, #0
 8000746:	d000      	beq.n	800074a <__aeabi_dadd+0x2d6>
 8000748:	e710      	b.n	800056c <__aeabi_dadd+0xf8>
 800074a:	e093      	b.n	8000874 <__aeabi_dadd+0x400>
 800074c:	2a00      	cmp	r2, #0
 800074e:	d074      	beq.n	800083a <__aeabi_dadd+0x3c6>
 8000750:	464a      	mov	r2, r9
 8000752:	1bd2      	subs	r2, r2, r7
 8000754:	2f00      	cmp	r7, #0
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x2e6>
 8000758:	e0c7      	b.n	80008ea <__aeabi_dadd+0x476>
 800075a:	4928      	ldr	r1, [pc, #160]	@ (80007fc <__aeabi_dadd+0x388>)
 800075c:	4589      	cmp	r9, r1
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0x2ee>
 8000760:	e185      	b.n	8000a6e <__aeabi_dadd+0x5fa>
 8000762:	2501      	movs	r5, #1
 8000764:	2a38      	cmp	r2, #56	@ 0x38
 8000766:	dc12      	bgt.n	800078e <__aeabi_dadd+0x31a>
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	430c      	orrs	r4, r1
 800076e:	2a1f      	cmp	r2, #31
 8000770:	dd00      	ble.n	8000774 <__aeabi_dadd+0x300>
 8000772:	e1ab      	b.n	8000acc <__aeabi_dadd+0x658>
 8000774:	2120      	movs	r1, #32
 8000776:	0025      	movs	r5, r4
 8000778:	1a89      	subs	r1, r1, r2
 800077a:	0007      	movs	r7, r0
 800077c:	4088      	lsls	r0, r1
 800077e:	408d      	lsls	r5, r1
 8000780:	40d7      	lsrs	r7, r2
 8000782:	1e41      	subs	r1, r0, #1
 8000784:	4188      	sbcs	r0, r1
 8000786:	40d4      	lsrs	r4, r2
 8000788:	433d      	orrs	r5, r7
 800078a:	4305      	orrs	r5, r0
 800078c:	44a2      	add	sl, r4
 800078e:	4465      	add	r5, ip
 8000790:	4565      	cmp	r5, ip
 8000792:	4192      	sbcs	r2, r2
 8000794:	4252      	negs	r2, r2
 8000796:	4452      	add	r2, sl
 8000798:	0014      	movs	r4, r2
 800079a:	464f      	mov	r7, r9
 800079c:	e774      	b.n	8000688 <__aeabi_dadd+0x214>
 800079e:	0028      	movs	r0, r5
 80007a0:	f001 fc44 	bl	800202c <__clzsi2>
 80007a4:	0003      	movs	r3, r0
 80007a6:	3318      	adds	r3, #24
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	dc00      	bgt.n	80007ae <__aeabi_dadd+0x33a>
 80007ac:	e6c2      	b.n	8000534 <__aeabi_dadd+0xc0>
 80007ae:	002a      	movs	r2, r5
 80007b0:	3808      	subs	r0, #8
 80007b2:	4082      	lsls	r2, r0
 80007b4:	429f      	cmp	r7, r3
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dadd+0x346>
 80007b8:	e0a9      	b.n	800090e <__aeabi_dadd+0x49a>
 80007ba:	1bdb      	subs	r3, r3, r7
 80007bc:	1c58      	adds	r0, r3, #1
 80007be:	281f      	cmp	r0, #31
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_dadd+0x350>
 80007c2:	e1ac      	b.n	8000b1e <__aeabi_dadd+0x6aa>
 80007c4:	0015      	movs	r5, r2
 80007c6:	3b1f      	subs	r3, #31
 80007c8:	40dd      	lsrs	r5, r3
 80007ca:	2820      	cmp	r0, #32
 80007cc:	d005      	beq.n	80007da <__aeabi_dadd+0x366>
 80007ce:	2340      	movs	r3, #64	@ 0x40
 80007d0:	1a1b      	subs	r3, r3, r0
 80007d2:	409a      	lsls	r2, r3
 80007d4:	1e53      	subs	r3, r2, #1
 80007d6:	419a      	sbcs	r2, r3
 80007d8:	4315      	orrs	r5, r2
 80007da:	2307      	movs	r3, #7
 80007dc:	2700      	movs	r7, #0
 80007de:	402b      	ands	r3, r5
 80007e0:	e7b0      	b.n	8000744 <__aeabi_dadd+0x2d0>
 80007e2:	08ed      	lsrs	r5, r5, #3
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <__aeabi_dadd+0x388>)
 80007e6:	0762      	lsls	r2, r4, #29
 80007e8:	432a      	orrs	r2, r5
 80007ea:	08e4      	lsrs	r4, r4, #3
 80007ec:	429f      	cmp	r7, r3
 80007ee:	d00f      	beq.n	8000810 <__aeabi_dadd+0x39c>
 80007f0:	0324      	lsls	r4, r4, #12
 80007f2:	0b25      	lsrs	r5, r4, #12
 80007f4:	057c      	lsls	r4, r7, #21
 80007f6:	0d64      	lsrs	r4, r4, #21
 80007f8:	e6d4      	b.n	80005a4 <__aeabi_dadd+0x130>
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	000007ff 	.word	0x000007ff
 8000800:	ff7fffff 	.word	0xff7fffff
 8000804:	000007fe 	.word	0x000007fe
 8000808:	08c0      	lsrs	r0, r0, #3
 800080a:	0762      	lsls	r2, r4, #29
 800080c:	4302      	orrs	r2, r0
 800080e:	08e4      	lsrs	r4, r4, #3
 8000810:	0013      	movs	r3, r2
 8000812:	4323      	orrs	r3, r4
 8000814:	d100      	bne.n	8000818 <__aeabi_dadd+0x3a4>
 8000816:	e186      	b.n	8000b26 <__aeabi_dadd+0x6b2>
 8000818:	2580      	movs	r5, #128	@ 0x80
 800081a:	032d      	lsls	r5, r5, #12
 800081c:	4325      	orrs	r5, r4
 800081e:	032d      	lsls	r5, r5, #12
 8000820:	4cc3      	ldr	r4, [pc, #780]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 8000822:	0b2d      	lsrs	r5, r5, #12
 8000824:	e6be      	b.n	80005a4 <__aeabi_dadd+0x130>
 8000826:	4660      	mov	r0, ip
 8000828:	4654      	mov	r4, sl
 800082a:	000e      	movs	r6, r1
 800082c:	0017      	movs	r7, r2
 800082e:	08c5      	lsrs	r5, r0, #3
 8000830:	e7d8      	b.n	80007e4 <__aeabi_dadd+0x370>
 8000832:	4cc0      	ldr	r4, [pc, #768]	@ (8000b34 <__aeabi_dadd+0x6c0>)
 8000834:	1aff      	subs	r7, r7, r3
 8000836:	4014      	ands	r4, r2
 8000838:	e696      	b.n	8000568 <__aeabi_dadd+0xf4>
 800083a:	4abf      	ldr	r2, [pc, #764]	@ (8000b38 <__aeabi_dadd+0x6c4>)
 800083c:	1c79      	adds	r1, r7, #1
 800083e:	4211      	tst	r1, r2
 8000840:	d16b      	bne.n	800091a <__aeabi_dadd+0x4a6>
 8000842:	0022      	movs	r2, r4
 8000844:	4302      	orrs	r2, r0
 8000846:	2f00      	cmp	r7, #0
 8000848:	d000      	beq.n	800084c <__aeabi_dadd+0x3d8>
 800084a:	e0db      	b.n	8000a04 <__aeabi_dadd+0x590>
 800084c:	2a00      	cmp	r2, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x3de>
 8000850:	e12d      	b.n	8000aae <__aeabi_dadd+0x63a>
 8000852:	4662      	mov	r2, ip
 8000854:	4653      	mov	r3, sl
 8000856:	431a      	orrs	r2, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3e8>
 800085a:	e0b6      	b.n	80009ca <__aeabi_dadd+0x556>
 800085c:	4663      	mov	r3, ip
 800085e:	18c5      	adds	r5, r0, r3
 8000860:	4285      	cmp	r5, r0
 8000862:	4180      	sbcs	r0, r0
 8000864:	4454      	add	r4, sl
 8000866:	4240      	negs	r0, r0
 8000868:	1824      	adds	r4, r4, r0
 800086a:	0223      	lsls	r3, r4, #8
 800086c:	d502      	bpl.n	8000874 <__aeabi_dadd+0x400>
 800086e:	000f      	movs	r7, r1
 8000870:	4bb0      	ldr	r3, [pc, #704]	@ (8000b34 <__aeabi_dadd+0x6c0>)
 8000872:	401c      	ands	r4, r3
 8000874:	003a      	movs	r2, r7
 8000876:	0028      	movs	r0, r5
 8000878:	e7d8      	b.n	800082c <__aeabi_dadd+0x3b8>
 800087a:	4662      	mov	r2, ip
 800087c:	1a85      	subs	r5, r0, r2
 800087e:	42a8      	cmp	r0, r5
 8000880:	4192      	sbcs	r2, r2
 8000882:	4653      	mov	r3, sl
 8000884:	4252      	negs	r2, r2
 8000886:	4691      	mov	r9, r2
 8000888:	1ae3      	subs	r3, r4, r3
 800088a:	001a      	movs	r2, r3
 800088c:	464b      	mov	r3, r9
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	4691      	mov	r9, r2
 8000894:	021a      	lsls	r2, r3, #8
 8000896:	d454      	bmi.n	8000942 <__aeabi_dadd+0x4ce>
 8000898:	464a      	mov	r2, r9
 800089a:	464c      	mov	r4, r9
 800089c:	432a      	orrs	r2, r5
 800089e:	d000      	beq.n	80008a2 <__aeabi_dadd+0x42e>
 80008a0:	e640      	b.n	8000524 <__aeabi_dadd+0xb0>
 80008a2:	2600      	movs	r6, #0
 80008a4:	2400      	movs	r4, #0
 80008a6:	2500      	movs	r5, #0
 80008a8:	e67c      	b.n	80005a4 <__aeabi_dadd+0x130>
 80008aa:	4da1      	ldr	r5, [pc, #644]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 80008ac:	45a9      	cmp	r9, r5
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x43e>
 80008b0:	e090      	b.n	80009d4 <__aeabi_dadd+0x560>
 80008b2:	2501      	movs	r5, #1
 80008b4:	2a38      	cmp	r2, #56	@ 0x38
 80008b6:	dd00      	ble.n	80008ba <__aeabi_dadd+0x446>
 80008b8:	e6ab      	b.n	8000612 <__aeabi_dadd+0x19e>
 80008ba:	2580      	movs	r5, #128	@ 0x80
 80008bc:	042d      	lsls	r5, r5, #16
 80008be:	432c      	orrs	r4, r5
 80008c0:	e695      	b.n	80005ee <__aeabi_dadd+0x17a>
 80008c2:	0011      	movs	r1, r2
 80008c4:	4655      	mov	r5, sl
 80008c6:	3920      	subs	r1, #32
 80008c8:	40cd      	lsrs	r5, r1
 80008ca:	46a9      	mov	r9, r5
 80008cc:	2a20      	cmp	r2, #32
 80008ce:	d006      	beq.n	80008de <__aeabi_dadd+0x46a>
 80008d0:	2140      	movs	r1, #64	@ 0x40
 80008d2:	4653      	mov	r3, sl
 80008d4:	1a8a      	subs	r2, r1, r2
 80008d6:	4093      	lsls	r3, r2
 80008d8:	4662      	mov	r2, ip
 80008da:	431a      	orrs	r2, r3
 80008dc:	4694      	mov	ip, r2
 80008de:	4665      	mov	r5, ip
 80008e0:	1e6b      	subs	r3, r5, #1
 80008e2:	419d      	sbcs	r5, r3
 80008e4:	464b      	mov	r3, r9
 80008e6:	431d      	orrs	r5, r3
 80008e8:	e612      	b.n	8000510 <__aeabi_dadd+0x9c>
 80008ea:	0021      	movs	r1, r4
 80008ec:	4301      	orrs	r1, r0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x47e>
 80008f0:	e0c4      	b.n	8000a7c <__aeabi_dadd+0x608>
 80008f2:	1e51      	subs	r1, r2, #1
 80008f4:	2a01      	cmp	r2, #1
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x486>
 80008f8:	e0fb      	b.n	8000af2 <__aeabi_dadd+0x67e>
 80008fa:	4d8d      	ldr	r5, [pc, #564]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 80008fc:	42aa      	cmp	r2, r5
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x48e>
 8000900:	e0b5      	b.n	8000a6e <__aeabi_dadd+0x5fa>
 8000902:	2501      	movs	r5, #1
 8000904:	2938      	cmp	r1, #56	@ 0x38
 8000906:	dd00      	ble.n	800090a <__aeabi_dadd+0x496>
 8000908:	e741      	b.n	800078e <__aeabi_dadd+0x31a>
 800090a:	000a      	movs	r2, r1
 800090c:	e72f      	b.n	800076e <__aeabi_dadd+0x2fa>
 800090e:	4c89      	ldr	r4, [pc, #548]	@ (8000b34 <__aeabi_dadd+0x6c0>)
 8000910:	1aff      	subs	r7, r7, r3
 8000912:	4014      	ands	r4, r2
 8000914:	0762      	lsls	r2, r4, #29
 8000916:	08e4      	lsrs	r4, r4, #3
 8000918:	e76a      	b.n	80007f0 <__aeabi_dadd+0x37c>
 800091a:	4a85      	ldr	r2, [pc, #532]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 800091c:	4291      	cmp	r1, r2
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x4ae>
 8000920:	e0e3      	b.n	8000aea <__aeabi_dadd+0x676>
 8000922:	4663      	mov	r3, ip
 8000924:	18c2      	adds	r2, r0, r3
 8000926:	4282      	cmp	r2, r0
 8000928:	4180      	sbcs	r0, r0
 800092a:	0023      	movs	r3, r4
 800092c:	4240      	negs	r0, r0
 800092e:	4453      	add	r3, sl
 8000930:	181b      	adds	r3, r3, r0
 8000932:	07dd      	lsls	r5, r3, #31
 8000934:	085c      	lsrs	r4, r3, #1
 8000936:	2307      	movs	r3, #7
 8000938:	0852      	lsrs	r2, r2, #1
 800093a:	4315      	orrs	r5, r2
 800093c:	000f      	movs	r7, r1
 800093e:	402b      	ands	r3, r5
 8000940:	e700      	b.n	8000744 <__aeabi_dadd+0x2d0>
 8000942:	4663      	mov	r3, ip
 8000944:	1a1d      	subs	r5, r3, r0
 8000946:	45ac      	cmp	ip, r5
 8000948:	4192      	sbcs	r2, r2
 800094a:	4653      	mov	r3, sl
 800094c:	4252      	negs	r2, r2
 800094e:	1b1c      	subs	r4, r3, r4
 8000950:	000e      	movs	r6, r1
 8000952:	4688      	mov	r8, r1
 8000954:	1aa4      	subs	r4, r4, r2
 8000956:	e5e5      	b.n	8000524 <__aeabi_dadd+0xb0>
 8000958:	2d00      	cmp	r5, #0
 800095a:	d000      	beq.n	800095e <__aeabi_dadd+0x4ea>
 800095c:	e091      	b.n	8000a82 <__aeabi_dadd+0x60e>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d138      	bne.n	80009d4 <__aeabi_dadd+0x560>
 8000962:	2480      	movs	r4, #128	@ 0x80
 8000964:	2600      	movs	r6, #0
 8000966:	0324      	lsls	r4, r4, #12
 8000968:	e756      	b.n	8000818 <__aeabi_dadd+0x3a4>
 800096a:	4663      	mov	r3, ip
 800096c:	18c5      	adds	r5, r0, r3
 800096e:	4285      	cmp	r5, r0
 8000970:	4180      	sbcs	r0, r0
 8000972:	4454      	add	r4, sl
 8000974:	4240      	negs	r0, r0
 8000976:	1824      	adds	r4, r4, r0
 8000978:	2701      	movs	r7, #1
 800097a:	0223      	lsls	r3, r4, #8
 800097c:	d400      	bmi.n	8000980 <__aeabi_dadd+0x50c>
 800097e:	e6df      	b.n	8000740 <__aeabi_dadd+0x2cc>
 8000980:	2702      	movs	r7, #2
 8000982:	e687      	b.n	8000694 <__aeabi_dadd+0x220>
 8000984:	4663      	mov	r3, ip
 8000986:	1ac5      	subs	r5, r0, r3
 8000988:	42a8      	cmp	r0, r5
 800098a:	4180      	sbcs	r0, r0
 800098c:	4653      	mov	r3, sl
 800098e:	4240      	negs	r0, r0
 8000990:	1ae4      	subs	r4, r4, r3
 8000992:	2701      	movs	r7, #1
 8000994:	1a24      	subs	r4, r4, r0
 8000996:	e5c0      	b.n	800051a <__aeabi_dadd+0xa6>
 8000998:	0762      	lsls	r2, r4, #29
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	4302      	orrs	r2, r0
 800099e:	08e4      	lsrs	r4, r4, #3
 80009a0:	e736      	b.n	8000810 <__aeabi_dadd+0x39c>
 80009a2:	0011      	movs	r1, r2
 80009a4:	4653      	mov	r3, sl
 80009a6:	3920      	subs	r1, #32
 80009a8:	40cb      	lsrs	r3, r1
 80009aa:	4699      	mov	r9, r3
 80009ac:	2a20      	cmp	r2, #32
 80009ae:	d006      	beq.n	80009be <__aeabi_dadd+0x54a>
 80009b0:	2140      	movs	r1, #64	@ 0x40
 80009b2:	4653      	mov	r3, sl
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	4093      	lsls	r3, r2
 80009b8:	4662      	mov	r2, ip
 80009ba:	431a      	orrs	r2, r3
 80009bc:	4694      	mov	ip, r2
 80009be:	4665      	mov	r5, ip
 80009c0:	1e6b      	subs	r3, r5, #1
 80009c2:	419d      	sbcs	r5, r3
 80009c4:	464b      	mov	r3, r9
 80009c6:	431d      	orrs	r5, r3
 80009c8:	e659      	b.n	800067e <__aeabi_dadd+0x20a>
 80009ca:	0762      	lsls	r2, r4, #29
 80009cc:	08c0      	lsrs	r0, r0, #3
 80009ce:	4302      	orrs	r2, r0
 80009d0:	08e4      	lsrs	r4, r4, #3
 80009d2:	e70d      	b.n	80007f0 <__aeabi_dadd+0x37c>
 80009d4:	4653      	mov	r3, sl
 80009d6:	075a      	lsls	r2, r3, #29
 80009d8:	4663      	mov	r3, ip
 80009da:	08d8      	lsrs	r0, r3, #3
 80009dc:	4653      	mov	r3, sl
 80009de:	000e      	movs	r6, r1
 80009e0:	4302      	orrs	r2, r0
 80009e2:	08dc      	lsrs	r4, r3, #3
 80009e4:	e714      	b.n	8000810 <__aeabi_dadd+0x39c>
 80009e6:	0015      	movs	r5, r2
 80009e8:	0026      	movs	r6, r4
 80009ea:	3d20      	subs	r5, #32
 80009ec:	40ee      	lsrs	r6, r5
 80009ee:	2a20      	cmp	r2, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x586>
 80009f2:	2540      	movs	r5, #64	@ 0x40
 80009f4:	1aaa      	subs	r2, r5, r2
 80009f6:	4094      	lsls	r4, r2
 80009f8:	4320      	orrs	r0, r4
 80009fa:	1e42      	subs	r2, r0, #1
 80009fc:	4190      	sbcs	r0, r2
 80009fe:	0005      	movs	r5, r0
 8000a00:	4335      	orrs	r5, r6
 8000a02:	e606      	b.n	8000612 <__aeabi_dadd+0x19e>
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	d07c      	beq.n	8000b02 <__aeabi_dadd+0x68e>
 8000a08:	4662      	mov	r2, ip
 8000a0a:	4653      	mov	r3, sl
 8000a0c:	08c0      	lsrs	r0, r0, #3
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dadd+0x5a0>
 8000a12:	e6fa      	b.n	800080a <__aeabi_dadd+0x396>
 8000a14:	0762      	lsls	r2, r4, #29
 8000a16:	4310      	orrs	r0, r2
 8000a18:	2280      	movs	r2, #128	@ 0x80
 8000a1a:	08e4      	lsrs	r4, r4, #3
 8000a1c:	0312      	lsls	r2, r2, #12
 8000a1e:	4214      	tst	r4, r2
 8000a20:	d008      	beq.n	8000a34 <__aeabi_dadd+0x5c0>
 8000a22:	08d9      	lsrs	r1, r3, #3
 8000a24:	4211      	tst	r1, r2
 8000a26:	d105      	bne.n	8000a34 <__aeabi_dadd+0x5c0>
 8000a28:	4663      	mov	r3, ip
 8000a2a:	08d8      	lsrs	r0, r3, #3
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	000c      	movs	r4, r1
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4318      	orrs	r0, r3
 8000a34:	0f42      	lsrs	r2, r0, #29
 8000a36:	00c0      	lsls	r0, r0, #3
 8000a38:	08c0      	lsrs	r0, r0, #3
 8000a3a:	0752      	lsls	r2, r2, #29
 8000a3c:	4302      	orrs	r2, r0
 8000a3e:	e6e7      	b.n	8000810 <__aeabi_dadd+0x39c>
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x5d2>
 8000a44:	e72d      	b.n	80008a2 <__aeabi_dadd+0x42e>
 8000a46:	4663      	mov	r3, ip
 8000a48:	08d8      	lsrs	r0, r3, #3
 8000a4a:	4653      	mov	r3, sl
 8000a4c:	075a      	lsls	r2, r3, #29
 8000a4e:	000e      	movs	r6, r1
 8000a50:	4302      	orrs	r2, r0
 8000a52:	08dc      	lsrs	r4, r3, #3
 8000a54:	e6cc      	b.n	80007f0 <__aeabi_dadd+0x37c>
 8000a56:	4663      	mov	r3, ip
 8000a58:	1a1d      	subs	r5, r3, r0
 8000a5a:	45ac      	cmp	ip, r5
 8000a5c:	4192      	sbcs	r2, r2
 8000a5e:	4653      	mov	r3, sl
 8000a60:	4252      	negs	r2, r2
 8000a62:	1b1c      	subs	r4, r3, r4
 8000a64:	000e      	movs	r6, r1
 8000a66:	4688      	mov	r8, r1
 8000a68:	1aa4      	subs	r4, r4, r2
 8000a6a:	3701      	adds	r7, #1
 8000a6c:	e555      	b.n	800051a <__aeabi_dadd+0xa6>
 8000a6e:	4663      	mov	r3, ip
 8000a70:	08d9      	lsrs	r1, r3, #3
 8000a72:	4653      	mov	r3, sl
 8000a74:	075a      	lsls	r2, r3, #29
 8000a76:	430a      	orrs	r2, r1
 8000a78:	08dc      	lsrs	r4, r3, #3
 8000a7a:	e6c9      	b.n	8000810 <__aeabi_dadd+0x39c>
 8000a7c:	4660      	mov	r0, ip
 8000a7e:	4654      	mov	r4, sl
 8000a80:	e6d4      	b.n	800082c <__aeabi_dadd+0x3b8>
 8000a82:	08c0      	lsrs	r0, r0, #3
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x616>
 8000a88:	e6bf      	b.n	800080a <__aeabi_dadd+0x396>
 8000a8a:	0762      	lsls	r2, r4, #29
 8000a8c:	4310      	orrs	r0, r2
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	08e4      	lsrs	r4, r4, #3
 8000a92:	0312      	lsls	r2, r2, #12
 8000a94:	4214      	tst	r4, r2
 8000a96:	d0cd      	beq.n	8000a34 <__aeabi_dadd+0x5c0>
 8000a98:	08dd      	lsrs	r5, r3, #3
 8000a9a:	4215      	tst	r5, r2
 8000a9c:	d1ca      	bne.n	8000a34 <__aeabi_dadd+0x5c0>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	08d8      	lsrs	r0, r3, #3
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	075b      	lsls	r3, r3, #29
 8000aa6:	000e      	movs	r6, r1
 8000aa8:	002c      	movs	r4, r5
 8000aaa:	4318      	orrs	r0, r3
 8000aac:	e7c2      	b.n	8000a34 <__aeabi_dadd+0x5c0>
 8000aae:	4663      	mov	r3, ip
 8000ab0:	08d9      	lsrs	r1, r3, #3
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	08dc      	lsrs	r4, r3, #3
 8000aba:	e699      	b.n	80007f0 <__aeabi_dadd+0x37c>
 8000abc:	4663      	mov	r3, ip
 8000abe:	08d8      	lsrs	r0, r3, #3
 8000ac0:	4653      	mov	r3, sl
 8000ac2:	075a      	lsls	r2, r3, #29
 8000ac4:	000e      	movs	r6, r1
 8000ac6:	4302      	orrs	r2, r0
 8000ac8:	08dc      	lsrs	r4, r3, #3
 8000aca:	e6a1      	b.n	8000810 <__aeabi_dadd+0x39c>
 8000acc:	0011      	movs	r1, r2
 8000ace:	0027      	movs	r7, r4
 8000ad0:	3920      	subs	r1, #32
 8000ad2:	40cf      	lsrs	r7, r1
 8000ad4:	2a20      	cmp	r2, #32
 8000ad6:	d003      	beq.n	8000ae0 <__aeabi_dadd+0x66c>
 8000ad8:	2140      	movs	r1, #64	@ 0x40
 8000ada:	1a8a      	subs	r2, r1, r2
 8000adc:	4094      	lsls	r4, r2
 8000ade:	4320      	orrs	r0, r4
 8000ae0:	1e42      	subs	r2, r0, #1
 8000ae2:	4190      	sbcs	r0, r2
 8000ae4:	0005      	movs	r5, r0
 8000ae6:	433d      	orrs	r5, r7
 8000ae8:	e651      	b.n	800078e <__aeabi_dadd+0x31a>
 8000aea:	000c      	movs	r4, r1
 8000aec:	2500      	movs	r5, #0
 8000aee:	2200      	movs	r2, #0
 8000af0:	e558      	b.n	80005a4 <__aeabi_dadd+0x130>
 8000af2:	4460      	add	r0, ip
 8000af4:	4560      	cmp	r0, ip
 8000af6:	4192      	sbcs	r2, r2
 8000af8:	4454      	add	r4, sl
 8000afa:	4252      	negs	r2, r2
 8000afc:	0005      	movs	r5, r0
 8000afe:	18a4      	adds	r4, r4, r2
 8000b00:	e73a      	b.n	8000978 <__aeabi_dadd+0x504>
 8000b02:	4653      	mov	r3, sl
 8000b04:	075a      	lsls	r2, r3, #29
 8000b06:	4663      	mov	r3, ip
 8000b08:	08d9      	lsrs	r1, r3, #3
 8000b0a:	4653      	mov	r3, sl
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	08dc      	lsrs	r4, r3, #3
 8000b10:	e67e      	b.n	8000810 <__aeabi_dadd+0x39c>
 8000b12:	001a      	movs	r2, r3
 8000b14:	001c      	movs	r4, r3
 8000b16:	432a      	orrs	r2, r5
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x6a8>
 8000b1a:	e6ab      	b.n	8000874 <__aeabi_dadd+0x400>
 8000b1c:	e6c1      	b.n	80008a2 <__aeabi_dadd+0x42e>
 8000b1e:	2120      	movs	r1, #32
 8000b20:	2500      	movs	r5, #0
 8000b22:	1a09      	subs	r1, r1, r0
 8000b24:	e519      	b.n	800055a <__aeabi_dadd+0xe6>
 8000b26:	2200      	movs	r2, #0
 8000b28:	2500      	movs	r5, #0
 8000b2a:	4c01      	ldr	r4, [pc, #4]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 8000b2c:	e53a      	b.n	80005a4 <__aeabi_dadd+0x130>
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	000007ff 	.word	0x000007ff
 8000b34:	ff7fffff 	.word	0xff7fffff
 8000b38:	000007fe 	.word	0x000007fe

08000b3c <__aeabi_ddiv>:
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	46de      	mov	lr, fp
 8000b40:	4645      	mov	r5, r8
 8000b42:	4657      	mov	r7, sl
 8000b44:	464e      	mov	r6, r9
 8000b46:	b5e0      	push	{r5, r6, r7, lr}
 8000b48:	b087      	sub	sp, #28
 8000b4a:	9200      	str	r2, [sp, #0]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	030b      	lsls	r3, r1, #12
 8000b50:	0b1b      	lsrs	r3, r3, #12
 8000b52:	469b      	mov	fp, r3
 8000b54:	0fca      	lsrs	r2, r1, #31
 8000b56:	004b      	lsls	r3, r1, #1
 8000b58:	0004      	movs	r4, r0
 8000b5a:	4680      	mov	r8, r0
 8000b5c:	0d5b      	lsrs	r3, r3, #21
 8000b5e:	9202      	str	r2, [sp, #8]
 8000b60:	d100      	bne.n	8000b64 <__aeabi_ddiv+0x28>
 8000b62:	e16a      	b.n	8000e3a <__aeabi_ddiv+0x2fe>
 8000b64:	4ad4      	ldr	r2, [pc, #848]	@ (8000eb8 <__aeabi_ddiv+0x37c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x30>
 8000b6a:	e18c      	b.n	8000e86 <__aeabi_ddiv+0x34a>
 8000b6c:	4659      	mov	r1, fp
 8000b6e:	0f42      	lsrs	r2, r0, #29
 8000b70:	00c9      	lsls	r1, r1, #3
 8000b72:	430a      	orrs	r2, r1
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	0409      	lsls	r1, r1, #16
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	00c2      	lsls	r2, r0, #3
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	4acf      	ldr	r2, [pc, #828]	@ (8000ebc <__aeabi_ddiv+0x380>)
 8000b80:	4689      	mov	r9, r1
 8000b82:	4692      	mov	sl, r2
 8000b84:	449a      	add	sl, r3
 8000b86:	2300      	movs	r3, #0
 8000b88:	2400      	movs	r4, #0
 8000b8a:	9303      	str	r3, [sp, #12]
 8000b8c:	9e00      	ldr	r6, [sp, #0]
 8000b8e:	9f01      	ldr	r7, [sp, #4]
 8000b90:	033b      	lsls	r3, r7, #12
 8000b92:	0b1b      	lsrs	r3, r3, #12
 8000b94:	469b      	mov	fp, r3
 8000b96:	007b      	lsls	r3, r7, #1
 8000b98:	0030      	movs	r0, r6
 8000b9a:	0d5b      	lsrs	r3, r3, #21
 8000b9c:	0ffd      	lsrs	r5, r7, #31
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_ddiv+0x68>
 8000ba2:	e128      	b.n	8000df6 <__aeabi_ddiv+0x2ba>
 8000ba4:	4ac4      	ldr	r2, [pc, #784]	@ (8000eb8 <__aeabi_ddiv+0x37c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d100      	bne.n	8000bac <__aeabi_ddiv+0x70>
 8000baa:	e177      	b.n	8000e9c <__aeabi_ddiv+0x360>
 8000bac:	4659      	mov	r1, fp
 8000bae:	0f72      	lsrs	r2, r6, #29
 8000bb0:	00c9      	lsls	r1, r1, #3
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	0409      	lsls	r1, r1, #16
 8000bb8:	4311      	orrs	r1, r2
 8000bba:	468b      	mov	fp, r1
 8000bbc:	49bf      	ldr	r1, [pc, #764]	@ (8000ebc <__aeabi_ddiv+0x380>)
 8000bbe:	00f2      	lsls	r2, r6, #3
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	4651      	mov	r1, sl
 8000bc4:	4463      	add	r3, ip
 8000bc6:	1acb      	subs	r3, r1, r3
 8000bc8:	469a      	mov	sl, r3
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9e02      	ldr	r6, [sp, #8]
 8000bce:	406e      	eors	r6, r5
 8000bd0:	2c0f      	cmp	r4, #15
 8000bd2:	d827      	bhi.n	8000c24 <__aeabi_ddiv+0xe8>
 8000bd4:	49ba      	ldr	r1, [pc, #744]	@ (8000ec0 <__aeabi_ddiv+0x384>)
 8000bd6:	00a4      	lsls	r4, r4, #2
 8000bd8:	5909      	ldr	r1, [r1, r4]
 8000bda:	468f      	mov	pc, r1
 8000bdc:	46cb      	mov	fp, r9
 8000bde:	4642      	mov	r2, r8
 8000be0:	9e02      	ldr	r6, [sp, #8]
 8000be2:	9b03      	ldr	r3, [sp, #12]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d016      	beq.n	8000c16 <__aeabi_ddiv+0xda>
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d100      	bne.n	8000bee <__aeabi_ddiv+0xb2>
 8000bec:	e2a6      	b.n	800113c <__aeabi_ddiv+0x600>
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_ddiv+0xb8>
 8000bf2:	e0df      	b.n	8000db4 <__aeabi_ddiv+0x278>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	4690      	mov	r8, r2
 8000bfc:	051b      	lsls	r3, r3, #20
 8000bfe:	4323      	orrs	r3, r4
 8000c00:	07f6      	lsls	r6, r6, #31
 8000c02:	4333      	orrs	r3, r6
 8000c04:	4640      	mov	r0, r8
 8000c06:	0019      	movs	r1, r3
 8000c08:	b007      	add	sp, #28
 8000c0a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c0c:	46bb      	mov	fp, r7
 8000c0e:	46b2      	mov	sl, r6
 8000c10:	46a9      	mov	r9, r5
 8000c12:	46a0      	mov	r8, r4
 8000c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c16:	2200      	movs	r2, #0
 8000c18:	2400      	movs	r4, #0
 8000c1a:	4690      	mov	r8, r2
 8000c1c:	4ba6      	ldr	r3, [pc, #664]	@ (8000eb8 <__aeabi_ddiv+0x37c>)
 8000c1e:	e7ed      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000c20:	002e      	movs	r6, r5
 8000c22:	e7df      	b.n	8000be4 <__aeabi_ddiv+0xa8>
 8000c24:	45cb      	cmp	fp, r9
 8000c26:	d200      	bcs.n	8000c2a <__aeabi_ddiv+0xee>
 8000c28:	e1d4      	b.n	8000fd4 <__aeabi_ddiv+0x498>
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0xf2>
 8000c2c:	e1cf      	b.n	8000fce <__aeabi_ddiv+0x492>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	425b      	negs	r3, r3
 8000c32:	469c      	mov	ip, r3
 8000c34:	4644      	mov	r4, r8
 8000c36:	4648      	mov	r0, r9
 8000c38:	2700      	movs	r7, #0
 8000c3a:	44e2      	add	sl, ip
 8000c3c:	465b      	mov	r3, fp
 8000c3e:	0e15      	lsrs	r5, r2, #24
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	431d      	orrs	r5, r3
 8000c44:	0c19      	lsrs	r1, r3, #16
 8000c46:	042b      	lsls	r3, r5, #16
 8000c48:	0212      	lsls	r2, r2, #8
 8000c4a:	9500      	str	r5, [sp, #0]
 8000c4c:	0c1d      	lsrs	r5, r3, #16
 8000c4e:	4691      	mov	r9, r2
 8000c50:	9102      	str	r1, [sp, #8]
 8000c52:	9503      	str	r5, [sp, #12]
 8000c54:	f7ff fae8 	bl	8000228 <__aeabi_uidivmod>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	436a      	muls	r2, r5
 8000c5c:	040b      	lsls	r3, r1, #16
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	4680      	mov	r8, r0
 8000c62:	4319      	orrs	r1, r3
 8000c64:	428a      	cmp	r2, r1
 8000c66:	d909      	bls.n	8000c7c <__aeabi_ddiv+0x140>
 8000c68:	9d00      	ldr	r5, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	46ac      	mov	ip, r5
 8000c6e:	425b      	negs	r3, r3
 8000c70:	4461      	add	r1, ip
 8000c72:	469c      	mov	ip, r3
 8000c74:	44e0      	add	r8, ip
 8000c76:	428d      	cmp	r5, r1
 8000c78:	d800      	bhi.n	8000c7c <__aeabi_ddiv+0x140>
 8000c7a:	e1fb      	b.n	8001074 <__aeabi_ddiv+0x538>
 8000c7c:	1a88      	subs	r0, r1, r2
 8000c7e:	9902      	ldr	r1, [sp, #8]
 8000c80:	f7ff fad2 	bl	8000228 <__aeabi_uidivmod>
 8000c84:	9a03      	ldr	r2, [sp, #12]
 8000c86:	0424      	lsls	r4, r4, #16
 8000c88:	4342      	muls	r2, r0
 8000c8a:	0409      	lsls	r1, r1, #16
 8000c8c:	0c24      	lsrs	r4, r4, #16
 8000c8e:	0003      	movs	r3, r0
 8000c90:	430c      	orrs	r4, r1
 8000c92:	42a2      	cmp	r2, r4
 8000c94:	d906      	bls.n	8000ca4 <__aeabi_ddiv+0x168>
 8000c96:	9900      	ldr	r1, [sp, #0]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	468c      	mov	ip, r1
 8000c9c:	4464      	add	r4, ip
 8000c9e:	42a1      	cmp	r1, r4
 8000ca0:	d800      	bhi.n	8000ca4 <__aeabi_ddiv+0x168>
 8000ca2:	e1e1      	b.n	8001068 <__aeabi_ddiv+0x52c>
 8000ca4:	1aa0      	subs	r0, r4, r2
 8000ca6:	4642      	mov	r2, r8
 8000ca8:	0412      	lsls	r2, r2, #16
 8000caa:	431a      	orrs	r2, r3
 8000cac:	4693      	mov	fp, r2
 8000cae:	464b      	mov	r3, r9
 8000cb0:	4659      	mov	r1, fp
 8000cb2:	0c1b      	lsrs	r3, r3, #16
 8000cb4:	001d      	movs	r5, r3
 8000cb6:	9304      	str	r3, [sp, #16]
 8000cb8:	040b      	lsls	r3, r1, #16
 8000cba:	4649      	mov	r1, r9
 8000cbc:	0409      	lsls	r1, r1, #16
 8000cbe:	0c09      	lsrs	r1, r1, #16
 8000cc0:	000c      	movs	r4, r1
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	435c      	muls	r4, r3
 8000cc6:	0c12      	lsrs	r2, r2, #16
 8000cc8:	436b      	muls	r3, r5
 8000cca:	4688      	mov	r8, r1
 8000ccc:	4351      	muls	r1, r2
 8000cce:	436a      	muls	r2, r5
 8000cd0:	0c25      	lsrs	r5, r4, #16
 8000cd2:	46ac      	mov	ip, r5
 8000cd4:	185b      	adds	r3, r3, r1
 8000cd6:	4463      	add	r3, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d903      	bls.n	8000ce4 <__aeabi_ddiv+0x1a8>
 8000cdc:	2180      	movs	r1, #128	@ 0x80
 8000cde:	0249      	lsls	r1, r1, #9
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	4462      	add	r2, ip
 8000ce4:	0c19      	lsrs	r1, r3, #16
 8000ce6:	0424      	lsls	r4, r4, #16
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	0c24      	lsrs	r4, r4, #16
 8000cec:	188a      	adds	r2, r1, r2
 8000cee:	191c      	adds	r4, r3, r4
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d302      	bcc.n	8000cfa <__aeabi_ddiv+0x1be>
 8000cf4:	d116      	bne.n	8000d24 <__aeabi_ddiv+0x1e8>
 8000cf6:	42a7      	cmp	r7, r4
 8000cf8:	d214      	bcs.n	8000d24 <__aeabi_ddiv+0x1e8>
 8000cfa:	465b      	mov	r3, fp
 8000cfc:	9d00      	ldr	r5, [sp, #0]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	444f      	add	r7, r9
 8000d02:	9305      	str	r3, [sp, #20]
 8000d04:	454f      	cmp	r7, r9
 8000d06:	419b      	sbcs	r3, r3
 8000d08:	46ac      	mov	ip, r5
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	4463      	add	r3, ip
 8000d0e:	18c0      	adds	r0, r0, r3
 8000d10:	4285      	cmp	r5, r0
 8000d12:	d300      	bcc.n	8000d16 <__aeabi_ddiv+0x1da>
 8000d14:	e1a1      	b.n	800105a <__aeabi_ddiv+0x51e>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	d900      	bls.n	8000d1c <__aeabi_ddiv+0x1e0>
 8000d1a:	e1f6      	b.n	800110a <__aeabi_ddiv+0x5ce>
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_ddiv+0x1e4>
 8000d1e:	e1f1      	b.n	8001104 <__aeabi_ddiv+0x5c8>
 8000d20:	9b05      	ldr	r3, [sp, #20]
 8000d22:	469b      	mov	fp, r3
 8000d24:	1b3c      	subs	r4, r7, r4
 8000d26:	42a7      	cmp	r7, r4
 8000d28:	41bf      	sbcs	r7, r7
 8000d2a:	9d00      	ldr	r5, [sp, #0]
 8000d2c:	1a80      	subs	r0, r0, r2
 8000d2e:	427f      	negs	r7, r7
 8000d30:	1bc0      	subs	r0, r0, r7
 8000d32:	4285      	cmp	r5, r0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x1fc>
 8000d36:	e1d0      	b.n	80010da <__aeabi_ddiv+0x59e>
 8000d38:	9902      	ldr	r1, [sp, #8]
 8000d3a:	f7ff fa75 	bl	8000228 <__aeabi_uidivmod>
 8000d3e:	9a03      	ldr	r2, [sp, #12]
 8000d40:	040b      	lsls	r3, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0c21      	lsrs	r1, r4, #16
 8000d46:	0007      	movs	r7, r0
 8000d48:	4319      	orrs	r1, r3
 8000d4a:	428a      	cmp	r2, r1
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x214>
 8000d4e:	e178      	b.n	8001042 <__aeabi_ddiv+0x506>
 8000d50:	1a88      	subs	r0, r1, r2
 8000d52:	9902      	ldr	r1, [sp, #8]
 8000d54:	f7ff fa68 	bl	8000228 <__aeabi_uidivmod>
 8000d58:	9a03      	ldr	r2, [sp, #12]
 8000d5a:	0424      	lsls	r4, r4, #16
 8000d5c:	4342      	muls	r2, r0
 8000d5e:	0409      	lsls	r1, r1, #16
 8000d60:	0c24      	lsrs	r4, r4, #16
 8000d62:	0003      	movs	r3, r0
 8000d64:	430c      	orrs	r4, r1
 8000d66:	42a2      	cmp	r2, r4
 8000d68:	d900      	bls.n	8000d6c <__aeabi_ddiv+0x230>
 8000d6a:	e15d      	b.n	8001028 <__aeabi_ddiv+0x4ec>
 8000d6c:	4641      	mov	r1, r8
 8000d6e:	1aa4      	subs	r4, r4, r2
 8000d70:	043a      	lsls	r2, r7, #16
 8000d72:	431a      	orrs	r2, r3
 8000d74:	9d04      	ldr	r5, [sp, #16]
 8000d76:	0413      	lsls	r3, r2, #16
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	4359      	muls	r1, r3
 8000d7c:	4647      	mov	r7, r8
 8000d7e:	436b      	muls	r3, r5
 8000d80:	469c      	mov	ip, r3
 8000d82:	0c10      	lsrs	r0, r2, #16
 8000d84:	4347      	muls	r7, r0
 8000d86:	0c0b      	lsrs	r3, r1, #16
 8000d88:	44bc      	add	ip, r7
 8000d8a:	4463      	add	r3, ip
 8000d8c:	4368      	muls	r0, r5
 8000d8e:	429f      	cmp	r7, r3
 8000d90:	d903      	bls.n	8000d9a <__aeabi_ddiv+0x25e>
 8000d92:	2580      	movs	r5, #128	@ 0x80
 8000d94:	026d      	lsls	r5, r5, #9
 8000d96:	46ac      	mov	ip, r5
 8000d98:	4460      	add	r0, ip
 8000d9a:	0c1f      	lsrs	r7, r3, #16
 8000d9c:	0409      	lsls	r1, r1, #16
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	0c09      	lsrs	r1, r1, #16
 8000da2:	183f      	adds	r7, r7, r0
 8000da4:	185b      	adds	r3, r3, r1
 8000da6:	42bc      	cmp	r4, r7
 8000da8:	d200      	bcs.n	8000dac <__aeabi_ddiv+0x270>
 8000daa:	e102      	b.n	8000fb2 <__aeabi_ddiv+0x476>
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x274>
 8000dae:	e0fd      	b.n	8000fac <__aeabi_ddiv+0x470>
 8000db0:	2301      	movs	r3, #1
 8000db2:	431a      	orrs	r2, r3
 8000db4:	4b43      	ldr	r3, [pc, #268]	@ (8000ec4 <__aeabi_ddiv+0x388>)
 8000db6:	4453      	add	r3, sl
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_ddiv+0x282>
 8000dbc:	e0ae      	b.n	8000f1c <__aeabi_ddiv+0x3e0>
 8000dbe:	0751      	lsls	r1, r2, #29
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_ddiv+0x288>
 8000dc2:	e198      	b.n	80010f6 <__aeabi_ddiv+0x5ba>
 8000dc4:	4659      	mov	r1, fp
 8000dc6:	01c9      	lsls	r1, r1, #7
 8000dc8:	d506      	bpl.n	8000dd8 <__aeabi_ddiv+0x29c>
 8000dca:	4659      	mov	r1, fp
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec8 <__aeabi_ddiv+0x38c>)
 8000dce:	4019      	ands	r1, r3
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	468b      	mov	fp, r1
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4453      	add	r3, sl
 8000dd8:	493c      	ldr	r1, [pc, #240]	@ (8000ecc <__aeabi_ddiv+0x390>)
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_ddiv+0x2a4>
 8000dde:	e71a      	b.n	8000c16 <__aeabi_ddiv+0xda>
 8000de0:	4659      	mov	r1, fp
 8000de2:	08d2      	lsrs	r2, r2, #3
 8000de4:	0749      	lsls	r1, r1, #29
 8000de6:	4311      	orrs	r1, r2
 8000de8:	465a      	mov	r2, fp
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	0254      	lsls	r4, r2, #9
 8000dee:	4688      	mov	r8, r1
 8000df0:	0b24      	lsrs	r4, r4, #12
 8000df2:	0d5b      	lsrs	r3, r3, #21
 8000df4:	e702      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000df6:	465a      	mov	r2, fp
 8000df8:	9b00      	ldr	r3, [sp, #0]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x2c4>
 8000dfe:	e07e      	b.n	8000efe <__aeabi_ddiv+0x3c2>
 8000e00:	465b      	mov	r3, fp
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x2cc>
 8000e06:	e100      	b.n	800100a <__aeabi_ddiv+0x4ce>
 8000e08:	4658      	mov	r0, fp
 8000e0a:	f001 f90f 	bl	800202c <__clzsi2>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	0003      	movs	r3, r0
 8000e12:	3a0b      	subs	r2, #11
 8000e14:	271d      	movs	r7, #29
 8000e16:	9e00      	ldr	r6, [sp, #0]
 8000e18:	1aba      	subs	r2, r7, r2
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	4658      	mov	r0, fp
 8000e1e:	40d6      	lsrs	r6, r2
 8000e20:	3908      	subs	r1, #8
 8000e22:	4088      	lsls	r0, r1
 8000e24:	0032      	movs	r2, r6
 8000e26:	4302      	orrs	r2, r0
 8000e28:	4693      	mov	fp, r2
 8000e2a:	9a00      	ldr	r2, [sp, #0]
 8000e2c:	408a      	lsls	r2, r1
 8000e2e:	4928      	ldr	r1, [pc, #160]	@ (8000ed0 <__aeabi_ddiv+0x394>)
 8000e30:	4453      	add	r3, sl
 8000e32:	468a      	mov	sl, r1
 8000e34:	449a      	add	sl, r3
 8000e36:	2300      	movs	r3, #0
 8000e38:	e6c8      	b.n	8000bcc <__aeabi_ddiv+0x90>
 8000e3a:	465b      	mov	r3, fp
 8000e3c:	4303      	orrs	r3, r0
 8000e3e:	4699      	mov	r9, r3
 8000e40:	d056      	beq.n	8000ef0 <__aeabi_ddiv+0x3b4>
 8000e42:	465b      	mov	r3, fp
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0x30e>
 8000e48:	e0cd      	b.n	8000fe6 <__aeabi_ddiv+0x4aa>
 8000e4a:	4658      	mov	r0, fp
 8000e4c:	f001 f8ee 	bl	800202c <__clzsi2>
 8000e50:	230b      	movs	r3, #11
 8000e52:	425b      	negs	r3, r3
 8000e54:	469c      	mov	ip, r3
 8000e56:	0002      	movs	r2, r0
 8000e58:	4484      	add	ip, r0
 8000e5a:	4666      	mov	r6, ip
 8000e5c:	231d      	movs	r3, #29
 8000e5e:	1b9b      	subs	r3, r3, r6
 8000e60:	0026      	movs	r6, r4
 8000e62:	0011      	movs	r1, r2
 8000e64:	4658      	mov	r0, fp
 8000e66:	40de      	lsrs	r6, r3
 8000e68:	3908      	subs	r1, #8
 8000e6a:	4088      	lsls	r0, r1
 8000e6c:	0033      	movs	r3, r6
 8000e6e:	4303      	orrs	r3, r0
 8000e70:	4699      	mov	r9, r3
 8000e72:	0023      	movs	r3, r4
 8000e74:	408b      	lsls	r3, r1
 8000e76:	4698      	mov	r8, r3
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <__aeabi_ddiv+0x398>)
 8000e7a:	2400      	movs	r4, #0
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	469a      	mov	sl, r3
 8000e80:	2300      	movs	r3, #0
 8000e82:	9303      	str	r3, [sp, #12]
 8000e84:	e682      	b.n	8000b8c <__aeabi_ddiv+0x50>
 8000e86:	465a      	mov	r2, fp
 8000e88:	4302      	orrs	r2, r0
 8000e8a:	4691      	mov	r9, r2
 8000e8c:	d12a      	bne.n	8000ee4 <__aeabi_ddiv+0x3a8>
 8000e8e:	2200      	movs	r2, #0
 8000e90:	469a      	mov	sl, r3
 8000e92:	2302      	movs	r3, #2
 8000e94:	4690      	mov	r8, r2
 8000e96:	2408      	movs	r4, #8
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	e677      	b.n	8000b8c <__aeabi_ddiv+0x50>
 8000e9c:	465a      	mov	r2, fp
 8000e9e:	9b00      	ldr	r3, [sp, #0]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <__aeabi_ddiv+0x39c>)
 8000ea4:	469c      	mov	ip, r3
 8000ea6:	44e2      	add	sl, ip
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d117      	bne.n	8000edc <__aeabi_ddiv+0x3a0>
 8000eac:	2302      	movs	r3, #2
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	e689      	b.n	8000bcc <__aeabi_ddiv+0x90>
 8000eb8:	000007ff 	.word	0x000007ff
 8000ebc:	fffffc01 	.word	0xfffffc01
 8000ec0:	08006e7c 	.word	0x08006e7c
 8000ec4:	000003ff 	.word	0x000003ff
 8000ec8:	feffffff 	.word	0xfeffffff
 8000ecc:	000007fe 	.word	0x000007fe
 8000ed0:	000003f3 	.word	0x000003f3
 8000ed4:	fffffc0d 	.word	0xfffffc0d
 8000ed8:	fffff801 	.word	0xfffff801
 8000edc:	2303      	movs	r3, #3
 8000ede:	0032      	movs	r2, r6
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	e673      	b.n	8000bcc <__aeabi_ddiv+0x90>
 8000ee4:	469a      	mov	sl, r3
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	46d9      	mov	r9, fp
 8000eea:	240c      	movs	r4, #12
 8000eec:	9303      	str	r3, [sp, #12]
 8000eee:	e64d      	b.n	8000b8c <__aeabi_ddiv+0x50>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4698      	mov	r8, r3
 8000ef4:	469a      	mov	sl, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	2404      	movs	r4, #4
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	e646      	b.n	8000b8c <__aeabi_ddiv+0x50>
 8000efe:	2301      	movs	r3, #1
 8000f00:	431c      	orrs	r4, r3
 8000f02:	2300      	movs	r3, #0
 8000f04:	469b      	mov	fp, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	e660      	b.n	8000bcc <__aeabi_ddiv+0x90>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2480      	movs	r4, #128	@ 0x80
 8000f0e:	4698      	mov	r8, r3
 8000f10:	2600      	movs	r6, #0
 8000f12:	4b92      	ldr	r3, [pc, #584]	@ (800115c <__aeabi_ddiv+0x620>)
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	e671      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4252      	negs	r2, r2
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	1ac9      	subs	r1, r1, r3
 8000f20:	2938      	cmp	r1, #56	@ 0x38
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_ddiv+0x3ea>
 8000f24:	e666      	b.n	8000bf4 <__aeabi_ddiv+0xb8>
 8000f26:	291f      	cmp	r1, #31
 8000f28:	dc00      	bgt.n	8000f2c <__aeabi_ddiv+0x3f0>
 8000f2a:	e0ab      	b.n	8001084 <__aeabi_ddiv+0x548>
 8000f2c:	201f      	movs	r0, #31
 8000f2e:	4240      	negs	r0, r0
 8000f30:	1ac3      	subs	r3, r0, r3
 8000f32:	4658      	mov	r0, fp
 8000f34:	40d8      	lsrs	r0, r3
 8000f36:	0003      	movs	r3, r0
 8000f38:	2920      	cmp	r1, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_ddiv+0x40a>
 8000f3c:	4658      	mov	r0, fp
 8000f3e:	4988      	ldr	r1, [pc, #544]	@ (8001160 <__aeabi_ddiv+0x624>)
 8000f40:	4451      	add	r1, sl
 8000f42:	4088      	lsls	r0, r1
 8000f44:	4302      	orrs	r2, r0
 8000f46:	1e51      	subs	r1, r2, #1
 8000f48:	418a      	sbcs	r2, r1
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	0019      	movs	r1, r3
 8000f50:	2400      	movs	r4, #0
 8000f52:	4011      	ands	r1, r2
 8000f54:	4213      	tst	r3, r2
 8000f56:	d00c      	beq.n	8000f72 <__aeabi_ddiv+0x436>
 8000f58:	230f      	movs	r3, #15
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0x426>
 8000f60:	e0f9      	b.n	8001156 <__aeabi_ddiv+0x61a>
 8000f62:	1d11      	adds	r1, r2, #4
 8000f64:	4291      	cmp	r1, r2
 8000f66:	419b      	sbcs	r3, r3
 8000f68:	000a      	movs	r2, r1
 8000f6a:	425b      	negs	r3, r3
 8000f6c:	0759      	lsls	r1, r3, #29
 8000f6e:	025b      	lsls	r3, r3, #9
 8000f70:	0b1c      	lsrs	r4, r3, #12
 8000f72:	08d2      	lsrs	r2, r2, #3
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4690      	mov	r8, r2
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e63f      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000f7c:	2480      	movs	r4, #128	@ 0x80
 8000f7e:	464b      	mov	r3, r9
 8000f80:	0324      	lsls	r4, r4, #12
 8000f82:	4223      	tst	r3, r4
 8000f84:	d009      	beq.n	8000f9a <__aeabi_ddiv+0x45e>
 8000f86:	465b      	mov	r3, fp
 8000f88:	4223      	tst	r3, r4
 8000f8a:	d106      	bne.n	8000f9a <__aeabi_ddiv+0x45e>
 8000f8c:	431c      	orrs	r4, r3
 8000f8e:	0324      	lsls	r4, r4, #12
 8000f90:	002e      	movs	r6, r5
 8000f92:	4690      	mov	r8, r2
 8000f94:	4b71      	ldr	r3, [pc, #452]	@ (800115c <__aeabi_ddiv+0x620>)
 8000f96:	0b24      	lsrs	r4, r4, #12
 8000f98:	e630      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000f9a:	2480      	movs	r4, #128	@ 0x80
 8000f9c:	464b      	mov	r3, r9
 8000f9e:	0324      	lsls	r4, r4, #12
 8000fa0:	431c      	orrs	r4, r3
 8000fa2:	0324      	lsls	r4, r4, #12
 8000fa4:	9e02      	ldr	r6, [sp, #8]
 8000fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800115c <__aeabi_ddiv+0x620>)
 8000fa8:	0b24      	lsrs	r4, r4, #12
 8000faa:	e627      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_ddiv+0x476>
 8000fb0:	e700      	b.n	8000db4 <__aeabi_ddiv+0x278>
 8000fb2:	9800      	ldr	r0, [sp, #0]
 8000fb4:	1e51      	subs	r1, r2, #1
 8000fb6:	4684      	mov	ip, r0
 8000fb8:	4464      	add	r4, ip
 8000fba:	4284      	cmp	r4, r0
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x484>
 8000fbe:	e084      	b.n	80010ca <__aeabi_ddiv+0x58e>
 8000fc0:	42bc      	cmp	r4, r7
 8000fc2:	d200      	bcs.n	8000fc6 <__aeabi_ddiv+0x48a>
 8000fc4:	e0ae      	b.n	8001124 <__aeabi_ddiv+0x5e8>
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x48e>
 8000fc8:	e0c1      	b.n	800114e <__aeabi_ddiv+0x612>
 8000fca:	000a      	movs	r2, r1
 8000fcc:	e6f0      	b.n	8000db0 <__aeabi_ddiv+0x274>
 8000fce:	4542      	cmp	r2, r8
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x498>
 8000fd2:	e62c      	b.n	8000c2e <__aeabi_ddiv+0xf2>
 8000fd4:	464b      	mov	r3, r9
 8000fd6:	07dc      	lsls	r4, r3, #31
 8000fd8:	0858      	lsrs	r0, r3, #1
 8000fda:	4643      	mov	r3, r8
 8000fdc:	085b      	lsrs	r3, r3, #1
 8000fde:	431c      	orrs	r4, r3
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	07df      	lsls	r7, r3, #31
 8000fe4:	e62a      	b.n	8000c3c <__aeabi_ddiv+0x100>
 8000fe6:	f001 f821 	bl	800202c <__clzsi2>
 8000fea:	2315      	movs	r3, #21
 8000fec:	469c      	mov	ip, r3
 8000fee:	4484      	add	ip, r0
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	4663      	mov	r3, ip
 8000ff4:	3220      	adds	r2, #32
 8000ff6:	2b1c      	cmp	r3, #28
 8000ff8:	dc00      	bgt.n	8000ffc <__aeabi_ddiv+0x4c0>
 8000ffa:	e72e      	b.n	8000e5a <__aeabi_ddiv+0x31e>
 8000ffc:	0023      	movs	r3, r4
 8000ffe:	3808      	subs	r0, #8
 8001000:	4083      	lsls	r3, r0
 8001002:	4699      	mov	r9, r3
 8001004:	2300      	movs	r3, #0
 8001006:	4698      	mov	r8, r3
 8001008:	e736      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 800100a:	f001 f80f 	bl	800202c <__clzsi2>
 800100e:	0002      	movs	r2, r0
 8001010:	0003      	movs	r3, r0
 8001012:	3215      	adds	r2, #21
 8001014:	3320      	adds	r3, #32
 8001016:	2a1c      	cmp	r2, #28
 8001018:	dc00      	bgt.n	800101c <__aeabi_ddiv+0x4e0>
 800101a:	e6fb      	b.n	8000e14 <__aeabi_ddiv+0x2d8>
 800101c:	9900      	ldr	r1, [sp, #0]
 800101e:	3808      	subs	r0, #8
 8001020:	4081      	lsls	r1, r0
 8001022:	2200      	movs	r2, #0
 8001024:	468b      	mov	fp, r1
 8001026:	e702      	b.n	8000e2e <__aeabi_ddiv+0x2f2>
 8001028:	9900      	ldr	r1, [sp, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	468c      	mov	ip, r1
 800102e:	4464      	add	r4, ip
 8001030:	42a1      	cmp	r1, r4
 8001032:	d900      	bls.n	8001036 <__aeabi_ddiv+0x4fa>
 8001034:	e69a      	b.n	8000d6c <__aeabi_ddiv+0x230>
 8001036:	42a2      	cmp	r2, r4
 8001038:	d800      	bhi.n	800103c <__aeabi_ddiv+0x500>
 800103a:	e697      	b.n	8000d6c <__aeabi_ddiv+0x230>
 800103c:	1e83      	subs	r3, r0, #2
 800103e:	4464      	add	r4, ip
 8001040:	e694      	b.n	8000d6c <__aeabi_ddiv+0x230>
 8001042:	46ac      	mov	ip, r5
 8001044:	4461      	add	r1, ip
 8001046:	3f01      	subs	r7, #1
 8001048:	428d      	cmp	r5, r1
 800104a:	d900      	bls.n	800104e <__aeabi_ddiv+0x512>
 800104c:	e680      	b.n	8000d50 <__aeabi_ddiv+0x214>
 800104e:	428a      	cmp	r2, r1
 8001050:	d800      	bhi.n	8001054 <__aeabi_ddiv+0x518>
 8001052:	e67d      	b.n	8000d50 <__aeabi_ddiv+0x214>
 8001054:	1e87      	subs	r7, r0, #2
 8001056:	4461      	add	r1, ip
 8001058:	e67a      	b.n	8000d50 <__aeabi_ddiv+0x214>
 800105a:	4285      	cmp	r5, r0
 800105c:	d000      	beq.n	8001060 <__aeabi_ddiv+0x524>
 800105e:	e65f      	b.n	8000d20 <__aeabi_ddiv+0x1e4>
 8001060:	45b9      	cmp	r9, r7
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x52a>
 8001064:	e65c      	b.n	8000d20 <__aeabi_ddiv+0x1e4>
 8001066:	e656      	b.n	8000d16 <__aeabi_ddiv+0x1da>
 8001068:	42a2      	cmp	r2, r4
 800106a:	d800      	bhi.n	800106e <__aeabi_ddiv+0x532>
 800106c:	e61a      	b.n	8000ca4 <__aeabi_ddiv+0x168>
 800106e:	1e83      	subs	r3, r0, #2
 8001070:	4464      	add	r4, ip
 8001072:	e617      	b.n	8000ca4 <__aeabi_ddiv+0x168>
 8001074:	428a      	cmp	r2, r1
 8001076:	d800      	bhi.n	800107a <__aeabi_ddiv+0x53e>
 8001078:	e600      	b.n	8000c7c <__aeabi_ddiv+0x140>
 800107a:	46ac      	mov	ip, r5
 800107c:	1e83      	subs	r3, r0, #2
 800107e:	4698      	mov	r8, r3
 8001080:	4461      	add	r1, ip
 8001082:	e5fb      	b.n	8000c7c <__aeabi_ddiv+0x140>
 8001084:	4837      	ldr	r0, [pc, #220]	@ (8001164 <__aeabi_ddiv+0x628>)
 8001086:	0014      	movs	r4, r2
 8001088:	4450      	add	r0, sl
 800108a:	4082      	lsls	r2, r0
 800108c:	465b      	mov	r3, fp
 800108e:	0017      	movs	r7, r2
 8001090:	4083      	lsls	r3, r0
 8001092:	40cc      	lsrs	r4, r1
 8001094:	1e7a      	subs	r2, r7, #1
 8001096:	4197      	sbcs	r7, r2
 8001098:	4323      	orrs	r3, r4
 800109a:	433b      	orrs	r3, r7
 800109c:	001a      	movs	r2, r3
 800109e:	465b      	mov	r3, fp
 80010a0:	40cb      	lsrs	r3, r1
 80010a2:	0751      	lsls	r1, r2, #29
 80010a4:	d009      	beq.n	80010ba <__aeabi_ddiv+0x57e>
 80010a6:	210f      	movs	r1, #15
 80010a8:	4011      	ands	r1, r2
 80010aa:	2904      	cmp	r1, #4
 80010ac:	d005      	beq.n	80010ba <__aeabi_ddiv+0x57e>
 80010ae:	1d11      	adds	r1, r2, #4
 80010b0:	4291      	cmp	r1, r2
 80010b2:	4192      	sbcs	r2, r2
 80010b4:	4252      	negs	r2, r2
 80010b6:	189b      	adds	r3, r3, r2
 80010b8:	000a      	movs	r2, r1
 80010ba:	0219      	lsls	r1, r3, #8
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_ddiv+0x584>
 80010be:	e755      	b.n	8000f6c <__aeabi_ddiv+0x430>
 80010c0:	2200      	movs	r2, #0
 80010c2:	2301      	movs	r3, #1
 80010c4:	2400      	movs	r4, #0
 80010c6:	4690      	mov	r8, r2
 80010c8:	e598      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 80010ca:	000a      	movs	r2, r1
 80010cc:	42bc      	cmp	r4, r7
 80010ce:	d000      	beq.n	80010d2 <__aeabi_ddiv+0x596>
 80010d0:	e66e      	b.n	8000db0 <__aeabi_ddiv+0x274>
 80010d2:	454b      	cmp	r3, r9
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x59c>
 80010d6:	e66b      	b.n	8000db0 <__aeabi_ddiv+0x274>
 80010d8:	e66c      	b.n	8000db4 <__aeabi_ddiv+0x278>
 80010da:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <__aeabi_ddiv+0x62c>)
 80010dc:	4a23      	ldr	r2, [pc, #140]	@ (800116c <__aeabi_ddiv+0x630>)
 80010de:	4453      	add	r3, sl
 80010e0:	4592      	cmp	sl, r2
 80010e2:	da00      	bge.n	80010e6 <__aeabi_ddiv+0x5aa>
 80010e4:	e718      	b.n	8000f18 <__aeabi_ddiv+0x3dc>
 80010e6:	2101      	movs	r1, #1
 80010e8:	4249      	negs	r1, r1
 80010ea:	1d0a      	adds	r2, r1, #4
 80010ec:	428a      	cmp	r2, r1
 80010ee:	4189      	sbcs	r1, r1
 80010f0:	4249      	negs	r1, r1
 80010f2:	448b      	add	fp, r1
 80010f4:	e666      	b.n	8000dc4 <__aeabi_ddiv+0x288>
 80010f6:	210f      	movs	r1, #15
 80010f8:	4011      	ands	r1, r2
 80010fa:	2904      	cmp	r1, #4
 80010fc:	d100      	bne.n	8001100 <__aeabi_ddiv+0x5c4>
 80010fe:	e661      	b.n	8000dc4 <__aeabi_ddiv+0x288>
 8001100:	0011      	movs	r1, r2
 8001102:	e7f2      	b.n	80010ea <__aeabi_ddiv+0x5ae>
 8001104:	42bc      	cmp	r4, r7
 8001106:	d800      	bhi.n	800110a <__aeabi_ddiv+0x5ce>
 8001108:	e60a      	b.n	8000d20 <__aeabi_ddiv+0x1e4>
 800110a:	2302      	movs	r3, #2
 800110c:	425b      	negs	r3, r3
 800110e:	469c      	mov	ip, r3
 8001110:	9900      	ldr	r1, [sp, #0]
 8001112:	444f      	add	r7, r9
 8001114:	454f      	cmp	r7, r9
 8001116:	419b      	sbcs	r3, r3
 8001118:	44e3      	add	fp, ip
 800111a:	468c      	mov	ip, r1
 800111c:	425b      	negs	r3, r3
 800111e:	4463      	add	r3, ip
 8001120:	18c0      	adds	r0, r0, r3
 8001122:	e5ff      	b.n	8000d24 <__aeabi_ddiv+0x1e8>
 8001124:	4649      	mov	r1, r9
 8001126:	9d00      	ldr	r5, [sp, #0]
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	4548      	cmp	r0, r9
 800112c:	4189      	sbcs	r1, r1
 800112e:	46ac      	mov	ip, r5
 8001130:	4249      	negs	r1, r1
 8001132:	4461      	add	r1, ip
 8001134:	4681      	mov	r9, r0
 8001136:	3a02      	subs	r2, #2
 8001138:	1864      	adds	r4, r4, r1
 800113a:	e7c7      	b.n	80010cc <__aeabi_ddiv+0x590>
 800113c:	2480      	movs	r4, #128	@ 0x80
 800113e:	465b      	mov	r3, fp
 8001140:	0324      	lsls	r4, r4, #12
 8001142:	431c      	orrs	r4, r3
 8001144:	0324      	lsls	r4, r4, #12
 8001146:	4690      	mov	r8, r2
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <__aeabi_ddiv+0x620>)
 800114a:	0b24      	lsrs	r4, r4, #12
 800114c:	e556      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 800114e:	4599      	cmp	r9, r3
 8001150:	d3e8      	bcc.n	8001124 <__aeabi_ddiv+0x5e8>
 8001152:	000a      	movs	r2, r1
 8001154:	e7bd      	b.n	80010d2 <__aeabi_ddiv+0x596>
 8001156:	2300      	movs	r3, #0
 8001158:	e708      	b.n	8000f6c <__aeabi_ddiv+0x430>
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	000007ff 	.word	0x000007ff
 8001160:	0000043e 	.word	0x0000043e
 8001164:	0000041e 	.word	0x0000041e
 8001168:	000003ff 	.word	0x000003ff
 800116c:	fffffc02 	.word	0xfffffc02

08001170 <__aeabi_dmul>:
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	4657      	mov	r7, sl
 8001174:	46de      	mov	lr, fp
 8001176:	464e      	mov	r6, r9
 8001178:	4645      	mov	r5, r8
 800117a:	b5e0      	push	{r5, r6, r7, lr}
 800117c:	001f      	movs	r7, r3
 800117e:	030b      	lsls	r3, r1, #12
 8001180:	0b1b      	lsrs	r3, r3, #12
 8001182:	0016      	movs	r6, r2
 8001184:	469a      	mov	sl, r3
 8001186:	0fca      	lsrs	r2, r1, #31
 8001188:	004b      	lsls	r3, r1, #1
 800118a:	0004      	movs	r4, r0
 800118c:	4693      	mov	fp, r2
 800118e:	b087      	sub	sp, #28
 8001190:	0d5b      	lsrs	r3, r3, #21
 8001192:	d100      	bne.n	8001196 <__aeabi_dmul+0x26>
 8001194:	e0d5      	b.n	8001342 <__aeabi_dmul+0x1d2>
 8001196:	4abb      	ldr	r2, [pc, #748]	@ (8001484 <__aeabi_dmul+0x314>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d100      	bne.n	800119e <__aeabi_dmul+0x2e>
 800119c:	e0f8      	b.n	8001390 <__aeabi_dmul+0x220>
 800119e:	4651      	mov	r1, sl
 80011a0:	0f42      	lsrs	r2, r0, #29
 80011a2:	00c9      	lsls	r1, r1, #3
 80011a4:	430a      	orrs	r2, r1
 80011a6:	2180      	movs	r1, #128	@ 0x80
 80011a8:	0409      	lsls	r1, r1, #16
 80011aa:	4311      	orrs	r1, r2
 80011ac:	00c2      	lsls	r2, r0, #3
 80011ae:	4691      	mov	r9, r2
 80011b0:	4ab5      	ldr	r2, [pc, #724]	@ (8001488 <__aeabi_dmul+0x318>)
 80011b2:	468a      	mov	sl, r1
 80011b4:	189d      	adds	r5, r3, r2
 80011b6:	2300      	movs	r3, #0
 80011b8:	4698      	mov	r8, r3
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	033c      	lsls	r4, r7, #12
 80011be:	007b      	lsls	r3, r7, #1
 80011c0:	0ffa      	lsrs	r2, r7, #31
 80011c2:	0030      	movs	r0, r6
 80011c4:	0b24      	lsrs	r4, r4, #12
 80011c6:	0d5b      	lsrs	r3, r3, #21
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	d100      	bne.n	80011ce <__aeabi_dmul+0x5e>
 80011cc:	e096      	b.n	80012fc <__aeabi_dmul+0x18c>
 80011ce:	4aad      	ldr	r2, [pc, #692]	@ (8001484 <__aeabi_dmul+0x314>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d031      	beq.n	8001238 <__aeabi_dmul+0xc8>
 80011d4:	0f72      	lsrs	r2, r6, #29
 80011d6:	00e4      	lsls	r4, r4, #3
 80011d8:	4322      	orrs	r2, r4
 80011da:	2480      	movs	r4, #128	@ 0x80
 80011dc:	0424      	lsls	r4, r4, #16
 80011de:	4314      	orrs	r4, r2
 80011e0:	4aa9      	ldr	r2, [pc, #676]	@ (8001488 <__aeabi_dmul+0x318>)
 80011e2:	00f0      	lsls	r0, r6, #3
 80011e4:	4694      	mov	ip, r2
 80011e6:	4463      	add	r3, ip
 80011e8:	195b      	adds	r3, r3, r5
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	9201      	str	r2, [sp, #4]
 80011ee:	4642      	mov	r2, r8
 80011f0:	2600      	movs	r6, #0
 80011f2:	2a0a      	cmp	r2, #10
 80011f4:	dc42      	bgt.n	800127c <__aeabi_dmul+0x10c>
 80011f6:	465a      	mov	r2, fp
 80011f8:	9900      	ldr	r1, [sp, #0]
 80011fa:	404a      	eors	r2, r1
 80011fc:	4693      	mov	fp, r2
 80011fe:	4642      	mov	r2, r8
 8001200:	2a02      	cmp	r2, #2
 8001202:	dc32      	bgt.n	800126a <__aeabi_dmul+0xfa>
 8001204:	3a01      	subs	r2, #1
 8001206:	2a01      	cmp	r2, #1
 8001208:	d900      	bls.n	800120c <__aeabi_dmul+0x9c>
 800120a:	e149      	b.n	80014a0 <__aeabi_dmul+0x330>
 800120c:	2e02      	cmp	r6, #2
 800120e:	d100      	bne.n	8001212 <__aeabi_dmul+0xa2>
 8001210:	e0ca      	b.n	80013a8 <__aeabi_dmul+0x238>
 8001212:	2e01      	cmp	r6, #1
 8001214:	d13d      	bne.n	8001292 <__aeabi_dmul+0x122>
 8001216:	2300      	movs	r3, #0
 8001218:	2400      	movs	r4, #0
 800121a:	2200      	movs	r2, #0
 800121c:	0010      	movs	r0, r2
 800121e:	465a      	mov	r2, fp
 8001220:	051b      	lsls	r3, r3, #20
 8001222:	4323      	orrs	r3, r4
 8001224:	07d2      	lsls	r2, r2, #31
 8001226:	4313      	orrs	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	b007      	add	sp, #28
 800122c:	bcf0      	pop	{r4, r5, r6, r7}
 800122e:	46bb      	mov	fp, r7
 8001230:	46b2      	mov	sl, r6
 8001232:	46a9      	mov	r9, r5
 8001234:	46a0      	mov	r8, r4
 8001236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001238:	4b92      	ldr	r3, [pc, #584]	@ (8001484 <__aeabi_dmul+0x314>)
 800123a:	4326      	orrs	r6, r4
 800123c:	18eb      	adds	r3, r5, r3
 800123e:	2e00      	cmp	r6, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_dmul+0xd4>
 8001242:	e0bb      	b.n	80013bc <__aeabi_dmul+0x24c>
 8001244:	2203      	movs	r2, #3
 8001246:	4641      	mov	r1, r8
 8001248:	4311      	orrs	r1, r2
 800124a:	465a      	mov	r2, fp
 800124c:	4688      	mov	r8, r1
 800124e:	9900      	ldr	r1, [sp, #0]
 8001250:	404a      	eors	r2, r1
 8001252:	2180      	movs	r1, #128	@ 0x80
 8001254:	0109      	lsls	r1, r1, #4
 8001256:	468c      	mov	ip, r1
 8001258:	0029      	movs	r1, r5
 800125a:	4461      	add	r1, ip
 800125c:	9101      	str	r1, [sp, #4]
 800125e:	4641      	mov	r1, r8
 8001260:	290a      	cmp	r1, #10
 8001262:	dd00      	ble.n	8001266 <__aeabi_dmul+0xf6>
 8001264:	e233      	b.n	80016ce <__aeabi_dmul+0x55e>
 8001266:	4693      	mov	fp, r2
 8001268:	2603      	movs	r6, #3
 800126a:	4642      	mov	r2, r8
 800126c:	2701      	movs	r7, #1
 800126e:	4097      	lsls	r7, r2
 8001270:	21a6      	movs	r1, #166	@ 0xa6
 8001272:	003a      	movs	r2, r7
 8001274:	00c9      	lsls	r1, r1, #3
 8001276:	400a      	ands	r2, r1
 8001278:	420f      	tst	r7, r1
 800127a:	d031      	beq.n	80012e0 <__aeabi_dmul+0x170>
 800127c:	9e02      	ldr	r6, [sp, #8]
 800127e:	2e02      	cmp	r6, #2
 8001280:	d100      	bne.n	8001284 <__aeabi_dmul+0x114>
 8001282:	e235      	b.n	80016f0 <__aeabi_dmul+0x580>
 8001284:	2e03      	cmp	r6, #3
 8001286:	d100      	bne.n	800128a <__aeabi_dmul+0x11a>
 8001288:	e1d2      	b.n	8001630 <__aeabi_dmul+0x4c0>
 800128a:	4654      	mov	r4, sl
 800128c:	4648      	mov	r0, r9
 800128e:	2e01      	cmp	r6, #1
 8001290:	d0c1      	beq.n	8001216 <__aeabi_dmul+0xa6>
 8001292:	9a01      	ldr	r2, [sp, #4]
 8001294:	4b7d      	ldr	r3, [pc, #500]	@ (800148c <__aeabi_dmul+0x31c>)
 8001296:	4694      	mov	ip, r2
 8001298:	4463      	add	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_dmul+0x130>
 800129e:	e0c0      	b.n	8001422 <__aeabi_dmul+0x2b2>
 80012a0:	0742      	lsls	r2, r0, #29
 80012a2:	d009      	beq.n	80012b8 <__aeabi_dmul+0x148>
 80012a4:	220f      	movs	r2, #15
 80012a6:	4002      	ands	r2, r0
 80012a8:	2a04      	cmp	r2, #4
 80012aa:	d005      	beq.n	80012b8 <__aeabi_dmul+0x148>
 80012ac:	1d02      	adds	r2, r0, #4
 80012ae:	4282      	cmp	r2, r0
 80012b0:	4180      	sbcs	r0, r0
 80012b2:	4240      	negs	r0, r0
 80012b4:	1824      	adds	r4, r4, r0
 80012b6:	0010      	movs	r0, r2
 80012b8:	01e2      	lsls	r2, r4, #7
 80012ba:	d506      	bpl.n	80012ca <__aeabi_dmul+0x15a>
 80012bc:	4b74      	ldr	r3, [pc, #464]	@ (8001490 <__aeabi_dmul+0x320>)
 80012be:	9a01      	ldr	r2, [sp, #4]
 80012c0:	401c      	ands	r4, r3
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	4694      	mov	ip, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4463      	add	r3, ip
 80012ca:	4a72      	ldr	r2, [pc, #456]	@ (8001494 <__aeabi_dmul+0x324>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	dc6b      	bgt.n	80013a8 <__aeabi_dmul+0x238>
 80012d0:	0762      	lsls	r2, r4, #29
 80012d2:	08c0      	lsrs	r0, r0, #3
 80012d4:	0264      	lsls	r4, r4, #9
 80012d6:	055b      	lsls	r3, r3, #21
 80012d8:	4302      	orrs	r2, r0
 80012da:	0b24      	lsrs	r4, r4, #12
 80012dc:	0d5b      	lsrs	r3, r3, #21
 80012de:	e79d      	b.n	800121c <__aeabi_dmul+0xac>
 80012e0:	2190      	movs	r1, #144	@ 0x90
 80012e2:	0089      	lsls	r1, r1, #2
 80012e4:	420f      	tst	r7, r1
 80012e6:	d163      	bne.n	80013b0 <__aeabi_dmul+0x240>
 80012e8:	2288      	movs	r2, #136	@ 0x88
 80012ea:	423a      	tst	r2, r7
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dmul+0x180>
 80012ee:	e0d7      	b.n	80014a0 <__aeabi_dmul+0x330>
 80012f0:	9b00      	ldr	r3, [sp, #0]
 80012f2:	46a2      	mov	sl, r4
 80012f4:	469b      	mov	fp, r3
 80012f6:	4681      	mov	r9, r0
 80012f8:	9602      	str	r6, [sp, #8]
 80012fa:	e7bf      	b.n	800127c <__aeabi_dmul+0x10c>
 80012fc:	0023      	movs	r3, r4
 80012fe:	4333      	orrs	r3, r6
 8001300:	d100      	bne.n	8001304 <__aeabi_dmul+0x194>
 8001302:	e07f      	b.n	8001404 <__aeabi_dmul+0x294>
 8001304:	2c00      	cmp	r4, #0
 8001306:	d100      	bne.n	800130a <__aeabi_dmul+0x19a>
 8001308:	e1ad      	b.n	8001666 <__aeabi_dmul+0x4f6>
 800130a:	0020      	movs	r0, r4
 800130c:	f000 fe8e 	bl	800202c <__clzsi2>
 8001310:	0002      	movs	r2, r0
 8001312:	0003      	movs	r3, r0
 8001314:	3a0b      	subs	r2, #11
 8001316:	201d      	movs	r0, #29
 8001318:	0019      	movs	r1, r3
 800131a:	1a82      	subs	r2, r0, r2
 800131c:	0030      	movs	r0, r6
 800131e:	3908      	subs	r1, #8
 8001320:	40d0      	lsrs	r0, r2
 8001322:	408c      	lsls	r4, r1
 8001324:	4304      	orrs	r4, r0
 8001326:	0030      	movs	r0, r6
 8001328:	4088      	lsls	r0, r1
 800132a:	4a5b      	ldr	r2, [pc, #364]	@ (8001498 <__aeabi_dmul+0x328>)
 800132c:	1aeb      	subs	r3, r5, r3
 800132e:	4694      	mov	ip, r2
 8001330:	4463      	add	r3, ip
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	9201      	str	r2, [sp, #4]
 8001336:	4642      	mov	r2, r8
 8001338:	2600      	movs	r6, #0
 800133a:	2a0a      	cmp	r2, #10
 800133c:	dc00      	bgt.n	8001340 <__aeabi_dmul+0x1d0>
 800133e:	e75a      	b.n	80011f6 <__aeabi_dmul+0x86>
 8001340:	e79c      	b.n	800127c <__aeabi_dmul+0x10c>
 8001342:	4653      	mov	r3, sl
 8001344:	4303      	orrs	r3, r0
 8001346:	4699      	mov	r9, r3
 8001348:	d054      	beq.n	80013f4 <__aeabi_dmul+0x284>
 800134a:	4653      	mov	r3, sl
 800134c:	2b00      	cmp	r3, #0
 800134e:	d100      	bne.n	8001352 <__aeabi_dmul+0x1e2>
 8001350:	e177      	b.n	8001642 <__aeabi_dmul+0x4d2>
 8001352:	4650      	mov	r0, sl
 8001354:	f000 fe6a 	bl	800202c <__clzsi2>
 8001358:	230b      	movs	r3, #11
 800135a:	425b      	negs	r3, r3
 800135c:	469c      	mov	ip, r3
 800135e:	0002      	movs	r2, r0
 8001360:	4484      	add	ip, r0
 8001362:	0011      	movs	r1, r2
 8001364:	4650      	mov	r0, sl
 8001366:	3908      	subs	r1, #8
 8001368:	4088      	lsls	r0, r1
 800136a:	231d      	movs	r3, #29
 800136c:	4680      	mov	r8, r0
 800136e:	4660      	mov	r0, ip
 8001370:	1a1b      	subs	r3, r3, r0
 8001372:	0020      	movs	r0, r4
 8001374:	40d8      	lsrs	r0, r3
 8001376:	0003      	movs	r3, r0
 8001378:	4640      	mov	r0, r8
 800137a:	4303      	orrs	r3, r0
 800137c:	469a      	mov	sl, r3
 800137e:	0023      	movs	r3, r4
 8001380:	408b      	lsls	r3, r1
 8001382:	4699      	mov	r9, r3
 8001384:	2300      	movs	r3, #0
 8001386:	4d44      	ldr	r5, [pc, #272]	@ (8001498 <__aeabi_dmul+0x328>)
 8001388:	4698      	mov	r8, r3
 800138a:	1aad      	subs	r5, r5, r2
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	e715      	b.n	80011bc <__aeabi_dmul+0x4c>
 8001390:	4652      	mov	r2, sl
 8001392:	4302      	orrs	r2, r0
 8001394:	4691      	mov	r9, r2
 8001396:	d126      	bne.n	80013e6 <__aeabi_dmul+0x276>
 8001398:	2200      	movs	r2, #0
 800139a:	001d      	movs	r5, r3
 800139c:	2302      	movs	r3, #2
 800139e:	4692      	mov	sl, r2
 80013a0:	3208      	adds	r2, #8
 80013a2:	4690      	mov	r8, r2
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	e709      	b.n	80011bc <__aeabi_dmul+0x4c>
 80013a8:	2400      	movs	r4, #0
 80013aa:	2200      	movs	r2, #0
 80013ac:	4b35      	ldr	r3, [pc, #212]	@ (8001484 <__aeabi_dmul+0x314>)
 80013ae:	e735      	b.n	800121c <__aeabi_dmul+0xac>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2480      	movs	r4, #128	@ 0x80
 80013b4:	469b      	mov	fp, r3
 80013b6:	0324      	lsls	r4, r4, #12
 80013b8:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <__aeabi_dmul+0x314>)
 80013ba:	e72f      	b.n	800121c <__aeabi_dmul+0xac>
 80013bc:	2202      	movs	r2, #2
 80013be:	4641      	mov	r1, r8
 80013c0:	4311      	orrs	r1, r2
 80013c2:	2280      	movs	r2, #128	@ 0x80
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	4694      	mov	ip, r2
 80013c8:	002a      	movs	r2, r5
 80013ca:	4462      	add	r2, ip
 80013cc:	4688      	mov	r8, r1
 80013ce:	9201      	str	r2, [sp, #4]
 80013d0:	290a      	cmp	r1, #10
 80013d2:	dd00      	ble.n	80013d6 <__aeabi_dmul+0x266>
 80013d4:	e752      	b.n	800127c <__aeabi_dmul+0x10c>
 80013d6:	465a      	mov	r2, fp
 80013d8:	2000      	movs	r0, #0
 80013da:	9900      	ldr	r1, [sp, #0]
 80013dc:	0004      	movs	r4, r0
 80013de:	404a      	eors	r2, r1
 80013e0:	4693      	mov	fp, r2
 80013e2:	2602      	movs	r6, #2
 80013e4:	e70b      	b.n	80011fe <__aeabi_dmul+0x8e>
 80013e6:	220c      	movs	r2, #12
 80013e8:	001d      	movs	r5, r3
 80013ea:	2303      	movs	r3, #3
 80013ec:	4681      	mov	r9, r0
 80013ee:	4690      	mov	r8, r2
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	e6e3      	b.n	80011bc <__aeabi_dmul+0x4c>
 80013f4:	2300      	movs	r3, #0
 80013f6:	469a      	mov	sl, r3
 80013f8:	3304      	adds	r3, #4
 80013fa:	4698      	mov	r8, r3
 80013fc:	3b03      	subs	r3, #3
 80013fe:	2500      	movs	r5, #0
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	e6db      	b.n	80011bc <__aeabi_dmul+0x4c>
 8001404:	4642      	mov	r2, r8
 8001406:	3301      	adds	r3, #1
 8001408:	431a      	orrs	r2, r3
 800140a:	002b      	movs	r3, r5
 800140c:	4690      	mov	r8, r2
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	9201      	str	r2, [sp, #4]
 8001412:	4642      	mov	r2, r8
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2601      	movs	r6, #1
 800141a:	2a0a      	cmp	r2, #10
 800141c:	dc00      	bgt.n	8001420 <__aeabi_dmul+0x2b0>
 800141e:	e6ea      	b.n	80011f6 <__aeabi_dmul+0x86>
 8001420:	e72c      	b.n	800127c <__aeabi_dmul+0x10c>
 8001422:	2201      	movs	r2, #1
 8001424:	1ad2      	subs	r2, r2, r3
 8001426:	2a38      	cmp	r2, #56	@ 0x38
 8001428:	dd00      	ble.n	800142c <__aeabi_dmul+0x2bc>
 800142a:	e6f4      	b.n	8001216 <__aeabi_dmul+0xa6>
 800142c:	2a1f      	cmp	r2, #31
 800142e:	dc00      	bgt.n	8001432 <__aeabi_dmul+0x2c2>
 8001430:	e12a      	b.n	8001688 <__aeabi_dmul+0x518>
 8001432:	211f      	movs	r1, #31
 8001434:	4249      	negs	r1, r1
 8001436:	1acb      	subs	r3, r1, r3
 8001438:	0021      	movs	r1, r4
 800143a:	40d9      	lsrs	r1, r3
 800143c:	000b      	movs	r3, r1
 800143e:	2a20      	cmp	r2, #32
 8001440:	d005      	beq.n	800144e <__aeabi_dmul+0x2de>
 8001442:	4a16      	ldr	r2, [pc, #88]	@ (800149c <__aeabi_dmul+0x32c>)
 8001444:	9d01      	ldr	r5, [sp, #4]
 8001446:	4694      	mov	ip, r2
 8001448:	4465      	add	r5, ip
 800144a:	40ac      	lsls	r4, r5
 800144c:	4320      	orrs	r0, r4
 800144e:	1e42      	subs	r2, r0, #1
 8001450:	4190      	sbcs	r0, r2
 8001452:	4318      	orrs	r0, r3
 8001454:	2307      	movs	r3, #7
 8001456:	0019      	movs	r1, r3
 8001458:	2400      	movs	r4, #0
 800145a:	4001      	ands	r1, r0
 800145c:	4203      	tst	r3, r0
 800145e:	d00c      	beq.n	800147a <__aeabi_dmul+0x30a>
 8001460:	230f      	movs	r3, #15
 8001462:	4003      	ands	r3, r0
 8001464:	2b04      	cmp	r3, #4
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x2fa>
 8001468:	e140      	b.n	80016ec <__aeabi_dmul+0x57c>
 800146a:	1d03      	adds	r3, r0, #4
 800146c:	4283      	cmp	r3, r0
 800146e:	41a4      	sbcs	r4, r4
 8001470:	0018      	movs	r0, r3
 8001472:	4264      	negs	r4, r4
 8001474:	0761      	lsls	r1, r4, #29
 8001476:	0264      	lsls	r4, r4, #9
 8001478:	0b24      	lsrs	r4, r4, #12
 800147a:	08c2      	lsrs	r2, r0, #3
 800147c:	2300      	movs	r3, #0
 800147e:	430a      	orrs	r2, r1
 8001480:	e6cc      	b.n	800121c <__aeabi_dmul+0xac>
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	000007ff 	.word	0x000007ff
 8001488:	fffffc01 	.word	0xfffffc01
 800148c:	000003ff 	.word	0x000003ff
 8001490:	feffffff 	.word	0xfeffffff
 8001494:	000007fe 	.word	0x000007fe
 8001498:	fffffc0d 	.word	0xfffffc0d
 800149c:	0000043e 	.word	0x0000043e
 80014a0:	4649      	mov	r1, r9
 80014a2:	464a      	mov	r2, r9
 80014a4:	0409      	lsls	r1, r1, #16
 80014a6:	0c09      	lsrs	r1, r1, #16
 80014a8:	000d      	movs	r5, r1
 80014aa:	0c16      	lsrs	r6, r2, #16
 80014ac:	0c02      	lsrs	r2, r0, #16
 80014ae:	0400      	lsls	r0, r0, #16
 80014b0:	0c00      	lsrs	r0, r0, #16
 80014b2:	4345      	muls	r5, r0
 80014b4:	46ac      	mov	ip, r5
 80014b6:	0005      	movs	r5, r0
 80014b8:	4375      	muls	r5, r6
 80014ba:	46a8      	mov	r8, r5
 80014bc:	0015      	movs	r5, r2
 80014be:	000f      	movs	r7, r1
 80014c0:	4375      	muls	r5, r6
 80014c2:	9200      	str	r2, [sp, #0]
 80014c4:	9502      	str	r5, [sp, #8]
 80014c6:	002a      	movs	r2, r5
 80014c8:	9d00      	ldr	r5, [sp, #0]
 80014ca:	436f      	muls	r7, r5
 80014cc:	4665      	mov	r5, ip
 80014ce:	0c2d      	lsrs	r5, r5, #16
 80014d0:	46a9      	mov	r9, r5
 80014d2:	4447      	add	r7, r8
 80014d4:	444f      	add	r7, r9
 80014d6:	45b8      	cmp	r8, r7
 80014d8:	d905      	bls.n	80014e6 <__aeabi_dmul+0x376>
 80014da:	0015      	movs	r5, r2
 80014dc:	2280      	movs	r2, #128	@ 0x80
 80014de:	0252      	lsls	r2, r2, #9
 80014e0:	4690      	mov	r8, r2
 80014e2:	4445      	add	r5, r8
 80014e4:	9502      	str	r5, [sp, #8]
 80014e6:	0c3d      	lsrs	r5, r7, #16
 80014e8:	9503      	str	r5, [sp, #12]
 80014ea:	4665      	mov	r5, ip
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	043f      	lsls	r7, r7, #16
 80014f0:	0c2d      	lsrs	r5, r5, #16
 80014f2:	46ac      	mov	ip, r5
 80014f4:	003d      	movs	r5, r7
 80014f6:	4465      	add	r5, ip
 80014f8:	9504      	str	r5, [sp, #16]
 80014fa:	0c25      	lsrs	r5, r4, #16
 80014fc:	0424      	lsls	r4, r4, #16
 80014fe:	0c24      	lsrs	r4, r4, #16
 8001500:	46ac      	mov	ip, r5
 8001502:	0025      	movs	r5, r4
 8001504:	4375      	muls	r5, r6
 8001506:	46a8      	mov	r8, r5
 8001508:	4665      	mov	r5, ip
 800150a:	000f      	movs	r7, r1
 800150c:	4369      	muls	r1, r5
 800150e:	4441      	add	r1, r8
 8001510:	4689      	mov	r9, r1
 8001512:	4367      	muls	r7, r4
 8001514:	0c39      	lsrs	r1, r7, #16
 8001516:	4449      	add	r1, r9
 8001518:	436e      	muls	r6, r5
 800151a:	4588      	cmp	r8, r1
 800151c:	d903      	bls.n	8001526 <__aeabi_dmul+0x3b6>
 800151e:	2280      	movs	r2, #128	@ 0x80
 8001520:	0252      	lsls	r2, r2, #9
 8001522:	4690      	mov	r8, r2
 8001524:	4446      	add	r6, r8
 8001526:	0c0d      	lsrs	r5, r1, #16
 8001528:	46a8      	mov	r8, r5
 800152a:	0035      	movs	r5, r6
 800152c:	4445      	add	r5, r8
 800152e:	9505      	str	r5, [sp, #20]
 8001530:	9d03      	ldr	r5, [sp, #12]
 8001532:	043f      	lsls	r7, r7, #16
 8001534:	46a8      	mov	r8, r5
 8001536:	0c3f      	lsrs	r7, r7, #16
 8001538:	0409      	lsls	r1, r1, #16
 800153a:	19c9      	adds	r1, r1, r7
 800153c:	4488      	add	r8, r1
 800153e:	4645      	mov	r5, r8
 8001540:	9503      	str	r5, [sp, #12]
 8001542:	4655      	mov	r5, sl
 8001544:	042e      	lsls	r6, r5, #16
 8001546:	0c36      	lsrs	r6, r6, #16
 8001548:	0c2f      	lsrs	r7, r5, #16
 800154a:	0035      	movs	r5, r6
 800154c:	4345      	muls	r5, r0
 800154e:	4378      	muls	r0, r7
 8001550:	4681      	mov	r9, r0
 8001552:	0038      	movs	r0, r7
 8001554:	46a8      	mov	r8, r5
 8001556:	0c2d      	lsrs	r5, r5, #16
 8001558:	46aa      	mov	sl, r5
 800155a:	9a00      	ldr	r2, [sp, #0]
 800155c:	4350      	muls	r0, r2
 800155e:	4372      	muls	r2, r6
 8001560:	444a      	add	r2, r9
 8001562:	4452      	add	r2, sl
 8001564:	4591      	cmp	r9, r2
 8001566:	d903      	bls.n	8001570 <__aeabi_dmul+0x400>
 8001568:	2580      	movs	r5, #128	@ 0x80
 800156a:	026d      	lsls	r5, r5, #9
 800156c:	46a9      	mov	r9, r5
 800156e:	4448      	add	r0, r9
 8001570:	0c15      	lsrs	r5, r2, #16
 8001572:	46a9      	mov	r9, r5
 8001574:	4645      	mov	r5, r8
 8001576:	042d      	lsls	r5, r5, #16
 8001578:	0c2d      	lsrs	r5, r5, #16
 800157a:	46a8      	mov	r8, r5
 800157c:	4665      	mov	r5, ip
 800157e:	437d      	muls	r5, r7
 8001580:	0412      	lsls	r2, r2, #16
 8001582:	4448      	add	r0, r9
 8001584:	4490      	add	r8, r2
 8001586:	46a9      	mov	r9, r5
 8001588:	0032      	movs	r2, r6
 800158a:	4665      	mov	r5, ip
 800158c:	4362      	muls	r2, r4
 800158e:	436e      	muls	r6, r5
 8001590:	437c      	muls	r4, r7
 8001592:	0c17      	lsrs	r7, r2, #16
 8001594:	1936      	adds	r6, r6, r4
 8001596:	19bf      	adds	r7, r7, r6
 8001598:	42bc      	cmp	r4, r7
 800159a:	d903      	bls.n	80015a4 <__aeabi_dmul+0x434>
 800159c:	2480      	movs	r4, #128	@ 0x80
 800159e:	0264      	lsls	r4, r4, #9
 80015a0:	46a4      	mov	ip, r4
 80015a2:	44e1      	add	r9, ip
 80015a4:	9c02      	ldr	r4, [sp, #8]
 80015a6:	9e03      	ldr	r6, [sp, #12]
 80015a8:	46a4      	mov	ip, r4
 80015aa:	9d05      	ldr	r5, [sp, #20]
 80015ac:	4466      	add	r6, ip
 80015ae:	428e      	cmp	r6, r1
 80015b0:	4189      	sbcs	r1, r1
 80015b2:	46ac      	mov	ip, r5
 80015b4:	0412      	lsls	r2, r2, #16
 80015b6:	043c      	lsls	r4, r7, #16
 80015b8:	0c12      	lsrs	r2, r2, #16
 80015ba:	18a2      	adds	r2, r4, r2
 80015bc:	4462      	add	r2, ip
 80015be:	4249      	negs	r1, r1
 80015c0:	1854      	adds	r4, r2, r1
 80015c2:	4446      	add	r6, r8
 80015c4:	46a4      	mov	ip, r4
 80015c6:	4546      	cmp	r6, r8
 80015c8:	41a4      	sbcs	r4, r4
 80015ca:	4682      	mov	sl, r0
 80015cc:	4264      	negs	r4, r4
 80015ce:	46a0      	mov	r8, r4
 80015d0:	42aa      	cmp	r2, r5
 80015d2:	4192      	sbcs	r2, r2
 80015d4:	458c      	cmp	ip, r1
 80015d6:	4189      	sbcs	r1, r1
 80015d8:	44e2      	add	sl, ip
 80015da:	44d0      	add	r8, sl
 80015dc:	4249      	negs	r1, r1
 80015de:	4252      	negs	r2, r2
 80015e0:	430a      	orrs	r2, r1
 80015e2:	45a0      	cmp	r8, r4
 80015e4:	41a4      	sbcs	r4, r4
 80015e6:	4582      	cmp	sl, r0
 80015e8:	4189      	sbcs	r1, r1
 80015ea:	4264      	negs	r4, r4
 80015ec:	4249      	negs	r1, r1
 80015ee:	430c      	orrs	r4, r1
 80015f0:	4641      	mov	r1, r8
 80015f2:	0c3f      	lsrs	r7, r7, #16
 80015f4:	19d2      	adds	r2, r2, r7
 80015f6:	1912      	adds	r2, r2, r4
 80015f8:	0dcc      	lsrs	r4, r1, #23
 80015fa:	9904      	ldr	r1, [sp, #16]
 80015fc:	0270      	lsls	r0, r6, #9
 80015fe:	4308      	orrs	r0, r1
 8001600:	1e41      	subs	r1, r0, #1
 8001602:	4188      	sbcs	r0, r1
 8001604:	4641      	mov	r1, r8
 8001606:	444a      	add	r2, r9
 8001608:	0df6      	lsrs	r6, r6, #23
 800160a:	0252      	lsls	r2, r2, #9
 800160c:	4330      	orrs	r0, r6
 800160e:	0249      	lsls	r1, r1, #9
 8001610:	4314      	orrs	r4, r2
 8001612:	4308      	orrs	r0, r1
 8001614:	01d2      	lsls	r2, r2, #7
 8001616:	d535      	bpl.n	8001684 <__aeabi_dmul+0x514>
 8001618:	2201      	movs	r2, #1
 800161a:	0843      	lsrs	r3, r0, #1
 800161c:	4002      	ands	r2, r0
 800161e:	4313      	orrs	r3, r2
 8001620:	07e0      	lsls	r0, r4, #31
 8001622:	4318      	orrs	r0, r3
 8001624:	0864      	lsrs	r4, r4, #1
 8001626:	e634      	b.n	8001292 <__aeabi_dmul+0x122>
 8001628:	9b00      	ldr	r3, [sp, #0]
 800162a:	46a2      	mov	sl, r4
 800162c:	469b      	mov	fp, r3
 800162e:	4681      	mov	r9, r0
 8001630:	2480      	movs	r4, #128	@ 0x80
 8001632:	4653      	mov	r3, sl
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	431c      	orrs	r4, r3
 8001638:	0324      	lsls	r4, r4, #12
 800163a:	464a      	mov	r2, r9
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <__aeabi_dmul+0x588>)
 800163e:	0b24      	lsrs	r4, r4, #12
 8001640:	e5ec      	b.n	800121c <__aeabi_dmul+0xac>
 8001642:	f000 fcf3 	bl	800202c <__clzsi2>
 8001646:	2315      	movs	r3, #21
 8001648:	469c      	mov	ip, r3
 800164a:	4484      	add	ip, r0
 800164c:	0002      	movs	r2, r0
 800164e:	4663      	mov	r3, ip
 8001650:	3220      	adds	r2, #32
 8001652:	2b1c      	cmp	r3, #28
 8001654:	dc00      	bgt.n	8001658 <__aeabi_dmul+0x4e8>
 8001656:	e684      	b.n	8001362 <__aeabi_dmul+0x1f2>
 8001658:	2300      	movs	r3, #0
 800165a:	4699      	mov	r9, r3
 800165c:	0023      	movs	r3, r4
 800165e:	3808      	subs	r0, #8
 8001660:	4083      	lsls	r3, r0
 8001662:	469a      	mov	sl, r3
 8001664:	e68e      	b.n	8001384 <__aeabi_dmul+0x214>
 8001666:	f000 fce1 	bl	800202c <__clzsi2>
 800166a:	0002      	movs	r2, r0
 800166c:	0003      	movs	r3, r0
 800166e:	3215      	adds	r2, #21
 8001670:	3320      	adds	r3, #32
 8001672:	2a1c      	cmp	r2, #28
 8001674:	dc00      	bgt.n	8001678 <__aeabi_dmul+0x508>
 8001676:	e64e      	b.n	8001316 <__aeabi_dmul+0x1a6>
 8001678:	0002      	movs	r2, r0
 800167a:	0034      	movs	r4, r6
 800167c:	3a08      	subs	r2, #8
 800167e:	2000      	movs	r0, #0
 8001680:	4094      	lsls	r4, r2
 8001682:	e652      	b.n	800132a <__aeabi_dmul+0x1ba>
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	e604      	b.n	8001292 <__aeabi_dmul+0x122>
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <__aeabi_dmul+0x58c>)
 800168a:	0021      	movs	r1, r4
 800168c:	469c      	mov	ip, r3
 800168e:	0003      	movs	r3, r0
 8001690:	9d01      	ldr	r5, [sp, #4]
 8001692:	40d3      	lsrs	r3, r2
 8001694:	4465      	add	r5, ip
 8001696:	40a9      	lsls	r1, r5
 8001698:	4319      	orrs	r1, r3
 800169a:	0003      	movs	r3, r0
 800169c:	40ab      	lsls	r3, r5
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	4183      	sbcs	r3, r0
 80016a2:	4319      	orrs	r1, r3
 80016a4:	0008      	movs	r0, r1
 80016a6:	40d4      	lsrs	r4, r2
 80016a8:	074b      	lsls	r3, r1, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_dmul+0x550>
 80016ac:	230f      	movs	r3, #15
 80016ae:	400b      	ands	r3, r1
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_dmul+0x550>
 80016b4:	1d0b      	adds	r3, r1, #4
 80016b6:	428b      	cmp	r3, r1
 80016b8:	4180      	sbcs	r0, r0
 80016ba:	4240      	negs	r0, r0
 80016bc:	1824      	adds	r4, r4, r0
 80016be:	0018      	movs	r0, r3
 80016c0:	0223      	lsls	r3, r4, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dmul+0x556>
 80016c4:	e6d6      	b.n	8001474 <__aeabi_dmul+0x304>
 80016c6:	2301      	movs	r3, #1
 80016c8:	2400      	movs	r4, #0
 80016ca:	2200      	movs	r2, #0
 80016cc:	e5a6      	b.n	800121c <__aeabi_dmul+0xac>
 80016ce:	290f      	cmp	r1, #15
 80016d0:	d1aa      	bne.n	8001628 <__aeabi_dmul+0x4b8>
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	4652      	mov	r2, sl
 80016d6:	031b      	lsls	r3, r3, #12
 80016d8:	421a      	tst	r2, r3
 80016da:	d0a9      	beq.n	8001630 <__aeabi_dmul+0x4c0>
 80016dc:	421c      	tst	r4, r3
 80016de:	d1a7      	bne.n	8001630 <__aeabi_dmul+0x4c0>
 80016e0:	431c      	orrs	r4, r3
 80016e2:	9b00      	ldr	r3, [sp, #0]
 80016e4:	0002      	movs	r2, r0
 80016e6:	469b      	mov	fp, r3
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <__aeabi_dmul+0x588>)
 80016ea:	e597      	b.n	800121c <__aeabi_dmul+0xac>
 80016ec:	2400      	movs	r4, #0
 80016ee:	e6c1      	b.n	8001474 <__aeabi_dmul+0x304>
 80016f0:	2400      	movs	r4, #0
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <__aeabi_dmul+0x588>)
 80016f4:	0022      	movs	r2, r4
 80016f6:	e591      	b.n	800121c <__aeabi_dmul+0xac>
 80016f8:	000007ff 	.word	0x000007ff
 80016fc:	0000041e 	.word	0x0000041e

08001700 <__aeabi_dsub>:
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	464e      	mov	r6, r9
 8001704:	4645      	mov	r5, r8
 8001706:	46de      	mov	lr, fp
 8001708:	4657      	mov	r7, sl
 800170a:	b5e0      	push	{r5, r6, r7, lr}
 800170c:	b085      	sub	sp, #20
 800170e:	9000      	str	r0, [sp, #0]
 8001710:	9101      	str	r1, [sp, #4]
 8001712:	030c      	lsls	r4, r1, #12
 8001714:	004f      	lsls	r7, r1, #1
 8001716:	0fce      	lsrs	r6, r1, #31
 8001718:	0a61      	lsrs	r1, r4, #9
 800171a:	9c00      	ldr	r4, [sp, #0]
 800171c:	46b0      	mov	r8, r6
 800171e:	0f64      	lsrs	r4, r4, #29
 8001720:	430c      	orrs	r4, r1
 8001722:	9900      	ldr	r1, [sp, #0]
 8001724:	0d7f      	lsrs	r7, r7, #21
 8001726:	00c8      	lsls	r0, r1, #3
 8001728:	0011      	movs	r1, r2
 800172a:	001a      	movs	r2, r3
 800172c:	031b      	lsls	r3, r3, #12
 800172e:	469c      	mov	ip, r3
 8001730:	9100      	str	r1, [sp, #0]
 8001732:	9201      	str	r2, [sp, #4]
 8001734:	0051      	lsls	r1, r2, #1
 8001736:	0d4b      	lsrs	r3, r1, #21
 8001738:	4699      	mov	r9, r3
 800173a:	9b01      	ldr	r3, [sp, #4]
 800173c:	9d00      	ldr	r5, [sp, #0]
 800173e:	0fd9      	lsrs	r1, r3, #31
 8001740:	4663      	mov	r3, ip
 8001742:	0f6a      	lsrs	r2, r5, #29
 8001744:	0a5b      	lsrs	r3, r3, #9
 8001746:	4313      	orrs	r3, r2
 8001748:	00ea      	lsls	r2, r5, #3
 800174a:	4694      	mov	ip, r2
 800174c:	4693      	mov	fp, r2
 800174e:	4ac1      	ldr	r2, [pc, #772]	@ (8001a54 <__aeabi_dsub+0x354>)
 8001750:	9003      	str	r0, [sp, #12]
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	4591      	cmp	r9, r2
 8001756:	d100      	bne.n	800175a <__aeabi_dsub+0x5a>
 8001758:	e0cd      	b.n	80018f6 <__aeabi_dsub+0x1f6>
 800175a:	2501      	movs	r5, #1
 800175c:	4069      	eors	r1, r5
 800175e:	464d      	mov	r5, r9
 8001760:	1b7d      	subs	r5, r7, r5
 8001762:	46aa      	mov	sl, r5
 8001764:	428e      	cmp	r6, r1
 8001766:	d100      	bne.n	800176a <__aeabi_dsub+0x6a>
 8001768:	e080      	b.n	800186c <__aeabi_dsub+0x16c>
 800176a:	2d00      	cmp	r5, #0
 800176c:	dc00      	bgt.n	8001770 <__aeabi_dsub+0x70>
 800176e:	e335      	b.n	8001ddc <__aeabi_dsub+0x6dc>
 8001770:	4649      	mov	r1, r9
 8001772:	2900      	cmp	r1, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dsub+0x78>
 8001776:	e0df      	b.n	8001938 <__aeabi_dsub+0x238>
 8001778:	4297      	cmp	r7, r2
 800177a:	d100      	bne.n	800177e <__aeabi_dsub+0x7e>
 800177c:	e194      	b.n	8001aa8 <__aeabi_dsub+0x3a8>
 800177e:	4652      	mov	r2, sl
 8001780:	2501      	movs	r5, #1
 8001782:	2a38      	cmp	r2, #56	@ 0x38
 8001784:	dc19      	bgt.n	80017ba <__aeabi_dsub+0xba>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	9b02      	ldr	r3, [sp, #8]
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	4313      	orrs	r3, r2
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	4652      	mov	r2, sl
 8001792:	2a1f      	cmp	r2, #31
 8001794:	dd00      	ble.n	8001798 <__aeabi_dsub+0x98>
 8001796:	e1e3      	b.n	8001b60 <__aeabi_dsub+0x460>
 8001798:	4653      	mov	r3, sl
 800179a:	2220      	movs	r2, #32
 800179c:	4661      	mov	r1, ip
 800179e:	9d02      	ldr	r5, [sp, #8]
 80017a0:	1ad2      	subs	r2, r2, r3
 80017a2:	4095      	lsls	r5, r2
 80017a4:	40d9      	lsrs	r1, r3
 80017a6:	430d      	orrs	r5, r1
 80017a8:	4661      	mov	r1, ip
 80017aa:	4091      	lsls	r1, r2
 80017ac:	000a      	movs	r2, r1
 80017ae:	1e51      	subs	r1, r2, #1
 80017b0:	418a      	sbcs	r2, r1
 80017b2:	4315      	orrs	r5, r2
 80017b4:	9a02      	ldr	r2, [sp, #8]
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	1aa4      	subs	r4, r4, r2
 80017ba:	1b45      	subs	r5, r0, r5
 80017bc:	42a8      	cmp	r0, r5
 80017be:	4180      	sbcs	r0, r0
 80017c0:	4240      	negs	r0, r0
 80017c2:	1a24      	subs	r4, r4, r0
 80017c4:	0223      	lsls	r3, r4, #8
 80017c6:	d400      	bmi.n	80017ca <__aeabi_dsub+0xca>
 80017c8:	e13d      	b.n	8001a46 <__aeabi_dsub+0x346>
 80017ca:	0264      	lsls	r4, r4, #9
 80017cc:	0a64      	lsrs	r4, r4, #9
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0xd4>
 80017d2:	e147      	b.n	8001a64 <__aeabi_dsub+0x364>
 80017d4:	0020      	movs	r0, r4
 80017d6:	f000 fc29 	bl	800202c <__clzsi2>
 80017da:	0003      	movs	r3, r0
 80017dc:	3b08      	subs	r3, #8
 80017de:	2120      	movs	r1, #32
 80017e0:	0028      	movs	r0, r5
 80017e2:	1aca      	subs	r2, r1, r3
 80017e4:	40d0      	lsrs	r0, r2
 80017e6:	409c      	lsls	r4, r3
 80017e8:	0002      	movs	r2, r0
 80017ea:	409d      	lsls	r5, r3
 80017ec:	4322      	orrs	r2, r4
 80017ee:	429f      	cmp	r7, r3
 80017f0:	dd00      	ble.n	80017f4 <__aeabi_dsub+0xf4>
 80017f2:	e177      	b.n	8001ae4 <__aeabi_dsub+0x3e4>
 80017f4:	1bd8      	subs	r0, r3, r7
 80017f6:	3001      	adds	r0, #1
 80017f8:	1a09      	subs	r1, r1, r0
 80017fa:	002c      	movs	r4, r5
 80017fc:	408d      	lsls	r5, r1
 80017fe:	40c4      	lsrs	r4, r0
 8001800:	1e6b      	subs	r3, r5, #1
 8001802:	419d      	sbcs	r5, r3
 8001804:	0013      	movs	r3, r2
 8001806:	40c2      	lsrs	r2, r0
 8001808:	408b      	lsls	r3, r1
 800180a:	4325      	orrs	r5, r4
 800180c:	2700      	movs	r7, #0
 800180e:	0014      	movs	r4, r2
 8001810:	431d      	orrs	r5, r3
 8001812:	076b      	lsls	r3, r5, #29
 8001814:	d009      	beq.n	800182a <__aeabi_dsub+0x12a>
 8001816:	230f      	movs	r3, #15
 8001818:	402b      	ands	r3, r5
 800181a:	2b04      	cmp	r3, #4
 800181c:	d005      	beq.n	800182a <__aeabi_dsub+0x12a>
 800181e:	1d2b      	adds	r3, r5, #4
 8001820:	42ab      	cmp	r3, r5
 8001822:	41ad      	sbcs	r5, r5
 8001824:	426d      	negs	r5, r5
 8001826:	1964      	adds	r4, r4, r5
 8001828:	001d      	movs	r5, r3
 800182a:	0223      	lsls	r3, r4, #8
 800182c:	d400      	bmi.n	8001830 <__aeabi_dsub+0x130>
 800182e:	e140      	b.n	8001ab2 <__aeabi_dsub+0x3b2>
 8001830:	4a88      	ldr	r2, [pc, #544]	@ (8001a54 <__aeabi_dsub+0x354>)
 8001832:	3701      	adds	r7, #1
 8001834:	4297      	cmp	r7, r2
 8001836:	d100      	bne.n	800183a <__aeabi_dsub+0x13a>
 8001838:	e101      	b.n	8001a3e <__aeabi_dsub+0x33e>
 800183a:	2601      	movs	r6, #1
 800183c:	4643      	mov	r3, r8
 800183e:	4986      	ldr	r1, [pc, #536]	@ (8001a58 <__aeabi_dsub+0x358>)
 8001840:	08ed      	lsrs	r5, r5, #3
 8001842:	4021      	ands	r1, r4
 8001844:	074a      	lsls	r2, r1, #29
 8001846:	432a      	orrs	r2, r5
 8001848:	057c      	lsls	r4, r7, #21
 800184a:	024d      	lsls	r5, r1, #9
 800184c:	0b2d      	lsrs	r5, r5, #12
 800184e:	0d64      	lsrs	r4, r4, #21
 8001850:	401e      	ands	r6, r3
 8001852:	0524      	lsls	r4, r4, #20
 8001854:	432c      	orrs	r4, r5
 8001856:	07f6      	lsls	r6, r6, #31
 8001858:	4334      	orrs	r4, r6
 800185a:	0010      	movs	r0, r2
 800185c:	0021      	movs	r1, r4
 800185e:	b005      	add	sp, #20
 8001860:	bcf0      	pop	{r4, r5, r6, r7}
 8001862:	46bb      	mov	fp, r7
 8001864:	46b2      	mov	sl, r6
 8001866:	46a9      	mov	r9, r5
 8001868:	46a0      	mov	r8, r4
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	2d00      	cmp	r5, #0
 800186e:	dc00      	bgt.n	8001872 <__aeabi_dsub+0x172>
 8001870:	e2d0      	b.n	8001e14 <__aeabi_dsub+0x714>
 8001872:	4649      	mov	r1, r9
 8001874:	2900      	cmp	r1, #0
 8001876:	d000      	beq.n	800187a <__aeabi_dsub+0x17a>
 8001878:	e0d4      	b.n	8001a24 <__aeabi_dsub+0x324>
 800187a:	4661      	mov	r1, ip
 800187c:	9b02      	ldr	r3, [sp, #8]
 800187e:	4319      	orrs	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_dsub+0x184>
 8001882:	e12b      	b.n	8001adc <__aeabi_dsub+0x3dc>
 8001884:	1e69      	subs	r1, r5, #1
 8001886:	2d01      	cmp	r5, #1
 8001888:	d100      	bne.n	800188c <__aeabi_dsub+0x18c>
 800188a:	e1d9      	b.n	8001c40 <__aeabi_dsub+0x540>
 800188c:	4295      	cmp	r5, r2
 800188e:	d100      	bne.n	8001892 <__aeabi_dsub+0x192>
 8001890:	e10a      	b.n	8001aa8 <__aeabi_dsub+0x3a8>
 8001892:	2501      	movs	r5, #1
 8001894:	2938      	cmp	r1, #56	@ 0x38
 8001896:	dc17      	bgt.n	80018c8 <__aeabi_dsub+0x1c8>
 8001898:	468a      	mov	sl, r1
 800189a:	4653      	mov	r3, sl
 800189c:	2b1f      	cmp	r3, #31
 800189e:	dd00      	ble.n	80018a2 <__aeabi_dsub+0x1a2>
 80018a0:	e1e7      	b.n	8001c72 <__aeabi_dsub+0x572>
 80018a2:	2220      	movs	r2, #32
 80018a4:	1ad2      	subs	r2, r2, r3
 80018a6:	9b02      	ldr	r3, [sp, #8]
 80018a8:	4661      	mov	r1, ip
 80018aa:	4093      	lsls	r3, r2
 80018ac:	001d      	movs	r5, r3
 80018ae:	4653      	mov	r3, sl
 80018b0:	40d9      	lsrs	r1, r3
 80018b2:	4663      	mov	r3, ip
 80018b4:	4093      	lsls	r3, r2
 80018b6:	001a      	movs	r2, r3
 80018b8:	430d      	orrs	r5, r1
 80018ba:	1e51      	subs	r1, r2, #1
 80018bc:	418a      	sbcs	r2, r1
 80018be:	4653      	mov	r3, sl
 80018c0:	4315      	orrs	r5, r2
 80018c2:	9a02      	ldr	r2, [sp, #8]
 80018c4:	40da      	lsrs	r2, r3
 80018c6:	18a4      	adds	r4, r4, r2
 80018c8:	182d      	adds	r5, r5, r0
 80018ca:	4285      	cmp	r5, r0
 80018cc:	4180      	sbcs	r0, r0
 80018ce:	4240      	negs	r0, r0
 80018d0:	1824      	adds	r4, r4, r0
 80018d2:	0223      	lsls	r3, r4, #8
 80018d4:	d400      	bmi.n	80018d8 <__aeabi_dsub+0x1d8>
 80018d6:	e0b6      	b.n	8001a46 <__aeabi_dsub+0x346>
 80018d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a54 <__aeabi_dsub+0x354>)
 80018da:	3701      	adds	r7, #1
 80018dc:	429f      	cmp	r7, r3
 80018de:	d100      	bne.n	80018e2 <__aeabi_dsub+0x1e2>
 80018e0:	e0ad      	b.n	8001a3e <__aeabi_dsub+0x33e>
 80018e2:	2101      	movs	r1, #1
 80018e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001a58 <__aeabi_dsub+0x358>)
 80018e6:	086a      	lsrs	r2, r5, #1
 80018e8:	401c      	ands	r4, r3
 80018ea:	4029      	ands	r1, r5
 80018ec:	430a      	orrs	r2, r1
 80018ee:	07e5      	lsls	r5, r4, #31
 80018f0:	4315      	orrs	r5, r2
 80018f2:	0864      	lsrs	r4, r4, #1
 80018f4:	e78d      	b.n	8001812 <__aeabi_dsub+0x112>
 80018f6:	4a59      	ldr	r2, [pc, #356]	@ (8001a5c <__aeabi_dsub+0x35c>)
 80018f8:	9b02      	ldr	r3, [sp, #8]
 80018fa:	4692      	mov	sl, r2
 80018fc:	4662      	mov	r2, ip
 80018fe:	44ba      	add	sl, r7
 8001900:	431a      	orrs	r2, r3
 8001902:	d02c      	beq.n	800195e <__aeabi_dsub+0x25e>
 8001904:	428e      	cmp	r6, r1
 8001906:	d02e      	beq.n	8001966 <__aeabi_dsub+0x266>
 8001908:	4652      	mov	r2, sl
 800190a:	2a00      	cmp	r2, #0
 800190c:	d060      	beq.n	80019d0 <__aeabi_dsub+0x2d0>
 800190e:	2f00      	cmp	r7, #0
 8001910:	d100      	bne.n	8001914 <__aeabi_dsub+0x214>
 8001912:	e0db      	b.n	8001acc <__aeabi_dsub+0x3cc>
 8001914:	4663      	mov	r3, ip
 8001916:	000e      	movs	r6, r1
 8001918:	9c02      	ldr	r4, [sp, #8]
 800191a:	08d8      	lsrs	r0, r3, #3
 800191c:	0762      	lsls	r2, r4, #29
 800191e:	4302      	orrs	r2, r0
 8001920:	08e4      	lsrs	r4, r4, #3
 8001922:	0013      	movs	r3, r2
 8001924:	4323      	orrs	r3, r4
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x22a>
 8001928:	e254      	b.n	8001dd4 <__aeabi_dsub+0x6d4>
 800192a:	2580      	movs	r5, #128	@ 0x80
 800192c:	032d      	lsls	r5, r5, #12
 800192e:	4325      	orrs	r5, r4
 8001930:	032d      	lsls	r5, r5, #12
 8001932:	4c48      	ldr	r4, [pc, #288]	@ (8001a54 <__aeabi_dsub+0x354>)
 8001934:	0b2d      	lsrs	r5, r5, #12
 8001936:	e78c      	b.n	8001852 <__aeabi_dsub+0x152>
 8001938:	4661      	mov	r1, ip
 800193a:	9b02      	ldr	r3, [sp, #8]
 800193c:	4319      	orrs	r1, r3
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x242>
 8001940:	e0cc      	b.n	8001adc <__aeabi_dsub+0x3dc>
 8001942:	0029      	movs	r1, r5
 8001944:	3901      	subs	r1, #1
 8001946:	2d01      	cmp	r5, #1
 8001948:	d100      	bne.n	800194c <__aeabi_dsub+0x24c>
 800194a:	e188      	b.n	8001c5e <__aeabi_dsub+0x55e>
 800194c:	4295      	cmp	r5, r2
 800194e:	d100      	bne.n	8001952 <__aeabi_dsub+0x252>
 8001950:	e0aa      	b.n	8001aa8 <__aeabi_dsub+0x3a8>
 8001952:	2501      	movs	r5, #1
 8001954:	2938      	cmp	r1, #56	@ 0x38
 8001956:	dd00      	ble.n	800195a <__aeabi_dsub+0x25a>
 8001958:	e72f      	b.n	80017ba <__aeabi_dsub+0xba>
 800195a:	468a      	mov	sl, r1
 800195c:	e718      	b.n	8001790 <__aeabi_dsub+0x90>
 800195e:	2201      	movs	r2, #1
 8001960:	4051      	eors	r1, r2
 8001962:	428e      	cmp	r6, r1
 8001964:	d1d0      	bne.n	8001908 <__aeabi_dsub+0x208>
 8001966:	4653      	mov	r3, sl
 8001968:	2b00      	cmp	r3, #0
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x26e>
 800196c:	e0be      	b.n	8001aec <__aeabi_dsub+0x3ec>
 800196e:	2f00      	cmp	r7, #0
 8001970:	d000      	beq.n	8001974 <__aeabi_dsub+0x274>
 8001972:	e138      	b.n	8001be6 <__aeabi_dsub+0x4e6>
 8001974:	46ca      	mov	sl, r9
 8001976:	0022      	movs	r2, r4
 8001978:	4302      	orrs	r2, r0
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0x27e>
 800197c:	e1e2      	b.n	8001d44 <__aeabi_dsub+0x644>
 800197e:	4653      	mov	r3, sl
 8001980:	1e59      	subs	r1, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x288>
 8001986:	e20d      	b.n	8001da4 <__aeabi_dsub+0x6a4>
 8001988:	4a32      	ldr	r2, [pc, #200]	@ (8001a54 <__aeabi_dsub+0x354>)
 800198a:	4592      	cmp	sl, r2
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x290>
 800198e:	e1d2      	b.n	8001d36 <__aeabi_dsub+0x636>
 8001990:	2701      	movs	r7, #1
 8001992:	2938      	cmp	r1, #56	@ 0x38
 8001994:	dc13      	bgt.n	80019be <__aeabi_dsub+0x2be>
 8001996:	291f      	cmp	r1, #31
 8001998:	dd00      	ble.n	800199c <__aeabi_dsub+0x29c>
 800199a:	e1ee      	b.n	8001d7a <__aeabi_dsub+0x67a>
 800199c:	2220      	movs	r2, #32
 800199e:	9b02      	ldr	r3, [sp, #8]
 80019a0:	1a52      	subs	r2, r2, r1
 80019a2:	0025      	movs	r5, r4
 80019a4:	0007      	movs	r7, r0
 80019a6:	469a      	mov	sl, r3
 80019a8:	40cc      	lsrs	r4, r1
 80019aa:	4090      	lsls	r0, r2
 80019ac:	4095      	lsls	r5, r2
 80019ae:	40cf      	lsrs	r7, r1
 80019b0:	44a2      	add	sl, r4
 80019b2:	1e42      	subs	r2, r0, #1
 80019b4:	4190      	sbcs	r0, r2
 80019b6:	4653      	mov	r3, sl
 80019b8:	432f      	orrs	r7, r5
 80019ba:	4307      	orrs	r7, r0
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	003d      	movs	r5, r7
 80019c0:	4465      	add	r5, ip
 80019c2:	4565      	cmp	r5, ip
 80019c4:	4192      	sbcs	r2, r2
 80019c6:	9b02      	ldr	r3, [sp, #8]
 80019c8:	4252      	negs	r2, r2
 80019ca:	464f      	mov	r7, r9
 80019cc:	18d4      	adds	r4, r2, r3
 80019ce:	e780      	b.n	80018d2 <__aeabi_dsub+0x1d2>
 80019d0:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <__aeabi_dsub+0x360>)
 80019d2:	1c7d      	adds	r5, r7, #1
 80019d4:	4215      	tst	r5, r2
 80019d6:	d000      	beq.n	80019da <__aeabi_dsub+0x2da>
 80019d8:	e0aa      	b.n	8001b30 <__aeabi_dsub+0x430>
 80019da:	4662      	mov	r2, ip
 80019dc:	0025      	movs	r5, r4
 80019de:	9b02      	ldr	r3, [sp, #8]
 80019e0:	4305      	orrs	r5, r0
 80019e2:	431a      	orrs	r2, r3
 80019e4:	2f00      	cmp	r7, #0
 80019e6:	d000      	beq.n	80019ea <__aeabi_dsub+0x2ea>
 80019e8:	e0f5      	b.n	8001bd6 <__aeabi_dsub+0x4d6>
 80019ea:	2d00      	cmp	r5, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x2f0>
 80019ee:	e16b      	b.n	8001cc8 <__aeabi_dsub+0x5c8>
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dsub+0x2f6>
 80019f4:	e152      	b.n	8001c9c <__aeabi_dsub+0x59c>
 80019f6:	4663      	mov	r3, ip
 80019f8:	1ac5      	subs	r5, r0, r3
 80019fa:	9b02      	ldr	r3, [sp, #8]
 80019fc:	1ae2      	subs	r2, r4, r3
 80019fe:	42a8      	cmp	r0, r5
 8001a00:	419b      	sbcs	r3, r3
 8001a02:	425b      	negs	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	021a      	lsls	r2, r3, #8
 8001a08:	d400      	bmi.n	8001a0c <__aeabi_dsub+0x30c>
 8001a0a:	e1d5      	b.n	8001db8 <__aeabi_dsub+0x6b8>
 8001a0c:	4663      	mov	r3, ip
 8001a0e:	1a1d      	subs	r5, r3, r0
 8001a10:	45ac      	cmp	ip, r5
 8001a12:	4192      	sbcs	r2, r2
 8001a14:	2601      	movs	r6, #1
 8001a16:	9b02      	ldr	r3, [sp, #8]
 8001a18:	4252      	negs	r2, r2
 8001a1a:	1b1c      	subs	r4, r3, r4
 8001a1c:	4688      	mov	r8, r1
 8001a1e:	1aa4      	subs	r4, r4, r2
 8001a20:	400e      	ands	r6, r1
 8001a22:	e6f6      	b.n	8001812 <__aeabi_dsub+0x112>
 8001a24:	4297      	cmp	r7, r2
 8001a26:	d03f      	beq.n	8001aa8 <__aeabi_dsub+0x3a8>
 8001a28:	4652      	mov	r2, sl
 8001a2a:	2501      	movs	r5, #1
 8001a2c:	2a38      	cmp	r2, #56	@ 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x332>
 8001a30:	e74a      	b.n	80018c8 <__aeabi_dsub+0x1c8>
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	9b02      	ldr	r3, [sp, #8]
 8001a36:	0412      	lsls	r2, r2, #16
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	e72d      	b.n	800189a <__aeabi_dsub+0x19a>
 8001a3e:	003c      	movs	r4, r7
 8001a40:	2500      	movs	r5, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	e705      	b.n	8001852 <__aeabi_dsub+0x152>
 8001a46:	2307      	movs	r3, #7
 8001a48:	402b      	ands	r3, r5
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dsub+0x350>
 8001a4e:	e6e2      	b.n	8001816 <__aeabi_dsub+0x116>
 8001a50:	e06b      	b.n	8001b2a <__aeabi_dsub+0x42a>
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	000007ff 	.word	0x000007ff
 8001a58:	ff7fffff 	.word	0xff7fffff
 8001a5c:	fffff801 	.word	0xfffff801
 8001a60:	000007fe 	.word	0x000007fe
 8001a64:	0028      	movs	r0, r5
 8001a66:	f000 fae1 	bl	800202c <__clzsi2>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	2b1f      	cmp	r3, #31
 8001a70:	dc00      	bgt.n	8001a74 <__aeabi_dsub+0x374>
 8001a72:	e6b4      	b.n	80017de <__aeabi_dsub+0xde>
 8001a74:	002a      	movs	r2, r5
 8001a76:	3808      	subs	r0, #8
 8001a78:	4082      	lsls	r2, r0
 8001a7a:	429f      	cmp	r7, r3
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dsub+0x380>
 8001a7e:	e0b9      	b.n	8001bf4 <__aeabi_dsub+0x4f4>
 8001a80:	1bdb      	subs	r3, r3, r7
 8001a82:	1c58      	adds	r0, r3, #1
 8001a84:	281f      	cmp	r0, #31
 8001a86:	dc00      	bgt.n	8001a8a <__aeabi_dsub+0x38a>
 8001a88:	e1a0      	b.n	8001dcc <__aeabi_dsub+0x6cc>
 8001a8a:	0015      	movs	r5, r2
 8001a8c:	3b1f      	subs	r3, #31
 8001a8e:	40dd      	lsrs	r5, r3
 8001a90:	2820      	cmp	r0, #32
 8001a92:	d005      	beq.n	8001aa0 <__aeabi_dsub+0x3a0>
 8001a94:	2340      	movs	r3, #64	@ 0x40
 8001a96:	1a1b      	subs	r3, r3, r0
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	1e53      	subs	r3, r2, #1
 8001a9c:	419a      	sbcs	r2, r3
 8001a9e:	4315      	orrs	r5, r2
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	2700      	movs	r7, #0
 8001aa4:	402b      	ands	r3, r5
 8001aa6:	e7d0      	b.n	8001a4a <__aeabi_dsub+0x34a>
 8001aa8:	08c0      	lsrs	r0, r0, #3
 8001aaa:	0762      	lsls	r2, r4, #29
 8001aac:	4302      	orrs	r2, r0
 8001aae:	08e4      	lsrs	r4, r4, #3
 8001ab0:	e737      	b.n	8001922 <__aeabi_dsub+0x222>
 8001ab2:	08ea      	lsrs	r2, r5, #3
 8001ab4:	0763      	lsls	r3, r4, #29
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	4bd3      	ldr	r3, [pc, #844]	@ (8001e08 <__aeabi_dsub+0x708>)
 8001aba:	08e4      	lsrs	r4, r4, #3
 8001abc:	429f      	cmp	r7, r3
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x3c2>
 8001ac0:	e72f      	b.n	8001922 <__aeabi_dsub+0x222>
 8001ac2:	0324      	lsls	r4, r4, #12
 8001ac4:	0b25      	lsrs	r5, r4, #12
 8001ac6:	057c      	lsls	r4, r7, #21
 8001ac8:	0d64      	lsrs	r4, r4, #21
 8001aca:	e6c2      	b.n	8001852 <__aeabi_dsub+0x152>
 8001acc:	46ca      	mov	sl, r9
 8001ace:	0022      	movs	r2, r4
 8001ad0:	4302      	orrs	r2, r0
 8001ad2:	d158      	bne.n	8001b86 <__aeabi_dsub+0x486>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	000e      	movs	r6, r1
 8001ad8:	9c02      	ldr	r4, [sp, #8]
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	9b03      	ldr	r3, [sp, #12]
 8001ade:	4657      	mov	r7, sl
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	e7e7      	b.n	8001ab4 <__aeabi_dsub+0x3b4>
 8001ae4:	4cc9      	ldr	r4, [pc, #804]	@ (8001e0c <__aeabi_dsub+0x70c>)
 8001ae6:	1aff      	subs	r7, r7, r3
 8001ae8:	4014      	ands	r4, r2
 8001aea:	e692      	b.n	8001812 <__aeabi_dsub+0x112>
 8001aec:	4dc8      	ldr	r5, [pc, #800]	@ (8001e10 <__aeabi_dsub+0x710>)
 8001aee:	1c7a      	adds	r2, r7, #1
 8001af0:	422a      	tst	r2, r5
 8001af2:	d000      	beq.n	8001af6 <__aeabi_dsub+0x3f6>
 8001af4:	e084      	b.n	8001c00 <__aeabi_dsub+0x500>
 8001af6:	0022      	movs	r2, r4
 8001af8:	4302      	orrs	r2, r0
 8001afa:	2f00      	cmp	r7, #0
 8001afc:	d000      	beq.n	8001b00 <__aeabi_dsub+0x400>
 8001afe:	e0ef      	b.n	8001ce0 <__aeabi_dsub+0x5e0>
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x406>
 8001b04:	e0e5      	b.n	8001cd2 <__aeabi_dsub+0x5d2>
 8001b06:	4662      	mov	r2, ip
 8001b08:	9902      	ldr	r1, [sp, #8]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x410>
 8001b0e:	e0c5      	b.n	8001c9c <__aeabi_dsub+0x59c>
 8001b10:	4663      	mov	r3, ip
 8001b12:	18c5      	adds	r5, r0, r3
 8001b14:	468c      	mov	ip, r1
 8001b16:	4285      	cmp	r5, r0
 8001b18:	4180      	sbcs	r0, r0
 8001b1a:	4464      	add	r4, ip
 8001b1c:	4240      	negs	r0, r0
 8001b1e:	1824      	adds	r4, r4, r0
 8001b20:	0223      	lsls	r3, r4, #8
 8001b22:	d502      	bpl.n	8001b2a <__aeabi_dsub+0x42a>
 8001b24:	4bb9      	ldr	r3, [pc, #740]	@ (8001e0c <__aeabi_dsub+0x70c>)
 8001b26:	3701      	adds	r7, #1
 8001b28:	401c      	ands	r4, r3
 8001b2a:	46ba      	mov	sl, r7
 8001b2c:	9503      	str	r5, [sp, #12]
 8001b2e:	e7d5      	b.n	8001adc <__aeabi_dsub+0x3dc>
 8001b30:	4662      	mov	r2, ip
 8001b32:	1a85      	subs	r5, r0, r2
 8001b34:	42a8      	cmp	r0, r5
 8001b36:	4192      	sbcs	r2, r2
 8001b38:	4252      	negs	r2, r2
 8001b3a:	4691      	mov	r9, r2
 8001b3c:	9b02      	ldr	r3, [sp, #8]
 8001b3e:	1ae3      	subs	r3, r4, r3
 8001b40:	001a      	movs	r2, r3
 8001b42:	464b      	mov	r3, r9
 8001b44:	1ad2      	subs	r2, r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	4691      	mov	r9, r2
 8001b4a:	021a      	lsls	r2, r3, #8
 8001b4c:	d46c      	bmi.n	8001c28 <__aeabi_dsub+0x528>
 8001b4e:	464a      	mov	r2, r9
 8001b50:	464c      	mov	r4, r9
 8001b52:	432a      	orrs	r2, r5
 8001b54:	d000      	beq.n	8001b58 <__aeabi_dsub+0x458>
 8001b56:	e63a      	b.n	80017ce <__aeabi_dsub+0xce>
 8001b58:	2600      	movs	r6, #0
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	2500      	movs	r5, #0
 8001b5e:	e678      	b.n	8001852 <__aeabi_dsub+0x152>
 8001b60:	9902      	ldr	r1, [sp, #8]
 8001b62:	4653      	mov	r3, sl
 8001b64:	000d      	movs	r5, r1
 8001b66:	3a20      	subs	r2, #32
 8001b68:	40d5      	lsrs	r5, r2
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d006      	beq.n	8001b7c <__aeabi_dsub+0x47c>
 8001b6e:	2240      	movs	r2, #64	@ 0x40
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	000b      	movs	r3, r1
 8001b74:	4093      	lsls	r3, r2
 8001b76:	4662      	mov	r2, ip
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	4693      	mov	fp, r2
 8001b7c:	465b      	mov	r3, fp
 8001b7e:	1e5a      	subs	r2, r3, #1
 8001b80:	4193      	sbcs	r3, r2
 8001b82:	431d      	orrs	r5, r3
 8001b84:	e619      	b.n	80017ba <__aeabi_dsub+0xba>
 8001b86:	4653      	mov	r3, sl
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x490>
 8001b8e:	e0c6      	b.n	8001d1e <__aeabi_dsub+0x61e>
 8001b90:	4e9d      	ldr	r6, [pc, #628]	@ (8001e08 <__aeabi_dsub+0x708>)
 8001b92:	45b2      	cmp	sl, r6
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x498>
 8001b96:	e6bd      	b.n	8001914 <__aeabi_dsub+0x214>
 8001b98:	4688      	mov	r8, r1
 8001b9a:	000e      	movs	r6, r1
 8001b9c:	2501      	movs	r5, #1
 8001b9e:	2a38      	cmp	r2, #56	@ 0x38
 8001ba0:	dc10      	bgt.n	8001bc4 <__aeabi_dsub+0x4c4>
 8001ba2:	2a1f      	cmp	r2, #31
 8001ba4:	dc7f      	bgt.n	8001ca6 <__aeabi_dsub+0x5a6>
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	0025      	movs	r5, r4
 8001baa:	1a89      	subs	r1, r1, r2
 8001bac:	0007      	movs	r7, r0
 8001bae:	4088      	lsls	r0, r1
 8001bb0:	408d      	lsls	r5, r1
 8001bb2:	40d7      	lsrs	r7, r2
 8001bb4:	40d4      	lsrs	r4, r2
 8001bb6:	1e41      	subs	r1, r0, #1
 8001bb8:	4188      	sbcs	r0, r1
 8001bba:	9b02      	ldr	r3, [sp, #8]
 8001bbc:	433d      	orrs	r5, r7
 8001bbe:	1b1b      	subs	r3, r3, r4
 8001bc0:	4305      	orrs	r5, r0
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	4662      	mov	r2, ip
 8001bc6:	1b55      	subs	r5, r2, r5
 8001bc8:	45ac      	cmp	ip, r5
 8001bca:	4192      	sbcs	r2, r2
 8001bcc:	9b02      	ldr	r3, [sp, #8]
 8001bce:	4252      	negs	r2, r2
 8001bd0:	464f      	mov	r7, r9
 8001bd2:	1a9c      	subs	r4, r3, r2
 8001bd4:	e5f6      	b.n	80017c4 <__aeabi_dsub+0xc4>
 8001bd6:	2d00      	cmp	r5, #0
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_dsub+0x4dc>
 8001bda:	e0b7      	b.n	8001d4c <__aeabi_dsub+0x64c>
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x4e2>
 8001be0:	e0f0      	b.n	8001dc4 <__aeabi_dsub+0x6c4>
 8001be2:	2601      	movs	r6, #1
 8001be4:	400e      	ands	r6, r1
 8001be6:	4663      	mov	r3, ip
 8001be8:	9802      	ldr	r0, [sp, #8]
 8001bea:	08d9      	lsrs	r1, r3, #3
 8001bec:	0742      	lsls	r2, r0, #29
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	08c4      	lsrs	r4, r0, #3
 8001bf2:	e696      	b.n	8001922 <__aeabi_dsub+0x222>
 8001bf4:	4c85      	ldr	r4, [pc, #532]	@ (8001e0c <__aeabi_dsub+0x70c>)
 8001bf6:	1aff      	subs	r7, r7, r3
 8001bf8:	4014      	ands	r4, r2
 8001bfa:	0762      	lsls	r2, r4, #29
 8001bfc:	08e4      	lsrs	r4, r4, #3
 8001bfe:	e760      	b.n	8001ac2 <__aeabi_dsub+0x3c2>
 8001c00:	4981      	ldr	r1, [pc, #516]	@ (8001e08 <__aeabi_dsub+0x708>)
 8001c02:	428a      	cmp	r2, r1
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x508>
 8001c06:	e0c9      	b.n	8001d9c <__aeabi_dsub+0x69c>
 8001c08:	4663      	mov	r3, ip
 8001c0a:	18c1      	adds	r1, r0, r3
 8001c0c:	4281      	cmp	r1, r0
 8001c0e:	4180      	sbcs	r0, r0
 8001c10:	9b02      	ldr	r3, [sp, #8]
 8001c12:	4240      	negs	r0, r0
 8001c14:	18e3      	adds	r3, r4, r3
 8001c16:	181b      	adds	r3, r3, r0
 8001c18:	07dd      	lsls	r5, r3, #31
 8001c1a:	085c      	lsrs	r4, r3, #1
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	0849      	lsrs	r1, r1, #1
 8001c20:	430d      	orrs	r5, r1
 8001c22:	0017      	movs	r7, r2
 8001c24:	402b      	ands	r3, r5
 8001c26:	e710      	b.n	8001a4a <__aeabi_dsub+0x34a>
 8001c28:	4663      	mov	r3, ip
 8001c2a:	1a1d      	subs	r5, r3, r0
 8001c2c:	45ac      	cmp	ip, r5
 8001c2e:	4192      	sbcs	r2, r2
 8001c30:	2601      	movs	r6, #1
 8001c32:	9b02      	ldr	r3, [sp, #8]
 8001c34:	4252      	negs	r2, r2
 8001c36:	1b1c      	subs	r4, r3, r4
 8001c38:	4688      	mov	r8, r1
 8001c3a:	1aa4      	subs	r4, r4, r2
 8001c3c:	400e      	ands	r6, r1
 8001c3e:	e5c6      	b.n	80017ce <__aeabi_dsub+0xce>
 8001c40:	4663      	mov	r3, ip
 8001c42:	18c5      	adds	r5, r0, r3
 8001c44:	9b02      	ldr	r3, [sp, #8]
 8001c46:	4285      	cmp	r5, r0
 8001c48:	4180      	sbcs	r0, r0
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	4240      	negs	r0, r0
 8001c4e:	4464      	add	r4, ip
 8001c50:	1824      	adds	r4, r4, r0
 8001c52:	2701      	movs	r7, #1
 8001c54:	0223      	lsls	r3, r4, #8
 8001c56:	d400      	bmi.n	8001c5a <__aeabi_dsub+0x55a>
 8001c58:	e6f5      	b.n	8001a46 <__aeabi_dsub+0x346>
 8001c5a:	2702      	movs	r7, #2
 8001c5c:	e641      	b.n	80018e2 <__aeabi_dsub+0x1e2>
 8001c5e:	4663      	mov	r3, ip
 8001c60:	1ac5      	subs	r5, r0, r3
 8001c62:	42a8      	cmp	r0, r5
 8001c64:	4180      	sbcs	r0, r0
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4240      	negs	r0, r0
 8001c6a:	1ae4      	subs	r4, r4, r3
 8001c6c:	2701      	movs	r7, #1
 8001c6e:	1a24      	subs	r4, r4, r0
 8001c70:	e5a8      	b.n	80017c4 <__aeabi_dsub+0xc4>
 8001c72:	9d02      	ldr	r5, [sp, #8]
 8001c74:	4652      	mov	r2, sl
 8001c76:	002b      	movs	r3, r5
 8001c78:	3a20      	subs	r2, #32
 8001c7a:	40d3      	lsrs	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d006      	beq.n	8001c92 <__aeabi_dsub+0x592>
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	002b      	movs	r3, r5
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	4662      	mov	r2, ip
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	4693      	mov	fp, r2
 8001c92:	465d      	mov	r5, fp
 8001c94:	1e6b      	subs	r3, r5, #1
 8001c96:	419d      	sbcs	r5, r3
 8001c98:	430d      	orrs	r5, r1
 8001c9a:	e615      	b.n	80018c8 <__aeabi_dsub+0x1c8>
 8001c9c:	0762      	lsls	r2, r4, #29
 8001c9e:	08c0      	lsrs	r0, r0, #3
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	08e4      	lsrs	r4, r4, #3
 8001ca4:	e70d      	b.n	8001ac2 <__aeabi_dsub+0x3c2>
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0027      	movs	r7, r4
 8001caa:	3920      	subs	r1, #32
 8001cac:	40cf      	lsrs	r7, r1
 8001cae:	2a20      	cmp	r2, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dsub+0x5be>
 8001cb2:	2140      	movs	r1, #64	@ 0x40
 8001cb4:	1a8a      	subs	r2, r1, r2
 8001cb6:	4094      	lsls	r4, r2
 8001cb8:	0025      	movs	r5, r4
 8001cba:	4305      	orrs	r5, r0
 8001cbc:	9503      	str	r5, [sp, #12]
 8001cbe:	9d03      	ldr	r5, [sp, #12]
 8001cc0:	1e6a      	subs	r2, r5, #1
 8001cc2:	4195      	sbcs	r5, r2
 8001cc4:	433d      	orrs	r5, r7
 8001cc6:	e77d      	b.n	8001bc4 <__aeabi_dsub+0x4c4>
 8001cc8:	2a00      	cmp	r2, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x5ce>
 8001ccc:	e744      	b.n	8001b58 <__aeabi_dsub+0x458>
 8001cce:	2601      	movs	r6, #1
 8001cd0:	400e      	ands	r6, r1
 8001cd2:	4663      	mov	r3, ip
 8001cd4:	08d9      	lsrs	r1, r3, #3
 8001cd6:	9b02      	ldr	r3, [sp, #8]
 8001cd8:	075a      	lsls	r2, r3, #29
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	08dc      	lsrs	r4, r3, #3
 8001cde:	e6f0      	b.n	8001ac2 <__aeabi_dsub+0x3c2>
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d028      	beq.n	8001d36 <__aeabi_dsub+0x636>
 8001ce4:	4662      	mov	r2, ip
 8001ce6:	9f02      	ldr	r7, [sp, #8]
 8001ce8:	08c0      	lsrs	r0, r0, #3
 8001cea:	433a      	orrs	r2, r7
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x5f0>
 8001cee:	e6dc      	b.n	8001aaa <__aeabi_dsub+0x3aa>
 8001cf0:	0762      	lsls	r2, r4, #29
 8001cf2:	4310      	orrs	r0, r2
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	08e4      	lsrs	r4, r4, #3
 8001cf8:	0312      	lsls	r2, r2, #12
 8001cfa:	4214      	tst	r4, r2
 8001cfc:	d009      	beq.n	8001d12 <__aeabi_dsub+0x612>
 8001cfe:	08fd      	lsrs	r5, r7, #3
 8001d00:	4215      	tst	r5, r2
 8001d02:	d106      	bne.n	8001d12 <__aeabi_dsub+0x612>
 8001d04:	4663      	mov	r3, ip
 8001d06:	2601      	movs	r6, #1
 8001d08:	002c      	movs	r4, r5
 8001d0a:	08d8      	lsrs	r0, r3, #3
 8001d0c:	077b      	lsls	r3, r7, #29
 8001d0e:	4318      	orrs	r0, r3
 8001d10:	400e      	ands	r6, r1
 8001d12:	0f42      	lsrs	r2, r0, #29
 8001d14:	00c0      	lsls	r0, r0, #3
 8001d16:	08c0      	lsrs	r0, r0, #3
 8001d18:	0752      	lsls	r2, r2, #29
 8001d1a:	4302      	orrs	r2, r0
 8001d1c:	e601      	b.n	8001922 <__aeabi_dsub+0x222>
 8001d1e:	4663      	mov	r3, ip
 8001d20:	1a1d      	subs	r5, r3, r0
 8001d22:	45ac      	cmp	ip, r5
 8001d24:	4192      	sbcs	r2, r2
 8001d26:	9b02      	ldr	r3, [sp, #8]
 8001d28:	4252      	negs	r2, r2
 8001d2a:	1b1c      	subs	r4, r3, r4
 8001d2c:	000e      	movs	r6, r1
 8001d2e:	4688      	mov	r8, r1
 8001d30:	2701      	movs	r7, #1
 8001d32:	1aa4      	subs	r4, r4, r2
 8001d34:	e546      	b.n	80017c4 <__aeabi_dsub+0xc4>
 8001d36:	4663      	mov	r3, ip
 8001d38:	08d9      	lsrs	r1, r3, #3
 8001d3a:	9b02      	ldr	r3, [sp, #8]
 8001d3c:	075a      	lsls	r2, r3, #29
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e5ee      	b.n	8001922 <__aeabi_dsub+0x222>
 8001d44:	4663      	mov	r3, ip
 8001d46:	9c02      	ldr	r4, [sp, #8]
 8001d48:	9303      	str	r3, [sp, #12]
 8001d4a:	e6c7      	b.n	8001adc <__aeabi_dsub+0x3dc>
 8001d4c:	08c0      	lsrs	r0, r0, #3
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x654>
 8001d52:	e6aa      	b.n	8001aaa <__aeabi_dsub+0x3aa>
 8001d54:	0762      	lsls	r2, r4, #29
 8001d56:	4310      	orrs	r0, r2
 8001d58:	2280      	movs	r2, #128	@ 0x80
 8001d5a:	08e4      	lsrs	r4, r4, #3
 8001d5c:	0312      	lsls	r2, r2, #12
 8001d5e:	4214      	tst	r4, r2
 8001d60:	d0d7      	beq.n	8001d12 <__aeabi_dsub+0x612>
 8001d62:	9f02      	ldr	r7, [sp, #8]
 8001d64:	08fd      	lsrs	r5, r7, #3
 8001d66:	4215      	tst	r5, r2
 8001d68:	d1d3      	bne.n	8001d12 <__aeabi_dsub+0x612>
 8001d6a:	4663      	mov	r3, ip
 8001d6c:	2601      	movs	r6, #1
 8001d6e:	08d8      	lsrs	r0, r3, #3
 8001d70:	077b      	lsls	r3, r7, #29
 8001d72:	002c      	movs	r4, r5
 8001d74:	4318      	orrs	r0, r3
 8001d76:	400e      	ands	r6, r1
 8001d78:	e7cb      	b.n	8001d12 <__aeabi_dsub+0x612>
 8001d7a:	000a      	movs	r2, r1
 8001d7c:	0027      	movs	r7, r4
 8001d7e:	3a20      	subs	r2, #32
 8001d80:	40d7      	lsrs	r7, r2
 8001d82:	2920      	cmp	r1, #32
 8001d84:	d005      	beq.n	8001d92 <__aeabi_dsub+0x692>
 8001d86:	2240      	movs	r2, #64	@ 0x40
 8001d88:	1a52      	subs	r2, r2, r1
 8001d8a:	4094      	lsls	r4, r2
 8001d8c:	0025      	movs	r5, r4
 8001d8e:	4305      	orrs	r5, r0
 8001d90:	9503      	str	r5, [sp, #12]
 8001d92:	9d03      	ldr	r5, [sp, #12]
 8001d94:	1e6a      	subs	r2, r5, #1
 8001d96:	4195      	sbcs	r5, r2
 8001d98:	432f      	orrs	r7, r5
 8001d9a:	e610      	b.n	80019be <__aeabi_dsub+0x2be>
 8001d9c:	0014      	movs	r4, r2
 8001d9e:	2500      	movs	r5, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	e556      	b.n	8001852 <__aeabi_dsub+0x152>
 8001da4:	9b02      	ldr	r3, [sp, #8]
 8001da6:	4460      	add	r0, ip
 8001da8:	4699      	mov	r9, r3
 8001daa:	4560      	cmp	r0, ip
 8001dac:	4192      	sbcs	r2, r2
 8001dae:	444c      	add	r4, r9
 8001db0:	4252      	negs	r2, r2
 8001db2:	0005      	movs	r5, r0
 8001db4:	18a4      	adds	r4, r4, r2
 8001db6:	e74c      	b.n	8001c52 <__aeabi_dsub+0x552>
 8001db8:	001a      	movs	r2, r3
 8001dba:	001c      	movs	r4, r3
 8001dbc:	432a      	orrs	r2, r5
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x6c2>
 8001dc0:	e6b3      	b.n	8001b2a <__aeabi_dsub+0x42a>
 8001dc2:	e6c9      	b.n	8001b58 <__aeabi_dsub+0x458>
 8001dc4:	2480      	movs	r4, #128	@ 0x80
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	0324      	lsls	r4, r4, #12
 8001dca:	e5ae      	b.n	800192a <__aeabi_dsub+0x22a>
 8001dcc:	2120      	movs	r1, #32
 8001dce:	2500      	movs	r5, #0
 8001dd0:	1a09      	subs	r1, r1, r0
 8001dd2:	e517      	b.n	8001804 <__aeabi_dsub+0x104>
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2500      	movs	r5, #0
 8001dd8:	4c0b      	ldr	r4, [pc, #44]	@ (8001e08 <__aeabi_dsub+0x708>)
 8001dda:	e53a      	b.n	8001852 <__aeabi_dsub+0x152>
 8001ddc:	2d00      	cmp	r5, #0
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x6e2>
 8001de0:	e5f6      	b.n	80019d0 <__aeabi_dsub+0x2d0>
 8001de2:	464b      	mov	r3, r9
 8001de4:	1bda      	subs	r2, r3, r7
 8001de6:	4692      	mov	sl, r2
 8001de8:	2f00      	cmp	r7, #0
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x6ee>
 8001dec:	e66f      	b.n	8001ace <__aeabi_dsub+0x3ce>
 8001dee:	2a38      	cmp	r2, #56	@ 0x38
 8001df0:	dc05      	bgt.n	8001dfe <__aeabi_dsub+0x6fe>
 8001df2:	2680      	movs	r6, #128	@ 0x80
 8001df4:	0436      	lsls	r6, r6, #16
 8001df6:	4334      	orrs	r4, r6
 8001df8:	4688      	mov	r8, r1
 8001dfa:	000e      	movs	r6, r1
 8001dfc:	e6d1      	b.n	8001ba2 <__aeabi_dsub+0x4a2>
 8001dfe:	4688      	mov	r8, r1
 8001e00:	000e      	movs	r6, r1
 8001e02:	2501      	movs	r5, #1
 8001e04:	e6de      	b.n	8001bc4 <__aeabi_dsub+0x4c4>
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	ff7fffff 	.word	0xff7fffff
 8001e10:	000007fe 	.word	0x000007fe
 8001e14:	2d00      	cmp	r5, #0
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x71a>
 8001e18:	e668      	b.n	8001aec <__aeabi_dsub+0x3ec>
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	1bd9      	subs	r1, r3, r7
 8001e1e:	2f00      	cmp	r7, #0
 8001e20:	d101      	bne.n	8001e26 <__aeabi_dsub+0x726>
 8001e22:	468a      	mov	sl, r1
 8001e24:	e5a7      	b.n	8001976 <__aeabi_dsub+0x276>
 8001e26:	2701      	movs	r7, #1
 8001e28:	2938      	cmp	r1, #56	@ 0x38
 8001e2a:	dd00      	ble.n	8001e2e <__aeabi_dsub+0x72e>
 8001e2c:	e5c7      	b.n	80019be <__aeabi_dsub+0x2be>
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	0412      	lsls	r2, r2, #16
 8001e32:	4314      	orrs	r4, r2
 8001e34:	e5af      	b.n	8001996 <__aeabi_dsub+0x296>
 8001e36:	46c0      	nop			@ (mov r8, r8)

08001e38 <__aeabi_i2d>:
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d016      	beq.n	8001e6c <__aeabi_i2d+0x34>
 8001e3e:	17c3      	asrs	r3, r0, #31
 8001e40:	18c5      	adds	r5, r0, r3
 8001e42:	405d      	eors	r5, r3
 8001e44:	0fc4      	lsrs	r4, r0, #31
 8001e46:	0028      	movs	r0, r5
 8001e48:	f000 f8f0 	bl	800202c <__clzsi2>
 8001e4c:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <__aeabi_i2d+0x58>)
 8001e4e:	1a1b      	subs	r3, r3, r0
 8001e50:	055b      	lsls	r3, r3, #21
 8001e52:	0d5b      	lsrs	r3, r3, #21
 8001e54:	280a      	cmp	r0, #10
 8001e56:	dc14      	bgt.n	8001e82 <__aeabi_i2d+0x4a>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	002e      	movs	r6, r5
 8001e5c:	3215      	adds	r2, #21
 8001e5e:	4096      	lsls	r6, r2
 8001e60:	220b      	movs	r2, #11
 8001e62:	1a12      	subs	r2, r2, r0
 8001e64:	40d5      	lsrs	r5, r2
 8001e66:	032d      	lsls	r5, r5, #12
 8001e68:	0b2d      	lsrs	r5, r5, #12
 8001e6a:	e003      	b.n	8001e74 <__aeabi_i2d+0x3c>
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2500      	movs	r5, #0
 8001e72:	2600      	movs	r6, #0
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	432b      	orrs	r3, r5
 8001e78:	07e4      	lsls	r4, r4, #31
 8001e7a:	4323      	orrs	r3, r4
 8001e7c:	0030      	movs	r0, r6
 8001e7e:	0019      	movs	r1, r3
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	380b      	subs	r0, #11
 8001e84:	4085      	lsls	r5, r0
 8001e86:	032d      	lsls	r5, r5, #12
 8001e88:	2600      	movs	r6, #0
 8001e8a:	0b2d      	lsrs	r5, r5, #12
 8001e8c:	e7f2      	b.n	8001e74 <__aeabi_i2d+0x3c>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	0000041e 	.word	0x0000041e

08001e94 <__aeabi_f2d>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	0242      	lsls	r2, r0, #9
 8001e98:	0043      	lsls	r3, r0, #1
 8001e9a:	0fc4      	lsrs	r4, r0, #31
 8001e9c:	20fe      	movs	r0, #254	@ 0xfe
 8001e9e:	0e1b      	lsrs	r3, r3, #24
 8001ea0:	1c59      	adds	r1, r3, #1
 8001ea2:	0a55      	lsrs	r5, r2, #9
 8001ea4:	4208      	tst	r0, r1
 8001ea6:	d00c      	beq.n	8001ec2 <__aeabi_f2d+0x2e>
 8001ea8:	21e0      	movs	r1, #224	@ 0xe0
 8001eaa:	0089      	lsls	r1, r1, #2
 8001eac:	468c      	mov	ip, r1
 8001eae:	076d      	lsls	r5, r5, #29
 8001eb0:	0b12      	lsrs	r2, r2, #12
 8001eb2:	4463      	add	r3, ip
 8001eb4:	051b      	lsls	r3, r3, #20
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	07e4      	lsls	r4, r4, #31
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	0028      	movs	r0, r5
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d114      	bne.n	8001ef0 <__aeabi_f2d+0x5c>
 8001ec6:	2d00      	cmp	r5, #0
 8001ec8:	d01b      	beq.n	8001f02 <__aeabi_f2d+0x6e>
 8001eca:	0028      	movs	r0, r5
 8001ecc:	f000 f8ae 	bl	800202c <__clzsi2>
 8001ed0:	280a      	cmp	r0, #10
 8001ed2:	dc1c      	bgt.n	8001f0e <__aeabi_f2d+0x7a>
 8001ed4:	230b      	movs	r3, #11
 8001ed6:	002a      	movs	r2, r5
 8001ed8:	1a1b      	subs	r3, r3, r0
 8001eda:	40da      	lsrs	r2, r3
 8001edc:	0003      	movs	r3, r0
 8001ede:	3315      	adds	r3, #21
 8001ee0:	409d      	lsls	r5, r3
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <__aeabi_f2d+0x88>)
 8001ee4:	0312      	lsls	r2, r2, #12
 8001ee6:	1a1b      	subs	r3, r3, r0
 8001ee8:	055b      	lsls	r3, r3, #21
 8001eea:	0b12      	lsrs	r2, r2, #12
 8001eec:	0d5b      	lsrs	r3, r3, #21
 8001eee:	e7e1      	b.n	8001eb4 <__aeabi_f2d+0x20>
 8001ef0:	2d00      	cmp	r5, #0
 8001ef2:	d009      	beq.n	8001f08 <__aeabi_f2d+0x74>
 8001ef4:	0b13      	lsrs	r3, r2, #12
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	0312      	lsls	r2, r2, #12
 8001efa:	431a      	orrs	r2, r3
 8001efc:	076d      	lsls	r5, r5, #29
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <__aeabi_f2d+0x8c>)
 8001f00:	e7d8      	b.n	8001eb4 <__aeabi_f2d+0x20>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2200      	movs	r2, #0
 8001f06:	e7d5      	b.n	8001eb4 <__aeabi_f2d+0x20>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <__aeabi_f2d+0x8c>)
 8001f0c:	e7d2      	b.n	8001eb4 <__aeabi_f2d+0x20>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	002a      	movs	r2, r5
 8001f12:	3b0b      	subs	r3, #11
 8001f14:	409a      	lsls	r2, r3
 8001f16:	2500      	movs	r5, #0
 8001f18:	e7e3      	b.n	8001ee2 <__aeabi_f2d+0x4e>
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	00000389 	.word	0x00000389
 8001f20:	000007ff 	.word	0x000007ff

08001f24 <__aeabi_d2f>:
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	004b      	lsls	r3, r1, #1
 8001f28:	030f      	lsls	r7, r1, #12
 8001f2a:	0d5b      	lsrs	r3, r3, #21
 8001f2c:	4c3b      	ldr	r4, [pc, #236]	@ (800201c <__aeabi_d2f+0xf8>)
 8001f2e:	0f45      	lsrs	r5, r0, #29
 8001f30:	b083      	sub	sp, #12
 8001f32:	0a7f      	lsrs	r7, r7, #9
 8001f34:	1c5e      	adds	r6, r3, #1
 8001f36:	432f      	orrs	r7, r5
 8001f38:	9000      	str	r0, [sp, #0]
 8001f3a:	9101      	str	r1, [sp, #4]
 8001f3c:	0fca      	lsrs	r2, r1, #31
 8001f3e:	00c5      	lsls	r5, r0, #3
 8001f40:	4226      	tst	r6, r4
 8001f42:	d00b      	beq.n	8001f5c <__aeabi_d2f+0x38>
 8001f44:	4936      	ldr	r1, [pc, #216]	@ (8002020 <__aeabi_d2f+0xfc>)
 8001f46:	185c      	adds	r4, r3, r1
 8001f48:	2cfe      	cmp	r4, #254	@ 0xfe
 8001f4a:	dd13      	ble.n	8001f74 <__aeabi_d2f+0x50>
 8001f4c:	20ff      	movs	r0, #255	@ 0xff
 8001f4e:	2300      	movs	r3, #0
 8001f50:	05c0      	lsls	r0, r0, #23
 8001f52:	4318      	orrs	r0, r3
 8001f54:	07d2      	lsls	r2, r2, #31
 8001f56:	4310      	orrs	r0, r2
 8001f58:	b003      	add	sp, #12
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <__aeabi_d2f+0x42>
 8001f60:	2000      	movs	r0, #0
 8001f62:	2300      	movs	r3, #0
 8001f64:	e7f4      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8001f66:	433d      	orrs	r5, r7
 8001f68:	d0f0      	beq.n	8001f4c <__aeabi_d2f+0x28>
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	03db      	lsls	r3, r3, #15
 8001f6e:	20ff      	movs	r0, #255	@ 0xff
 8001f70:	433b      	orrs	r3, r7
 8001f72:	e7ed      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8001f74:	2c00      	cmp	r4, #0
 8001f76:	dd14      	ble.n	8001fa2 <__aeabi_d2f+0x7e>
 8001f78:	9b00      	ldr	r3, [sp, #0]
 8001f7a:	00ff      	lsls	r7, r7, #3
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	1e58      	subs	r0, r3, #1
 8001f80:	4183      	sbcs	r3, r0
 8001f82:	0f69      	lsrs	r1, r5, #29
 8001f84:	433b      	orrs	r3, r7
 8001f86:	430b      	orrs	r3, r1
 8001f88:	0759      	lsls	r1, r3, #29
 8001f8a:	d041      	beq.n	8002010 <__aeabi_d2f+0xec>
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	4019      	ands	r1, r3
 8001f90:	2904      	cmp	r1, #4
 8001f92:	d028      	beq.n	8001fe6 <__aeabi_d2f+0xc2>
 8001f94:	3304      	adds	r3, #4
 8001f96:	0159      	lsls	r1, r3, #5
 8001f98:	d525      	bpl.n	8001fe6 <__aeabi_d2f+0xc2>
 8001f9a:	3401      	adds	r4, #1
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	b2e0      	uxtb	r0, r4
 8001fa0:	e7d6      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8001fa2:	0021      	movs	r1, r4
 8001fa4:	3117      	adds	r1, #23
 8001fa6:	dbdb      	blt.n	8001f60 <__aeabi_d2f+0x3c>
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	201e      	movs	r0, #30
 8001fac:	0409      	lsls	r1, r1, #16
 8001fae:	4339      	orrs	r1, r7
 8001fb0:	1b00      	subs	r0, r0, r4
 8001fb2:	281f      	cmp	r0, #31
 8001fb4:	dd1b      	ble.n	8001fee <__aeabi_d2f+0xca>
 8001fb6:	2602      	movs	r6, #2
 8001fb8:	4276      	negs	r6, r6
 8001fba:	1b34      	subs	r4, r6, r4
 8001fbc:	000e      	movs	r6, r1
 8001fbe:	40e6      	lsrs	r6, r4
 8001fc0:	0034      	movs	r4, r6
 8001fc2:	2820      	cmp	r0, #32
 8001fc4:	d004      	beq.n	8001fd0 <__aeabi_d2f+0xac>
 8001fc6:	4817      	ldr	r0, [pc, #92]	@ (8002024 <__aeabi_d2f+0x100>)
 8001fc8:	4684      	mov	ip, r0
 8001fca:	4463      	add	r3, ip
 8001fcc:	4099      	lsls	r1, r3
 8001fce:	430d      	orrs	r5, r1
 8001fd0:	002b      	movs	r3, r5
 8001fd2:	1e59      	subs	r1, r3, #1
 8001fd4:	418b      	sbcs	r3, r1
 8001fd6:	4323      	orrs	r3, r4
 8001fd8:	0759      	lsls	r1, r3, #29
 8001fda:	d015      	beq.n	8002008 <__aeabi_d2f+0xe4>
 8001fdc:	210f      	movs	r1, #15
 8001fde:	2400      	movs	r4, #0
 8001fe0:	4019      	ands	r1, r3
 8001fe2:	2904      	cmp	r1, #4
 8001fe4:	d117      	bne.n	8002016 <__aeabi_d2f+0xf2>
 8001fe6:	019b      	lsls	r3, r3, #6
 8001fe8:	0a5b      	lsrs	r3, r3, #9
 8001fea:	b2e0      	uxtb	r0, r4
 8001fec:	e7b0      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8001fee:	4c0e      	ldr	r4, [pc, #56]	@ (8002028 <__aeabi_d2f+0x104>)
 8001ff0:	191c      	adds	r4, r3, r4
 8001ff2:	002b      	movs	r3, r5
 8001ff4:	40a5      	lsls	r5, r4
 8001ff6:	40c3      	lsrs	r3, r0
 8001ff8:	40a1      	lsls	r1, r4
 8001ffa:	1e68      	subs	r0, r5, #1
 8001ffc:	4185      	sbcs	r5, r0
 8001ffe:	4329      	orrs	r1, r5
 8002000:	430b      	orrs	r3, r1
 8002002:	2400      	movs	r4, #0
 8002004:	0759      	lsls	r1, r3, #29
 8002006:	d1c1      	bne.n	8001f8c <__aeabi_d2f+0x68>
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	2000      	movs	r0, #0
 800200c:	0a5b      	lsrs	r3, r3, #9
 800200e:	e79f      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	b2e0      	uxtb	r0, r4
 8002014:	e79c      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8002016:	3304      	adds	r3, #4
 8002018:	e7e5      	b.n	8001fe6 <__aeabi_d2f+0xc2>
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	000007fe 	.word	0x000007fe
 8002020:	fffffc80 	.word	0xfffffc80
 8002024:	fffffca2 	.word	0xfffffca2
 8002028:	fffffc82 	.word	0xfffffc82

0800202c <__clzsi2>:
 800202c:	211c      	movs	r1, #28
 800202e:	2301      	movs	r3, #1
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	4298      	cmp	r0, r3
 8002034:	d301      	bcc.n	800203a <__clzsi2+0xe>
 8002036:	0c00      	lsrs	r0, r0, #16
 8002038:	3910      	subs	r1, #16
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	4298      	cmp	r0, r3
 800203e:	d301      	bcc.n	8002044 <__clzsi2+0x18>
 8002040:	0a00      	lsrs	r0, r0, #8
 8002042:	3908      	subs	r1, #8
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	4298      	cmp	r0, r3
 8002048:	d301      	bcc.n	800204e <__clzsi2+0x22>
 800204a:	0900      	lsrs	r0, r0, #4
 800204c:	3904      	subs	r1, #4
 800204e:	a202      	add	r2, pc, #8	@ (adr r2, 8002058 <__clzsi2+0x2c>)
 8002050:	5c10      	ldrb	r0, [r2, r0]
 8002052:	1840      	adds	r0, r0, r1
 8002054:	4770      	bx	lr
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	02020304 	.word	0x02020304
 800205c:	01010101 	.word	0x01010101
	...

08002068 <eeprom_write_float>:
    return HAL_OK;
}

// #define EEPROM_I2C_ADDRESS 0x50 << 1 is defined in header file
static HAL_StatusTypeDef eeprom_write_float(I2C_HandleTypeDef *i2c, uint16_t eeprom_mem_addr, float value)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b08a      	sub	sp, #40	@ 0x28
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	230a      	movs	r3, #10
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	1c0a      	adds	r2, r1, #0
 8002078:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 800207a:	231e      	movs	r3, #30
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]

	uint8_t *value_bytes = (uint8_t *)&value;
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	61bb      	str	r3, [r7, #24]
	uint8_t send_buffer[3];
	for(uint8_t i = 0; i < 4; i++)
 8002086:	231f      	movs	r3, #31
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e03b      	b.n	8002108 <eeprom_write_float+0xa0>
	{
		uint16_t eeprom_store_addr = eeprom_mem_addr + i;
 8002090:	241f      	movs	r4, #31
 8002092:	193b      	adds	r3, r7, r4
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b299      	uxth	r1, r3
 8002098:	2016      	movs	r0, #22
 800209a:	183b      	adds	r3, r7, r0
 800209c:	220a      	movs	r2, #10
 800209e:	18ba      	adds	r2, r7, r2
 80020a0:	8812      	ldrh	r2, [r2, #0]
 80020a2:	188a      	adds	r2, r1, r2
 80020a4:	801a      	strh	r2, [r3, #0]
		send_buffer[0] = (uint8_t)((eeprom_store_addr >> 8) & 0xFF);  // High Byte
 80020a6:	183b      	adds	r3, r7, r0
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	2110      	movs	r1, #16
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	701a      	strb	r2, [r3, #0]
		send_buffer[1] = (uint8_t)(eeprom_store_addr & 0xFF);         // Low Byte
 80020b6:	183b      	adds	r3, r7, r0
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	705a      	strb	r2, [r3, #1]
		send_buffer[2] = value_bytes[i];
 80020c0:	193b      	adds	r3, r7, r4
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	18d3      	adds	r3, r2, r3
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	709a      	strb	r2, [r3, #2]
		retval = HAL_I2C_Master_Transmit(i2c, EEPROM_I2C_ADDRESS, send_buffer, 3, HAL_MAX_DELAY);
 80020ce:	251e      	movs	r5, #30
 80020d0:	197c      	adds	r4, r7, r5
 80020d2:	187a      	adds	r2, r7, r1
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	2301      	movs	r3, #1
 80020d8:	425b      	negs	r3, r3
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2303      	movs	r3, #3
 80020de:	21a0      	movs	r1, #160	@ 0xa0
 80020e0:	f001 fdf8 	bl	8003cd4 <HAL_I2C_Master_Transmit>
 80020e4:	0003      	movs	r3, r0
 80020e6:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 80020e8:	197b      	adds	r3, r7, r5
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <eeprom_write_float+0x8e>
		{
			return retval;
 80020f0:	197b      	adds	r3, r7, r5
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	e00e      	b.n	8002114 <eeprom_write_float+0xac>
		}
		HAL_Delay(10);
 80020f6:	200a      	movs	r0, #10
 80020f8:	f001 faa2 	bl	8003640 <HAL_Delay>
	for(uint8_t i = 0; i < 4; i++)
 80020fc:	211f      	movs	r1, #31
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	187b      	adds	r3, r7, r1
 8002104:	3201      	adds	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	231f      	movs	r3, #31
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d9be      	bls.n	8002090 <eeprom_write_float+0x28>
	}
	return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b008      	add	sp, #32
 800211a:	bdb0      	pop	{r4, r5, r7, pc}

0800211c <eeprom_read_float>:
	return HAL_OK;
}


static HAL_StatusTypeDef eeprom_read_float(I2C_HandleTypeDef *i2c, uint16_t eeprom_mem_addr, float *value_to_read)
{
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	230a      	movs	r3, #10
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	1c0a      	adds	r2, r1, #0
 800212c:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 800212e:	231e      	movs	r3, #30
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]

	uint8_t value_bytes[4];
	uint8_t send_buffer[2];
	for(uint8_t i = 0; i < 4; i++)
 8002136:	231f      	movs	r3, #31
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e051      	b.n	80021e4 <eeprom_read_float+0xc8>
	{
		uint16_t eeprom_store_addr = eeprom_mem_addr + i;
 8002140:	231f      	movs	r3, #31
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b299      	uxth	r1, r3
 8002148:	201c      	movs	r0, #28
 800214a:	183b      	adds	r3, r7, r0
 800214c:	220a      	movs	r2, #10
 800214e:	18ba      	adds	r2, r7, r2
 8002150:	8812      	ldrh	r2, [r2, #0]
 8002152:	188a      	adds	r2, r1, r2
 8002154:	801a      	strh	r2, [r3, #0]
		send_buffer[0] = (uint8_t)((eeprom_store_addr >> 8) & 0xFF);  // High Byte
 8002156:	0001      	movs	r1, r0
 8002158:	187b      	adds	r3, r7, r1
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	b29b      	uxth	r3, r3
 8002160:	b2da      	uxtb	r2, r3
 8002162:	2014      	movs	r0, #20
 8002164:	183b      	adds	r3, r7, r0
 8002166:	701a      	strb	r2, [r3, #0]
		send_buffer[1] = (uint8_t)(eeprom_store_addr & 0xFF);         // Low Byte
 8002168:	187b      	adds	r3, r7, r1
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	183b      	adds	r3, r7, r0
 8002170:	705a      	strb	r2, [r3, #1]

		retval = HAL_I2C_Master_Transmit(i2c, EEPROM_I2C_ADDRESS, send_buffer, 2, HAL_MAX_DELAY);
 8002172:	251e      	movs	r5, #30
 8002174:	197c      	adds	r4, r7, r5
 8002176:	183a      	adds	r2, r7, r0
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	2301      	movs	r3, #1
 800217c:	425b      	negs	r3, r3
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2302      	movs	r3, #2
 8002182:	21a0      	movs	r1, #160	@ 0xa0
 8002184:	f001 fda6 	bl	8003cd4 <HAL_I2C_Master_Transmit>
 8002188:	0003      	movs	r3, r0
 800218a:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 800218c:	197b      	adds	r3, r7, r5
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <eeprom_read_float+0x7e>
		{
			return retval;
 8002194:	197b      	adds	r3, r7, r5
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	e033      	b.n	8002202 <eeprom_read_float+0xe6>
		}
		HAL_Delay(10);
 800219a:	200a      	movs	r0, #10
 800219c:	f001 fa50 	bl	8003640 <HAL_Delay>

		retval = HAL_I2C_Master_Receive(i2c, EEPROM_I2C_ADDRESS, &(value_bytes[i]), 1, HAL_MAX_DELAY);
 80021a0:	231f      	movs	r3, #31
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2218      	movs	r2, #24
 80021a8:	18ba      	adds	r2, r7, r2
 80021aa:	18d2      	adds	r2, r2, r3
 80021ac:	251e      	movs	r5, #30
 80021ae:	197c      	adds	r4, r7, r5
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	2301      	movs	r3, #1
 80021b4:	425b      	negs	r3, r3
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2301      	movs	r3, #1
 80021ba:	21a0      	movs	r1, #160	@ 0xa0
 80021bc:	f001 feb4 	bl	8003f28 <HAL_I2C_Master_Receive>
 80021c0:	0003      	movs	r3, r0
 80021c2:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 80021c4:	197b      	adds	r3, r7, r5
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <eeprom_read_float+0xb6>
		{
			return retval;
 80021cc:	197b      	adds	r3, r7, r5
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	e017      	b.n	8002202 <eeprom_read_float+0xe6>
		}
		HAL_Delay(10);
 80021d2:	200a      	movs	r0, #10
 80021d4:	f001 fa34 	bl	8003640 <HAL_Delay>
	for(uint8_t i = 0; i < 4; i++)
 80021d8:	211f      	movs	r1, #31
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	3201      	adds	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	231f      	movs	r3, #31
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d9a8      	bls.n	8002140 <eeprom_read_float+0x24>
	}

	memcpy(value_to_read, value_bytes, sizeof(float));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	2318      	movs	r3, #24
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	0010      	movs	r0, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	2304      	movs	r3, #4
 80021fa:	001a      	movs	r2, r3
 80021fc:	f004 f99a 	bl	8006534 <memcpy>

	return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b008      	add	sp, #32
 8002208:	bdb0      	pop	{r4, r5, r7, pc}

0800220a <init_climate_data>:
 * This function needs to initialize a new climate_data struct
 * 1) get current values from sht41
 * 2) get min/max values from eeprom
 */
HAL_StatusTypeDef init_climate_data(climate_data * cdata, I2C_HandleTypeDef * hi2c)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 8002214:	2317      	movs	r3, #23
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
	cdata->hal_i2c = hi2c;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	619a      	str	r2, [r3, #24]
	float current_climate_vals[2];
	if(get_temperature_sht41(cdata->hal_i2c, current_climate_vals) != HAL_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	220c      	movs	r2, #12
 8002228:	18ba      	adds	r2, r7, r2
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f000 ff7b 	bl	8003128 <get_temperature_sht41>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d001      	beq.n	800223a <init_climate_data+0x30>
	{
		return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e011      	b.n	800225e <init_climate_data+0x54>
	}
	cdata->current_temp = current_climate_vals[0];
 800223a:	210c      	movs	r1, #12
 800223c:	187b      	adds	r3, r7, r1
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	611a      	str	r2, [r3, #16]
	cdata->current_hum  = current_climate_vals[1];
 8002244:	187b      	adds	r3, r7, r1
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]

	if(read_eeprom_into_climate_data(cdata) != HAL_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f88e 	bl	8002370 <read_eeprom_into_climate_data>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d001      	beq.n	800225c <init_climate_data+0x52>
	{
		return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <init_climate_data+0x54>
	}
	return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b006      	add	sp, #24
 8002264:	bd80      	pop	{r7, pc}

08002266 <update_climate_data_in_eeprom>:
 * Compares the current values to the input climate_data pointer.
 * Update input climate_data values with new values where appropriate.
 * If anything changed, write climate_data to eeprom.
 */
HAL_StatusTypeDef update_climate_data_in_eeprom(climate_data * data)
{
 8002266:	b5b0      	push	{r4, r5, r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retval = HAL_OK;
 800226e:	2517      	movs	r5, #23
 8002270:	197b      	adds	r3, r7, r5
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
	float current_climate_vals[2];
	retval |= get_temperature_sht41(data->hal_i2c, current_climate_vals);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	240c      	movs	r4, #12
 800227c:	193a      	adds	r2, r7, r4
 800227e:	0011      	movs	r1, r2
 8002280:	0018      	movs	r0, r3
 8002282:	f000 ff51 	bl	8003128 <get_temperature_sht41>
 8002286:	0003      	movs	r3, r0
 8002288:	0019      	movs	r1, r3
 800228a:	197b      	adds	r3, r7, r5
 800228c:	197a      	adds	r2, r7, r5
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	701a      	strb	r2, [r3, #0]

	data->current_temp = current_climate_vals[0];
 8002294:	193b      	adds	r3, r7, r4
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]
	data->current_hum = current_climate_vals[1];
 800229c:	193b      	adds	r3, r7, r4
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	615a      	str	r2, [r3, #20]

	uint8_t updateEEPROMorNot = 0;
 80022a4:	2516      	movs	r5, #22
 80022a6:	197b      	adds	r3, r7, r5
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
	if(current_climate_vals[0] > data->max_temp)
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c19      	adds	r1, r3, #0
 80022b6:	1c10      	adds	r0, r2, #0
 80022b8:	f7fd ffe2 	bl	8000280 <__aeabi_fcmpgt>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d006      	beq.n	80022ce <update_climate_data_in_eeprom+0x68>
	{
		data->max_temp = current_climate_vals[0];
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	601a      	str	r2, [r3, #0]
		updateEEPROMorNot = 1;
 80022c8:	197b      	adds	r3, r7, r5
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[0] < data->min_temp)
 80022ce:	240c      	movs	r4, #12
 80022d0:	193b      	adds	r3, r7, r4
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	1c19      	adds	r1, r3, #0
 80022da:	1c10      	adds	r0, r2, #0
 80022dc:	f7fd ffbc 	bl	8000258 <__aeabi_fcmplt>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d007      	beq.n	80022f4 <update_climate_data_in_eeprom+0x8e>
	{
		data->min_temp = current_climate_vals[0];
 80022e4:	193b      	adds	r3, r7, r4
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	605a      	str	r2, [r3, #4]
		updateEEPROMorNot = 1;
 80022ec:	2316      	movs	r3, #22
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[1] > data->max_hum)
 80022f4:	240c      	movs	r4, #12
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	1c19      	adds	r1, r3, #0
 8002300:	1c10      	adds	r0, r2, #0
 8002302:	f7fd ffbd 	bl	8000280 <__aeabi_fcmpgt>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d007      	beq.n	800231a <update_climate_data_in_eeprom+0xb4>
	{
		data->max_hum = current_climate_vals[1];
 800230a:	193b      	adds	r3, r7, r4
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	609a      	str	r2, [r3, #8]
		updateEEPROMorNot = 1;
 8002312:	2316      	movs	r3, #22
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[1] < data->min_hum)
 800231a:	240c      	movs	r4, #12
 800231c:	193b      	adds	r3, r7, r4
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	1c19      	adds	r1, r3, #0
 8002326:	1c10      	adds	r0, r2, #0
 8002328:	f7fd ff96 	bl	8000258 <__aeabi_fcmplt>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d007      	beq.n	8002340 <update_climate_data_in_eeprom+0xda>
	{
		data->min_hum = current_climate_vals[1];
 8002330:	193b      	adds	r3, r7, r4
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]
		updateEEPROMorNot = 1;
 8002338:	2316      	movs	r3, #22
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
	}

	if(updateEEPROMorNot)
 8002340:	2316      	movs	r3, #22
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <update_climate_data_in_eeprom+0xfc>
	{
		retval|= write_eeprom_from_climate_data(data);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f84f 	bl	80023f0 <write_eeprom_from_climate_data>
 8002352:	0003      	movs	r3, r0
 8002354:	0019      	movs	r1, r3
 8002356:	2217      	movs	r2, #23
 8002358:	18bb      	adds	r3, r7, r2
 800235a:	18ba      	adds	r2, r7, r2
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	701a      	strb	r2, [r3, #0]
	}


	return retval;
 8002362:	2317      	movs	r3, #23
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bdb0      	pop	{r4, r5, r7, pc}

08002370 <read_eeprom_into_climate_data>:

HAL_StatusTypeDef read_eeprom_into_climate_data(climate_data * data)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	if( eeprom_read_float(data->hal_i2c, EEPROM_MAX_TEMP_ADDR, &(data->max_temp)) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4918      	ldr	r1, [pc, #96]	@ (80023e0 <read_eeprom_into_climate_data+0x70>)
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff fecb 	bl	800211c <eeprom_read_float>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <read_eeprom_into_climate_data+0x1e>
	{
		return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e023      	b.n	80023d6 <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MIN_TEMP_ADDR, &(data->min_temp)) != HAL_OK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6998      	ldr	r0, [r3, #24]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	4913      	ldr	r1, [pc, #76]	@ (80023e4 <read_eeprom_into_climate_data+0x74>)
 8002398:	001a      	movs	r2, r3
 800239a:	f7ff febf 	bl	800211c <eeprom_read_float>
 800239e:	1e03      	subs	r3, r0, #0
 80023a0:	d001      	beq.n	80023a6 <read_eeprom_into_climate_data+0x36>
	{
		return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e017      	b.n	80023d6 <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MAX_HUM_ADDR, &(data->max_hum)) != HAL_OK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6998      	ldr	r0, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3308      	adds	r3, #8
 80023ae:	490e      	ldr	r1, [pc, #56]	@ (80023e8 <read_eeprom_into_climate_data+0x78>)
 80023b0:	001a      	movs	r2, r3
 80023b2:	f7ff feb3 	bl	800211c <eeprom_read_float>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d001      	beq.n	80023be <read_eeprom_into_climate_data+0x4e>
	{
		return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00b      	b.n	80023d6 <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MIN_HUM_ADDR, &(data->min_hum)) != HAL_OK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6998      	ldr	r0, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	330c      	adds	r3, #12
 80023c6:	4909      	ldr	r1, [pc, #36]	@ (80023ec <read_eeprom_into_climate_data+0x7c>)
 80023c8:	001a      	movs	r2, r3
 80023ca:	f7ff fea7 	bl	800211c <eeprom_read_float>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <read_eeprom_into_climate_data+0x66>
	{
		return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e7ff      	b.n	80023d6 <read_eeprom_into_climate_data+0x66>
	}
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	00001555 	.word	0x00001555
 80023e4:	00001559 	.word	0x00001559
 80023e8:	0000155d 	.word	0x0000155d
 80023ec:	00001561 	.word	0x00001561

080023f0 <write_eeprom_from_climate_data>:

HAL_StatusTypeDef write_eeprom_from_climate_data(climate_data * data)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	if( eeprom_write_float(data->hal_i2c, EEPROM_MAX_TEMP_ADDR, data->max_temp) != HAL_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6998      	ldr	r0, [r3, #24]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4917      	ldr	r1, [pc, #92]	@ (8002460 <write_eeprom_from_climate_data+0x70>)
 8002402:	1c1a      	adds	r2, r3, #0
 8002404:	f7ff fe30 	bl	8002068 <eeprom_write_float>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d001      	beq.n	8002410 <write_eeprom_from_climate_data+0x20>
	{
		return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e023      	b.n	8002458 <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MIN_TEMP_ADDR, data->min_temp) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6998      	ldr	r0, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4912      	ldr	r1, [pc, #72]	@ (8002464 <write_eeprom_from_climate_data+0x74>)
 800241a:	1c1a      	adds	r2, r3, #0
 800241c:	f7ff fe24 	bl	8002068 <eeprom_write_float>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <write_eeprom_from_climate_data+0x38>
	{
		return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e017      	b.n	8002458 <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MAX_HUM_ADDR, data->max_hum) != HAL_OK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6998      	ldr	r0, [r3, #24]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	490d      	ldr	r1, [pc, #52]	@ (8002468 <write_eeprom_from_climate_data+0x78>)
 8002432:	1c1a      	adds	r2, r3, #0
 8002434:	f7ff fe18 	bl	8002068 <eeprom_write_float>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d001      	beq.n	8002440 <write_eeprom_from_climate_data+0x50>
	{
		return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e00b      	b.n	8002458 <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MIN_HUM_ADDR, data->min_hum) != HAL_OK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6998      	ldr	r0, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4908      	ldr	r1, [pc, #32]	@ (800246c <write_eeprom_from_climate_data+0x7c>)
 800244a:	1c1a      	adds	r2, r3, #0
 800244c:	f7ff fe0c 	bl	8002068 <eeprom_write_float>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d001      	beq.n	8002458 <write_eeprom_from_climate_data+0x68>
	{
		return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e7ff      	b.n	8002458 <write_eeprom_from_climate_data+0x68>
	}
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}
 8002460:	00001555 	.word	0x00001555
 8002464:	00001559 	.word	0x00001559
 8002468:	0000155d 	.word	0x0000155d
 800246c:	00001561 	.word	0x00001561

08002470 <reset_climate_data_eeprom>:

HAL_StatusTypeDef reset_climate_data_eeprom(I2C_HandleTypeDef * hi2c)
{
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b08c      	sub	sp, #48	@ 0x30
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retval = HAL_OK;
 8002478:	252f      	movs	r5, #47	@ 0x2f
 800247a:	197b      	adds	r3, r7, r5
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
	float current_climate_vals[2];
	retval |= get_temperature_sht41(hi2c, current_climate_vals);
 8002480:	2424      	movs	r4, #36	@ 0x24
 8002482:	193a      	adds	r2, r7, r4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fe4d 	bl	8003128 <get_temperature_sht41>
 800248e:	0003      	movs	r3, r0
 8002490:	0019      	movs	r1, r3
 8002492:	197b      	adds	r3, r7, r5
 8002494:	197a      	adds	r2, r7, r5
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]

	climate_data cdata;
	cdata.current_temp = current_climate_vals[0];
 800249c:	0020      	movs	r0, r4
 800249e:	183b      	adds	r3, r7, r0
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2108      	movs	r1, #8
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	611a      	str	r2, [r3, #16]
	cdata.current_hum  = current_climate_vals[1];
 80024a8:	183b      	adds	r3, r7, r0
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	615a      	str	r2, [r3, #20]
	cdata.max_temp = current_climate_vals[0];
 80024b0:	183b      	adds	r3, r7, r0
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	601a      	str	r2, [r3, #0]
	cdata.min_temp = current_climate_vals[0];
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	605a      	str	r2, [r3, #4]
	cdata.max_hum  = current_climate_vals[1];
 80024c0:	183b      	adds	r3, r7, r0
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	609a      	str	r2, [r3, #8]
	cdata.min_hum  = current_climate_vals[1];
 80024c8:	183b      	adds	r3, r7, r0
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	60da      	str	r2, [r3, #12]
	cdata.hal_i2c = hi2c;
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	619a      	str	r2, [r3, #24]

	retval |= write_eeprom_from_climate_data(&cdata);
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff ff89 	bl	80023f0 <write_eeprom_from_climate_data>
 80024de:	0003      	movs	r3, r0
 80024e0:	0019      	movs	r1, r3
 80024e2:	197b      	adds	r3, r7, r5
 80024e4:	197a      	adds	r2, r7, r5
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]

	return retval;
 80024ec:	197b      	adds	r3, r7, r5
 80024ee:	781b      	ldrb	r3, [r3, #0]
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b00c      	add	sp, #48	@ 0x30
 80024f6:	bdb0      	pop	{r4, r5, r7, pc}

080024f8 <lcd_send_command>:
#include "lcd.h"



static HAL_StatusTypeDef lcd_send_command(I2C_HandleTypeDef *hi2c, char cmd)
{
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	000a      	movs	r2, r1
 8002502:	1cfb      	adds	r3, r7, #3
 8002504:	701a      	strb	r2, [r3, #0]
	char data_upper, data_lower;
	data_upper = (cmd & 0xf0);
 8002506:	200f      	movs	r0, #15
 8002508:	183b      	adds	r3, r7, r0
 800250a:	1cfa      	adds	r2, r7, #3
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	210f      	movs	r1, #15
 8002510:	438a      	bics	r2, r1
 8002512:	701a      	strb	r2, [r3, #0]
	data_lower = ((cmd << 4) & 0xf0);
 8002514:	1cfb      	adds	r3, r7, #3
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	011a      	lsls	r2, r3, #4
 800251a:	240e      	movs	r4, #14
 800251c:	193b      	adds	r3, r7, r4
 800251e:	701a      	strb	r2, [r3, #0]
	uint8_t data[4];
	data[0] = data_upper | 0x0C; //en=1, rs=0 -> bxxxx1100
 8002520:	183b      	adds	r3, r7, r0
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	220c      	movs	r2, #12
 8002526:	4313      	orrs	r3, r2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	2108      	movs	r1, #8
 800252c:	187b      	adds	r3, r7, r1
 800252e:	701a      	strb	r2, [r3, #0]
	data[1] = data_upper | 0x08; //en=0, rs=0 -> bxxxx1000
 8002530:	183b      	adds	r3, r7, r0
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2208      	movs	r2, #8
 8002536:	4313      	orrs	r3, r2
 8002538:	b2da      	uxtb	r2, r3
 800253a:	187b      	adds	r3, r7, r1
 800253c:	705a      	strb	r2, [r3, #1]
	data[2] = data_lower | 0x0C;
 800253e:	193b      	adds	r3, r7, r4
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	220c      	movs	r2, #12
 8002544:	4313      	orrs	r3, r2
 8002546:	b2da      	uxtb	r2, r3
 8002548:	187b      	adds	r3, r7, r1
 800254a:	709a      	strb	r2, [r3, #2]
	data[3] = data_lower | 0x08;
 800254c:	193b      	adds	r3, r7, r4
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2208      	movs	r2, #8
 8002552:	4313      	orrs	r3, r2
 8002554:	b2da      	uxtb	r2, r3
 8002556:	187b      	adds	r3, r7, r1
 8002558:	70da      	strb	r2, [r3, #3]
	HAL_StatusTypeDef retval;
	retval = HAL_I2C_Master_Transmit (hi2c, LCD_I2C_ADDR, data, 4, 100);
 800255a:	250d      	movs	r5, #13
 800255c:	197c      	adds	r4, r7, r5
 800255e:	187a      	adds	r2, r7, r1
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	2364      	movs	r3, #100	@ 0x64
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2304      	movs	r3, #4
 8002568:	214e      	movs	r1, #78	@ 0x4e
 800256a:	f001 fbb3 	bl	8003cd4 <HAL_I2C_Master_Transmit>
 800256e:	0003      	movs	r3, r0
 8002570:	7023      	strb	r3, [r4, #0]
	return retval;
 8002572:	197b      	adds	r3, r7, r5
 8002574:	781b      	ldrb	r3, [r3, #0]
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bdb0      	pop	{r4, r5, r7, pc}

0800257e <lcd_send_data>:

static HAL_StatusTypeDef lcd_send_data(I2C_HandleTypeDef *hi2c, char data)
{
 800257e:	b5b0      	push	{r4, r5, r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af02      	add	r7, sp, #8
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	000a      	movs	r2, r1
 8002588:	1cfb      	adds	r3, r7, #3
 800258a:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800258c:	200f      	movs	r0, #15
 800258e:	183b      	adds	r3, r7, r0
 8002590:	1cfa      	adds	r2, r7, #3
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	210f      	movs	r1, #15
 8002596:	438a      	bics	r2, r1
 8002598:	701a      	strb	r2, [r3, #0]
	data_l = ((data << 4) & 0xf0);
 800259a:	1cfb      	adds	r3, r7, #3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	011a      	lsls	r2, r3, #4
 80025a0:	240e      	movs	r4, #14
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1 -> bxxxx1101
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	220d      	movs	r2, #13
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	2108      	movs	r1, #8
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u | 0x09;  //en=0, rs=1 -> bxxxx1001
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2209      	movs	r2, #9
 80025bc:	4313      	orrs	r3, r2
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1 -> bxxxx1101
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	220d      	movs	r2, #13
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l | 0x09;  //en=0, rs=1 -> bxxxx1001
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2209      	movs	r2, #9
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	70da      	strb	r2, [r3, #3]
	HAL_StatusTypeDef retval;
	retval = HAL_I2C_Master_Transmit (hi2c, LCD_I2C_ADDR, data_t, 4, 100);
 80025e0:	250d      	movs	r5, #13
 80025e2:	197c      	adds	r4, r7, r5
 80025e4:	187a      	adds	r2, r7, r1
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	2364      	movs	r3, #100	@ 0x64
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2304      	movs	r3, #4
 80025ee:	214e      	movs	r1, #78	@ 0x4e
 80025f0:	f001 fb70 	bl	8003cd4 <HAL_I2C_Master_Transmit>
 80025f4:	0003      	movs	r3, r0
 80025f6:	7023      	strb	r3, [r4, #0]
	return retval;
 80025f8:	197b      	adds	r3, r7, r5
 80025fa:	781b      	ldrb	r3, [r3, #0]
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b004      	add	sp, #16
 8002602:	bdb0      	pop	{r4, r5, r7, pc}

08002604 <lcd_init_settings>:

static HAL_StatusTypeDef lcd_init_settings(I2C_HandleTypeDef *hi2c)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	static uint8_t initialized = 0;

	if(!initialized)
 800260c:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <lcd_init_settings+0xcc>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d158      	bne.n	80026c6 <lcd_init_settings+0xc2>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, LCD_I2C_ADDR, 10, 1000) != HAL_OK) {
 8002614:	23fa      	movs	r3, #250	@ 0xfa
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	220a      	movs	r2, #10
 800261c:	214e      	movs	r1, #78	@ 0x4e
 800261e:	f001 fd8b 	bl	8004138 <HAL_I2C_IsDeviceReady>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d001      	beq.n	800262a <lcd_init_settings+0x26>
			return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04e      	b.n	80026c8 <lcd_init_settings+0xc4>
		}
		// 4 bit initialisation
		HAL_Delay(50);  // wait for >40ms
 800262a:	2032      	movs	r0, #50	@ 0x32
 800262c:	f001 f808 	bl	8003640 <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2130      	movs	r1, #48	@ 0x30
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff ff5f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(5);  // wait for >4.1ms
 800263a:	2005      	movs	r0, #5
 800263c:	f001 f800 	bl	8003640 <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2130      	movs	r1, #48	@ 0x30
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff ff57 	bl	80024f8 <lcd_send_command>
		HAL_Delay(1);  // wait for >100us
 800264a:	2001      	movs	r0, #1
 800264c:	f000 fff8 	bl	8003640 <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2130      	movs	r1, #48	@ 0x30
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff ff4f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(10);
 800265a:	200a      	movs	r0, #10
 800265c:	f000 fff0 	bl	8003640 <HAL_Delay>
		lcd_send_command (hi2c, 0x20);  // 4bit mode
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2120      	movs	r1, #32
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff ff47 	bl	80024f8 <lcd_send_command>
		HAL_Delay(10);
 800266a:	200a      	movs	r0, #10
 800266c:	f000 ffe8 	bl	8003640 <HAL_Delay>

		// display initialisation
		lcd_send_command (hi2c, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2128      	movs	r1, #40	@ 0x28
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff3f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(1);
 800267a:	2001      	movs	r0, #1
 800267c:	f000 ffe0 	bl	8003640 <HAL_Delay>
		lcd_send_command (hi2c, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2108      	movs	r1, #8
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff ff37 	bl	80024f8 <lcd_send_command>
		HAL_Delay(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f000 ffd8 	bl	8003640 <HAL_Delay>
		lcd_send_command (hi2c, 0x01);  // clear display
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2101      	movs	r1, #1
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff ff2f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(2);
 800269a:	2002      	movs	r0, #2
 800269c:	f000 ffd0 	bl	8003640 <HAL_Delay>
		lcd_send_command (hi2c, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2106      	movs	r1, #6
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff ff27 	bl	80024f8 <lcd_send_command>
		HAL_Delay(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f000 ffc8 	bl	8003640 <HAL_Delay>
		lcd_send_command (hi2c, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	210c      	movs	r1, #12
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff ff1f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(100);
 80026ba:	2064      	movs	r0, #100	@ 0x64
 80026bc:	f000 ffc0 	bl	8003640 <HAL_Delay>

		initialized = 1;
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <lcd_init_settings+0xcc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
	}
	return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000007c 	.word	0x2000007c

080026d4 <lcd_print_string>:


void lcd_print_string (I2C_HandleTypeDef *hi2c, char *str)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
	lcd_init_settings(hi2c);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ff8f 	bl	8002604 <lcd_init_settings>
	while (*str) lcd_send_data (hi2c, *str++);
 80026e6:	e008      	b.n	80026fa <lcd_print_string+0x26>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	603a      	str	r2, [r7, #0]
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7ff ff42 	bl	800257e <lcd_send_data>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f2      	bne.n	80026e8 <lcd_print_string+0x14>
}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <lcd_place_cursor>:

void lcd_place_cursor(I2C_HandleTypeDef *hi2c, int row, int col)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	lcd_init_settings(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff ff72 	bl	8002604 <lcd_init_settings>
    switch (row)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <lcd_place_cursor+0x22>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d005      	beq.n	8002738 <lcd_place_cursor+0x2c>
 800272c:	e009      	b.n	8002742 <lcd_place_cursor+0x36>
    {
        case 0:
            col |= 0x80;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2280      	movs	r2, #128	@ 0x80
 8002732:	4313      	orrs	r3, r2
 8002734:	607b      	str	r3, [r7, #4]
            break;
 8002736:	e004      	b.n	8002742 <lcd_place_cursor+0x36>
        case 1:
            col |= 0xC0;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	22c0      	movs	r2, #192	@ 0xc0
 800273c:	4313      	orrs	r3, r2
 800273e:	607b      	str	r3, [r7, #4]
            break;
 8002740:	46c0      	nop			@ (mov r8, r8)
    }
    lcd_send_command (hi2c, col);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	0011      	movs	r1, r2
 800274a:	0018      	movs	r0, r3
 800274c:	f7ff fed4 	bl	80024f8 <lcd_send_command>
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}

08002758 <lcd_clear_display>:

void lcd_clear_display(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	lcd_send_command (hi2c, 0x01);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2101      	movs	r1, #1
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff fec7 	bl	80024f8 <lcd_send_command>
	HAL_Delay(10);
 800276a:	200a      	movs	r0, #10
 800276c:	f000 ff68 	bl	8003640 <HAL_Delay>
}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <lcd_print_2_lines>:

void lcd_print_2_lines(I2C_HandleTypeDef *hi2c, char* top_line, char* bot_line)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
	//lcd_clear_display(hi2c);
	lcd_place_cursor(hi2c, 0, 0);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff ffbe 	bl	800270c <lcd_place_cursor>
	lcd_print_string(hi2c, top_line);
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f7ff ff9c 	bl	80026d4 <lcd_print_string>
	lcd_place_cursor(hi2c, 1, 0);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	2101      	movs	r1, #1
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff ffb2 	bl	800270c <lcd_place_cursor>
	lcd_print_string(hi2c, bot_line);
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7ff ff90 	bl	80026d4 <lcd_print_string>
}
 80027b4:	46c0      	nop			@ (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	static uint16_t tick_counter = 0;
	static uint16_t button_debounce_counter = 0;
	static GPIO_PinState last_button_state = GPIO_PIN_SET;  // Assume button is normally HIGH

	if (htim->Instance == TIM2)  // 100 Hz timer
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	05db      	lsls	r3, r3, #23
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d000      	beq.n	80027d2 <HAL_TIM_PeriodElapsedCallback+0x16>
 80027d0:	e069      	b.n	80028a6 <HAL_TIM_PeriodElapsedCallback+0xea>
	{
		GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80027d2:	250f      	movs	r5, #15
 80027d4:	197c      	adds	r4, r7, r5
 80027d6:	2390      	movs	r3, #144	@ 0x90
 80027d8:	05db      	lsls	r3, r3, #23
 80027da:	2180      	movs	r1, #128	@ 0x80
 80027dc:	0018      	movs	r0, r3
 80027de:	f001 f999 	bl	8003b14 <HAL_GPIO_ReadPin>
 80027e2:	0003      	movs	r3, r0
 80027e4:	7023      	strb	r3, [r4, #0]

		// Debounce logic (button must be stable for 50ms)
		if (buttonState == GPIO_PIN_RESET)  // Button pressed
 80027e6:	197b      	adds	r3, r7, r5
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d123      	bne.n	8002836 <HAL_TIM_PeriodElapsedCallback+0x7a>
		{
			if (button_debounce_counter < 15) // 5 ticks = 50ms
 80027ee:	4b30      	ldr	r3, [pc, #192]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	2b0e      	cmp	r3, #14
 80027f4:	d806      	bhi.n	8002804 <HAL_TIM_PeriodElapsedCallback+0x48>
			{
				button_debounce_counter++;
 80027f6:	4b2e      	ldr	r3, [pc, #184]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	4b2c      	ldr	r3, [pc, #176]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	e01e      	b.n	8002842 <HAL_TIM_PeriodElapsedCallback+0x86>
			}
			else if (last_button_state == GPIO_PIN_SET) // Only trigger once per press
 8002804:	4b2b      	ldr	r3, [pc, #172]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d11a      	bne.n	8002842 <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				// Button confirmed as pressed
				last_button_state = GPIO_PIN_RESET;
 800280c:	4b29      	ldr	r3, [pc, #164]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
				current_lcd_screen = (current_lcd_screen + 1) % NUMBER_LCD_SCREENS;
 8002812:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a28      	ldr	r2, [pc, #160]	@ (80028bc <HAL_TIM_PeriodElapsedCallback+0x100>)
 800281a:	4013      	ands	r3, r2
 800281c:	d504      	bpl.n	8002828 <HAL_TIM_PeriodElapsedCallback+0x6c>
 800281e:	3b01      	subs	r3, #1
 8002820:	2204      	movs	r2, #4
 8002822:	4252      	negs	r2, r2
 8002824:	4313      	orrs	r3, r2
 8002826:	3301      	adds	r3, #1
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b23      	ldr	r3, [pc, #140]	@ (80028b8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800282c:	701a      	strb	r2, [r3, #0]
				lcd_update_pending = 1;  // Signal LCD update
 800282e:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e005      	b.n	8002842 <HAL_TIM_PeriodElapsedCallback+0x86>
			}
		}
		else  // Button released
		{
			button_debounce_counter = 0;
 8002836:	4b1e      	ldr	r3, [pc, #120]	@ (80028b0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002838:	2200      	movs	r2, #0
 800283a:	801a      	strh	r2, [r3, #0]
			last_button_state = GPIO_PIN_SET;
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
		}

		// Reset EEPROM logic (button held for 1 second)
		static uint16_t button_hold_counter = 0;
		if (buttonState == GPIO_PIN_RESET)
 8002842:	230f      	movs	r3, #15
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			if (++button_hold_counter >= 1000)  // 100 ticks = 1 second
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800285a:	881a      	ldrh	r2, [r3, #0]
 800285c:	23fa      	movs	r3, #250	@ 0xfa
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d306      	bcc.n	8002872 <HAL_TIM_PeriodElapsedCallback+0xb6>
			{
				reset_eeprom_flag = 1;
 8002864:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e002      	b.n	8002872 <HAL_TIM_PeriodElapsedCallback+0xb6>
			}
		}
		else
		{
			button_hold_counter = 0;
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800286e:	2200      	movs	r2, #0
 8002870:	801a      	strh	r2, [r3, #0]
		}

		// Temperature sampling
		if (++tick_counter >= 300)  // 3 seconds at 100 Hz
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002880:	881a      	ldrh	r2, [r3, #0]
 8002882:	2396      	movs	r3, #150	@ 0x96
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	429a      	cmp	r2, r3
 8002888:	d306      	bcc.n	8002898 <HAL_TIM_PeriodElapsedCallback+0xdc>
		{
			tick_counter = 0;
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800288c:	2200      	movs	r2, #0
 800288e:	801a      	strh	r2, [r3, #0]
			sample_pending = 1;
 8002890:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
			led_tick_counter = 0;

		}
	}
	*/
}
 8002896:	e006      	b.n	80028a6 <HAL_TIM_PeriodElapsedCallback+0xea>
		else if(tick_counter >= 100) // 1 second
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2b63      	cmp	r3, #99	@ 0x63
 800289e:	d902      	bls.n	80028a6 <HAL_TIM_PeriodElapsedCallback+0xea>
			_1_second_elapsed = 1;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bdb0      	pop	{r4, r5, r7, pc}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	20000170 	.word	0x20000170
 80028b4:	20000000 	.word	0x20000000
 80028b8:	2000014c 	.word	0x2000014c
 80028bc:	80000003 	.word	0x80000003
 80028c0:	2000014d 	.word	0x2000014d
 80028c4:	20000172 	.word	0x20000172
 80028c8:	2000014f 	.word	0x2000014f
 80028cc:	20000174 	.word	0x20000174
 80028d0:	2000014e 	.word	0x2000014e
 80028d4:	20000150 	.word	0x20000150

080028d8 <set_time>:
void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b089      	sub	sp, #36	@ 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	0004      	movs	r4, r0
 80028e0:	0008      	movs	r0, r1
 80028e2:	0011      	movs	r1, r2
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	1c22      	adds	r2, r4, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	1dbb      	adds	r3, r7, #6
 80028ec:	1c02      	adds	r2, r0, #0
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	1d7b      	adds	r3, r7, #5
 80028f2:	1c0a      	adds	r2, r1, #0
 80028f4:	701a      	strb	r2, [r3, #0]
	RTC_TimeTypeDef sTime = {0};
 80028f6:	240c      	movs	r4, #12
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	0018      	movs	r0, r3
 80028fc:	2314      	movs	r3, #20
 80028fe:	001a      	movs	r2, r3
 8002900:	2100      	movs	r1, #0
 8002902:	f003 fde3 	bl	80064cc <memset>

	sTime.Hours = hr;
 8002906:	0021      	movs	r1, r4
 8002908:	187b      	adds	r3, r7, r1
 800290a:	1dfa      	adds	r2, r7, #7
 800290c:	7812      	ldrb	r2, [r2, #0]
 800290e:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = min;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	1dba      	adds	r2, r7, #6
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = sec;
 8002918:	187b      	adds	r3, r7, r1
 800291a:	1d7a      	adds	r2, r7, #5
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800292c:	1879      	adds	r1, r7, r1
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <set_time+0x70>)
 8002930:	2200      	movs	r2, #0
 8002932:	0018      	movs	r0, r3
 8002934:	f002 fec0 	bl	80056b8 <HAL_RTC_SetTime>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d001      	beq.n	8002940 <set_time+0x68>
	{
		Error_Handler();
 800293c:	f000 fbee 	bl	800311c <Error_Handler>
	}
}
 8002940:	46c0      	nop			@ (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b009      	add	sp, #36	@ 0x24
 8002946:	bd90      	pop	{r4, r7, pc}
 8002948:	200000d4 	.word	0x200000d4

0800294c <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date, uint8_t day)  // monday = 1
{
 800294c:	b5b0      	push	{r4, r5, r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	0005      	movs	r5, r0
 8002954:	000c      	movs	r4, r1
 8002956:	0010      	movs	r0, r2
 8002958:	0019      	movs	r1, r3
 800295a:	1dfb      	adds	r3, r7, #7
 800295c:	1c2a      	adds	r2, r5, #0
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	1dbb      	adds	r3, r7, #6
 8002962:	1c22      	adds	r2, r4, #0
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	1d7b      	adds	r3, r7, #5
 8002968:	1c02      	adds	r2, r0, #0
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	1c0a      	adds	r2, r1, #0
 8002970:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef sDate = {0};
 8002972:	210c      	movs	r1, #12
 8002974:	187b      	adds	r3, r7, r1
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
	sDate.WeekDay = day;
 800297a:	187b      	adds	r3, r7, r1
 800297c:	1d3a      	adds	r2, r7, #4
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 8002982:	187b      	adds	r3, r7, r1
 8002984:	1dba      	adds	r2, r7, #6
 8002986:	7812      	ldrb	r2, [r2, #0]
 8002988:	705a      	strb	r2, [r3, #1]
	sDate.Date = date;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	1d7a      	adds	r2, r7, #5
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	709a      	strb	r2, [r3, #2]
	sDate.Year = year;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	1dfa      	adds	r2, r7, #7
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	70da      	strb	r2, [r3, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800299a:	1879      	adds	r1, r7, r1
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <set_date+0x78>)
 800299e:	2200      	movs	r2, #0
 80029a0:	0018      	movs	r0, r3
 80029a2:	f002 ff8d 	bl	80058c0 <HAL_RTC_SetDate>
 80029a6:	1e03      	subs	r3, r0, #0
 80029a8:	d001      	beq.n	80029ae <set_date+0x62>
	{
		Error_Handler();
 80029aa:	f000 fbb7 	bl	800311c <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 80029ae:	4a06      	ldr	r2, [pc, #24]	@ (80029c8 <set_date+0x7c>)
 80029b0:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <set_date+0x78>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	0018      	movs	r0, r3
 80029b6:	f003 f937 	bl	8005c28 <HAL_RTCEx_BKUPWrite>
}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b004      	add	sp, #16
 80029c0:	bdb0      	pop	{r4, r5, r7, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	200000d4 	.word	0x200000d4
 80029c8:	00002345 	.word	0x00002345

080029cc <get_time_date>:

void get_time_date(char *time, char *date)
{
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b08a      	sub	sp, #40	@ 0x28
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80029d6:	2408      	movs	r4, #8
 80029d8:	1939      	adds	r1, r7, r4
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <get_time_date+0x70>)
 80029dc:	2200      	movs	r2, #0
 80029de:	0018      	movs	r0, r3
 80029e0:	f002 ff10 	bl	8005804 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80029e4:	251c      	movs	r5, #28
 80029e6:	1979      	adds	r1, r7, r5
 80029e8:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <get_time_date+0x70>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	0018      	movs	r0, r3
 80029ee:	f002 fff7 	bl	80059e0 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80029f2:	0021      	movs	r1, r4
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	001a      	movs	r2, r3
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	785b      	ldrb	r3, [r3, #1]
 80029fe:	001c      	movs	r4, r3
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	789b      	ldrb	r3, [r3, #2]
 8002a04:	490e      	ldr	r1, [pc, #56]	@ (8002a40 <get_time_date+0x74>)
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	0023      	movs	r3, r4
 8002a0c:	f003 fd3e 	bl	800648c <siprintf>

  /* Display date Format: dd-mm-yyyy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8002a10:	197b      	adds	r3, r7, r5
 8002a12:	789b      	ldrb	r3, [r3, #2]
 8002a14:	001a      	movs	r2, r3
 8002a16:	197b      	adds	r3, r7, r5
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	001c      	movs	r4, r3
 8002a1c:	197b      	adds	r3, r7, r5
 8002a1e:	78db      	ldrb	r3, [r3, #3]
 8002a20:	21fa      	movs	r1, #250	@ 0xfa
 8002a22:	00c9      	lsls	r1, r1, #3
 8002a24:	468c      	mov	ip, r1
 8002a26:	4463      	add	r3, ip
 8002a28:	4906      	ldr	r1, [pc, #24]	@ (8002a44 <get_time_date+0x78>)
 8002a2a:	6838      	ldr	r0, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	0023      	movs	r3, r4
 8002a30:	f003 fd2c 	bl	800648c <siprintf>
}
 8002a34:	46c0      	nop			@ (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b008      	add	sp, #32
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	200000d4 	.word	0x200000d4
 8002a40:	08006de0 	.word	0x08006de0
 8002a44:	08006df0 	.word	0x08006df0

08002a48 <init_lcd_screens>:


void init_lcd_screens()
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	//uint8_t amount_screens = sizeof(lcd_screens) / sizeof(lcd_screens[0]); // way to calculate
	lcd_screens[0] = lcd_print_current_climate;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <init_lcd_screens+0x2c>)
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <init_lcd_screens+0x30>)
 8002a50:	601a      	str	r2, [r3, #0]
	lcd_screens[1] = lcd_print_minmax_temp;
 8002a52:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <init_lcd_screens+0x2c>)
 8002a54:	4a09      	ldr	r2, [pc, #36]	@ (8002a7c <init_lcd_screens+0x34>)
 8002a56:	605a      	str	r2, [r3, #4]
	lcd_screens[2] = lcd_print_minmax_hum;
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <init_lcd_screens+0x2c>)
 8002a5a:	4a09      	ldr	r2, [pc, #36]	@ (8002a80 <init_lcd_screens+0x38>)
 8002a5c:	609a      	str	r2, [r3, #8]
	lcd_screens[3] = lcd_print_time;
 8002a5e:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <init_lcd_screens+0x2c>)
 8002a60:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <init_lcd_screens+0x3c>)
 8002a62:	60da      	str	r2, [r3, #12]
	lcd_screens[0](&cdata);
 8002a64:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <init_lcd_screens+0x2c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <init_lcd_screens+0x40>)
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	4798      	blx	r3
}
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000013c 	.word	0x2000013c
 8002a78:	08002a8d 	.word	0x08002a8d
 8002a7c:	08002b09 	.word	0x08002b09
 8002a80:	08002b85 	.word	0x08002b85
 8002a84:	08002c01 	.word	0x08002c01
 8002a88:	20000154 	.word	0x20000154

08002a8c <lcd_print_current_climate>:
	lcd_place_cursor(hi2c, 1, 0);
	lcd_print_string(hi2c, hum_buffer);
}

void lcd_print_current_climate(climate_data *clim_data)
{
 8002a8c:	b5b0      	push	{r4, r5, r7, lr}
 8002a8e:	b092      	sub	sp, #72	@ 0x48
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002a94:	2428      	movs	r4, #40	@ 0x28
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	221c      	movs	r2, #28
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f003 fd12 	bl	80064cc <memset>
	char hum_str_buffer[32] = {0};
 8002aa8:	2508      	movs	r5, #8
 8002aaa:	197b      	adds	r3, r7, r5
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	221c      	movs	r2, #28
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f003 fd08 	bl	80064cc <memset>

	sprintf(temp_str_buffer, "Cur Temp: %dF", (int) clim_data->current_temp);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	1c18      	adds	r0, r3, #0
 8002ac2:	f7fd fcb7 	bl	8000434 <__aeabi_f2iz>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	490d      	ldr	r1, [pc, #52]	@ (8002b00 <lcd_print_current_climate+0x74>)
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	0018      	movs	r0, r3
 8002ace:	f003 fcdd 	bl	800648c <siprintf>
	sprintf(hum_str_buffer, "Cur Hum:  %d%%", (int) clim_data->current_hum);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	1c18      	adds	r0, r3, #0
 8002ad8:	f7fd fcac 	bl	8000434 <__aeabi_f2iz>
 8002adc:	0002      	movs	r2, r0
 8002ade:	4909      	ldr	r1, [pc, #36]	@ (8002b04 <lcd_print_current_climate+0x78>)
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f003 fcd2 	bl	800648c <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	197a      	adds	r2, r7, r5
 8002aee:	1939      	adds	r1, r7, r4
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7ff fe41 	bl	8002778 <lcd_print_2_lines>
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b012      	add	sp, #72	@ 0x48
 8002afc:	bdb0      	pop	{r4, r5, r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	08006e00 	.word	0x08006e00
 8002b04:	08006e10 	.word	0x08006e10

08002b08 <lcd_print_minmax_temp>:

void lcd_print_minmax_temp(climate_data *clim_data)
{
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b092      	sub	sp, #72	@ 0x48
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002b10:	2428      	movs	r4, #40	@ 0x28
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	221c      	movs	r2, #28
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f003 fcd4 	bl	80064cc <memset>
	char hum_str_buffer[32] = {0};
 8002b24:	2508      	movs	r5, #8
 8002b26:	197b      	adds	r3, r7, r5
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	221c      	movs	r2, #28
 8002b30:	2100      	movs	r1, #0
 8002b32:	0018      	movs	r0, r3
 8002b34:	f003 fcca 	bl	80064cc <memset>

	sprintf(temp_str_buffer, "Max Temp: %dF", (int) clim_data->max_temp);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1c18      	adds	r0, r3, #0
 8002b3e:	f7fd fc79 	bl	8000434 <__aeabi_f2iz>
 8002b42:	0002      	movs	r2, r0
 8002b44:	490d      	ldr	r1, [pc, #52]	@ (8002b7c <lcd_print_minmax_temp+0x74>)
 8002b46:	193b      	adds	r3, r7, r4
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f003 fc9f 	bl	800648c <siprintf>
	sprintf(hum_str_buffer, "Min Temp: %dF", (int) clim_data->min_temp);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	1c18      	adds	r0, r3, #0
 8002b54:	f7fd fc6e 	bl	8000434 <__aeabi_f2iz>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	4909      	ldr	r1, [pc, #36]	@ (8002b80 <lcd_print_minmax_temp+0x78>)
 8002b5c:	197b      	adds	r3, r7, r5
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f003 fc94 	bl	800648c <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	197a      	adds	r2, r7, r5
 8002b6a:	1939      	adds	r1, r7, r4
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7ff fe03 	bl	8002778 <lcd_print_2_lines>
}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b012      	add	sp, #72	@ 0x48
 8002b78:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	08006e20 	.word	0x08006e20
 8002b80:	08006e30 	.word	0x08006e30

08002b84 <lcd_print_minmax_hum>:

void lcd_print_minmax_hum(climate_data *clim_data)
{
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b092      	sub	sp, #72	@ 0x48
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002b8c:	2428      	movs	r4, #40	@ 0x28
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	3304      	adds	r3, #4
 8002b96:	221c      	movs	r2, #28
 8002b98:	2100      	movs	r1, #0
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f003 fc96 	bl	80064cc <memset>
	char hum_str_buffer[32] = {0};
 8002ba0:	2508      	movs	r5, #8
 8002ba2:	197b      	adds	r3, r7, r5
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	221c      	movs	r2, #28
 8002bac:	2100      	movs	r1, #0
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f003 fc8c 	bl	80064cc <memset>

	sprintf(temp_str_buffer, "Max Hum: %d%%", (int) clim_data->max_hum);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	1c18      	adds	r0, r3, #0
 8002bba:	f7fd fc3b 	bl	8000434 <__aeabi_f2iz>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	490d      	ldr	r1, [pc, #52]	@ (8002bf8 <lcd_print_minmax_hum+0x74>)
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f003 fc61 	bl	800648c <siprintf>
	sprintf(hum_str_buffer, "Min Hum: %d%%", (int) clim_data->min_hum);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	1c18      	adds	r0, r3, #0
 8002bd0:	f7fd fc30 	bl	8000434 <__aeabi_f2iz>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	4909      	ldr	r1, [pc, #36]	@ (8002bfc <lcd_print_minmax_hum+0x78>)
 8002bd8:	197b      	adds	r3, r7, r5
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f003 fc56 	bl	800648c <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	197a      	adds	r2, r7, r5
 8002be6:	1939      	adds	r1, r7, r4
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff fdc5 	bl	8002778 <lcd_print_2_lines>
}
 8002bee:	46c0      	nop			@ (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b012      	add	sp, #72	@ 0x48
 8002bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	08006e40 	.word	0x08006e40
 8002bfc:	08006e50 	.word	0x08006e50

08002c00 <lcd_print_time>:

void lcd_print_time(climate_data *clim_data)
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b098      	sub	sp, #96	@ 0x60
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;

	char time_buf[32] = {0};
 8002c08:	242c      	movs	r4, #44	@ 0x2c
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	3304      	adds	r3, #4
 8002c12:	221c      	movs	r2, #28
 8002c14:	2100      	movs	r1, #0
 8002c16:	0018      	movs	r0, r3
 8002c18:	f003 fc58 	bl	80064cc <memset>
	char date_buf[32] = {0};
 8002c1c:	250c      	movs	r5, #12
 8002c1e:	197b      	adds	r3, r7, r5
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	3304      	adds	r3, #4
 8002c26:	221c      	movs	r2, #28
 8002c28:	2100      	movs	r1, #0
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f003 fc4e 	bl	80064cc <memset>

	get_time_date(time_buf, date_buf);
 8002c30:	197a      	adds	r2, r7, r5
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff fec8 	bl	80029cc <get_time_date>

	lcd_print_2_lines(clim_data->hal_i2c, time_buf, date_buf);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	197a      	adds	r2, r7, r5
 8002c42:	1939      	adds	r1, r7, r4
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff fd97 	bl	8002778 <lcd_print_2_lines>
}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b018      	add	sp, #96	@ 0x60
 8002c50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c5a:	f000 fc8d 	bl	8003578 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c5e:	f000 f8c7 	bl	8002df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c62:	f000 fa03 	bl	800306c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c66:	f000 f937 	bl	8002ed8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002c6a:	f000 f9a7 	bl	8002fbc <MX_TIM2_Init>
  MX_RTC_Init();
 8002c6e:	f000 f973 	bl	8002f58 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_StatusTypeDef retval = HAL_OK;
 8002c72:	1dbb      	adds	r3, r7, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
  //retval = reset_climate_data_eeprom(&hi2c1);
  retval = init_climate_data(&cdata, &hi2c1);
 8002c78:	1dbc      	adds	r4, r7, #6
 8002c7a:	4a50      	ldr	r2, [pc, #320]	@ (8002dbc <main+0x168>)
 8002c7c:	4b50      	ldr	r3, [pc, #320]	@ (8002dc0 <main+0x16c>)
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff fac2 	bl	800220a <init_climate_data>
 8002c86:	0003      	movs	r3, r0
 8002c88:	7023      	strb	r3, [r4, #0]
  init_lcd_screens();
 8002c8a:	f7ff fedd 	bl	8002a48 <init_lcd_screens>

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2345)
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <main+0x170>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	0018      	movs	r0, r3
 8002c94:	f002 ffe0 	bl	8005c58 <HAL_RTCEx_BKUPRead>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc8 <main+0x174>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00a      	beq.n	8002cb6 <main+0x62>
  	{
  	  set_time(19, 19, 00);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2113      	movs	r1, #19
 8002ca4:	2013      	movs	r0, #19
 8002ca6:	f7ff fe17 	bl	80028d8 <set_time>
  	  set_date(25, 2, 17, 1);
 8002caa:	2301      	movs	r3, #1
 8002cac:	2211      	movs	r2, #17
 8002cae:	2102      	movs	r1, #2
 8002cb0:	2019      	movs	r0, #25
 8002cb2:	f7ff fe4b 	bl	800294c <set_date>
  	}

  while (1)
  {
	  if (lcd_update_pending)
 8002cb6:	4b45      	ldr	r3, [pc, #276]	@ (8002dcc <main+0x178>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <main+0x94>
	  {
		  lcd_update_pending = 0;  // Clear the flag
 8002cc0:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <main+0x178>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
		  lcd_clear_display(cdata.hal_i2c);
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc0 <main+0x16c>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff fd44 	bl	8002758 <lcd_clear_display>
		  HAL_Delay(10);
 8002cd0:	200a      	movs	r0, #10
 8002cd2:	f000 fcb5 	bl	8003640 <HAL_Delay>
		  lcd_screens[current_lcd_screen](&cdata);  // Update LCD immediately
 8002cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd0 <main+0x17c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	001a      	movs	r2, r3
 8002cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd4 <main+0x180>)
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	58d3      	ldr	r3, [r2, r3]
 8002ce2:	4a37      	ldr	r2, [pc, #220]	@ (8002dc0 <main+0x16c>)
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	4798      	blx	r3
	  }

	  // Check for temperature sampling
	  uint8_t trigger_screen_refresh = 0;
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
	  if(reset_eeprom_flag)
 8002cee:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd8 <main+0x184>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d025      	beq.n	8002d44 <main+0xf0>
	  {
		  reset_eeprom_flag = 0;
 8002cf8:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <main+0x184>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]

		  lcd_print_2_lines(&hi2c1, "RESETTING EEPROM", ".......");
 8002cfe:	4a37      	ldr	r2, [pc, #220]	@ (8002ddc <main+0x188>)
 8002d00:	4937      	ldr	r1, [pc, #220]	@ (8002de0 <main+0x18c>)
 8002d02:	4b2e      	ldr	r3, [pc, #184]	@ (8002dbc <main+0x168>)
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff fd37 	bl	8002778 <lcd_print_2_lines>
		  HAL_Delay(2500);
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <main+0x190>)
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 fc97 	bl	8003640 <HAL_Delay>
		  if (reset_climate_data_eeprom(&hi2c1) != HAL_OK)
 8002d12:	4b2a      	ldr	r3, [pc, #168]	@ (8002dbc <main+0x168>)
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff fbab 	bl	8002470 <reset_climate_data_eeprom>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d143      	bne.n	8002da6 <main+0x152>
		  {
			  break;
		  }
		  if(init_climate_data(&cdata, &hi2c1) != HAL_OK)
 8002d1e:	4a27      	ldr	r2, [pc, #156]	@ (8002dbc <main+0x168>)
 8002d20:	4b27      	ldr	r3, [pc, #156]	@ (8002dc0 <main+0x16c>)
 8002d22:	0011      	movs	r1, r2
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff fa70 	bl	800220a <init_climate_data>
 8002d2a:	1e03      	subs	r3, r0, #0
 8002d2c:	d13d      	bne.n	8002daa <main+0x156>
		  {
			  break;
		  }
		  sample_pending = 1;
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002de8 <main+0x194>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
		  trigger_screen_refresh = 1;
 8002d34:	1dfb      	adds	r3, r7, #7
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 8002d3a:	23fa      	movs	r3, #250	@ 0xfa
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 fc7e 	bl	8003640 <HAL_Delay>
	  }


	  if (sample_pending)
 8002d44:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <main+0x194>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <main+0x12e>
	  {
		  sample_pending = 0;  // Clear the flag
 8002d4e:	4b26      	ldr	r3, [pc, #152]	@ (8002de8 <main+0x194>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);

		  if (update_climate_data_in_eeprom(&cdata) != HAL_OK)
 8002d54:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc0 <main+0x16c>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7ff fa85 	bl	8002266 <update_climate_data_in_eeprom>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d126      	bne.n	8002dae <main+0x15a>
		  {
			  break;
		  }
		  //print_climate_data_to_uart(&cdata, &huart2);
		  if(current_lcd_screen == 0 || trigger_screen_refresh)
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <main+0x17c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <main+0x11c>
 8002d68:	1dfb      	adds	r3, r7, #7
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <main+0x12e>
		  {
			  lcd_screens[current_lcd_screen](&cdata);
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <main+0x17c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	001a      	movs	r2, r3
 8002d76:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <main+0x180>)
 8002d78:	0092      	lsls	r2, r2, #2
 8002d7a:	58d3      	ldr	r3, [r2, r3]
 8002d7c:	4a10      	ldr	r2, [pc, #64]	@ (8002dc0 <main+0x16c>)
 8002d7e:	0010      	movs	r0, r2
 8002d80:	4798      	blx	r3
		  }
		 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	  }

	  if(_1_second_elapsed && current_lcd_screen == 3)
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <main+0x198>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <main+0x14e>
 8002d8c:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <main+0x17c>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d106      	bne.n	8002da2 <main+0x14e>
	  {
		  lcd_print_time(&cdata);
 8002d94:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <main+0x16c>)
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7ff ff32 	bl	8002c00 <lcd_print_time>
		  _1_second_elapsed = 0;
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <main+0x198>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	  }

	  // Other tasks can be added here...

	  __WFI();
 8002da2:	bf30      	wfi
  {
 8002da4:	e787      	b.n	8002cb6 <main+0x62>
			  break;
 8002da6:	46c0      	nop			@ (mov r8, r8)
 8002da8:	e002      	b.n	8002db0 <main+0x15c>
			  break;
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	e000      	b.n	8002db0 <main+0x15c>
			  break;
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b003      	add	sp, #12
 8002db8:	bd90      	pop	{r4, r7, pc}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	20000080 	.word	0x20000080
 8002dc0:	20000154 	.word	0x20000154
 8002dc4:	200000d4 	.word	0x200000d4
 8002dc8:	00002345 	.word	0x00002345
 8002dcc:	2000014d 	.word	0x2000014d
 8002dd0:	2000014c 	.word	0x2000014c
 8002dd4:	2000013c 	.word	0x2000013c
 8002dd8:	2000014f 	.word	0x2000014f
 8002ddc:	08006e60 	.word	0x08006e60
 8002de0:	08006e68 	.word	0x08006e68
 8002de4:	000009c4 	.word	0x000009c4
 8002de8:	2000014e 	.word	0x2000014e
 8002dec:	20000150 	.word	0x20000150

08002df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b099      	sub	sp, #100	@ 0x64
 8002df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df6:	242c      	movs	r4, #44	@ 0x2c
 8002df8:	193b      	adds	r3, r7, r4
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	2334      	movs	r3, #52	@ 0x34
 8002dfe:	001a      	movs	r2, r3
 8002e00:	2100      	movs	r1, #0
 8002e02:	f003 fb63 	bl	80064cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e06:	231c      	movs	r3, #28
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	001a      	movs	r2, r3
 8002e10:	2100      	movs	r1, #0
 8002e12:	f003 fb5b 	bl	80064cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	0018      	movs	r0, r3
 8002e1a:	2318      	movs	r3, #24
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f003 fb54 	bl	80064cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002e24:	0021      	movs	r1, r4
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	220a      	movs	r2, #10
 8002e2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	2201      	movs	r2, #1
 8002e30:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	2210      	movs	r2, #16
 8002e36:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	0018      	movs	r0, r3
 8002e48:	f001 fdde 	bl	8004a08 <HAL_RCC_OscConfig>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d001      	beq.n	8002e54 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002e50:	f000 f964 	bl	800311c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e54:	211c      	movs	r1, #28
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	2207      	movs	r2, #7
 8002e5a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2200      	movs	r2, #0
 8002e60:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	2100      	movs	r1, #0
 8002e72:	0018      	movs	r0, r3
 8002e74:	f002 f94e 	bl	8005114 <HAL_RCC_ClockConfig>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d001      	beq.n	8002e80 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002e7c:	f000 f94e 	bl	800311c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <SystemClock_Config+0xdc>)
 8002e84:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2280      	movs	r2, #128	@ 0x80
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	0018      	movs	r0, r3
 8002e98:	f002 fa88 	bl	80053ac <HAL_RCCEx_PeriphCLKConfig>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002ea0:	f000 f93c 	bl	800311c <Error_Handler>
  }

  /* Select LSI as RTC Clock Source */
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI);
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <SystemClock_Config+0xe0>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <SystemClock_Config+0xe4>)
 8002eaa:	401a      	ands	r2, r3
 8002eac:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <SystemClock_Config+0xe0>)
 8002eae:	2180      	movs	r1, #128	@ 0x80
 8002eb0:	0089      	lsls	r1, r1, #2
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <SystemClock_Config+0xe0>)
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <SystemClock_Config+0xe0>)
 8002ebc:	2180      	movs	r1, #128	@ 0x80
 8002ebe:	0209      	lsls	r1, r1, #8
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	621a      	str	r2, [r3, #32]
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b019      	add	sp, #100	@ 0x64
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	00010020 	.word	0x00010020
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	fffffcff 	.word	0xfffffcff

08002ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002ede:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <MX_I2C1_Init+0x78>)
 8002ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <MX_I2C1_Init+0x7c>)
 8002ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ee8:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002eee:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ef4:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002efa:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f06:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f12:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 fe37 	bl	8003b88 <HAL_I2C_Init>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002f1e:	f000 f8fd 	bl	800311c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f22:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002f24:	2100      	movs	r1, #0
 8002f26:	0018      	movs	r0, r3
 8002f28:	f001 fcd6 	bl	80048d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f30:	f000 f8f4 	bl	800311c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <MX_I2C1_Init+0x74>)
 8002f36:	2100      	movs	r1, #0
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f001 fd19 	bl	8004970 <HAL_I2CEx_ConfigDigitalFilter>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d001      	beq.n	8002f46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f42:	f000 f8eb 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000080 	.word	0x20000080
 8002f50:	40005400 	.word	0x40005400
 8002f54:	0010020a 	.word	0x0010020a

08002f58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	0018      	movs	r0, r3
 8002f62:	2314      	movs	r3, #20
 8002f64:	001a      	movs	r2, r3
 8002f66:	2100      	movs	r1, #0
 8002f68:	f003 fab0 	bl	80064cc <memset>
  RTC_DateTypeDef sDate = {0};
 8002f6c:	003b      	movs	r3, r7
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f72:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <MX_RTC_Init+0x5c>)
 8002f74:	4a10      	ldr	r2, [pc, #64]	@ (8002fb8 <MX_RTC_Init+0x60>)
 8002f76:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f78:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <MX_RTC_Init+0x5c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <MX_RTC_Init+0x5c>)
 8002f80:	227c      	movs	r2, #124	@ 0x7c
 8002f82:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <MX_RTC_Init+0x5c>)
 8002f86:	22ff      	movs	r2, #255	@ 0xff
 8002f88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <MX_RTC_Init+0x5c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <MX_RTC_Init+0x5c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f96:	4b07      	ldr	r3, [pc, #28]	@ (8002fb4 <MX_RTC_Init+0x5c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <MX_RTC_Init+0x5c>)
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f002 faf2 	bl	8005588 <HAL_RTC_Init>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d001      	beq.n	8002fac <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002fa8:	f000 f8b8 	bl	800311c <Error_Handler>
  */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fac:	46c0      	nop			@ (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b006      	add	sp, #24
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200000d4 	.word	0x200000d4
 8002fb8:	40002800 	.word	0x40002800

08002fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	2310      	movs	r3, #16
 8002fca:	001a      	movs	r2, r3
 8002fcc:	2100      	movs	r1, #0
 8002fce:	f003 fa7d 	bl	80064cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd2:	003b      	movs	r3, r7
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	001a      	movs	r2, r3
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f003 fa76 	bl	80064cc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fe0:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8002fe2:	2280      	movs	r2, #128	@ 0x80
 8002fe4:	05d2      	lsls	r2, r2, #23
 8002fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8002fea:	4a1f      	ldr	r2, [pc, #124]	@ (8003068 <MX_TIM2_Init+0xac>)
 8002fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8002ff6:	2264      	movs	r2, #100	@ 0x64
 8002ff8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	4b18      	ldr	r3, [pc, #96]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003006:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8003008:	0018      	movs	r0, r3
 800300a:	f002 fe3b 	bl	8005c84 <HAL_TIM_Base_Init>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003012:	f000 f883 	bl	800311c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003016:	2108      	movs	r1, #8
 8003018:	187b      	adds	r3, r7, r1
 800301a:	2280      	movs	r2, #128	@ 0x80
 800301c:	0152      	lsls	r2, r2, #5
 800301e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003020:	187a      	adds	r2, r7, r1
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8003024:	0011      	movs	r1, r2
 8003026:	0018      	movs	r0, r3
 8003028:	f002 ffb6 	bl	8005f98 <HAL_TIM_ConfigClockSource>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003030:	f000 f874 	bl	800311c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003034:	003b      	movs	r3, r7
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800303a:	003b      	movs	r3, r7
 800303c:	2200      	movs	r2, #0
 800303e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003040:	003a      	movs	r2, r7
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8003044:	0011      	movs	r1, r2
 8003046:	0018      	movs	r0, r3
 8003048:	f003 f9b8 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 800304c:	1e03      	subs	r3, r0, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003050:	f000 f864 	bl	800311c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003054:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <MX_TIM2_Init+0xa8>)
 8003056:	0018      	movs	r0, r3
 8003058:	f002 fe64 	bl	8005d24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 800305c:	46c0      	nop			@ (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b006      	add	sp, #24
 8003062:	bd80      	pop	{r7, pc}
 8003064:	200000f4 	.word	0x200000f4
 8003068:	0000031f 	.word	0x0000031f

0800306c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b089      	sub	sp, #36	@ 0x24
 8003070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003072:	240c      	movs	r4, #12
 8003074:	193b      	adds	r3, r7, r4
 8003076:	0018      	movs	r0, r3
 8003078:	2314      	movs	r3, #20
 800307a:	001a      	movs	r2, r3
 800307c:	2100      	movs	r1, #0
 800307e:	f003 fa25 	bl	80064cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	4b25      	ldr	r3, [pc, #148]	@ (8003118 <MX_GPIO_Init+0xac>)
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <MX_GPIO_Init+0xac>)
 8003088:	2180      	movs	r1, #128	@ 0x80
 800308a:	0289      	lsls	r1, r1, #10
 800308c:	430a      	orrs	r2, r1
 800308e:	615a      	str	r2, [r3, #20]
 8003090:	4b21      	ldr	r3, [pc, #132]	@ (8003118 <MX_GPIO_Init+0xac>)
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	2380      	movs	r3, #128	@ 0x80
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	4b1e      	ldr	r3, [pc, #120]	@ (8003118 <MX_GPIO_Init+0xac>)
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <MX_GPIO_Init+0xac>)
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	02c9      	lsls	r1, r1, #11
 80030a8:	430a      	orrs	r2, r1
 80030aa:	615a      	str	r2, [r3, #20]
 80030ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <MX_GPIO_Init+0xac>)
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	2380      	movs	r3, #128	@ 0x80
 80030b2:	02db      	lsls	r3, r3, #11
 80030b4:	4013      	ands	r3, r2
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80030ba:	2390      	movs	r3, #144	@ 0x90
 80030bc:	05db      	lsls	r3, r3, #23
 80030be:	2200      	movs	r2, #0
 80030c0:	2108      	movs	r1, #8
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 fd43 	bl	8003b4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030c8:	193b      	adds	r3, r7, r4
 80030ca:	2208      	movs	r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	193b      	adds	r3, r7, r4
 80030d0:	2201      	movs	r2, #1
 80030d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	193b      	adds	r3, r7, r4
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	193b      	adds	r3, r7, r4
 80030dc:	2200      	movs	r2, #0
 80030de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	193a      	adds	r2, r7, r4
 80030e2:	2390      	movs	r3, #144	@ 0x90
 80030e4:	05db      	lsls	r3, r3, #23
 80030e6:	0011      	movs	r1, r2
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 fbab 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030ee:	193b      	adds	r3, r7, r4
 80030f0:	2280      	movs	r2, #128	@ 0x80
 80030f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f4:	193b      	adds	r3, r7, r4
 80030f6:	2200      	movs	r2, #0
 80030f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	193b      	adds	r3, r7, r4
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003100:	193a      	adds	r2, r7, r4
 8003102:	2390      	movs	r3, #144	@ 0x90
 8003104:	05db      	lsls	r3, r3, #23
 8003106:	0011      	movs	r1, r2
 8003108:	0018      	movs	r0, r3
 800310a:	f000 fb9b 	bl	8003844 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b009      	add	sp, #36	@ 0x24
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	40021000 	.word	0x40021000

0800311c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003120:	b672      	cpsid	i
}
 8003122:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	e7fd      	b.n	8003124 <Error_Handler+0x8>

08003128 <get_temperature_sht41>:

#include "sht41.h"


HAL_StatusTypeDef get_temperature_sht41(I2C_HandleTypeDef *i2ch, float* data_buffer)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b08d      	sub	sp, #52	@ 0x34
 800312c:	af02      	add	r7, sp, #8
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	uint8_t inc_bytes[6] = {0};
 8003132:	230c      	movs	r3, #12
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	809a      	strh	r2, [r3, #4]

	if(HAL_I2C_IsDeviceReady(i2ch, SHT41_I2C_ADDR, 10, 1000) != HAL_OK) {
 800313e:	23fa      	movs	r3, #250	@ 0xfa
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	220a      	movs	r2, #10
 8003146:	2188      	movs	r1, #136	@ 0x88
 8003148:	f000 fff6 	bl	8004138 <HAL_I2C_IsDeviceReady>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d001      	beq.n	8003154 <get_temperature_sht41+0x2c>
	  return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0ab      	b.n	80032ac <get_temperature_sht41+0x184>
	}

	HAL_Delay(10);
 8003154:	200a      	movs	r0, #10
 8003156:	f000 fa73 	bl	8003640 <HAL_Delay>
	uint8_t command = 0xFD;
 800315a:	210b      	movs	r1, #11
 800315c:	187b      	adds	r3, r7, r1
 800315e:	22fd      	movs	r2, #253	@ 0xfd
 8003160:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(i2ch, SHT41_I2C_ADDR, &command, 1, 1000) != HAL_OK) {
 8003162:	187a      	adds	r2, r7, r1
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	23fa      	movs	r3, #250	@ 0xfa
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2301      	movs	r3, #1
 800316e:	2188      	movs	r1, #136	@ 0x88
 8003170:	f000 fdb0 	bl	8003cd4 <HAL_I2C_Master_Transmit>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d001      	beq.n	800317c <get_temperature_sht41+0x54>
	  return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e097      	b.n	80032ac <get_temperature_sht41+0x184>
	}

	HAL_Delay(10);
 800317c:	200a      	movs	r0, #10
 800317e:	f000 fa5f 	bl	8003640 <HAL_Delay>
	if(HAL_I2C_Master_Receive(i2ch, SHT41_I2C_ADDR, &inc_bytes, 6, 1000) != HAL_OK) {
 8003182:	230c      	movs	r3, #12
 8003184:	18fa      	adds	r2, r7, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	23fa      	movs	r3, #250	@ 0xfa
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2306      	movs	r3, #6
 8003190:	2188      	movs	r1, #136	@ 0x88
 8003192:	f000 fec9 	bl	8003f28 <HAL_I2C_Master_Receive>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d001      	beq.n	800319e <get_temperature_sht41+0x76>
	  return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e086      	b.n	80032ac <get_temperature_sht41+0x184>
	}

	uint16_t raw_temp = (inc_bytes[0] << 8) | inc_bytes[1];
 800319e:	210c      	movs	r1, #12
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b21a      	sxth	r2, r3
 80031b2:	2026      	movs	r0, #38	@ 0x26
 80031b4:	183b      	adds	r3, r7, r0
 80031b6:	801a      	strh	r2, [r3, #0]
	uint8_t temp_checksum = inc_bytes[2];
 80031b8:	2325      	movs	r3, #37	@ 0x25
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	187a      	adds	r2, r7, r1
 80031be:	7892      	ldrb	r2, [r2, #2]
 80031c0:	701a      	strb	r2, [r3, #0]
	uint16_t raw_humidity = (inc_bytes[3] << 8) | inc_bytes[4];
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	78db      	ldrb	r3, [r3, #3]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	791b      	ldrb	r3, [r3, #4]
 80031ce:	b21b      	sxth	r3, r3
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	2422      	movs	r4, #34	@ 0x22
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	801a      	strh	r2, [r3, #0]
	uint8_t humidity_checksum = inc_bytes[5];
 80031da:	2321      	movs	r3, #33	@ 0x21
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	187a      	adds	r2, r7, r1
 80031e0:	7952      	ldrb	r2, [r2, #5]
 80031e2:	701a      	strb	r2, [r3, #0]

	float tempc = -45 + 175 * (raw_temp / 65535.0);
 80031e4:	183b      	adds	r3, r7, r0
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fe fe25 	bl	8001e38 <__aeabi_i2d>
 80031ee:	2200      	movs	r2, #0
 80031f0:	4b30      	ldr	r3, [pc, #192]	@ (80032b4 <get_temperature_sht41+0x18c>)
 80031f2:	f7fd fca3 	bl	8000b3c <__aeabi_ddiv>
 80031f6:	0002      	movs	r2, r0
 80031f8:	000b      	movs	r3, r1
 80031fa:	0010      	movs	r0, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <get_temperature_sht41+0x190>)
 8003202:	f7fd ffb5 	bl	8001170 <__aeabi_dmul>
 8003206:	0002      	movs	r2, r0
 8003208:	000b      	movs	r3, r1
 800320a:	0010      	movs	r0, r2
 800320c:	0019      	movs	r1, r3
 800320e:	2200      	movs	r2, #0
 8003210:	4b2a      	ldr	r3, [pc, #168]	@ (80032bc <get_temperature_sht41+0x194>)
 8003212:	f7fe fa75 	bl	8001700 <__aeabi_dsub>
 8003216:	0002      	movs	r2, r0
 8003218:	000b      	movs	r3, r1
 800321a:	0010      	movs	r0, r2
 800321c:	0019      	movs	r1, r3
 800321e:	f7fe fe81 	bl	8001f24 <__aeabi_d2f>
 8003222:	1c03      	adds	r3, r0, #0
 8003224:	61fb      	str	r3, [r7, #28]
	float tempf = 32 + (tempc * (9.0/5));
 8003226:	69f8      	ldr	r0, [r7, #28]
 8003228:	f7fe fe34 	bl	8001e94 <__aeabi_f2d>
 800322c:	4a24      	ldr	r2, [pc, #144]	@ (80032c0 <get_temperature_sht41+0x198>)
 800322e:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <get_temperature_sht41+0x19c>)
 8003230:	f7fd ff9e 	bl	8001170 <__aeabi_dmul>
 8003234:	0002      	movs	r2, r0
 8003236:	000b      	movs	r3, r1
 8003238:	0010      	movs	r0, r2
 800323a:	0019      	movs	r1, r3
 800323c:	2200      	movs	r2, #0
 800323e:	4b22      	ldr	r3, [pc, #136]	@ (80032c8 <get_temperature_sht41+0x1a0>)
 8003240:	f7fd f918 	bl	8000474 <__aeabi_dadd>
 8003244:	0002      	movs	r2, r0
 8003246:	000b      	movs	r3, r1
 8003248:	0010      	movs	r0, r2
 800324a:	0019      	movs	r1, r3
 800324c:	f7fe fe6a 	bl	8001f24 <__aeabi_d2f>
 8003250:	1c03      	adds	r3, r0, #0
 8003252:	61bb      	str	r3, [r7, #24]
	float humidity_percent = -6 + 125 * (raw_humidity /65535.0);
 8003254:	193b      	adds	r3, r7, r4
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	0018      	movs	r0, r3
 800325a:	f7fe fded 	bl	8001e38 <__aeabi_i2d>
 800325e:	2200      	movs	r2, #0
 8003260:	4b14      	ldr	r3, [pc, #80]	@ (80032b4 <get_temperature_sht41+0x18c>)
 8003262:	f7fd fc6b 	bl	8000b3c <__aeabi_ddiv>
 8003266:	0002      	movs	r2, r0
 8003268:	000b      	movs	r3, r1
 800326a:	0010      	movs	r0, r2
 800326c:	0019      	movs	r1, r3
 800326e:	2200      	movs	r2, #0
 8003270:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <get_temperature_sht41+0x1a4>)
 8003272:	f7fd ff7d 	bl	8001170 <__aeabi_dmul>
 8003276:	0002      	movs	r2, r0
 8003278:	000b      	movs	r3, r1
 800327a:	0010      	movs	r0, r2
 800327c:	0019      	movs	r1, r3
 800327e:	2200      	movs	r2, #0
 8003280:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <get_temperature_sht41+0x1a8>)
 8003282:	f7fe fa3d 	bl	8001700 <__aeabi_dsub>
 8003286:	0002      	movs	r2, r0
 8003288:	000b      	movs	r3, r1
 800328a:	0010      	movs	r0, r2
 800328c:	0019      	movs	r1, r3
 800328e:	f7fe fe49 	bl	8001f24 <__aeabi_d2f>
 8003292:	1c03      	adds	r3, r0, #0
 8003294:	617b      	str	r3, [r7, #20]

	HAL_Delay(10);
 8003296:	200a      	movs	r0, #10
 8003298:	f000 f9d2 	bl	8003640 <HAL_Delay>

	data_buffer[0] = tempf;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	601a      	str	r2, [r3, #0]
	data_buffer[1] = humidity_percent;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	3304      	adds	r3, #4
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b00b      	add	sp, #44	@ 0x2c
 80032b2:	bd90      	pop	{r4, r7, pc}
 80032b4:	40efffe0 	.word	0x40efffe0
 80032b8:	4065e000 	.word	0x4065e000
 80032bc:	40468000 	.word	0x40468000
 80032c0:	cccccccd 	.word	0xcccccccd
 80032c4:	3ffccccc 	.word	0x3ffccccc
 80032c8:	40400000 	.word	0x40400000
 80032cc:	405f4000 	.word	0x405f4000
 80032d0:	40180000 	.word	0x40180000

080032d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032da:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <HAL_MspInit+0x44>)
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <HAL_MspInit+0x44>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	619a      	str	r2, [r3, #24]
 80032e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <HAL_MspInit+0x44>)
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2201      	movs	r2, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f2:	4b09      	ldr	r3, [pc, #36]	@ (8003318 <HAL_MspInit+0x44>)
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <HAL_MspInit+0x44>)
 80032f8:	2180      	movs	r1, #128	@ 0x80
 80032fa:	0549      	lsls	r1, r1, #21
 80032fc:	430a      	orrs	r2, r1
 80032fe:	61da      	str	r2, [r3, #28]
 8003300:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_MspInit+0x44>)
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	055b      	lsls	r3, r3, #21
 8003308:	4013      	ands	r3, r2
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	40021000 	.word	0x40021000

0800331c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b08b      	sub	sp, #44	@ 0x2c
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	2414      	movs	r4, #20
 8003326:	193b      	adds	r3, r7, r4
 8003328:	0018      	movs	r0, r3
 800332a:	2314      	movs	r3, #20
 800332c:	001a      	movs	r2, r3
 800332e:	2100      	movs	r1, #0
 8003330:	f003 f8cc 	bl	80064cc <memset>
  if(hi2c->Instance==I2C1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <HAL_I2C_MspInit+0x90>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d131      	bne.n	80033a2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	4b1c      	ldr	r3, [pc, #112]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	4b1b      	ldr	r3, [pc, #108]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 8003344:	2180      	movs	r1, #128	@ 0x80
 8003346:	02c9      	lsls	r1, r1, #11
 8003348:	430a      	orrs	r2, r1
 800334a:	615a      	str	r2, [r3, #20]
 800334c:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	02db      	lsls	r3, r3, #11
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800335a:	0021      	movs	r1, r4
 800335c:	187b      	adds	r3, r7, r1
 800335e:	22c0      	movs	r2, #192	@ 0xc0
 8003360:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003362:	187b      	adds	r3, r7, r1
 8003364:	2212      	movs	r2, #18
 8003366:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	187b      	adds	r3, r7, r1
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800336e:	187b      	adds	r3, r7, r1
 8003370:	2203      	movs	r2, #3
 8003372:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003374:	187b      	adds	r3, r7, r1
 8003376:	2201      	movs	r2, #1
 8003378:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337a:	187b      	adds	r3, r7, r1
 800337c:	4a0d      	ldr	r2, [pc, #52]	@ (80033b4 <HAL_I2C_MspInit+0x98>)
 800337e:	0019      	movs	r1, r3
 8003380:	0010      	movs	r0, r2
 8003382:	f000 fa5f 	bl	8003844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 800338c:	2180      	movs	r1, #128	@ 0x80
 800338e:	0389      	lsls	r1, r1, #14
 8003390:	430a      	orrs	r2, r1
 8003392:	61da      	str	r2, [r3, #28]
 8003394:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <HAL_I2C_MspInit+0x94>)
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	039b      	lsls	r3, r3, #14
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b00b      	add	sp, #44	@ 0x2c
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	40005400 	.word	0x40005400
 80033b0:	40021000 	.word	0x40021000
 80033b4:	48000400 	.word	0x48000400

080033b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a06      	ldr	r2, [pc, #24]	@ (80033e0 <HAL_RTC_MspInit+0x28>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d106      	bne.n	80033d8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RTC_MspInit+0x2c>)
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_RTC_MspInit+0x2c>)
 80033d0:	2180      	movs	r1, #128	@ 0x80
 80033d2:	0209      	lsls	r1, r1, #8
 80033d4:	430a      	orrs	r2, r1
 80033d6:	621a      	str	r2, [r3, #32]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80033d8:	46c0      	nop			@ (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40002800 	.word	0x40002800
 80033e4:	40021000 	.word	0x40021000

080033e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	05db      	lsls	r3, r3, #23
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d113      	bne.n	8003424 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_TIM_Base_MspInit+0x44>)
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <HAL_TIM_Base_MspInit+0x44>)
 8003402:	2101      	movs	r1, #1
 8003404:	430a      	orrs	r2, r1
 8003406:	61da      	str	r2, [r3, #28]
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_TIM_Base_MspInit+0x44>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2201      	movs	r2, #1
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003414:	2200      	movs	r2, #0
 8003416:	2100      	movs	r1, #0
 8003418:	200f      	movs	r0, #15
 800341a:	f000 f9e1 	bl	80037e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800341e:	200f      	movs	r0, #15
 8003420:	f000 f9f3 	bl	800380a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003424:	46c0      	nop			@ (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b004      	add	sp, #16
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000

08003430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	e7fd      	b.n	8003434 <NMI_Handler+0x4>

08003438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800343c:	46c0      	nop			@ (mov r8, r8)
 800343e:	e7fd      	b.n	800343c <HardFault_Handler+0x4>

08003440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003444:	46c0      	nop			@ (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003458:	f000 f8d6 	bl	8003608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800345c:	46c0      	nop			@ (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <TIM2_IRQHandler+0x14>)
 800346a:	0018      	movs	r0, r3
 800346c:	f002 fca6 	bl	8005dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	200000f4 	.word	0x200000f4

0800347c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003484:	4a14      	ldr	r2, [pc, #80]	@ (80034d8 <_sbrk+0x5c>)
 8003486:	4b15      	ldr	r3, [pc, #84]	@ (80034dc <_sbrk+0x60>)
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003490:	4b13      	ldr	r3, [pc, #76]	@ (80034e0 <_sbrk+0x64>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003498:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <_sbrk+0x64>)
 800349a:	4a12      	ldr	r2, [pc, #72]	@ (80034e4 <_sbrk+0x68>)
 800349c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800349e:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <_sbrk+0x64>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	18d3      	adds	r3, r2, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d207      	bcs.n	80034bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034ac:	f003 f816 	bl	80064dc <__errno>
 80034b0:	0003      	movs	r3, r0
 80034b2:	220c      	movs	r2, #12
 80034b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	425b      	negs	r3, r3
 80034ba:	e009      	b.n	80034d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034bc:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <_sbrk+0x64>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034c2:	4b07      	ldr	r3, [pc, #28]	@ (80034e0 <_sbrk+0x64>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	18d2      	adds	r2, r2, r3
 80034ca:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <_sbrk+0x64>)
 80034cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80034ce:	68fb      	ldr	r3, [r7, #12]
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b006      	add	sp, #24
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20001800 	.word	0x20001800
 80034dc:	00000400 	.word	0x00000400
 80034e0:	20000178 	.word	0x20000178
 80034e4:	200002c8 	.word	0x200002c8

080034e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034f4:	4813      	ldr	r0, [pc, #76]	@ (8003544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034f8:	f7ff fff6 	bl	80034e8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80034fc:	4812      	ldr	r0, [pc, #72]	@ (8003548 <LoopForever+0x6>)
    LDR R1, [R0]
 80034fe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003500:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003502:	4a12      	ldr	r2, [pc, #72]	@ (800354c <LoopForever+0xa>)
    CMP R1, R2
 8003504:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003506:	d105      	bne.n	8003514 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8003508:	4811      	ldr	r0, [pc, #68]	@ (8003550 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800350a:	4912      	ldr	r1, [pc, #72]	@ (8003554 <LoopForever+0x12>)
    STR R1, [R0]
 800350c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800350e:	4812      	ldr	r0, [pc, #72]	@ (8003558 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003510:	4912      	ldr	r1, [pc, #72]	@ (800355c <LoopForever+0x1a>)
    STR R1, [R0]
 8003512:	6001      	str	r1, [r0, #0]

08003514 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003514:	4812      	ldr	r0, [pc, #72]	@ (8003560 <LoopForever+0x1e>)
  ldr r1, =_edata
 8003516:	4913      	ldr	r1, [pc, #76]	@ (8003564 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003518:	4a13      	ldr	r2, [pc, #76]	@ (8003568 <LoopForever+0x26>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800351c:	e002      	b.n	8003524 <LoopCopyDataInit>

0800351e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800351e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003522:	3304      	adds	r3, #4

08003524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003528:	d3f9      	bcc.n	800351e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352a:	4a10      	ldr	r2, [pc, #64]	@ (800356c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800352c:	4c10      	ldr	r4, [pc, #64]	@ (8003570 <LoopForever+0x2e>)
  movs r3, #0
 800352e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003530:	e001      	b.n	8003536 <LoopFillZerobss>

08003532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003534:	3204      	adds	r2, #4

08003536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003538:	d3fb      	bcc.n	8003532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800353a:	f002 ffd5 	bl	80064e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800353e:	f7ff fb89 	bl	8002c54 <main>

08003542 <LoopForever>:

LoopForever:
    b LoopForever
 8003542:	e7fe      	b.n	8003542 <LoopForever>
  ldr   r0, =_estack
 8003544:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8003548:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800354c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8003550:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8003554:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003558:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800355c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003564:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003568:	08006f28 	.word	0x08006f28
  ldr r2, =_sbss
 800356c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003570:	200002c8 	.word	0x200002c8

08003574 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003574:	e7fe      	b.n	8003574 <ADC1_IRQHandler>
	...

08003578 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800357c:	4b07      	ldr	r3, [pc, #28]	@ (800359c <HAL_Init+0x24>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_Init+0x24>)
 8003582:	2110      	movs	r1, #16
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003588:	2003      	movs	r0, #3
 800358a:	f000 f809 	bl	80035a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800358e:	f7ff fea1 	bl	80032d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	40022000 	.word	0x40022000

080035a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <HAL_InitTick+0x5c>)
 80035aa:	681c      	ldr	r4, [r3, #0]
 80035ac:	4b14      	ldr	r3, [pc, #80]	@ (8003600 <HAL_InitTick+0x60>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	0019      	movs	r1, r3
 80035b2:	23fa      	movs	r3, #250	@ 0xfa
 80035b4:	0098      	lsls	r0, r3, #2
 80035b6:	f7fc fdb1 	bl	800011c <__udivsi3>
 80035ba:	0003      	movs	r3, r0
 80035bc:	0019      	movs	r1, r3
 80035be:	0020      	movs	r0, r4
 80035c0:	f7fc fdac 	bl	800011c <__udivsi3>
 80035c4:	0003      	movs	r3, r0
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f92f 	bl	800382a <HAL_SYSTICK_Config>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e00f      	b.n	80035f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d80b      	bhi.n	80035f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	2301      	movs	r3, #1
 80035de:	425b      	negs	r3, r3
 80035e0:	2200      	movs	r2, #0
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 f8fc 	bl	80037e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035e8:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_InitTick+0x64>)
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e000      	b.n	80035f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b003      	add	sp, #12
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	20000004 	.word	0x20000004
 8003600:	2000000c 	.word	0x2000000c
 8003604:	20000008 	.word	0x20000008

08003608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_IncTick+0x1c>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	001a      	movs	r2, r3
 8003612:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <HAL_IncTick+0x20>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	18d2      	adds	r2, r2, r3
 8003618:	4b03      	ldr	r3, [pc, #12]	@ (8003628 <HAL_IncTick+0x20>)
 800361a:	601a      	str	r2, [r3, #0]
}
 800361c:	46c0      	nop			@ (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	2000000c 	.word	0x2000000c
 8003628:	2000017c 	.word	0x2000017c

0800362c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  return uwTick;
 8003630:	4b02      	ldr	r3, [pc, #8]	@ (800363c <HAL_GetTick+0x10>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	2000017c 	.word	0x2000017c

08003640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7ff fff0 	bl	800362c <HAL_GetTick>
 800364c:	0003      	movs	r3, r0
 800364e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	d005      	beq.n	8003666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800365a:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <HAL_Delay+0x44>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	001a      	movs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	189b      	adds	r3, r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	f7ff ffe0 	bl	800362c <HAL_GetTick>
 800366c:	0002      	movs	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	429a      	cmp	r2, r3
 8003676:	d8f7      	bhi.n	8003668 <HAL_Delay+0x28>
  {
  }
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	2000000c 	.word	0x2000000c

08003688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	0002      	movs	r2, r0
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003694:	1dfb      	adds	r3, r7, #7
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b7f      	cmp	r3, #127	@ 0x7f
 800369a:	d809      	bhi.n	80036b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	001a      	movs	r2, r3
 80036a2:	231f      	movs	r3, #31
 80036a4:	401a      	ands	r2, r3
 80036a6:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <__NVIC_EnableIRQ+0x30>)
 80036a8:	2101      	movs	r1, #1
 80036aa:	4091      	lsls	r1, r2
 80036ac:	000a      	movs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]
  }
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b002      	add	sp, #8
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	e000e100 	.word	0xe000e100

080036bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	0002      	movs	r2, r0
 80036c4:	6039      	str	r1, [r7, #0]
 80036c6:	1dfb      	adds	r3, r7, #7
 80036c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036ca:	1dfb      	adds	r3, r7, #7
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80036d0:	d828      	bhi.n	8003724 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003790 <__NVIC_SetPriority+0xd4>)
 80036d4:	1dfb      	adds	r3, r7, #7
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b25b      	sxtb	r3, r3
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	33c0      	adds	r3, #192	@ 0xc0
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	589b      	ldr	r3, [r3, r2]
 80036e2:	1dfa      	adds	r2, r7, #7
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	0011      	movs	r1, r2
 80036e8:	2203      	movs	r2, #3
 80036ea:	400a      	ands	r2, r1
 80036ec:	00d2      	lsls	r2, r2, #3
 80036ee:	21ff      	movs	r1, #255	@ 0xff
 80036f0:	4091      	lsls	r1, r2
 80036f2:	000a      	movs	r2, r1
 80036f4:	43d2      	mvns	r2, r2
 80036f6:	401a      	ands	r2, r3
 80036f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	22ff      	movs	r2, #255	@ 0xff
 8003700:	401a      	ands	r2, r3
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	0018      	movs	r0, r3
 8003708:	2303      	movs	r3, #3
 800370a:	4003      	ands	r3, r0
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003710:	481f      	ldr	r0, [pc, #124]	@ (8003790 <__NVIC_SetPriority+0xd4>)
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	430a      	orrs	r2, r1
 800371c:	33c0      	adds	r3, #192	@ 0xc0
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003722:	e031      	b.n	8003788 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003724:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <__NVIC_SetPriority+0xd8>)
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	0019      	movs	r1, r3
 800372c:	230f      	movs	r3, #15
 800372e:	400b      	ands	r3, r1
 8003730:	3b08      	subs	r3, #8
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3306      	adds	r3, #6
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	3304      	adds	r3, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	1dfa      	adds	r2, r7, #7
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	0011      	movs	r1, r2
 8003744:	2203      	movs	r2, #3
 8003746:	400a      	ands	r2, r1
 8003748:	00d2      	lsls	r2, r2, #3
 800374a:	21ff      	movs	r1, #255	@ 0xff
 800374c:	4091      	lsls	r1, r2
 800374e:	000a      	movs	r2, r1
 8003750:	43d2      	mvns	r2, r2
 8003752:	401a      	ands	r2, r3
 8003754:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	22ff      	movs	r2, #255	@ 0xff
 800375c:	401a      	ands	r2, r3
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	0018      	movs	r0, r3
 8003764:	2303      	movs	r3, #3
 8003766:	4003      	ands	r3, r0
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800376c:	4809      	ldr	r0, [pc, #36]	@ (8003794 <__NVIC_SetPriority+0xd8>)
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	001c      	movs	r4, r3
 8003774:	230f      	movs	r3, #15
 8003776:	4023      	ands	r3, r4
 8003778:	3b08      	subs	r3, #8
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	430a      	orrs	r2, r1
 800377e:	3306      	adds	r3, #6
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	18c3      	adds	r3, r0, r3
 8003784:	3304      	adds	r3, #4
 8003786:	601a      	str	r2, [r3, #0]
}
 8003788:	46c0      	nop			@ (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b003      	add	sp, #12
 800378e:	bd90      	pop	{r4, r7, pc}
 8003790:	e000e100 	.word	0xe000e100
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1e5a      	subs	r2, r3, #1
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	045b      	lsls	r3, r3, #17
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d301      	bcc.n	80037b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ac:	2301      	movs	r3, #1
 80037ae:	e010      	b.n	80037d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b0:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <SysTick_Config+0x44>)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	3a01      	subs	r2, #1
 80037b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b8:	2301      	movs	r3, #1
 80037ba:	425b      	negs	r3, r3
 80037bc:	2103      	movs	r1, #3
 80037be:	0018      	movs	r0, r3
 80037c0:	f7ff ff7c 	bl	80036bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <SysTick_Config+0x44>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ca:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <SysTick_Config+0x44>)
 80037cc:	2207      	movs	r2, #7
 80037ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	0018      	movs	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b002      	add	sp, #8
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	e000e010 	.word	0xe000e010

080037e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	210f      	movs	r1, #15
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	1c02      	adds	r2, r0, #0
 80037f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b25b      	sxtb	r3, r3
 80037fa:	0011      	movs	r1, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff ff5d 	bl	80036bc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b004      	add	sp, #16
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	0002      	movs	r2, r0
 8003812:	1dfb      	adds	r3, r7, #7
 8003814:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b25b      	sxtb	r3, r3
 800381c:	0018      	movs	r0, r3
 800381e:	f7ff ff33 	bl	8003688 <__NVIC_EnableIRQ>
}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b002      	add	sp, #8
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff ffaf 	bl	8003798 <SysTick_Config>
 800383a:	0003      	movs	r3, r0
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003852:	e149      	b.n	8003ae8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4091      	lsls	r1, r2
 800385e:	000a      	movs	r2, r1
 8003860:	4013      	ands	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d100      	bne.n	800386c <HAL_GPIO_Init+0x28>
 800386a:	e13a      	b.n	8003ae2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2203      	movs	r2, #3
 8003872:	4013      	ands	r3, r2
 8003874:	2b01      	cmp	r3, #1
 8003876:	d005      	beq.n	8003884 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2203      	movs	r2, #3
 800387e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003880:	2b02      	cmp	r3, #2
 8003882:	d130      	bne.n	80038e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	409a      	lsls	r2, r3
 8003892:	0013      	movs	r3, r2
 8003894:	43da      	mvns	r2, r3
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	0013      	movs	r3, r2
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ba:	2201      	movs	r2, #1
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
 80038c0:	0013      	movs	r3, r2
 80038c2:	43da      	mvns	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4013      	ands	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	2201      	movs	r2, #1
 80038d2:	401a      	ands	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
 80038d8:	0013      	movs	r3, r2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2203      	movs	r2, #3
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d017      	beq.n	8003922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	409a      	lsls	r2, r3
 8003900:	0013      	movs	r3, r2
 8003902:	43da      	mvns	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	409a      	lsls	r2, r3
 8003914:	0013      	movs	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	4013      	ands	r3, r2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d123      	bne.n	8003976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	08da      	lsrs	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3208      	adds	r2, #8
 8003936:	0092      	lsls	r2, r2, #2
 8003938:	58d3      	ldr	r3, [r2, r3]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2207      	movs	r2, #7
 8003940:	4013      	ands	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	220f      	movs	r2, #15
 8003946:	409a      	lsls	r2, r3
 8003948:	0013      	movs	r3, r2
 800394a:	43da      	mvns	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2107      	movs	r1, #7
 800395a:	400b      	ands	r3, r1
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	0092      	lsls	r2, r2, #2
 8003972:	6939      	ldr	r1, [r7, #16]
 8003974:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2203      	movs	r2, #3
 8003982:	409a      	lsls	r2, r3
 8003984:	0013      	movs	r3, r2
 8003986:	43da      	mvns	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2203      	movs	r2, #3
 8003994:	401a      	ands	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	23c0      	movs	r3, #192	@ 0xc0
 80039b0:	029b      	lsls	r3, r3, #10
 80039b2:	4013      	ands	r3, r2
 80039b4:	d100      	bne.n	80039b8 <HAL_GPIO_Init+0x174>
 80039b6:	e094      	b.n	8003ae2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b8:	4b51      	ldr	r3, [pc, #324]	@ (8003b00 <HAL_GPIO_Init+0x2bc>)
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	4b50      	ldr	r3, [pc, #320]	@ (8003b00 <HAL_GPIO_Init+0x2bc>)
 80039be:	2101      	movs	r1, #1
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
 80039c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003b00 <HAL_GPIO_Init+0x2bc>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2201      	movs	r2, #1
 80039ca:	4013      	ands	r3, r2
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003b04 <HAL_GPIO_Init+0x2c0>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3302      	adds	r3, #2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	589b      	ldr	r3, [r3, r2]
 80039dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2203      	movs	r2, #3
 80039e2:	4013      	ands	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	220f      	movs	r2, #15
 80039e8:	409a      	lsls	r2, r3
 80039ea:	0013      	movs	r3, r2
 80039ec:	43da      	mvns	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	2390      	movs	r3, #144	@ 0x90
 80039f8:	05db      	lsls	r3, r3, #23
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x1d6>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a41      	ldr	r2, [pc, #260]	@ (8003b08 <HAL_GPIO_Init+0x2c4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x1d2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a40      	ldr	r2, [pc, #256]	@ (8003b0c <HAL_GPIO_Init+0x2c8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x1ce>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e004      	b.n	8003a1c <HAL_GPIO_Init+0x1d8>
 8003a12:	2305      	movs	r3, #5
 8003a14:	e002      	b.n	8003a1c <HAL_GPIO_Init+0x1d8>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <HAL_GPIO_Init+0x1d8>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	2103      	movs	r1, #3
 8003a20:	400a      	ands	r2, r1
 8003a22:	0092      	lsls	r2, r2, #2
 8003a24:	4093      	lsls	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a2c:	4935      	ldr	r1, [pc, #212]	@ (8003b04 <HAL_GPIO_Init+0x2c0>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	089b      	lsrs	r3, r3, #2
 8003a32:	3302      	adds	r3, #2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3a:	4b35      	ldr	r3, [pc, #212]	@ (8003b10 <HAL_GPIO_Init+0x2cc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	43da      	mvns	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	2380      	movs	r3, #128	@ 0x80
 8003a50:	035b      	lsls	r3, r3, #13
 8003a52:	4013      	ands	r3, r2
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b10 <HAL_GPIO_Init+0x2cc>)
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a64:	4b2a      	ldr	r3, [pc, #168]	@ (8003b10 <HAL_GPIO_Init+0x2cc>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	039b      	lsls	r3, r3, #14
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a88:	4b21      	ldr	r3, [pc, #132]	@ (8003b10 <HAL_GPIO_Init+0x2cc>)
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003a8e:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <HAL_GPIO_Init+0x2cc>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	43da      	mvns	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	029b      	lsls	r3, r3, #10
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ab2:	4b17      	ldr	r3, [pc, #92]	@ (8003b10 <HAL_GPIO_Init+0x2cc>)
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_GPIO_Init+0x2cc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	025b      	lsls	r3, r3, #9
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <HAL_GPIO_Init+0x2cc>)
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	40da      	lsrs	r2, r3
 8003af0:	1e13      	subs	r3, r2, #0
 8003af2:	d000      	beq.n	8003af6 <HAL_GPIO_Init+0x2b2>
 8003af4:	e6ae      	b.n	8003854 <HAL_GPIO_Init+0x10>
  } 
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	46c0      	nop			@ (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b006      	add	sp, #24
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40010000 	.word	0x40010000
 8003b08:	48000400 	.word	0x48000400
 8003b0c:	48000800 	.word	0x48000800
 8003b10:	40010400 	.word	0x40010400

08003b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	000a      	movs	r2, r1
 8003b1e:	1cbb      	adds	r3, r7, #2
 8003b20:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	1cba      	adds	r2, r7, #2
 8003b28:	8812      	ldrh	r2, [r2, #0]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003b2e:	230f      	movs	r3, #15
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e003      	b.n	8003b40 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b38:	230f      	movs	r3, #15
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
  }
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	0008      	movs	r0, r1
 8003b58:	0011      	movs	r1, r2
 8003b5a:	1cbb      	adds	r3, r7, #2
 8003b5c:	1c02      	adds	r2, r0, #0
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	1c7b      	adds	r3, r7, #1
 8003b62:	1c0a      	adds	r2, r1, #0
 8003b64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b66:	1c7b      	adds	r3, r7, #1
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b6e:	1cbb      	adds	r3, r7, #2
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b76:	e003      	b.n	8003b80 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b78:	1cbb      	adds	r3, r7, #2
 8003b7a:	881a      	ldrh	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e08f      	b.n	8003cba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2241      	movs	r2, #65	@ 0x41
 8003b9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d107      	bne.n	8003bb6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2240      	movs	r2, #64	@ 0x40
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff fbb3 	bl	800331c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2241      	movs	r2, #65	@ 0x41
 8003bba:	2124      	movs	r1, #36	@ 0x24
 8003bbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	438a      	bics	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	493b      	ldr	r1, [pc, #236]	@ (8003cc4 <HAL_I2C_Init+0x13c>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4938      	ldr	r1, [pc, #224]	@ (8003cc8 <HAL_I2C_Init+0x140>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d108      	bne.n	8003c06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2180      	movs	r1, #128	@ 0x80
 8003bfe:	0209      	lsls	r1, r1, #8
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	e007      	b.n	8003c16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2184      	movs	r1, #132	@ 0x84
 8003c10:	0209      	lsls	r1, r1, #8
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d109      	bne.n	8003c32 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2180      	movs	r1, #128	@ 0x80
 8003c2a:	0109      	lsls	r1, r1, #4
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	e007      	b.n	8003c42 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4923      	ldr	r1, [pc, #140]	@ (8003ccc <HAL_I2C_Init+0x144>)
 8003c3e:	400a      	ands	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4920      	ldr	r1, [pc, #128]	@ (8003cd0 <HAL_I2C_Init+0x148>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	491a      	ldr	r1, [pc, #104]	@ (8003cc8 <HAL_I2C_Init+0x140>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69d9      	ldr	r1, [r3, #28]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2101      	movs	r1, #1
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2241      	movs	r2, #65	@ 0x41
 8003ca6:	2120      	movs	r1, #32
 8003ca8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2242      	movs	r2, #66	@ 0x42
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b002      	add	sp, #8
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	f0ffffff 	.word	0xf0ffffff
 8003cc8:	ffff7fff 	.word	0xffff7fff
 8003ccc:	fffff7ff 	.word	0xfffff7ff
 8003cd0:	02008000 	.word	0x02008000

08003cd4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b089      	sub	sp, #36	@ 0x24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	0008      	movs	r0, r1
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	1c02      	adds	r2, r0, #0
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	2308      	movs	r3, #8
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	1c0a      	adds	r2, r1, #0
 8003cf0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2241      	movs	r2, #65	@ 0x41
 8003cf6:	5c9b      	ldrb	r3, [r3, r2]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d000      	beq.n	8003d00 <HAL_I2C_Master_Transmit+0x2c>
 8003cfe:	e10a      	b.n	8003f16 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2240      	movs	r2, #64	@ 0x40
 8003d04:	5c9b      	ldrb	r3, [r3, r2]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_I2C_Master_Transmit+0x3a>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e104      	b.n	8003f18 <HAL_I2C_Master_Transmit+0x244>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2240      	movs	r2, #64	@ 0x40
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d16:	f7ff fc89 	bl	800362c <HAL_GetTick>
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d1e:	2380      	movs	r3, #128	@ 0x80
 8003d20:	0219      	lsls	r1, r3, #8
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2319      	movs	r3, #25
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f000 fb22 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0ef      	b.n	8003f18 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2241      	movs	r2, #65	@ 0x41
 8003d3c:	2121      	movs	r1, #33	@ 0x21
 8003d3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2242      	movs	r2, #66	@ 0x42
 8003d44:	2110      	movs	r1, #16
 8003d46:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2208      	movs	r2, #8
 8003d58:	18ba      	adds	r2, r7, r2
 8003d5a:	8812      	ldrh	r2, [r2, #0]
 8003d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2bff      	cmp	r3, #255	@ 0xff
 8003d6c:	d906      	bls.n	8003d7c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	22ff      	movs	r2, #255	@ 0xff
 8003d72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	045b      	lsls	r3, r3, #17
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e007      	b.n	8003d8c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	049b      	lsls	r3, r3, #18
 8003d8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d027      	beq.n	8003de4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	697c      	ldr	r4, [r7, #20]
 8003dd0:	230a      	movs	r3, #10
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	8819      	ldrh	r1, [r3, #0]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	4b51      	ldr	r3, [pc, #324]	@ (8003f20 <HAL_I2C_Master_Transmit+0x24c>)
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	0023      	movs	r3, r4
 8003dde:	f000 fd41 	bl	8004864 <I2C_TransferConfig>
 8003de2:	e06f      	b.n	8003ec4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	697c      	ldr	r4, [r7, #20]
 8003dec:	230a      	movs	r3, #10
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	8819      	ldrh	r1, [r3, #0]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	4b4a      	ldr	r3, [pc, #296]	@ (8003f20 <HAL_I2C_Master_Transmit+0x24c>)
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	0023      	movs	r3, r4
 8003dfa:	f000 fd33 	bl	8004864 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003dfe:	e061      	b.n	8003ec4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 fb0c 	bl	8004424 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e081      	b.n	8003f18 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d03a      	beq.n	8003ec4 <HAL_I2C_Master_Transmit+0x1f0>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d136      	bne.n	8003ec4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	0013      	movs	r3, r2
 8003e60:	2200      	movs	r2, #0
 8003e62:	2180      	movs	r1, #128	@ 0x80
 8003e64:	f000 fa86 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003e68:	1e03      	subs	r3, r0, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e053      	b.n	8003f18 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2bff      	cmp	r3, #255	@ 0xff
 8003e78:	d911      	bls.n	8003e9e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	22ff      	movs	r2, #255	@ 0xff
 8003e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	045c      	lsls	r4, r3, #17
 8003e8a:	230a      	movs	r3, #10
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	8819      	ldrh	r1, [r3, #0]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	0023      	movs	r3, r4
 8003e98:	f000 fce4 	bl	8004864 <I2C_TransferConfig>
 8003e9c:	e012      	b.n	8003ec4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	2380      	movs	r3, #128	@ 0x80
 8003eb0:	049c      	lsls	r4, r3, #18
 8003eb2:	230a      	movs	r3, #10
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	8819      	ldrh	r1, [r3, #0]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	0023      	movs	r3, r4
 8003ec0:	f000 fcd0 	bl	8004864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d198      	bne.n	8003e00 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 faeb 	bl	80044b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e01a      	b.n	8003f18 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	490b      	ldr	r1, [pc, #44]	@ (8003f24 <HAL_I2C_Master_Transmit+0x250>)
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2241      	movs	r2, #65	@ 0x41
 8003efe:	2120      	movs	r1, #32
 8003f00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2242      	movs	r2, #66	@ 0x42
 8003f06:	2100      	movs	r1, #0
 8003f08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2240      	movs	r2, #64	@ 0x40
 8003f0e:	2100      	movs	r1, #0
 8003f10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b007      	add	sp, #28
 8003f1e:	bd90      	pop	{r4, r7, pc}
 8003f20:	80002000 	.word	0x80002000
 8003f24:	fe00e800 	.word	0xfe00e800

08003f28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b089      	sub	sp, #36	@ 0x24
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	0008      	movs	r0, r1
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	0019      	movs	r1, r3
 8003f36:	230a      	movs	r3, #10
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	1c02      	adds	r2, r0, #0
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	2308      	movs	r3, #8
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	1c0a      	adds	r2, r1, #0
 8003f44:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2241      	movs	r2, #65	@ 0x41
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d000      	beq.n	8003f54 <HAL_I2C_Master_Receive+0x2c>
 8003f52:	e0e8      	b.n	8004126 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2240      	movs	r2, #64	@ 0x40
 8003f58:	5c9b      	ldrb	r3, [r3, r2]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Master_Receive+0x3a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0e2      	b.n	8004128 <HAL_I2C_Master_Receive+0x200>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2240      	movs	r2, #64	@ 0x40
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f6a:	f7ff fb5f 	bl	800362c <HAL_GetTick>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f72:	2380      	movs	r3, #128	@ 0x80
 8003f74:	0219      	lsls	r1, r3, #8
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2319      	movs	r3, #25
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f000 f9f8 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	1e03      	subs	r3, r0, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cd      	b.n	8004128 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2241      	movs	r2, #65	@ 0x41
 8003f90:	2122      	movs	r1, #34	@ 0x22
 8003f92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2242      	movs	r2, #66	@ 0x42
 8003f98:	2110      	movs	r1, #16
 8003f9a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2208      	movs	r2, #8
 8003fac:	18ba      	adds	r2, r7, r2
 8003fae:	8812      	ldrh	r2, [r2, #0]
 8003fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2bff      	cmp	r3, #255	@ 0xff
 8003fc0:	d911      	bls.n	8003fe6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	2380      	movs	r3, #128	@ 0x80
 8003fd0:	045c      	lsls	r4, r3, #17
 8003fd2:	230a      	movs	r3, #10
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	8819      	ldrh	r1, [r3, #0]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	4b55      	ldr	r3, [pc, #340]	@ (8004130 <HAL_I2C_Master_Receive+0x208>)
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	0023      	movs	r3, r4
 8003fe0:	f000 fc40 	bl	8004864 <I2C_TransferConfig>
 8003fe4:	e076      	b.n	80040d4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	2380      	movs	r3, #128	@ 0x80
 8003ff8:	049c      	lsls	r4, r3, #18
 8003ffa:	230a      	movs	r3, #10
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	8819      	ldrh	r1, [r3, #0]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <HAL_I2C_Master_Receive+0x208>)
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	0023      	movs	r3, r4
 8004008:	f000 fc2c 	bl	8004864 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800400c:	e062      	b.n	80040d4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	0018      	movs	r0, r3
 8004016:	f000 fa8f 	bl	8004538 <I2C_WaitOnRXNEFlagUntilTimeout>
 800401a:	1e03      	subs	r3, r0, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e082      	b.n	8004128 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d03a      	beq.n	80040d4 <HAL_I2C_Master_Receive+0x1ac>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d136      	bne.n	80040d4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	0013      	movs	r3, r2
 8004070:	2200      	movs	r2, #0
 8004072:	2180      	movs	r1, #128	@ 0x80
 8004074:	f000 f97e 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8004078:	1e03      	subs	r3, r0, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e053      	b.n	8004128 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2bff      	cmp	r3, #255	@ 0xff
 8004088:	d911      	bls.n	80040ae <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	@ 0xff
 800408e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	b2da      	uxtb	r2, r3
 8004096:	2380      	movs	r3, #128	@ 0x80
 8004098:	045c      	lsls	r4, r3, #17
 800409a:	230a      	movs	r3, #10
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	8819      	ldrh	r1, [r3, #0]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	2300      	movs	r3, #0
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	0023      	movs	r3, r4
 80040a8:	f000 fbdc 	bl	8004864 <I2C_TransferConfig>
 80040ac:	e012      	b.n	80040d4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	2380      	movs	r3, #128	@ 0x80
 80040c0:	049c      	lsls	r4, r3, #18
 80040c2:	230a      	movs	r3, #10
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	8819      	ldrh	r1, [r3, #0]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	2300      	movs	r3, #0
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	0023      	movs	r3, r4
 80040d0:	f000 fbc8 	bl	8004864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d197      	bne.n	800400e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 f9e3 	bl	80044b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e01a      	b.n	8004128 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2220      	movs	r2, #32
 80040f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	490b      	ldr	r1, [pc, #44]	@ (8004134 <HAL_I2C_Master_Receive+0x20c>)
 8004106:	400a      	ands	r2, r1
 8004108:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2241      	movs	r2, #65	@ 0x41
 800410e:	2120      	movs	r1, #32
 8004110:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2242      	movs	r2, #66	@ 0x42
 8004116:	2100      	movs	r1, #0
 8004118:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2240      	movs	r2, #64	@ 0x40
 800411e:	2100      	movs	r1, #0
 8004120:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
  }
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b007      	add	sp, #28
 800412e:	bd90      	pop	{r4, r7, pc}
 8004130:	80002400 	.word	0x80002400
 8004134:	fe00e800 	.word	0xfe00e800

08004138 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	230a      	movs	r3, #10
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	1c0a      	adds	r2, r1, #0
 800414a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2241      	movs	r2, #65	@ 0x41
 8004154:	5c9b      	ldrb	r3, [r3, r2]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	d000      	beq.n	800415e <HAL_I2C_IsDeviceReady+0x26>
 800415c:	e0df      	b.n	800431e <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	401a      	ands	r2, r3
 800416a:	2380      	movs	r3, #128	@ 0x80
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	429a      	cmp	r2, r3
 8004170:	d101      	bne.n	8004176 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
 8004174:	e0d4      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2240      	movs	r2, #64	@ 0x40
 800417a:	5c9b      	ldrb	r3, [r3, r2]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_I2C_IsDeviceReady+0x4c>
 8004180:	2302      	movs	r3, #2
 8004182:	e0cd      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x1e8>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2240      	movs	r2, #64	@ 0x40
 8004188:	2101      	movs	r1, #1
 800418a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2241      	movs	r2, #65	@ 0x41
 8004190:	2124      	movs	r1, #36	@ 0x24
 8004192:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d107      	bne.n	80041b2 <HAL_I2C_IsDeviceReady+0x7a>
 80041a2:	230a      	movs	r3, #10
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	059b      	lsls	r3, r3, #22
 80041aa:	0d9b      	lsrs	r3, r3, #22
 80041ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004328 <HAL_I2C_IsDeviceReady+0x1f0>)
 80041ae:	431a      	orrs	r2, r3
 80041b0:	e006      	b.n	80041c0 <HAL_I2C_IsDeviceReady+0x88>
 80041b2:	230a      	movs	r3, #10
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	059b      	lsls	r3, r3, #22
 80041ba:	0d9b      	lsrs	r3, r3, #22
 80041bc:	4a5b      	ldr	r2, [pc, #364]	@ (800432c <HAL_I2C_IsDeviceReady+0x1f4>)
 80041be:	431a      	orrs	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041c6:	f7ff fa31 	bl	800362c <HAL_GetTick>
 80041ca:	0003      	movs	r3, r0
 80041cc:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2220      	movs	r2, #32
 80041d6:	4013      	ands	r3, r2
 80041d8:	3b20      	subs	r3, #32
 80041da:	425a      	negs	r2, r3
 80041dc:	4153      	adcs	r3, r2
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	231f      	movs	r3, #31
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2210      	movs	r2, #16
 80041ee:	4013      	ands	r3, r2
 80041f0:	3b10      	subs	r3, #16
 80041f2:	425a      	negs	r2, r3
 80041f4:	4153      	adcs	r3, r2
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	231e      	movs	r3, #30
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80041fe:	e035      	b.n	800426c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	d01a      	beq.n	800423c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7ff fa11 	bl	800362c <HAL_GetTick>
 800420a:	0002      	movs	r2, r0
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <HAL_I2C_IsDeviceReady+0xe4>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10f      	bne.n	800423c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2241      	movs	r2, #65	@ 0x41
 8004220:	2120      	movs	r1, #32
 8004222:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004228:	2220      	movs	r2, #32
 800422a:	431a      	orrs	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2240      	movs	r2, #64	@ 0x40
 8004234:	2100      	movs	r1, #0
 8004236:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e071      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2220      	movs	r2, #32
 8004244:	4013      	ands	r3, r2
 8004246:	3b20      	subs	r3, #32
 8004248:	425a      	negs	r2, r3
 800424a:	4153      	adcs	r3, r2
 800424c:	b2da      	uxtb	r2, r3
 800424e:	231f      	movs	r3, #31
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2210      	movs	r2, #16
 800425c:	4013      	ands	r3, r2
 800425e:	3b10      	subs	r3, #16
 8004260:	425a      	negs	r2, r3
 8004262:	4153      	adcs	r3, r2
 8004264:	b2da      	uxtb	r2, r3
 8004266:	231e      	movs	r3, #30
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800426c:	231f      	movs	r3, #31
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d104      	bne.n	8004280 <HAL_I2C_IsDeviceReady+0x148>
 8004276:	231e      	movs	r3, #30
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0bf      	beq.n	8004200 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2210      	movs	r2, #16
 8004288:	4013      	ands	r3, r2
 800428a:	2b10      	cmp	r3, #16
 800428c:	d01a      	beq.n	80042c4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	0013      	movs	r3, r2
 8004298:	2200      	movs	r2, #0
 800429a:	2120      	movs	r1, #32
 800429c:	f000 f86a 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80042a0:	1e03      	subs	r3, r0, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e03b      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2220      	movs	r2, #32
 80042ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2241      	movs	r2, #65	@ 0x41
 80042b4:	2120      	movs	r1, #32
 80042b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2240      	movs	r2, #64	@ 0x40
 80042bc:	2100      	movs	r1, #0
 80042be:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e02d      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	0013      	movs	r3, r2
 80042ce:	2200      	movs	r2, #0
 80042d0:	2120      	movs	r1, #32
 80042d2:	f000 f84f 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	1e03      	subs	r3, r0, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e020      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2210      	movs	r2, #16
 80042e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2220      	movs	r2, #32
 80042ec:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3301      	adds	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d900      	bls.n	80042fe <HAL_I2C_IsDeviceReady+0x1c6>
 80042fc:	e74d      	b.n	800419a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2241      	movs	r2, #65	@ 0x41
 8004302:	2120      	movs	r1, #32
 8004304:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	2220      	movs	r2, #32
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2240      	movs	r2, #64	@ 0x40
 8004316:	2100      	movs	r1, #0
 8004318:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800431e:	2302      	movs	r3, #2
  }
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b008      	add	sp, #32
 8004326:	bd80      	pop	{r7, pc}
 8004328:	02002000 	.word	0x02002000
 800432c:	02002800 	.word	0x02002800

08004330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2202      	movs	r2, #2
 8004340:	4013      	ands	r3, r2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d103      	bne.n	800434e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2201      	movs	r2, #1
 8004356:	4013      	ands	r3, r2
 8004358:	2b01      	cmp	r3, #1
 800435a:	d007      	beq.n	800436c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2101      	movs	r1, #1
 8004368:	430a      	orrs	r2, r1
 800436a:	619a      	str	r2, [r3, #24]
  }
}
 800436c:	46c0      	nop			@ (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	1dfb      	adds	r3, r7, #7
 8004382:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004384:	e03a      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	0018      	movs	r0, r3
 800438e:	f000 f971 	bl	8004674 <I2C_IsErrorOccurred>
 8004392:	1e03      	subs	r3, r0, #0
 8004394:	d001      	beq.n	800439a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e040      	b.n	800441c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	d02d      	beq.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a0:	f7ff f944 	bl	800362c <HAL_GetTick>
 80043a4:	0002      	movs	r2, r0
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d122      	bne.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	425a      	negs	r2, r3
 80043c6:	4153      	adcs	r3, r2
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	001a      	movs	r2, r3
 80043cc:	1dfb      	adds	r3, r7, #7
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d113      	bne.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d8:	2220      	movs	r2, #32
 80043da:	431a      	orrs	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2241      	movs	r2, #65	@ 0x41
 80043e4:	2120      	movs	r1, #32
 80043e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2242      	movs	r2, #66	@ 0x42
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2240      	movs	r2, #64	@ 0x40
 80043f4:	2100      	movs	r1, #0
 80043f6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e00f      	b.n	800441c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4013      	ands	r3, r2
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	425a      	negs	r2, r3
 800440c:	4153      	adcs	r3, r2
 800440e:	b2db      	uxtb	r3, r3
 8004410:	001a      	movs	r2, r3
 8004412:	1dfb      	adds	r3, r7, #7
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d0b5      	beq.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b004      	add	sp, #16
 8004422:	bd80      	pop	{r7, pc}

08004424 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004430:	e032      	b.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	0018      	movs	r0, r3
 800443a:	f000 f91b 	bl	8004674 <I2C_IsErrorOccurred>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d001      	beq.n	8004446 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e030      	b.n	80044a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	3301      	adds	r3, #1
 800444a:	d025      	beq.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	f7ff f8ee 	bl	800362c <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11a      	bne.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2202      	movs	r2, #2
 800446a:	4013      	ands	r3, r2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d013      	beq.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004474:	2220      	movs	r2, #32
 8004476:	431a      	orrs	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2241      	movs	r2, #65	@ 0x41
 8004480:	2120      	movs	r1, #32
 8004482:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2242      	movs	r2, #66	@ 0x42
 8004488:	2100      	movs	r1, #0
 800448a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2240      	movs	r2, #64	@ 0x40
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e007      	b.n	80044a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2202      	movs	r2, #2
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d1c5      	bne.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b004      	add	sp, #16
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044bc:	e02f      	b.n	800451e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 f8d5 	bl	8004674 <I2C_IsErrorOccurred>
 80044ca:	1e03      	subs	r3, r0, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e02d      	b.n	800452e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7ff f8ab 	bl	800362c <HAL_GetTick>
 80044d6:	0002      	movs	r2, r0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11a      	bne.n	800451e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2220      	movs	r2, #32
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d013      	beq.n	800451e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	2220      	movs	r2, #32
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2241      	movs	r2, #65	@ 0x41
 8004506:	2120      	movs	r1, #32
 8004508:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2242      	movs	r2, #66	@ 0x42
 800450e:	2100      	movs	r1, #0
 8004510:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2240      	movs	r2, #64	@ 0x40
 8004516:	2100      	movs	r1, #0
 8004518:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e007      	b.n	800452e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2220      	movs	r2, #32
 8004526:	4013      	ands	r3, r2
 8004528:	2b20      	cmp	r3, #32
 800452a:	d1c8      	bne.n	80044be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b004      	add	sp, #16
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2317      	movs	r3, #23
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800454c:	e07b      	b.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	0018      	movs	r0, r3
 8004556:	f000 f88d 	bl	8004674 <I2C_IsErrorOccurred>
 800455a:	1e03      	subs	r3, r0, #0
 800455c:	d003      	beq.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800455e:	2317      	movs	r3, #23
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2220      	movs	r2, #32
 800456e:	4013      	ands	r3, r2
 8004570:	2b20      	cmp	r3, #32
 8004572:	d140      	bne.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004574:	2117      	movs	r1, #23
 8004576:	187b      	adds	r3, r7, r1
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d13b      	bne.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2204      	movs	r2, #4
 8004586:	4013      	ands	r3, r2
 8004588:	2b04      	cmp	r3, #4
 800458a:	d106      	bne.n	800459a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004594:	187b      	adds	r3, r7, r1
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2210      	movs	r2, #16
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d123      	bne.n	80045f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2210      	movs	r2, #16
 80045ae:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2204      	movs	r2, #4
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2220      	movs	r2, #32
 80045bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4929      	ldr	r1, [pc, #164]	@ (8004670 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80045ca:	400a      	ands	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2241      	movs	r2, #65	@ 0x41
 80045d2:	2120      	movs	r1, #32
 80045d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2242      	movs	r2, #66	@ 0x42
 80045da:	2100      	movs	r1, #0
 80045dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2240      	movs	r2, #64	@ 0x40
 80045e2:	2100      	movs	r1, #0
 80045e4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80045e6:	2317      	movs	r3, #23
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e002      	b.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80045f6:	f7ff f819 	bl	800362c <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11c      	bne.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800460c:	2017      	movs	r0, #23
 800460e:	183b      	adds	r3, r7, r0
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d117      	bne.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2204      	movs	r2, #4
 800461e:	4013      	ands	r3, r2
 8004620:	2b04      	cmp	r3, #4
 8004622:	d010      	beq.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004628:	2220      	movs	r2, #32
 800462a:	431a      	orrs	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2241      	movs	r2, #65	@ 0x41
 8004634:	2120      	movs	r1, #32
 8004636:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2240      	movs	r2, #64	@ 0x40
 800463c:	2100      	movs	r1, #0
 800463e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004640:	183b      	adds	r3, r7, r0
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2204      	movs	r2, #4
 800464e:	4013      	ands	r3, r2
 8004650:	2b04      	cmp	r3, #4
 8004652:	d005      	beq.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004654:	2317      	movs	r3, #23
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d100      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800465e:	e776      	b.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004660:	2317      	movs	r3, #23
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b006      	add	sp, #24
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	fe00e800 	.word	0xfe00e800

08004674 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	@ 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2327      	movs	r3, #39	@ 0x27
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2210      	movs	r2, #16
 800469c:	4013      	ands	r3, r2
 800469e:	d100      	bne.n	80046a2 <I2C_IsErrorOccurred+0x2e>
 80046a0:	e079      	b.n	8004796 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2210      	movs	r2, #16
 80046a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046aa:	e057      	b.n	800475c <I2C_IsErrorOccurred+0xe8>
 80046ac:	2227      	movs	r2, #39	@ 0x27
 80046ae:	18bb      	adds	r3, r7, r2
 80046b0:	18ba      	adds	r2, r7, r2
 80046b2:	7812      	ldrb	r2, [r2, #0]
 80046b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3301      	adds	r3, #1
 80046ba:	d04f      	beq.n	800475c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046bc:	f7fe ffb6 	bl	800362c <HAL_GetTick>
 80046c0:	0002      	movs	r2, r0
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d302      	bcc.n	80046d2 <I2C_IsErrorOccurred+0x5e>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d144      	bne.n	800475c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	2380      	movs	r3, #128	@ 0x80
 80046da:	01db      	lsls	r3, r3, #7
 80046dc:	4013      	ands	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046e0:	2013      	movs	r0, #19
 80046e2:	183b      	adds	r3, r7, r0
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	2142      	movs	r1, #66	@ 0x42
 80046e8:	5c52      	ldrb	r2, [r2, r1]
 80046ea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	401a      	ands	r2, r3
 80046f8:	2380      	movs	r3, #128	@ 0x80
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d126      	bne.n	800474e <I2C_IsErrorOccurred+0xda>
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	2380      	movs	r3, #128	@ 0x80
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	429a      	cmp	r2, r3
 8004708:	d021      	beq.n	800474e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800470a:	183b      	adds	r3, r7, r0
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b20      	cmp	r3, #32
 8004710:	d01d      	beq.n	800474e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2180      	movs	r1, #128	@ 0x80
 800471e:	01c9      	lsls	r1, r1, #7
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004724:	f7fe ff82 	bl	800362c <HAL_GetTick>
 8004728:	0003      	movs	r3, r0
 800472a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800472c:	e00f      	b.n	800474e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800472e:	f7fe ff7d 	bl	800362c <HAL_GetTick>
 8004732:	0002      	movs	r2, r0
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b19      	cmp	r3, #25
 800473a:	d908      	bls.n	800474e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	2220      	movs	r2, #32
 8004740:	4313      	orrs	r3, r2
 8004742:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004744:	2327      	movs	r3, #39	@ 0x27
 8004746:	18fb      	adds	r3, r7, r3
 8004748:	2201      	movs	r2, #1
 800474a:	701a      	strb	r2, [r3, #0]

              break;
 800474c:	e006      	b.n	800475c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2220      	movs	r2, #32
 8004756:	4013      	ands	r3, r2
 8004758:	2b20      	cmp	r3, #32
 800475a:	d1e8      	bne.n	800472e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2220      	movs	r2, #32
 8004764:	4013      	ands	r3, r2
 8004766:	2b20      	cmp	r3, #32
 8004768:	d004      	beq.n	8004774 <I2C_IsErrorOccurred+0x100>
 800476a:	2327      	movs	r3, #39	@ 0x27
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d09b      	beq.n	80046ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004774:	2327      	movs	r3, #39	@ 0x27
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2220      	movs	r2, #32
 8004784:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2204      	movs	r2, #4
 800478a:	4313      	orrs	r3, r2
 800478c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800478e:	2327      	movs	r3, #39	@ 0x27
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	2201      	movs	r2, #1
 8004794:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	2380      	movs	r3, #128	@ 0x80
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4013      	ands	r3, r2
 80047a6:	d00c      	beq.n	80047c2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	2201      	movs	r2, #1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2280      	movs	r2, #128	@ 0x80
 80047b6:	0052      	lsls	r2, r2, #1
 80047b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ba:	2327      	movs	r3, #39	@ 0x27
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	2380      	movs	r3, #128	@ 0x80
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4013      	ands	r3, r2
 80047ca:	d00c      	beq.n	80047e6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	2208      	movs	r2, #8
 80047d0:	4313      	orrs	r3, r2
 80047d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2280      	movs	r2, #128	@ 0x80
 80047da:	00d2      	lsls	r2, r2, #3
 80047dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047de:	2327      	movs	r3, #39	@ 0x27
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	2380      	movs	r3, #128	@ 0x80
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4013      	ands	r3, r2
 80047ee:	d00c      	beq.n	800480a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2202      	movs	r2, #2
 80047f4:	4313      	orrs	r3, r2
 80047f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2280      	movs	r2, #128	@ 0x80
 80047fe:	0092      	lsls	r2, r2, #2
 8004800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004802:	2327      	movs	r3, #39	@ 0x27
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800480a:	2327      	movs	r3, #39	@ 0x27
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01d      	beq.n	8004850 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	0018      	movs	r0, r3
 8004818:	f7ff fd8a 	bl	8004330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	490e      	ldr	r1, [pc, #56]	@ (8004860 <I2C_IsErrorOccurred+0x1ec>)
 8004828:	400a      	ands	r2, r1
 800482a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	431a      	orrs	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2241      	movs	r2, #65	@ 0x41
 800483c:	2120      	movs	r1, #32
 800483e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2242      	movs	r2, #66	@ 0x42
 8004844:	2100      	movs	r1, #0
 8004846:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	2100      	movs	r1, #0
 800484e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004850:	2327      	movs	r3, #39	@ 0x27
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	781b      	ldrb	r3, [r3, #0]
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b00a      	add	sp, #40	@ 0x28
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	fe00e800 	.word	0xfe00e800

08004864 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	0008      	movs	r0, r1
 800486e:	0011      	movs	r1, r2
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	240a      	movs	r4, #10
 8004874:	193b      	adds	r3, r7, r4
 8004876:	1c02      	adds	r2, r0, #0
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	2009      	movs	r0, #9
 800487c:	183b      	adds	r3, r7, r0
 800487e:	1c0a      	adds	r2, r1, #0
 8004880:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004882:	193b      	adds	r3, r7, r4
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	059b      	lsls	r3, r3, #22
 8004888:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800488a:	183b      	adds	r3, r7, r0
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	0419      	lsls	r1, r3, #16
 8004890:	23ff      	movs	r3, #255	@ 0xff
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004896:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	4313      	orrs	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ae:	0d51      	lsrs	r1, r2, #21
 80048b0:	2280      	movs	r2, #128	@ 0x80
 80048b2:	00d2      	lsls	r2, r2, #3
 80048b4:	400a      	ands	r2, r1
 80048b6:	4907      	ldr	r1, [pc, #28]	@ (80048d4 <I2C_TransferConfig+0x70>)
 80048b8:	430a      	orrs	r2, r1
 80048ba:	43d2      	mvns	r2, r2
 80048bc:	401a      	ands	r2, r3
 80048be:	0011      	movs	r1, r2
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b007      	add	sp, #28
 80048d0:	bd90      	pop	{r4, r7, pc}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	03ff63ff 	.word	0x03ff63ff

080048d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2241      	movs	r2, #65	@ 0x41
 80048e6:	5c9b      	ldrb	r3, [r3, r2]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d138      	bne.n	8004960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2240      	movs	r2, #64	@ 0x40
 80048f2:	5c9b      	ldrb	r3, [r3, r2]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e032      	b.n	8004962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2240      	movs	r2, #64	@ 0x40
 8004900:	2101      	movs	r1, #1
 8004902:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2241      	movs	r2, #65	@ 0x41
 8004908:	2124      	movs	r1, #36	@ 0x24
 800490a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	438a      	bics	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4911      	ldr	r1, [pc, #68]	@ (800496c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004928:	400a      	ands	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2101      	movs	r1, #1
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2241      	movs	r2, #65	@ 0x41
 8004950:	2120      	movs	r1, #32
 8004952:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2240      	movs	r2, #64	@ 0x40
 8004958:	2100      	movs	r1, #0
 800495a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	ffffefff 	.word	0xffffefff

08004970 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2241      	movs	r2, #65	@ 0x41
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b20      	cmp	r3, #32
 8004984:	d139      	bne.n	80049fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2240      	movs	r2, #64	@ 0x40
 800498a:	5c9b      	ldrb	r3, [r3, r2]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004990:	2302      	movs	r3, #2
 8004992:	e033      	b.n	80049fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	2101      	movs	r1, #1
 800499a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2241      	movs	r2, #65	@ 0x41
 80049a0:	2124      	movs	r1, #36	@ 0x24
 80049a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2101      	movs	r1, #1
 80049b0:	438a      	bics	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a11      	ldr	r2, [pc, #68]	@ (8004a04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2101      	movs	r1, #1
 80049e2:	430a      	orrs	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2241      	movs	r2, #65	@ 0x41
 80049ea:	2120      	movs	r1, #32
 80049ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2240      	movs	r2, #64	@ 0x40
 80049f2:	2100      	movs	r1, #0
 80049f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e000      	b.n	80049fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
  }
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b004      	add	sp, #16
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	fffff0ff 	.word	0xfffff0ff

08004a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f000 fb76 	bl	8005108 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2201      	movs	r2, #1
 8004a22:	4013      	ands	r3, r2
 8004a24:	d100      	bne.n	8004a28 <HAL_RCC_OscConfig+0x20>
 8004a26:	e08e      	b.n	8004b46 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a28:	4bc5      	ldr	r3, [pc, #788]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	220c      	movs	r2, #12
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d00e      	beq.n	8004a52 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a34:	4bc2      	ldr	r3, [pc, #776]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	220c      	movs	r2, #12
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d117      	bne.n	8004a70 <HAL_RCC_OscConfig+0x68>
 8004a40:	4bbf      	ldr	r3, [pc, #764]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	23c0      	movs	r3, #192	@ 0xc0
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	401a      	ands	r2, r3
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	025b      	lsls	r3, r3, #9
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d10e      	bne.n	8004a70 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a52:	4bbb      	ldr	r3, [pc, #748]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	@ 0x80
 8004a58:	029b      	lsls	r3, r3, #10
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d100      	bne.n	8004a60 <HAL_RCC_OscConfig+0x58>
 8004a5e:	e071      	b.n	8004b44 <HAL_RCC_OscConfig+0x13c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d000      	beq.n	8004a6a <HAL_RCC_OscConfig+0x62>
 8004a68:	e06c      	b.n	8004b44 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f000 fb4c 	bl	8005108 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_OscConfig+0x80>
 8004a78:	4bb1      	ldr	r3, [pc, #708]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4bb0      	ldr	r3, [pc, #704]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a7e:	2180      	movs	r1, #128	@ 0x80
 8004a80:	0249      	lsls	r1, r1, #9
 8004a82:	430a      	orrs	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e02f      	b.n	8004ae8 <HAL_RCC_OscConfig+0xe0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10c      	bne.n	8004aaa <HAL_RCC_OscConfig+0xa2>
 8004a90:	4bab      	ldr	r3, [pc, #684]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4baa      	ldr	r3, [pc, #680]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a96:	49ab      	ldr	r1, [pc, #684]	@ (8004d44 <HAL_RCC_OscConfig+0x33c>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	4ba8      	ldr	r3, [pc, #672]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4ba7      	ldr	r3, [pc, #668]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004aa2:	49a9      	ldr	r1, [pc, #676]	@ (8004d48 <HAL_RCC_OscConfig+0x340>)
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e01e      	b.n	8004ae8 <HAL_RCC_OscConfig+0xe0>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xc8>
 8004ab2:	4ba3      	ldr	r3, [pc, #652]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4ba2      	ldr	r3, [pc, #648]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ab8:	2180      	movs	r1, #128	@ 0x80
 8004aba:	02c9      	lsls	r1, r1, #11
 8004abc:	430a      	orrs	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	4b9f      	ldr	r3, [pc, #636]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4b9e      	ldr	r3, [pc, #632]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ac6:	2180      	movs	r1, #128	@ 0x80
 8004ac8:	0249      	lsls	r1, r1, #9
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0xe0>
 8004ad0:	4b9b      	ldr	r3, [pc, #620]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b9a      	ldr	r3, [pc, #616]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ad6:	499b      	ldr	r1, [pc, #620]	@ (8004d44 <HAL_RCC_OscConfig+0x33c>)
 8004ad8:	400a      	ands	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	4b98      	ldr	r3, [pc, #608]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b97      	ldr	r3, [pc, #604]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ae2:	4999      	ldr	r1, [pc, #612]	@ (8004d48 <HAL_RCC_OscConfig+0x340>)
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d014      	beq.n	8004b1a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fe fd9c 	bl	800362c <HAL_GetTick>
 8004af4:	0003      	movs	r3, r0
 8004af6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004afa:	f7fe fd97 	bl	800362c <HAL_GetTick>
 8004afe:	0002      	movs	r2, r0
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b64      	cmp	r3, #100	@ 0x64
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e2fd      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	029b      	lsls	r3, r3, #10
 8004b14:	4013      	ands	r3, r2
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCC_OscConfig+0xf2>
 8004b18:	e015      	b.n	8004b46 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1a:	f7fe fd87 	bl	800362c <HAL_GetTick>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b24:	f7fe fd82 	bl	800362c <HAL_GetTick>
 8004b28:	0002      	movs	r2, r0
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	@ 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e2e8      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	4b82      	ldr	r3, [pc, #520]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	2380      	movs	r3, #128	@ 0x80
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x11c>
 8004b42:	e000      	b.n	8004b46 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <HAL_RCC_OscConfig+0x14a>
 8004b50:	e06c      	b.n	8004c2c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b52:	4b7b      	ldr	r3, [pc, #492]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	220c      	movs	r2, #12
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d00e      	beq.n	8004b7a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b5c:	4b78      	ldr	r3, [pc, #480]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	220c      	movs	r2, #12
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d11f      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1a0>
 8004b68:	4b75      	ldr	r3, [pc, #468]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	23c0      	movs	r3, #192	@ 0xc0
 8004b6e:	025b      	lsls	r3, r3, #9
 8004b70:	401a      	ands	r2, r3
 8004b72:	2380      	movs	r3, #128	@ 0x80
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d116      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	4b71      	ldr	r3, [pc, #452]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	4013      	ands	r3, r2
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_OscConfig+0x188>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e2bb      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b90:	4b6b      	ldr	r3, [pc, #428]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	22f8      	movs	r2, #248	@ 0xf8
 8004b96:	4393      	bics	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00da      	lsls	r2, r3, #3
 8004ba0:	4b67      	ldr	r3, [pc, #412]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba6:	e041      	b.n	8004c2c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d024      	beq.n	8004bfa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb0:	4b63      	ldr	r3, [pc, #396]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b62      	ldr	r3, [pc, #392]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fe fd36 	bl	800362c <HAL_GetTick>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fe fd31 	bl	800362c <HAL_GetTick>
 8004bca:	0002      	movs	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e297      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd8:	4b59      	ldr	r3, [pc, #356]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	4013      	ands	r3, r2
 8004be0:	d0f1      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be2:	4b57      	ldr	r3, [pc, #348]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	22f8      	movs	r2, #248	@ 0xf8
 8004be8:	4393      	bics	r3, r2
 8004bea:	0019      	movs	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	00da      	lsls	r2, r3, #3
 8004bf2:	4b53      	ldr	r3, [pc, #332]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e018      	b.n	8004c2c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfa:	4b51      	ldr	r3, [pc, #324]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b50      	ldr	r3, [pc, #320]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c00:	2101      	movs	r1, #1
 8004c02:	438a      	bics	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7fe fd11 	bl	800362c <HAL_GetTick>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fe fd0c 	bl	800362c <HAL_GetTick>
 8004c14:	0002      	movs	r2, r0
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e272      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b47      	ldr	r3, [pc, #284]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2202      	movs	r2, #2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d1f1      	bne.n	8004c10 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2208      	movs	r2, #8
 8004c32:	4013      	ands	r3, r2
 8004c34:	d036      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d019      	beq.n	8004c72 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c3e:	4b40      	ldr	r3, [pc, #256]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c42:	4b3f      	ldr	r3, [pc, #252]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c44:	2101      	movs	r1, #1
 8004c46:	430a      	orrs	r2, r1
 8004c48:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4a:	f7fe fcef 	bl	800362c <HAL_GetTick>
 8004c4e:	0003      	movs	r3, r0
 8004c50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fe fcea 	bl	800362c <HAL_GetTick>
 8004c58:	0002      	movs	r2, r0
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e250      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	4b36      	ldr	r3, [pc, #216]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d0f1      	beq.n	8004c54 <HAL_RCC_OscConfig+0x24c>
 8004c70:	e018      	b.n	8004ca4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c72:	4b33      	ldr	r3, [pc, #204]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c76:	4b32      	ldr	r3, [pc, #200]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c78:	2101      	movs	r1, #1
 8004c7a:	438a      	bics	r2, r1
 8004c7c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7e:	f7fe fcd5 	bl	800362c <HAL_GetTick>
 8004c82:	0003      	movs	r3, r0
 8004c84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c88:	f7fe fcd0 	bl	800362c <HAL_GetTick>
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e236      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9a:	4b29      	ldr	r3, [pc, #164]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d1f1      	bne.n	8004c88 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	4013      	ands	r3, r2
 8004cac:	d100      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x2a8>
 8004cae:	e0b5      	b.n	8004e1c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb0:	201f      	movs	r0, #31
 8004cb2:	183b      	adds	r3, r7, r0
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb8:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	055b      	lsls	r3, r3, #21
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d110      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004cca:	2180      	movs	r1, #128	@ 0x80
 8004ccc:	0549      	lsls	r1, r1, #21
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	61da      	str	r2, [r3, #28]
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004cd4:	69da      	ldr	r2, [r3, #28]
 8004cd6:	2380      	movs	r3, #128	@ 0x80
 8004cd8:	055b      	lsls	r3, r3, #21
 8004cda:	4013      	ands	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ce0:	183b      	adds	r3, r7, r0
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b19      	ldr	r3, [pc, #100]	@ (8004d4c <HAL_RCC_OscConfig+0x344>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	2380      	movs	r3, #128	@ 0x80
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d11a      	bne.n	8004d28 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf2:	4b16      	ldr	r3, [pc, #88]	@ (8004d4c <HAL_RCC_OscConfig+0x344>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b15      	ldr	r3, [pc, #84]	@ (8004d4c <HAL_RCC_OscConfig+0x344>)
 8004cf8:	2180      	movs	r1, #128	@ 0x80
 8004cfa:	0049      	lsls	r1, r1, #1
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d00:	f7fe fc94 	bl	800362c <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7fe fc8f 	bl	800362c <HAL_GetTick>
 8004d0e:	0002      	movs	r2, r0
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b64      	cmp	r3, #100	@ 0x64
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1f5      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_OscConfig+0x344>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4013      	ands	r3, r2
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10f      	bne.n	8004d50 <HAL_RCC_OscConfig+0x348>
 8004d30:	4b03      	ldr	r3, [pc, #12]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004d32:	6a1a      	ldr	r2, [r3, #32]
 8004d34:	4b02      	ldr	r3, [pc, #8]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004d36:	2101      	movs	r1, #1
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	621a      	str	r2, [r3, #32]
 8004d3c:	e036      	b.n	8004dac <HAL_RCC_OscConfig+0x3a4>
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	40021000 	.word	0x40021000
 8004d44:	fffeffff 	.word	0xfffeffff
 8004d48:	fffbffff 	.word	0xfffbffff
 8004d4c:	40007000 	.word	0x40007000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10c      	bne.n	8004d72 <HAL_RCC_OscConfig+0x36a>
 8004d58:	4bca      	ldr	r3, [pc, #808]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	4bc9      	ldr	r3, [pc, #804]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d5e:	2101      	movs	r1, #1
 8004d60:	438a      	bics	r2, r1
 8004d62:	621a      	str	r2, [r3, #32]
 8004d64:	4bc7      	ldr	r3, [pc, #796]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	4bc6      	ldr	r3, [pc, #792]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	621a      	str	r2, [r3, #32]
 8004d70:	e01c      	b.n	8004dac <HAL_RCC_OscConfig+0x3a4>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b05      	cmp	r3, #5
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x38c>
 8004d7a:	4bc2      	ldr	r3, [pc, #776]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	4bc1      	ldr	r3, [pc, #772]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d80:	2104      	movs	r1, #4
 8004d82:	430a      	orrs	r2, r1
 8004d84:	621a      	str	r2, [r3, #32]
 8004d86:	4bbf      	ldr	r3, [pc, #764]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	4bbe      	ldr	r3, [pc, #760]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	621a      	str	r2, [r3, #32]
 8004d92:	e00b      	b.n	8004dac <HAL_RCC_OscConfig+0x3a4>
 8004d94:	4bbb      	ldr	r3, [pc, #748]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	4bba      	ldr	r3, [pc, #744]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	621a      	str	r2, [r3, #32]
 8004da0:	4bb8      	ldr	r3, [pc, #736]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	4bb7      	ldr	r3, [pc, #732]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004da6:	2104      	movs	r1, #4
 8004da8:	438a      	bics	r2, r1
 8004daa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d014      	beq.n	8004dde <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db4:	f7fe fc3a 	bl	800362c <HAL_GetTick>
 8004db8:	0003      	movs	r3, r0
 8004dba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	e009      	b.n	8004dd2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fe fc35 	bl	800362c <HAL_GetTick>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	4aaf      	ldr	r2, [pc, #700]	@ (8005088 <HAL_RCC_OscConfig+0x680>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e19a      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd2:	4bac      	ldr	r3, [pc, #688]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0x3b6>
 8004ddc:	e013      	b.n	8004e06 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dde:	f7fe fc25 	bl	800362c <HAL_GetTick>
 8004de2:	0003      	movs	r3, r0
 8004de4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de6:	e009      	b.n	8004dfc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fe fc20 	bl	800362c <HAL_GetTick>
 8004dec:	0002      	movs	r2, r0
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	4aa5      	ldr	r2, [pc, #660]	@ (8005088 <HAL_RCC_OscConfig+0x680>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e185      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfc:	4ba1      	ldr	r3, [pc, #644]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	2202      	movs	r2, #2
 8004e02:	4013      	ands	r3, r2
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e06:	231f      	movs	r3, #31
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d105      	bne.n	8004e1c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e10:	4b9c      	ldr	r3, [pc, #624]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	4b9b      	ldr	r3, [pc, #620]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e16:	499d      	ldr	r1, [pc, #628]	@ (800508c <HAL_RCC_OscConfig+0x684>)
 8004e18:	400a      	ands	r2, r1
 8004e1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2210      	movs	r2, #16
 8004e22:	4013      	ands	r3, r2
 8004e24:	d063      	beq.n	8004eee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d12a      	bne.n	8004e84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e2e:	4b95      	ldr	r3, [pc, #596]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e32:	4b94      	ldr	r3, [pc, #592]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e34:	2104      	movs	r1, #4
 8004e36:	430a      	orrs	r2, r1
 8004e38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e3a:	4b92      	ldr	r3, [pc, #584]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e3e:	4b91      	ldr	r3, [pc, #580]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e40:	2101      	movs	r1, #1
 8004e42:	430a      	orrs	r2, r1
 8004e44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e46:	f7fe fbf1 	bl	800362c <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e50:	f7fe fbec 	bl	800362c <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e152      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e62:	4b88      	ldr	r3, [pc, #544]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e66:	2202      	movs	r2, #2
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d0f1      	beq.n	8004e50 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e6c:	4b85      	ldr	r3, [pc, #532]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e70:	22f8      	movs	r2, #248	@ 0xf8
 8004e72:	4393      	bics	r3, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	00da      	lsls	r2, r3, #3
 8004e7c:	4b81      	ldr	r3, [pc, #516]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e82:	e034      	b.n	8004eee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	3305      	adds	r3, #5
 8004e8a:	d111      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004e8c:	4b7d      	ldr	r3, [pc, #500]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e90:	4b7c      	ldr	r3, [pc, #496]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e92:	2104      	movs	r1, #4
 8004e94:	438a      	bics	r2, r1
 8004e96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e98:	4b7a      	ldr	r3, [pc, #488]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9c:	22f8      	movs	r2, #248	@ 0xf8
 8004e9e:	4393      	bics	r3, r2
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	00da      	lsls	r2, r3, #3
 8004ea8:	4b76      	ldr	r3, [pc, #472]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eae:	e01e      	b.n	8004eee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004eb0:	4b74      	ldr	r3, [pc, #464]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb4:	4b73      	ldr	r3, [pc, #460]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ebc:	4b71      	ldr	r3, [pc, #452]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004ebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ec0:	4b70      	ldr	r3, [pc, #448]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec8:	f7fe fbb0 	bl	800362c <HAL_GetTick>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ed2:	f7fe fbab 	bl	800362c <HAL_GetTick>
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e111      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ee4:	4b67      	ldr	r3, [pc, #412]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee8:	2202      	movs	r2, #2
 8004eea:	4013      	ands	r3, r2
 8004eec:	d1f1      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d05c      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004ef8:	4b62      	ldr	r3, [pc, #392]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	220c      	movs	r2, #12
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d00e      	beq.n	8004f22 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f04:	4b5f      	ldr	r3, [pc, #380]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	220c      	movs	r2, #12
 8004f0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d114      	bne.n	8004f3a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f10:	4b5c      	ldr	r3, [pc, #368]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	23c0      	movs	r3, #192	@ 0xc0
 8004f16:	025b      	lsls	r3, r3, #9
 8004f18:	401a      	ands	r2, r3
 8004f1a:	23c0      	movs	r3, #192	@ 0xc0
 8004f1c:	025b      	lsls	r3, r3, #9
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d10b      	bne.n	8004f3a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004f22:	4b58      	ldr	r3, [pc, #352]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f26:	2380      	movs	r3, #128	@ 0x80
 8004f28:	029b      	lsls	r3, r3, #10
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d040      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x5a8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d03c      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0e6      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01b      	beq.n	8004f7a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004f42:	4b50      	ldr	r3, [pc, #320]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f46:	4b4f      	ldr	r3, [pc, #316]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004f48:	2180      	movs	r1, #128	@ 0x80
 8004f4a:	0249      	lsls	r1, r1, #9
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fe fb6c 	bl	800362c <HAL_GetTick>
 8004f54:	0003      	movs	r3, r0
 8004f56:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f5a:	f7fe fb67 	bl	800362c <HAL_GetTick>
 8004f5e:	0002      	movs	r2, r0
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0cd      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004f6c:	4b45      	ldr	r3, [pc, #276]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f70:	2380      	movs	r3, #128	@ 0x80
 8004f72:	029b      	lsls	r3, r3, #10
 8004f74:	4013      	ands	r3, r2
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x552>
 8004f78:	e01b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004f7a:	4b42      	ldr	r3, [pc, #264]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f7e:	4b41      	ldr	r3, [pc, #260]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004f80:	4943      	ldr	r1, [pc, #268]	@ (8005090 <HAL_RCC_OscConfig+0x688>)
 8004f82:	400a      	ands	r2, r1
 8004f84:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f86:	f7fe fb51 	bl	800362c <HAL_GetTick>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f90:	f7fe fb4c 	bl	800362c <HAL_GetTick>
 8004f94:	0002      	movs	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0b2      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004fa2:	4b38      	ldr	r3, [pc, #224]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fa6:	2380      	movs	r3, #128	@ 0x80
 8004fa8:	029b      	lsls	r3, r3, #10
 8004faa:	4013      	ands	r3, r2
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x588>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004fb0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d100      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5b4>
 8004fba:	e0a4      	b.n	8005106 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fbc:	4b31      	ldr	r3, [pc, #196]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	220c      	movs	r2, #12
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d100      	bne.n	8004fca <HAL_RCC_OscConfig+0x5c2>
 8004fc8:	e078      	b.n	80050bc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d14c      	bne.n	800506c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004fd8:	492e      	ldr	r1, [pc, #184]	@ (8005094 <HAL_RCC_OscConfig+0x68c>)
 8004fda:	400a      	ands	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fde:	f7fe fb25 	bl	800362c <HAL_GetTick>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fe fb20 	bl	800362c <HAL_GetTick>
 8004fec:	0002      	movs	r2, r0
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e086      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ffa:	4b22      	ldr	r3, [pc, #136]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	049b      	lsls	r3, r3, #18
 8005002:	4013      	ands	r3, r2
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005006:	4b1f      	ldr	r3, [pc, #124]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	220f      	movs	r2, #15
 800500c:	4393      	bics	r3, r2
 800500e:	0019      	movs	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005014:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8005016:	430a      	orrs	r2, r1
 8005018:	62da      	str	r2, [r3, #44]	@ 0x2c
 800501a:	4b1a      	ldr	r3, [pc, #104]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <HAL_RCC_OscConfig+0x690>)
 8005020:	4013      	ands	r3, r2
 8005022:	0019      	movs	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	431a      	orrs	r2, r3
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005034:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4b12      	ldr	r3, [pc, #72]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 800503a:	2180      	movs	r1, #128	@ 0x80
 800503c:	0449      	lsls	r1, r1, #17
 800503e:	430a      	orrs	r2, r1
 8005040:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005042:	f7fe faf3 	bl	800362c <HAL_GetTick>
 8005046:	0003      	movs	r3, r0
 8005048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fe faee 	bl	800362c <HAL_GetTick>
 8005050:	0002      	movs	r2, r0
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e054      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800505e:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2380      	movs	r3, #128	@ 0x80
 8005064:	049b      	lsls	r3, r3, #18
 8005066:	4013      	ands	r3, r2
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x644>
 800506a:	e04c      	b.n	8005106 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506c:	4b05      	ldr	r3, [pc, #20]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4b04      	ldr	r3, [pc, #16]	@ (8005084 <HAL_RCC_OscConfig+0x67c>)
 8005072:	4908      	ldr	r1, [pc, #32]	@ (8005094 <HAL_RCC_OscConfig+0x68c>)
 8005074:	400a      	ands	r2, r1
 8005076:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fe fad8 	bl	800362c <HAL_GetTick>
 800507c:	0003      	movs	r3, r0
 800507e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005080:	e015      	b.n	80050ae <HAL_RCC_OscConfig+0x6a6>
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	40021000 	.word	0x40021000
 8005088:	00001388 	.word	0x00001388
 800508c:	efffffff 	.word	0xefffffff
 8005090:	fffeffff 	.word	0xfffeffff
 8005094:	feffffff 	.word	0xfeffffff
 8005098:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509c:	f7fe fac6 	bl	800362c <HAL_GetTick>
 80050a0:	0002      	movs	r2, r0
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e02c      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ae:	4b18      	ldr	r3, [pc, #96]	@ (8005110 <HAL_RCC_OscConfig+0x708>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	2380      	movs	r3, #128	@ 0x80
 80050b4:	049b      	lsls	r3, r3, #18
 80050b6:	4013      	ands	r3, r2
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x694>
 80050ba:	e024      	b.n	8005106 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e01f      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80050c8:	4b11      	ldr	r3, [pc, #68]	@ (8005110 <HAL_RCC_OscConfig+0x708>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80050ce:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <HAL_RCC_OscConfig+0x708>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	23c0      	movs	r3, #192	@ 0xc0
 80050d8:	025b      	lsls	r3, r3, #9
 80050da:	401a      	ands	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d10e      	bne.n	8005102 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	220f      	movs	r2, #15
 80050e8:	401a      	ands	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	23f0      	movs	r3, #240	@ 0xf0
 80050f6:	039b      	lsls	r3, r3, #14
 80050f8:	401a      	ands	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d001      	beq.n	8005106 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b008      	add	sp, #32
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40021000 	.word	0x40021000

08005114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0bf      	b.n	80052a8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005128:	4b61      	ldr	r3, [pc, #388]	@ (80052b0 <HAL_RCC_ClockConfig+0x19c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2201      	movs	r2, #1
 800512e:	4013      	ands	r3, r2
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d911      	bls.n	800515a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b5e      	ldr	r3, [pc, #376]	@ (80052b0 <HAL_RCC_ClockConfig+0x19c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2201      	movs	r2, #1
 800513c:	4393      	bics	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	4b5b      	ldr	r3, [pc, #364]	@ (80052b0 <HAL_RCC_ClockConfig+0x19c>)
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005148:	4b59      	ldr	r3, [pc, #356]	@ (80052b0 <HAL_RCC_ClockConfig+0x19c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2201      	movs	r2, #1
 800514e:	4013      	ands	r3, r2
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d001      	beq.n	800515a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0a6      	b.n	80052a8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2202      	movs	r2, #2
 8005160:	4013      	ands	r3, r2
 8005162:	d015      	beq.n	8005190 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2204      	movs	r2, #4
 800516a:	4013      	ands	r3, r2
 800516c:	d006      	beq.n	800517c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800516e:	4b51      	ldr	r3, [pc, #324]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	4b50      	ldr	r3, [pc, #320]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 8005174:	21e0      	movs	r1, #224	@ 0xe0
 8005176:	00c9      	lsls	r1, r1, #3
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800517c:	4b4d      	ldr	r3, [pc, #308]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	22f0      	movs	r2, #240	@ 0xf0
 8005182:	4393      	bics	r3, r2
 8005184:	0019      	movs	r1, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	4b4a      	ldr	r3, [pc, #296]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 800518c:	430a      	orrs	r2, r1
 800518e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	4013      	ands	r3, r2
 8005198:	d04c      	beq.n	8005234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a2:	4b44      	ldr	r3, [pc, #272]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	029b      	lsls	r3, r3, #10
 80051aa:	4013      	ands	r3, r2
 80051ac:	d120      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e07a      	b.n	80052a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ba:	4b3e      	ldr	r3, [pc, #248]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	2380      	movs	r3, #128	@ 0x80
 80051c0:	049b      	lsls	r3, r3, #18
 80051c2:	4013      	ands	r3, r2
 80051c4:	d114      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06e      	b.n	80052a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80051d2:	4b38      	ldr	r3, [pc, #224]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 80051d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051d6:	2380      	movs	r3, #128	@ 0x80
 80051d8:	029b      	lsls	r3, r3, #10
 80051da:	4013      	ands	r3, r2
 80051dc:	d108      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e062      	b.n	80052a8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e2:	4b34      	ldr	r3, [pc, #208]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2202      	movs	r2, #2
 80051e8:	4013      	ands	r3, r2
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e05b      	b.n	80052a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f0:	4b30      	ldr	r3, [pc, #192]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	4393      	bics	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	4b2d      	ldr	r3, [pc, #180]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005204:	f7fe fa12 	bl	800362c <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520c:	e009      	b.n	8005222 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520e:	f7fe fa0d 	bl	800362c <HAL_GetTick>
 8005212:	0002      	movs	r2, r0
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	4a27      	ldr	r2, [pc, #156]	@ (80052b8 <HAL_RCC_ClockConfig+0x1a4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e042      	b.n	80052a8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	4b24      	ldr	r3, [pc, #144]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	220c      	movs	r2, #12
 8005228:	401a      	ands	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	429a      	cmp	r2, r3
 8005232:	d1ec      	bne.n	800520e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005234:	4b1e      	ldr	r3, [pc, #120]	@ (80052b0 <HAL_RCC_ClockConfig+0x19c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	4013      	ands	r3, r2
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d211      	bcs.n	8005266 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b1b      	ldr	r3, [pc, #108]	@ (80052b0 <HAL_RCC_ClockConfig+0x19c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	4393      	bics	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	4b18      	ldr	r3, [pc, #96]	@ (80052b0 <HAL_RCC_ClockConfig+0x19c>)
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005254:	4b16      	ldr	r3, [pc, #88]	@ (80052b0 <HAL_RCC_ClockConfig+0x19c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2201      	movs	r2, #1
 800525a:	4013      	ands	r3, r2
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d001      	beq.n	8005266 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e020      	b.n	80052a8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2204      	movs	r2, #4
 800526c:	4013      	ands	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005270:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a11      	ldr	r2, [pc, #68]	@ (80052bc <HAL_RCC_ClockConfig+0x1a8>)
 8005276:	4013      	ands	r3, r2
 8005278:	0019      	movs	r1, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 8005280:	430a      	orrs	r2, r1
 8005282:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005284:	f000 f820 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 8005288:	0001      	movs	r1, r0
 800528a:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <HAL_RCC_ClockConfig+0x1a0>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	220f      	movs	r2, #15
 8005292:	4013      	ands	r3, r2
 8005294:	4a0a      	ldr	r2, [pc, #40]	@ (80052c0 <HAL_RCC_ClockConfig+0x1ac>)
 8005296:	5cd3      	ldrb	r3, [r2, r3]
 8005298:	000a      	movs	r2, r1
 800529a:	40da      	lsrs	r2, r3
 800529c:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <HAL_RCC_ClockConfig+0x1b0>)
 800529e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052a0:	2003      	movs	r0, #3
 80052a2:	f7fe f97d 	bl	80035a0 <HAL_InitTick>
  
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	0018      	movs	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b004      	add	sp, #16
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40022000 	.word	0x40022000
 80052b4:	40021000 	.word	0x40021000
 80052b8:	00001388 	.word	0x00001388
 80052bc:	fffff8ff 	.word	0xfffff8ff
 80052c0:	08006ebc 	.word	0x08006ebc
 80052c4:	20000004 	.word	0x20000004

080052c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	2300      	movs	r3, #0
 80052dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80052e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <HAL_RCC_GetSysClockFreq+0xd0>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	220c      	movs	r2, #12
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d046      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0xb8>
 80052f2:	d848      	bhi.n	8005386 <HAL_RCC_GetSysClockFreq+0xbe>
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d002      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0x36>
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d003      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0x3c>
 80052fc:	e043      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052fe:	4b27      	ldr	r3, [pc, #156]	@ (800539c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005300:	613b      	str	r3, [r7, #16]
      break;
 8005302:	e043      	b.n	800538c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	0c9b      	lsrs	r3, r3, #18
 8005308:	220f      	movs	r2, #15
 800530a:	4013      	ands	r3, r2
 800530c:	4a24      	ldr	r2, [pc, #144]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800530e:	5cd3      	ldrb	r3, [r2, r3]
 8005310:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005312:	4b21      	ldr	r3, [pc, #132]	@ (8005398 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	220f      	movs	r2, #15
 8005318:	4013      	ands	r3, r2
 800531a:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800531c:	5cd3      	ldrb	r3, [r2, r3]
 800531e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	23c0      	movs	r3, #192	@ 0xc0
 8005324:	025b      	lsls	r3, r3, #9
 8005326:	401a      	ands	r2, r3
 8005328:	2380      	movs	r3, #128	@ 0x80
 800532a:	025b      	lsls	r3, r3, #9
 800532c:	429a      	cmp	r2, r3
 800532e:	d109      	bne.n	8005344 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	481a      	ldr	r0, [pc, #104]	@ (800539c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005334:	f7fa fef2 	bl	800011c <__udivsi3>
 8005338:	0003      	movs	r3, r0
 800533a:	001a      	movs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4353      	muls	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e01a      	b.n	800537a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	23c0      	movs	r3, #192	@ 0xc0
 8005348:	025b      	lsls	r3, r3, #9
 800534a:	401a      	ands	r2, r3
 800534c:	23c0      	movs	r3, #192	@ 0xc0
 800534e:	025b      	lsls	r3, r3, #9
 8005350:	429a      	cmp	r2, r3
 8005352:	d109      	bne.n	8005368 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	4814      	ldr	r0, [pc, #80]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005358:	f7fa fee0 	bl	800011c <__udivsi3>
 800535c:	0003      	movs	r3, r0
 800535e:	001a      	movs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4353      	muls	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e008      	b.n	800537a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	480c      	ldr	r0, [pc, #48]	@ (800539c <HAL_RCC_GetSysClockFreq+0xd4>)
 800536c:	f7fa fed6 	bl	800011c <__udivsi3>
 8005370:	0003      	movs	r3, r0
 8005372:	001a      	movs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4353      	muls	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	613b      	str	r3, [r7, #16]
      break;
 800537e:	e005      	b.n	800538c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005380:	4b09      	ldr	r3, [pc, #36]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005382:	613b      	str	r3, [r7, #16]
      break;
 8005384:	e002      	b.n	800538c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005386:	4b05      	ldr	r3, [pc, #20]	@ (800539c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005388:	613b      	str	r3, [r7, #16]
      break;
 800538a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800538c:	693b      	ldr	r3, [r7, #16]
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b006      	add	sp, #24
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			@ (mov r8, r8)
 8005398:	40021000 	.word	0x40021000
 800539c:	007a1200 	.word	0x007a1200
 80053a0:	08006ecc 	.word	0x08006ecc
 80053a4:	08006edc 	.word	0x08006edc
 80053a8:	02dc6c00 	.word	0x02dc6c00

080053ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	025b      	lsls	r3, r3, #9
 80053c4:	4013      	ands	r3, r2
 80053c6:	d100      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80053c8:	e08e      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80053ca:	2017      	movs	r0, #23
 80053cc:	183b      	adds	r3, r7, r0
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053d2:	4b67      	ldr	r3, [pc, #412]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	2380      	movs	r3, #128	@ 0x80
 80053d8:	055b      	lsls	r3, r3, #21
 80053da:	4013      	ands	r3, r2
 80053dc:	d110      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053de:	4b64      	ldr	r3, [pc, #400]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	4b63      	ldr	r3, [pc, #396]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053e4:	2180      	movs	r1, #128	@ 0x80
 80053e6:	0549      	lsls	r1, r1, #21
 80053e8:	430a      	orrs	r2, r1
 80053ea:	61da      	str	r2, [r3, #28]
 80053ec:	4b60      	ldr	r3, [pc, #384]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	055b      	lsls	r3, r3, #21
 80053f4:	4013      	ands	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
 80053f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053fa:	183b      	adds	r3, r7, r0
 80053fc:	2201      	movs	r2, #1
 80053fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005400:	4b5c      	ldr	r3, [pc, #368]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	4013      	ands	r3, r2
 800540a:	d11a      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800540c:	4b59      	ldr	r3, [pc, #356]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b58      	ldr	r3, [pc, #352]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005412:	2180      	movs	r1, #128	@ 0x80
 8005414:	0049      	lsls	r1, r1, #1
 8005416:	430a      	orrs	r2, r1
 8005418:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800541a:	f7fe f907 	bl	800362c <HAL_GetTick>
 800541e:	0003      	movs	r3, r0
 8005420:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005422:	e008      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005424:	f7fe f902 	bl	800362c <HAL_GetTick>
 8005428:	0002      	movs	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	@ 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e097      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005436:	4b4f      	ldr	r3, [pc, #316]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	2380      	movs	r3, #128	@ 0x80
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4013      	ands	r3, r2
 8005440:	d0f0      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005442:	4b4b      	ldr	r3, [pc, #300]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005444:	6a1a      	ldr	r2, [r3, #32]
 8005446:	23c0      	movs	r3, #192	@ 0xc0
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4013      	ands	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d034      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	23c0      	movs	r3, #192	@ 0xc0
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4013      	ands	r3, r2
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d02c      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005464:	4b42      	ldr	r3, [pc, #264]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	4a43      	ldr	r2, [pc, #268]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800546a:	4013      	ands	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800546e:	4b40      	ldr	r3, [pc, #256]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	4b3f      	ldr	r3, [pc, #252]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005474:	2180      	movs	r1, #128	@ 0x80
 8005476:	0249      	lsls	r1, r1, #9
 8005478:	430a      	orrs	r2, r1
 800547a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800547c:	4b3c      	ldr	r3, [pc, #240]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005482:	493e      	ldr	r1, [pc, #248]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005484:	400a      	ands	r2, r1
 8005486:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005488:	4b39      	ldr	r3, [pc, #228]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	4013      	ands	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005496:	f7fe f8c9 	bl	800362c <HAL_GetTick>
 800549a:	0003      	movs	r3, r0
 800549c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549e:	e009      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a0:	f7fe f8c4 	bl	800362c <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	4a35      	ldr	r2, [pc, #212]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e058      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	2202      	movs	r2, #2
 80054ba:	4013      	ands	r3, r2
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054be:	4b2c      	ldr	r3, [pc, #176]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	4b28      	ldr	r3, [pc, #160]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054ce:	430a      	orrs	r2, r1
 80054d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054d2:	2317      	movs	r3, #23
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054dc:	4b24      	ldr	r3, [pc, #144]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	4b23      	ldr	r3, [pc, #140]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054e2:	4928      	ldr	r1, [pc, #160]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054e4:	400a      	ands	r2, r1
 80054e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2201      	movs	r2, #1
 80054ee:	4013      	ands	r3, r2
 80054f0:	d009      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	2203      	movs	r2, #3
 80054f8:	4393      	bics	r3, r2
 80054fa:	0019      	movs	r1, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	4b1b      	ldr	r3, [pc, #108]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005502:	430a      	orrs	r2, r1
 8005504:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2220      	movs	r2, #32
 800550c:	4013      	ands	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005510:	4b17      	ldr	r3, [pc, #92]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	2210      	movs	r2, #16
 8005516:	4393      	bics	r3, r2
 8005518:	0019      	movs	r1, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	4b14      	ldr	r3, [pc, #80]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005520:	430a      	orrs	r2, r1
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	029b      	lsls	r3, r3, #10
 800552c:	4013      	ands	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005530:	4b0f      	ldr	r3, [pc, #60]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005534:	2280      	movs	r2, #128	@ 0x80
 8005536:	4393      	bics	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005540:	430a      	orrs	r2, r1
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	2380      	movs	r3, #128	@ 0x80
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4013      	ands	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005550:	4b07      	ldr	r3, [pc, #28]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	2240      	movs	r2, #64	@ 0x40
 8005556:	4393      	bics	r3, r2
 8005558:	0019      	movs	r1, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005560:	430a      	orrs	r2, r1
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b006      	add	sp, #24
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	40021000 	.word	0x40021000
 8005574:	40007000 	.word	0x40007000
 8005578:	fffffcff 	.word	0xfffffcff
 800557c:	fffeffff 	.word	0xfffeffff
 8005580:	00001388 	.word	0x00001388
 8005584:	efffffff 	.word	0xefffffff

08005588 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005588:	b5b0      	push	{r4, r5, r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005590:	230f      	movs	r3, #15
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e081      	b.n	80056a6 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7f5b      	ldrb	r3, [r3, #29]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7fd feff 	bl	80033b8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2210      	movs	r2, #16
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d05c      	beq.n	8005688 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	22ca      	movs	r2, #202	@ 0xca
 80055d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2253      	movs	r2, #83	@ 0x53
 80055dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80055de:	250f      	movs	r5, #15
 80055e0:	197c      	adds	r4, r7, r5
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 fa73 	bl	8005ad0 <RTC_EnterInitMode>
 80055ea:	0003      	movs	r3, r0
 80055ec:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80055ee:	0028      	movs	r0, r5
 80055f0:	183b      	adds	r3, r7, r0
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d12c      	bne.n	8005652 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	492b      	ldr	r1, [pc, #172]	@ (80056b0 <HAL_RTC_Init+0x128>)
 8005604:	400a      	ands	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6899      	ldr	r1, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68d2      	ldr	r2, [r2, #12]
 800562e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6919      	ldr	r1, [r3, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	041a      	lsls	r2, r3, #16
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005644:	183c      	adds	r4, r7, r0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	0018      	movs	r0, r3
 800564a:	f000 fa84 	bl	8005b56 <RTC_ExitInitMode>
 800564e:	0003      	movs	r3, r0
 8005650:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005652:	230f      	movs	r3, #15
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d110      	bne.n	800567e <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4913      	ldr	r1, [pc, #76]	@ (80056b4 <HAL_RTC_Init+0x12c>)
 8005668:	400a      	ands	r2, r1
 800566a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	22ff      	movs	r2, #255	@ 0xff
 8005684:	625a      	str	r2, [r3, #36]	@ 0x24
 8005686:	e003      	b.n	8005690 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005688:	230f      	movs	r3, #15
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8005690:	230f      	movs	r3, #15
 8005692:	18fb      	adds	r3, r7, r3
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80056a0:	230f      	movs	r3, #15
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	781b      	ldrb	r3, [r3, #0]
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b004      	add	sp, #16
 80056ac:	bdb0      	pop	{r4, r5, r7, pc}
 80056ae:	46c0      	nop			@ (mov r8, r8)
 80056b0:	ff8fffbf 	.word	0xff8fffbf
 80056b4:	fffbffff 	.word	0xfffbffff

080056b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056b8:	b5b0      	push	{r4, r5, r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	7f1b      	ldrb	r3, [r3, #28]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_RTC_SetTime+0x1c>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e08e      	b.n	80057f2 <HAL_RTC_SetTime+0x13a>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2202      	movs	r2, #2
 80056de:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d125      	bne.n	8005732 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2240      	movs	r2, #64	@ 0x40
 80056ee:	4013      	ands	r3, r2
 80056f0:	d102      	bne.n	80056f8 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 fa53 	bl	8005ba8 <RTC_ByteToBcd2>
 8005702:	0003      	movs	r3, r0
 8005704:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 fa4c 	bl	8005ba8 <RTC_ByteToBcd2>
 8005710:	0003      	movs	r3, r0
 8005712:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005714:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	789b      	ldrb	r3, [r3, #2]
 800571a:	0018      	movs	r0, r3
 800571c:	f000 fa44 	bl	8005ba8 <RTC_ByteToBcd2>
 8005720:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005722:	0022      	movs	r2, r4
 8005724:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	78db      	ldrb	r3, [r3, #3]
 800572a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e017      	b.n	8005762 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2240      	movs	r2, #64	@ 0x40
 800573a:	4013      	ands	r3, r2
 800573c:	d102      	bne.n	8005744 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2200      	movs	r2, #0
 8005742:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005750:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005756:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	78db      	ldrb	r3, [r3, #3]
 800575c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	22ca      	movs	r2, #202	@ 0xca
 8005768:	625a      	str	r2, [r3, #36]	@ 0x24
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2253      	movs	r2, #83	@ 0x53
 8005770:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005772:	2513      	movs	r5, #19
 8005774:	197c      	adds	r4, r7, r5
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	0018      	movs	r0, r3
 800577a:	f000 f9a9 	bl	8005ad0 <RTC_EnterInitMode>
 800577e:	0003      	movs	r3, r0
 8005780:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005782:	0028      	movs	r0, r5
 8005784:	183b      	adds	r3, r7, r0
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d120      	bne.n	80057ce <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	491a      	ldr	r1, [pc, #104]	@ (80057fc <HAL_RTC_SetTime+0x144>)
 8005794:	400a      	ands	r2, r1
 8005796:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4917      	ldr	r1, [pc, #92]	@ (8005800 <HAL_RTC_SetTime+0x148>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057c0:	183c      	adds	r4, r7, r0
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f000 f9c6 	bl	8005b56 <RTC_ExitInitMode>
 80057ca:	0003      	movs	r3, r0
 80057cc:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80057ce:	2313      	movs	r3, #19
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	22ff      	movs	r2, #255	@ 0xff
 80057e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]

  return status;
 80057ec:	2313      	movs	r3, #19
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	781b      	ldrb	r3, [r3, #0]
}
 80057f2:	0018      	movs	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b006      	add	sp, #24
 80057f8:	bdb0      	pop	{r4, r5, r7, pc}
 80057fa:	46c0      	nop			@ (mov r8, r8)
 80057fc:	007f7f7f 	.word	0x007f7f7f
 8005800:	fffbffff 	.word	0xfffbffff

08005804 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	045b      	lsls	r3, r3, #17
 8005826:	0c5a      	lsrs	r2, r3, #17
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a22      	ldr	r2, [pc, #136]	@ (80058bc <HAL_RTC_GetTime+0xb8>)
 8005834:	4013      	ands	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	0c1b      	lsrs	r3, r3, #16
 800583c:	b2db      	uxtb	r3, r3
 800583e:	223f      	movs	r2, #63	@ 0x3f
 8005840:	4013      	ands	r3, r2
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	b2db      	uxtb	r3, r3
 800584e:	227f      	movs	r2, #127	@ 0x7f
 8005850:	4013      	ands	r3, r2
 8005852:	b2da      	uxtb	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	227f      	movs	r2, #127	@ 0x7f
 800585e:	4013      	ands	r3, r2
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	0d9b      	lsrs	r3, r3, #22
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2201      	movs	r2, #1
 800586e:	4013      	ands	r3, r2
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11a      	bne.n	80058b2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	0018      	movs	r0, r3
 8005882:	f000 f9b2 	bl	8005bea <RTC_Bcd2ToByte>
 8005886:	0003      	movs	r3, r0
 8005888:	001a      	movs	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	0018      	movs	r0, r3
 8005894:	f000 f9a9 	bl	8005bea <RTC_Bcd2ToByte>
 8005898:	0003      	movs	r3, r0
 800589a:	001a      	movs	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	789b      	ldrb	r3, [r3, #2]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 f9a0 	bl	8005bea <RTC_Bcd2ToByte>
 80058aa:	0003      	movs	r3, r0
 80058ac:	001a      	movs	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b006      	add	sp, #24
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	007f7f7f 	.word	0x007f7f7f

080058c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058c0:	b5b0      	push	{r4, r5, r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	7f1b      	ldrb	r3, [r3, #28]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_RTC_SetDate+0x1c>
 80058d8:	2302      	movs	r3, #2
 80058da:	e07a      	b.n	80059d2 <HAL_RTC_SetDate+0x112>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2202      	movs	r2, #2
 80058e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10e      	bne.n	800590c <HAL_RTC_SetDate+0x4c>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	001a      	movs	r2, r3
 80058f4:	2310      	movs	r3, #16
 80058f6:	4013      	ands	r3, r2
 80058f8:	d008      	beq.n	800590c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2210      	movs	r2, #16
 8005900:	4393      	bics	r3, r2
 8005902:	b2db      	uxtb	r3, r3
 8005904:	330a      	adds	r3, #10
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11c      	bne.n	800594c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	78db      	ldrb	r3, [r3, #3]
 8005916:	0018      	movs	r0, r3
 8005918:	f000 f946 	bl	8005ba8 <RTC_ByteToBcd2>
 800591c:	0003      	movs	r3, r0
 800591e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	0018      	movs	r0, r3
 8005926:	f000 f93f 	bl	8005ba8 <RTC_ByteToBcd2>
 800592a:	0003      	movs	r3, r0
 800592c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800592e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	789b      	ldrb	r3, [r3, #2]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 f937 	bl	8005ba8 <RTC_ByteToBcd2>
 800593a:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800593c:	0022      	movs	r2, r4
 800593e:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e00e      	b.n	800596a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	78db      	ldrb	r3, [r3, #3]
 8005950:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005958:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800595e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	22ca      	movs	r2, #202	@ 0xca
 8005970:	625a      	str	r2, [r3, #36]	@ 0x24
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2253      	movs	r2, #83	@ 0x53
 8005978:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800597a:	2513      	movs	r5, #19
 800597c:	197c      	adds	r4, r7, r5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	0018      	movs	r0, r3
 8005982:	f000 f8a5 	bl	8005ad0 <RTC_EnterInitMode>
 8005986:	0003      	movs	r3, r0
 8005988:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800598a:	0028      	movs	r0, r5
 800598c:	183b      	adds	r3, r7, r0
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10c      	bne.n	80059ae <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4910      	ldr	r1, [pc, #64]	@ (80059dc <HAL_RTC_SetDate+0x11c>)
 800599c:	400a      	ands	r2, r1
 800599e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059a0:	183c      	adds	r4, r7, r0
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f000 f8d6 	bl	8005b56 <RTC_ExitInitMode>
 80059aa:	0003      	movs	r3, r0
 80059ac:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80059ae:	2313      	movs	r3, #19
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	22ff      	movs	r2, #255	@ 0xff
 80059c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	771a      	strb	r2, [r3, #28]

  return status;
 80059cc:	2313      	movs	r3, #19
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	781b      	ldrb	r3, [r3, #0]
}
 80059d2:	0018      	movs	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b006      	add	sp, #24
 80059d8:	bdb0      	pop	{r4, r5, r7, pc}
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	00ffff3f 	.word	0x00ffff3f

080059e0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4a21      	ldr	r2, [pc, #132]	@ (8005a7c <HAL_RTC_GetDate+0x9c>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	0a1b      	lsrs	r3, r3, #8
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	221f      	movs	r2, #31
 8005a0e:	4013      	ands	r3, r2
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	223f      	movs	r2, #63	@ 0x3f
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	0b5b      	lsrs	r3, r3, #13
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11a      	bne.n	8005a70 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	78db      	ldrb	r3, [r3, #3]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f000 f8d3 	bl	8005bea <RTC_Bcd2ToByte>
 8005a44:	0003      	movs	r3, r0
 8005a46:	001a      	movs	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f000 f8ca 	bl	8005bea <RTC_Bcd2ToByte>
 8005a56:	0003      	movs	r3, r0
 8005a58:	001a      	movs	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	789b      	ldrb	r3, [r3, #2]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 f8c1 	bl	8005bea <RTC_Bcd2ToByte>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	0018      	movs	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b006      	add	sp, #24
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	00ffff3f 	.word	0x00ffff3f

08005a80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0e      	ldr	r2, [pc, #56]	@ (8005acc <HAL_RTC_WaitForSynchro+0x4c>)
 8005a92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a94:	f7fd fdca 	bl	800362c <HAL_GetTick>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a9e:	f7fd fdc5 	bl	800362c <HAL_GetTick>
 8005aa2:	0002      	movs	r2, r0
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1ad2      	subs	r2, r2, r3
 8005aa8:	23fa      	movs	r3, #250	@ 0xfa
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d901      	bls.n	8005ab4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e006      	b.n	8005ac2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	4013      	ands	r3, r2
 8005abe:	d0ee      	beq.n	8005a9e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b004      	add	sp, #16
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			@ (mov r8, r8)
 8005acc:	00017959 	.word	0x00017959

08005ad0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005adc:	230f      	movs	r3, #15
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2240      	movs	r2, #64	@ 0x40
 8005aec:	4013      	ands	r3, r2
 8005aee:	d12b      	bne.n	8005b48 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2180      	movs	r1, #128	@ 0x80
 8005afc:	430a      	orrs	r2, r1
 8005afe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b00:	f7fd fd94 	bl	800362c <HAL_GetTick>
 8005b04:	0003      	movs	r3, r0
 8005b06:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b08:	e013      	b.n	8005b32 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b0a:	f7fd fd8f 	bl	800362c <HAL_GetTick>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	1ad2      	subs	r2, r2, r3
 8005b14:	200f      	movs	r0, #15
 8005b16:	183b      	adds	r3, r7, r0
 8005b18:	1839      	adds	r1, r7, r0
 8005b1a:	7809      	ldrb	r1, [r1, #0]
 8005b1c:	7019      	strb	r1, [r3, #0]
 8005b1e:	23fa      	movs	r3, #250	@ 0xfa
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d905      	bls.n	8005b32 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b2c:	183b      	adds	r3, r7, r0
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2240      	movs	r2, #64	@ 0x40
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d104      	bne.n	8005b48 <RTC_EnterInitMode+0x78>
 8005b3e:	230f      	movs	r3, #15
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d1e0      	bne.n	8005b0a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8005b48:	230f      	movs	r3, #15
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	781b      	ldrb	r3, [r3, #0]
}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b004      	add	sp, #16
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b56:	b590      	push	{r4, r7, lr}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	240f      	movs	r4, #15
 8005b60:	193b      	adds	r3, r7, r4
 8005b62:	2200      	movs	r2, #0
 8005b64:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2180      	movs	r1, #128	@ 0x80
 8005b72:	438a      	bics	r2, r1
 8005b74:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d10b      	bne.n	8005b9a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	0018      	movs	r0, r3
 8005b86:	f7ff ff7b 	bl	8005a80 <HAL_RTC_WaitForSynchro>
 8005b8a:	1e03      	subs	r3, r0, #0
 8005b8c:	d005      	beq.n	8005b9a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2204      	movs	r2, #4
 8005b92:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b94:	193b      	adds	r3, r7, r4
 8005b96:	2201      	movs	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005b9a:	230f      	movs	r3, #15
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	781b      	ldrb	r3, [r3, #0]
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b005      	add	sp, #20
 8005ba6:	bd90      	pop	{r4, r7, pc}

08005ba8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	0002      	movs	r2, r0
 8005bb0:	1dfb      	adds	r3, r7, #7
 8005bb2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005bb8:	e007      	b.n	8005bca <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005bc0:	1dfb      	adds	r3, r7, #7
 8005bc2:	1dfa      	adds	r2, r7, #7
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	3a0a      	subs	r2, #10
 8005bc8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8005bca:	1dfb      	adds	r3, r7, #7
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d8f3      	bhi.n	8005bba <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	1dfb      	adds	r3, r7, #7
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b2db      	uxtb	r3, r3
}
 8005be2:	0018      	movs	r0, r3
 8005be4:	46bd      	mov	sp, r7
 8005be6:	b004      	add	sp, #16
 8005be8:	bd80      	pop	{r7, pc}

08005bea <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	0002      	movs	r2, r0
 8005bf2:	1dfb      	adds	r3, r7, #7
 8005bf4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005bfa:	1dfb      	adds	r3, r7, #7
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	001a      	movs	r2, r3
 8005c04:	0013      	movs	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	189b      	adds	r3, r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	1dfb      	adds	r3, r7, #7
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	210f      	movs	r1, #15
 8005c18:	400b      	ands	r3, r1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	18d3      	adds	r3, r2, r3
 8005c1e:	b2db      	uxtb	r3, r3
}
 8005c20:	0018      	movs	r0, r3
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b004      	add	sp, #16
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3350      	adds	r3, #80	@ 0x50
 8005c3e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	601a      	str	r2, [r3, #0]
}
 8005c50:	46c0      	nop			@ (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b006      	add	sp, #24
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3350      	adds	r3, #80	@ 0x50
 8005c6c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	18d3      	adds	r3, r2, r3
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
}
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b004      	add	sp, #16
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e042      	b.n	8005d1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	223d      	movs	r2, #61	@ 0x3d
 8005c9a:	5c9b      	ldrb	r3, [r3, r2]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d107      	bne.n	8005cb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	223c      	movs	r2, #60	@ 0x3c
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0018      	movs	r0, r3
 8005cae:	f7fd fb9b 	bl	80033e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	223d      	movs	r2, #61	@ 0x3d
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	0010      	movs	r0, r2
 8005cc6:	f000 fa5b 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2246      	movs	r2, #70	@ 0x46
 8005cce:	2101      	movs	r1, #1
 8005cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	223e      	movs	r2, #62	@ 0x3e
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	5499      	strb	r1, [r3, r2]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	223f      	movs	r2, #63	@ 0x3f
 8005cde:	2101      	movs	r1, #1
 8005ce0:	5499      	strb	r1, [r3, r2]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2240      	movs	r2, #64	@ 0x40
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	5499      	strb	r1, [r3, r2]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2241      	movs	r2, #65	@ 0x41
 8005cee:	2101      	movs	r1, #1
 8005cf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2242      	movs	r2, #66	@ 0x42
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	5499      	strb	r1, [r3, r2]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2243      	movs	r2, #67	@ 0x43
 8005cfe:	2101      	movs	r1, #1
 8005d00:	5499      	strb	r1, [r3, r2]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2244      	movs	r2, #68	@ 0x44
 8005d06:	2101      	movs	r1, #1
 8005d08:	5499      	strb	r1, [r3, r2]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2245      	movs	r2, #69	@ 0x45
 8005d0e:	2101      	movs	r1, #1
 8005d10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	223d      	movs	r2, #61	@ 0x3d
 8005d16:	2101      	movs	r1, #1
 8005d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b002      	add	sp, #8
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	223d      	movs	r2, #61	@ 0x3d
 8005d30:	5c9b      	ldrb	r3, [r3, r2]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d001      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e036      	b.n	8005daa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	223d      	movs	r2, #61	@ 0x3d
 8005d40:	2102      	movs	r1, #2
 8005d42:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2101      	movs	r1, #1
 8005d50:	430a      	orrs	r2, r1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a16      	ldr	r2, [pc, #88]	@ (8005db4 <HAL_TIM_Base_Start_IT+0x90>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00a      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x50>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	2380      	movs	r3, #128	@ 0x80
 8005d64:	05db      	lsls	r3, r3, #23
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d004      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x50>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a12      	ldr	r2, [pc, #72]	@ (8005db8 <HAL_TIM_Base_Start_IT+0x94>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d111      	bne.n	8005d98 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	2207      	movs	r2, #7
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d010      	beq.n	8005da8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2101      	movs	r1, #1
 8005d92:	430a      	orrs	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d96:	e007      	b.n	8005da8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2101      	movs	r1, #1
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	0018      	movs	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b004      	add	sp, #16
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	40012c00 	.word	0x40012c00
 8005db8:	40000400 	.word	0x40000400

08005dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d021      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2202      	movs	r2, #2
 8005de0:	4013      	ands	r3, r2
 8005de2:	d01d      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2203      	movs	r2, #3
 8005dea:	4252      	negs	r2, r2
 8005dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	0018      	movs	r0, r3
 8005e04:	f000 f9a4 	bl	8006150 <HAL_TIM_IC_CaptureCallback>
 8005e08:	e007      	b.n	8005e1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 f997 	bl	8006140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f000 f9a3 	bl	8006160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2204      	movs	r2, #4
 8005e24:	4013      	ands	r3, r2
 8005e26:	d022      	beq.n	8005e6e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d01e      	beq.n	8005e6e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2205      	movs	r2, #5
 8005e36:	4252      	negs	r2, r2
 8005e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	23c0      	movs	r3, #192	@ 0xc0
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 f97d 	bl	8006150 <HAL_TIM_IC_CaptureCallback>
 8005e56:	e007      	b.n	8005e68 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 f970 	bl	8006140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0018      	movs	r0, r3
 8005e64:	f000 f97c 	bl	8006160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2208      	movs	r2, #8
 8005e72:	4013      	ands	r3, r2
 8005e74:	d021      	beq.n	8005eba <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2209      	movs	r2, #9
 8005e84:	4252      	negs	r2, r2
 8005e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	2203      	movs	r2, #3
 8005e96:	4013      	ands	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 f957 	bl	8006150 <HAL_TIM_IC_CaptureCallback>
 8005ea2:	e007      	b.n	8005eb4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f000 f94a 	bl	8006140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 f956 	bl	8006160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d022      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d01e      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2211      	movs	r2, #17
 8005ed0:	4252      	negs	r2, r2
 8005ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	23c0      	movs	r3, #192	@ 0xc0
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f000 f930 	bl	8006150 <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e007      	b.n	8005f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f000 f923 	bl	8006140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	0018      	movs	r0, r3
 8005efe:	f000 f92f 	bl	8006160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d00c      	beq.n	8005f2a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	4013      	ands	r3, r2
 8005f16:	d008      	beq.n	8005f2a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	4252      	negs	r2, r2
 8005f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7fc fc49 	bl	80027bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2280      	movs	r2, #128	@ 0x80
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d00c      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2280      	movs	r2, #128	@ 0x80
 8005f36:	4013      	ands	r3, r2
 8005f38:	d008      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2281      	movs	r2, #129	@ 0x81
 8005f40:	4252      	negs	r2, r2
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	0018      	movs	r0, r3
 8005f48:	f000 fa98 	bl	800647c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2240      	movs	r2, #64	@ 0x40
 8005f50:	4013      	ands	r3, r2
 8005f52:	d00c      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2240      	movs	r2, #64	@ 0x40
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d008      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2241      	movs	r2, #65	@ 0x41
 8005f62:	4252      	negs	r2, r2
 8005f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 f901 	bl	8006170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2220      	movs	r2, #32
 8005f72:	4013      	ands	r3, r2
 8005f74:	d00c      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d008      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2221      	movs	r2, #33	@ 0x21
 8005f84:	4252      	negs	r2, r2
 8005f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f000 fa6e 	bl	800646c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f90:	46c0      	nop			@ (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b004      	add	sp, #16
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa2:	230f      	movs	r3, #15
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	223c      	movs	r2, #60	@ 0x3c
 8005fae:	5c9b      	ldrb	r3, [r3, r2]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIM_ConfigClockSource+0x20>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e0bc      	b.n	8006132 <HAL_TIM_ConfigClockSource+0x19a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	223c      	movs	r2, #60	@ 0x3c
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	223d      	movs	r2, #61	@ 0x3d
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2277      	movs	r2, #119	@ 0x77
 8005fd4:	4393      	bics	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4a58      	ldr	r2, [pc, #352]	@ (800613c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2280      	movs	r2, #128	@ 0x80
 8005fee:	0192      	lsls	r2, r2, #6
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d040      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0xde>
 8005ff4:	2280      	movs	r2, #128	@ 0x80
 8005ff6:	0192      	lsls	r2, r2, #6
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d900      	bls.n	8005ffe <HAL_TIM_ConfigClockSource+0x66>
 8005ffc:	e088      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
 8005ffe:	2280      	movs	r2, #128	@ 0x80
 8006000:	0152      	lsls	r2, r2, #5
 8006002:	4293      	cmp	r3, r2
 8006004:	d100      	bne.n	8006008 <HAL_TIM_ConfigClockSource+0x70>
 8006006:	e088      	b.n	800611a <HAL_TIM_ConfigClockSource+0x182>
 8006008:	2280      	movs	r2, #128	@ 0x80
 800600a:	0152      	lsls	r2, r2, #5
 800600c:	4293      	cmp	r3, r2
 800600e:	d900      	bls.n	8006012 <HAL_TIM_ConfigClockSource+0x7a>
 8006010:	e07e      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
 8006012:	2b70      	cmp	r3, #112	@ 0x70
 8006014:	d018      	beq.n	8006048 <HAL_TIM_ConfigClockSource+0xb0>
 8006016:	d900      	bls.n	800601a <HAL_TIM_ConfigClockSource+0x82>
 8006018:	e07a      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
 800601a:	2b60      	cmp	r3, #96	@ 0x60
 800601c:	d04f      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x126>
 800601e:	d900      	bls.n	8006022 <HAL_TIM_ConfigClockSource+0x8a>
 8006020:	e076      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
 8006022:	2b50      	cmp	r3, #80	@ 0x50
 8006024:	d03b      	beq.n	800609e <HAL_TIM_ConfigClockSource+0x106>
 8006026:	d900      	bls.n	800602a <HAL_TIM_ConfigClockSource+0x92>
 8006028:	e072      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
 800602a:	2b40      	cmp	r3, #64	@ 0x40
 800602c:	d057      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x146>
 800602e:	d900      	bls.n	8006032 <HAL_TIM_ConfigClockSource+0x9a>
 8006030:	e06e      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
 8006032:	2b30      	cmp	r3, #48	@ 0x30
 8006034:	d063      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x166>
 8006036:	d86b      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
 8006038:	2b20      	cmp	r3, #32
 800603a:	d060      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x166>
 800603c:	d868      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d05d      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x166>
 8006042:	2b10      	cmp	r3, #16
 8006044:	d05b      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x166>
 8006046:	e063      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006058:	f000 f990 	bl	800637c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2277      	movs	r2, #119	@ 0x77
 8006068:	4313      	orrs	r3, r2
 800606a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	609a      	str	r2, [r3, #8]
      break;
 8006074:	e052      	b.n	800611c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006086:	f000 f979 	bl	800637c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2180      	movs	r1, #128	@ 0x80
 8006096:	01c9      	lsls	r1, r1, #7
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
      break;
 800609c:	e03e      	b.n	800611c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060aa:	001a      	movs	r2, r3
 80060ac:	f000 f8ec 	bl	8006288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2150      	movs	r1, #80	@ 0x50
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 f946 	bl	8006348 <TIM_ITRx_SetConfig>
      break;
 80060bc:	e02e      	b.n	800611c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ca:	001a      	movs	r2, r3
 80060cc:	f000 f90a 	bl	80062e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2160      	movs	r1, #96	@ 0x60
 80060d6:	0018      	movs	r0, r3
 80060d8:	f000 f936 	bl	8006348 <TIM_ITRx_SetConfig>
      break;
 80060dc:	e01e      	b.n	800611c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ea:	001a      	movs	r2, r3
 80060ec:	f000 f8cc 	bl	8006288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2140      	movs	r1, #64	@ 0x40
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 f926 	bl	8006348 <TIM_ITRx_SetConfig>
      break;
 80060fc:	e00e      	b.n	800611c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	0019      	movs	r1, r3
 8006108:	0010      	movs	r0, r2
 800610a:	f000 f91d 	bl	8006348 <TIM_ITRx_SetConfig>
      break;
 800610e:	e005      	b.n	800611c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006110:	230f      	movs	r3, #15
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	2201      	movs	r2, #1
 8006116:	701a      	strb	r2, [r3, #0]
      break;
 8006118:	e000      	b.n	800611c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800611a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	223d      	movs	r2, #61	@ 0x3d
 8006120:	2101      	movs	r1, #1
 8006122:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	223c      	movs	r2, #60	@ 0x3c
 8006128:	2100      	movs	r1, #0
 800612a:	5499      	strb	r1, [r3, r2]

  return status;
 800612c:	230f      	movs	r3, #15
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	781b      	ldrb	r3, [r3, #0]
}
 8006132:	0018      	movs	r0, r3
 8006134:	46bd      	mov	sp, r7
 8006136:	b004      	add	sp, #16
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	ffff00ff 	.word	0xffff00ff

08006140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006148:	46c0      	nop			@ (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b002      	add	sp, #8
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006158:	46c0      	nop			@ (mov r8, r8)
 800615a:	46bd      	mov	sp, r7
 800615c:	b002      	add	sp, #8
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006168:	46c0      	nop			@ (mov r8, r8)
 800616a:	46bd      	mov	sp, r7
 800616c:	b002      	add	sp, #8
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006178:	46c0      	nop			@ (mov r8, r8)
 800617a:	46bd      	mov	sp, r7
 800617c:	b002      	add	sp, #8
 800617e:	bd80      	pop	{r7, pc}

08006180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a37      	ldr	r2, [pc, #220]	@ (8006270 <TIM_Base_SetConfig+0xf0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d008      	beq.n	80061aa <TIM_Base_SetConfig+0x2a>
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	2380      	movs	r3, #128	@ 0x80
 800619c:	05db      	lsls	r3, r3, #23
 800619e:	429a      	cmp	r2, r3
 80061a0:	d003      	beq.n	80061aa <TIM_Base_SetConfig+0x2a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a33      	ldr	r2, [pc, #204]	@ (8006274 <TIM_Base_SetConfig+0xf4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d108      	bne.n	80061bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2270      	movs	r2, #112	@ 0x70
 80061ae:	4393      	bics	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a2c      	ldr	r2, [pc, #176]	@ (8006270 <TIM_Base_SetConfig+0xf0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d014      	beq.n	80061ee <TIM_Base_SetConfig+0x6e>
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	2380      	movs	r3, #128	@ 0x80
 80061c8:	05db      	lsls	r3, r3, #23
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d00f      	beq.n	80061ee <TIM_Base_SetConfig+0x6e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a28      	ldr	r2, [pc, #160]	@ (8006274 <TIM_Base_SetConfig+0xf4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00b      	beq.n	80061ee <TIM_Base_SetConfig+0x6e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a27      	ldr	r2, [pc, #156]	@ (8006278 <TIM_Base_SetConfig+0xf8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d007      	beq.n	80061ee <TIM_Base_SetConfig+0x6e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a26      	ldr	r2, [pc, #152]	@ (800627c <TIM_Base_SetConfig+0xfc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d003      	beq.n	80061ee <TIM_Base_SetConfig+0x6e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a25      	ldr	r2, [pc, #148]	@ (8006280 <TIM_Base_SetConfig+0x100>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d108      	bne.n	8006200 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a24      	ldr	r2, [pc, #144]	@ (8006284 <TIM_Base_SetConfig+0x104>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2280      	movs	r2, #128	@ 0x80
 8006204:	4393      	bics	r3, r2
 8006206:	001a      	movs	r2, r3
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a11      	ldr	r2, [pc, #68]	@ (8006270 <TIM_Base_SetConfig+0xf0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <TIM_Base_SetConfig+0xbe>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a12      	ldr	r2, [pc, #72]	@ (800627c <TIM_Base_SetConfig+0xfc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_Base_SetConfig+0xbe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a11      	ldr	r2, [pc, #68]	@ (8006280 <TIM_Base_SetConfig+0x100>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d103      	bne.n	8006246 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2201      	movs	r2, #1
 8006252:	4013      	ands	r3, r2
 8006254:	2b01      	cmp	r3, #1
 8006256:	d106      	bne.n	8006266 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2201      	movs	r2, #1
 800625e:	4393      	bics	r3, r2
 8006260:	001a      	movs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	611a      	str	r2, [r3, #16]
  }
}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	46bd      	mov	sp, r7
 800626a:	b004      	add	sp, #16
 800626c:	bd80      	pop	{r7, pc}
 800626e:	46c0      	nop			@ (mov r8, r8)
 8006270:	40012c00 	.word	0x40012c00
 8006274:	40000400 	.word	0x40000400
 8006278:	40002000 	.word	0x40002000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800
 8006284:	fffffcff 	.word	0xfffffcff

08006288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	2201      	movs	r2, #1
 80062a0:	4393      	bics	r3, r2
 80062a2:	001a      	movs	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	22f0      	movs	r2, #240	@ 0xf0
 80062b2:	4393      	bics	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	220a      	movs	r2, #10
 80062c4:	4393      	bics	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	621a      	str	r2, [r3, #32]
}
 80062dc:	46c0      	nop			@ (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b006      	add	sp, #24
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	2210      	movs	r2, #16
 80062fc:	4393      	bics	r3, r2
 80062fe:	001a      	movs	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4a0d      	ldr	r2, [pc, #52]	@ (8006344 <TIM_TI2_ConfigInputStage+0x60>)
 800630e:	4013      	ands	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	031b      	lsls	r3, r3, #12
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	22a0      	movs	r2, #160	@ 0xa0
 8006320:	4393      	bics	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	46c0      	nop			@ (mov r8, r8)
 800633c:	46bd      	mov	sp, r7
 800633e:	b006      	add	sp, #24
 8006340:	bd80      	pop	{r7, pc}
 8006342:	46c0      	nop			@ (mov r8, r8)
 8006344:	ffff0fff 	.word	0xffff0fff

08006348 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2270      	movs	r2, #112	@ 0x70
 800635c:	4393      	bics	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	2207      	movs	r2, #7
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	609a      	str	r2, [r3, #8]
}
 8006372:	46c0      	nop			@ (mov r8, r8)
 8006374:	46bd      	mov	sp, r7
 8006376:	b004      	add	sp, #16
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4a09      	ldr	r2, [pc, #36]	@ (80063b8 <TIM_ETR_SetConfig+0x3c>)
 8006394:	4013      	ands	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	021a      	lsls	r2, r3, #8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	431a      	orrs	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	46c0      	nop			@ (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b006      	add	sp, #24
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	ffff00ff 	.word	0xffff00ff

080063bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	223c      	movs	r2, #60	@ 0x3c
 80063ca:	5c9b      	ldrb	r3, [r3, r2]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e042      	b.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	223c      	movs	r2, #60	@ 0x3c
 80063d8:	2101      	movs	r1, #1
 80063da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	223d      	movs	r2, #61	@ 0x3d
 80063e0:	2102      	movs	r1, #2
 80063e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2270      	movs	r2, #112	@ 0x70
 80063f8:	4393      	bics	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a14      	ldr	r2, [pc, #80]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00a      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	2380      	movs	r3, #128	@ 0x80
 800641e:	05db      	lsls	r3, r3, #23
 8006420:	429a      	cmp	r2, r3
 8006422:	d004      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a0f      	ldr	r2, [pc, #60]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10c      	bne.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2280      	movs	r2, #128	@ 0x80
 8006432:	4393      	bics	r3, r2
 8006434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4313      	orrs	r3, r2
 800643e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	223d      	movs	r2, #61	@ 0x3d
 800644c:	2101      	movs	r1, #1
 800644e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	223c      	movs	r2, #60	@ 0x3c
 8006454:	2100      	movs	r1, #0
 8006456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b004      	add	sp, #16
 8006460:	bd80      	pop	{r7, pc}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40000400 	.word	0x40000400

0800646c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006474:	46c0      	nop			@ (mov r8, r8)
 8006476:	46bd      	mov	sp, r7
 8006478:	b002      	add	sp, #8
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006484:	46c0      	nop			@ (mov r8, r8)
 8006486:	46bd      	mov	sp, r7
 8006488:	b002      	add	sp, #8
 800648a:	bd80      	pop	{r7, pc}

0800648c <siprintf>:
 800648c:	b40e      	push	{r1, r2, r3}
 800648e:	b500      	push	{lr}
 8006490:	490b      	ldr	r1, [pc, #44]	@ (80064c0 <siprintf+0x34>)
 8006492:	b09c      	sub	sp, #112	@ 0x70
 8006494:	ab1d      	add	r3, sp, #116	@ 0x74
 8006496:	9002      	str	r0, [sp, #8]
 8006498:	9006      	str	r0, [sp, #24]
 800649a:	9107      	str	r1, [sp, #28]
 800649c:	9104      	str	r1, [sp, #16]
 800649e:	4809      	ldr	r0, [pc, #36]	@ (80064c4 <siprintf+0x38>)
 80064a0:	4909      	ldr	r1, [pc, #36]	@ (80064c8 <siprintf+0x3c>)
 80064a2:	cb04      	ldmia	r3!, {r2}
 80064a4:	9105      	str	r1, [sp, #20]
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	a902      	add	r1, sp, #8
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f000 f9a8 	bl	8006800 <_svfiprintf_r>
 80064b0:	2200      	movs	r2, #0
 80064b2:	9b02      	ldr	r3, [sp, #8]
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	b01c      	add	sp, #112	@ 0x70
 80064b8:	bc08      	pop	{r3}
 80064ba:	b003      	add	sp, #12
 80064bc:	4718      	bx	r3
 80064be:	46c0      	nop			@ (mov r8, r8)
 80064c0:	7fffffff 	.word	0x7fffffff
 80064c4:	20000010 	.word	0x20000010
 80064c8:	ffff0208 	.word	0xffff0208

080064cc <memset>:
 80064cc:	0003      	movs	r3, r0
 80064ce:	1882      	adds	r2, r0, r2
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d100      	bne.n	80064d6 <memset+0xa>
 80064d4:	4770      	bx	lr
 80064d6:	7019      	strb	r1, [r3, #0]
 80064d8:	3301      	adds	r3, #1
 80064da:	e7f9      	b.n	80064d0 <memset+0x4>

080064dc <__errno>:
 80064dc:	4b01      	ldr	r3, [pc, #4]	@ (80064e4 <__errno+0x8>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	4770      	bx	lr
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	20000010 	.word	0x20000010

080064e8 <__libc_init_array>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	2600      	movs	r6, #0
 80064ec:	4c0c      	ldr	r4, [pc, #48]	@ (8006520 <__libc_init_array+0x38>)
 80064ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006524 <__libc_init_array+0x3c>)
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	d109      	bne.n	800650c <__libc_init_array+0x24>
 80064f8:	2600      	movs	r6, #0
 80064fa:	f000 fc65 	bl	8006dc8 <_init>
 80064fe:	4c0a      	ldr	r4, [pc, #40]	@ (8006528 <__libc_init_array+0x40>)
 8006500:	4d0a      	ldr	r5, [pc, #40]	@ (800652c <__libc_init_array+0x44>)
 8006502:	1b64      	subs	r4, r4, r5
 8006504:	10a4      	asrs	r4, r4, #2
 8006506:	42a6      	cmp	r6, r4
 8006508:	d105      	bne.n	8006516 <__libc_init_array+0x2e>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	00b3      	lsls	r3, r6, #2
 800650e:	58eb      	ldr	r3, [r5, r3]
 8006510:	4798      	blx	r3
 8006512:	3601      	adds	r6, #1
 8006514:	e7ee      	b.n	80064f4 <__libc_init_array+0xc>
 8006516:	00b3      	lsls	r3, r6, #2
 8006518:	58eb      	ldr	r3, [r5, r3]
 800651a:	4798      	blx	r3
 800651c:	3601      	adds	r6, #1
 800651e:	e7f2      	b.n	8006506 <__libc_init_array+0x1e>
 8006520:	08006f20 	.word	0x08006f20
 8006524:	08006f20 	.word	0x08006f20
 8006528:	08006f24 	.word	0x08006f24
 800652c:	08006f20 	.word	0x08006f20

08006530 <__retarget_lock_acquire_recursive>:
 8006530:	4770      	bx	lr

08006532 <__retarget_lock_release_recursive>:
 8006532:	4770      	bx	lr

08006534 <memcpy>:
 8006534:	2300      	movs	r3, #0
 8006536:	b510      	push	{r4, lr}
 8006538:	429a      	cmp	r2, r3
 800653a:	d100      	bne.n	800653e <memcpy+0xa>
 800653c:	bd10      	pop	{r4, pc}
 800653e:	5ccc      	ldrb	r4, [r1, r3]
 8006540:	54c4      	strb	r4, [r0, r3]
 8006542:	3301      	adds	r3, #1
 8006544:	e7f8      	b.n	8006538 <memcpy+0x4>
	...

08006548 <_free_r>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	0005      	movs	r5, r0
 800654c:	1e0c      	subs	r4, r1, #0
 800654e:	d010      	beq.n	8006572 <_free_r+0x2a>
 8006550:	3c04      	subs	r4, #4
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	da00      	bge.n	800655a <_free_r+0x12>
 8006558:	18e4      	adds	r4, r4, r3
 800655a:	0028      	movs	r0, r5
 800655c:	f000 f8e0 	bl	8006720 <__malloc_lock>
 8006560:	4a1d      	ldr	r2, [pc, #116]	@ (80065d8 <_free_r+0x90>)
 8006562:	6813      	ldr	r3, [r2, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <_free_r+0x2c>
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	6014      	str	r4, [r2, #0]
 800656c:	0028      	movs	r0, r5
 800656e:	f000 f8df 	bl	8006730 <__malloc_unlock>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	42a3      	cmp	r3, r4
 8006576:	d908      	bls.n	800658a <_free_r+0x42>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	1821      	adds	r1, r4, r0
 800657c:	428b      	cmp	r3, r1
 800657e:	d1f3      	bne.n	8006568 <_free_r+0x20>
 8006580:	6819      	ldr	r1, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	1809      	adds	r1, r1, r0
 8006586:	6021      	str	r1, [r4, #0]
 8006588:	e7ee      	b.n	8006568 <_free_r+0x20>
 800658a:	001a      	movs	r2, r3
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <_free_r+0x4e>
 8006592:	42a3      	cmp	r3, r4
 8006594:	d9f9      	bls.n	800658a <_free_r+0x42>
 8006596:	6811      	ldr	r1, [r2, #0]
 8006598:	1850      	adds	r0, r2, r1
 800659a:	42a0      	cmp	r0, r4
 800659c:	d10b      	bne.n	80065b6 <_free_r+0x6e>
 800659e:	6820      	ldr	r0, [r4, #0]
 80065a0:	1809      	adds	r1, r1, r0
 80065a2:	1850      	adds	r0, r2, r1
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	4283      	cmp	r3, r0
 80065a8:	d1e0      	bne.n	800656c <_free_r+0x24>
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	1841      	adds	r1, r0, r1
 80065b0:	6011      	str	r1, [r2, #0]
 80065b2:	6053      	str	r3, [r2, #4]
 80065b4:	e7da      	b.n	800656c <_free_r+0x24>
 80065b6:	42a0      	cmp	r0, r4
 80065b8:	d902      	bls.n	80065c0 <_free_r+0x78>
 80065ba:	230c      	movs	r3, #12
 80065bc:	602b      	str	r3, [r5, #0]
 80065be:	e7d5      	b.n	800656c <_free_r+0x24>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	1821      	adds	r1, r4, r0
 80065c4:	428b      	cmp	r3, r1
 80065c6:	d103      	bne.n	80065d0 <_free_r+0x88>
 80065c8:	6819      	ldr	r1, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	1809      	adds	r1, r1, r0
 80065ce:	6021      	str	r1, [r4, #0]
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	6054      	str	r4, [r2, #4]
 80065d4:	e7ca      	b.n	800656c <_free_r+0x24>
 80065d6:	46c0      	nop			@ (mov r8, r8)
 80065d8:	200002c4 	.word	0x200002c4

080065dc <sbrk_aligned>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	4e0f      	ldr	r6, [pc, #60]	@ (800661c <sbrk_aligned+0x40>)
 80065e0:	000d      	movs	r5, r1
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	0004      	movs	r4, r0
 80065e6:	2900      	cmp	r1, #0
 80065e8:	d102      	bne.n	80065f0 <sbrk_aligned+0x14>
 80065ea:	f000 fb99 	bl	8006d20 <_sbrk_r>
 80065ee:	6030      	str	r0, [r6, #0]
 80065f0:	0029      	movs	r1, r5
 80065f2:	0020      	movs	r0, r4
 80065f4:	f000 fb94 	bl	8006d20 <_sbrk_r>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d103      	bne.n	8006604 <sbrk_aligned+0x28>
 80065fc:	2501      	movs	r5, #1
 80065fe:	426d      	negs	r5, r5
 8006600:	0028      	movs	r0, r5
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	2303      	movs	r3, #3
 8006606:	1cc5      	adds	r5, r0, #3
 8006608:	439d      	bics	r5, r3
 800660a:	42a8      	cmp	r0, r5
 800660c:	d0f8      	beq.n	8006600 <sbrk_aligned+0x24>
 800660e:	1a29      	subs	r1, r5, r0
 8006610:	0020      	movs	r0, r4
 8006612:	f000 fb85 	bl	8006d20 <_sbrk_r>
 8006616:	3001      	adds	r0, #1
 8006618:	d1f2      	bne.n	8006600 <sbrk_aligned+0x24>
 800661a:	e7ef      	b.n	80065fc <sbrk_aligned+0x20>
 800661c:	200002c0 	.word	0x200002c0

08006620 <_malloc_r>:
 8006620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006622:	2203      	movs	r2, #3
 8006624:	1ccb      	adds	r3, r1, #3
 8006626:	4393      	bics	r3, r2
 8006628:	3308      	adds	r3, #8
 800662a:	0005      	movs	r5, r0
 800662c:	001f      	movs	r7, r3
 800662e:	2b0c      	cmp	r3, #12
 8006630:	d234      	bcs.n	800669c <_malloc_r+0x7c>
 8006632:	270c      	movs	r7, #12
 8006634:	42b9      	cmp	r1, r7
 8006636:	d833      	bhi.n	80066a0 <_malloc_r+0x80>
 8006638:	0028      	movs	r0, r5
 800663a:	f000 f871 	bl	8006720 <__malloc_lock>
 800663e:	4e37      	ldr	r6, [pc, #220]	@ (800671c <_malloc_r+0xfc>)
 8006640:	6833      	ldr	r3, [r6, #0]
 8006642:	001c      	movs	r4, r3
 8006644:	2c00      	cmp	r4, #0
 8006646:	d12f      	bne.n	80066a8 <_malloc_r+0x88>
 8006648:	0039      	movs	r1, r7
 800664a:	0028      	movs	r0, r5
 800664c:	f7ff ffc6 	bl	80065dc <sbrk_aligned>
 8006650:	0004      	movs	r4, r0
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	d15f      	bne.n	8006716 <_malloc_r+0xf6>
 8006656:	6834      	ldr	r4, [r6, #0]
 8006658:	9400      	str	r4, [sp, #0]
 800665a:	9b00      	ldr	r3, [sp, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d14a      	bne.n	80066f6 <_malloc_r+0xd6>
 8006660:	2c00      	cmp	r4, #0
 8006662:	d052      	beq.n	800670a <_malloc_r+0xea>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	0028      	movs	r0, r5
 8006668:	18e3      	adds	r3, r4, r3
 800666a:	9900      	ldr	r1, [sp, #0]
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	f000 fb57 	bl	8006d20 <_sbrk_r>
 8006672:	9b01      	ldr	r3, [sp, #4]
 8006674:	4283      	cmp	r3, r0
 8006676:	d148      	bne.n	800670a <_malloc_r+0xea>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	0028      	movs	r0, r5
 800667c:	1aff      	subs	r7, r7, r3
 800667e:	0039      	movs	r1, r7
 8006680:	f7ff ffac 	bl	80065dc <sbrk_aligned>
 8006684:	3001      	adds	r0, #1
 8006686:	d040      	beq.n	800670a <_malloc_r+0xea>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	19db      	adds	r3, r3, r7
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	6833      	ldr	r3, [r6, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	2a00      	cmp	r2, #0
 8006694:	d133      	bne.n	80066fe <_malloc_r+0xde>
 8006696:	9b00      	ldr	r3, [sp, #0]
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	e019      	b.n	80066d0 <_malloc_r+0xb0>
 800669c:	2b00      	cmp	r3, #0
 800669e:	dac9      	bge.n	8006634 <_malloc_r+0x14>
 80066a0:	230c      	movs	r3, #12
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	2000      	movs	r0, #0
 80066a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066a8:	6821      	ldr	r1, [r4, #0]
 80066aa:	1bc9      	subs	r1, r1, r7
 80066ac:	d420      	bmi.n	80066f0 <_malloc_r+0xd0>
 80066ae:	290b      	cmp	r1, #11
 80066b0:	d90a      	bls.n	80066c8 <_malloc_r+0xa8>
 80066b2:	19e2      	adds	r2, r4, r7
 80066b4:	6027      	str	r7, [r4, #0]
 80066b6:	42a3      	cmp	r3, r4
 80066b8:	d104      	bne.n	80066c4 <_malloc_r+0xa4>
 80066ba:	6032      	str	r2, [r6, #0]
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	6011      	str	r1, [r2, #0]
 80066c0:	6053      	str	r3, [r2, #4]
 80066c2:	e005      	b.n	80066d0 <_malloc_r+0xb0>
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	e7f9      	b.n	80066bc <_malloc_r+0x9c>
 80066c8:	6862      	ldr	r2, [r4, #4]
 80066ca:	42a3      	cmp	r3, r4
 80066cc:	d10e      	bne.n	80066ec <_malloc_r+0xcc>
 80066ce:	6032      	str	r2, [r6, #0]
 80066d0:	0028      	movs	r0, r5
 80066d2:	f000 f82d 	bl	8006730 <__malloc_unlock>
 80066d6:	0020      	movs	r0, r4
 80066d8:	2207      	movs	r2, #7
 80066da:	300b      	adds	r0, #11
 80066dc:	1d23      	adds	r3, r4, #4
 80066de:	4390      	bics	r0, r2
 80066e0:	1ac2      	subs	r2, r0, r3
 80066e2:	4298      	cmp	r0, r3
 80066e4:	d0df      	beq.n	80066a6 <_malloc_r+0x86>
 80066e6:	1a1b      	subs	r3, r3, r0
 80066e8:	50a3      	str	r3, [r4, r2]
 80066ea:	e7dc      	b.n	80066a6 <_malloc_r+0x86>
 80066ec:	605a      	str	r2, [r3, #4]
 80066ee:	e7ef      	b.n	80066d0 <_malloc_r+0xb0>
 80066f0:	0023      	movs	r3, r4
 80066f2:	6864      	ldr	r4, [r4, #4]
 80066f4:	e7a6      	b.n	8006644 <_malloc_r+0x24>
 80066f6:	9c00      	ldr	r4, [sp, #0]
 80066f8:	6863      	ldr	r3, [r4, #4]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	e7ad      	b.n	800665a <_malloc_r+0x3a>
 80066fe:	001a      	movs	r2, r3
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	42a3      	cmp	r3, r4
 8006704:	d1fb      	bne.n	80066fe <_malloc_r+0xde>
 8006706:	2300      	movs	r3, #0
 8006708:	e7da      	b.n	80066c0 <_malloc_r+0xa0>
 800670a:	230c      	movs	r3, #12
 800670c:	0028      	movs	r0, r5
 800670e:	602b      	str	r3, [r5, #0]
 8006710:	f000 f80e 	bl	8006730 <__malloc_unlock>
 8006714:	e7c6      	b.n	80066a4 <_malloc_r+0x84>
 8006716:	6007      	str	r7, [r0, #0]
 8006718:	e7da      	b.n	80066d0 <_malloc_r+0xb0>
 800671a:	46c0      	nop			@ (mov r8, r8)
 800671c:	200002c4 	.word	0x200002c4

08006720 <__malloc_lock>:
 8006720:	b510      	push	{r4, lr}
 8006722:	4802      	ldr	r0, [pc, #8]	@ (800672c <__malloc_lock+0xc>)
 8006724:	f7ff ff04 	bl	8006530 <__retarget_lock_acquire_recursive>
 8006728:	bd10      	pop	{r4, pc}
 800672a:	46c0      	nop			@ (mov r8, r8)
 800672c:	200002bc 	.word	0x200002bc

08006730 <__malloc_unlock>:
 8006730:	b510      	push	{r4, lr}
 8006732:	4802      	ldr	r0, [pc, #8]	@ (800673c <__malloc_unlock+0xc>)
 8006734:	f7ff fefd 	bl	8006532 <__retarget_lock_release_recursive>
 8006738:	bd10      	pop	{r4, pc}
 800673a:	46c0      	nop			@ (mov r8, r8)
 800673c:	200002bc 	.word	0x200002bc

08006740 <__ssputs_r>:
 8006740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006742:	688e      	ldr	r6, [r1, #8]
 8006744:	b085      	sub	sp, #20
 8006746:	001f      	movs	r7, r3
 8006748:	000c      	movs	r4, r1
 800674a:	680b      	ldr	r3, [r1, #0]
 800674c:	9002      	str	r0, [sp, #8]
 800674e:	9203      	str	r2, [sp, #12]
 8006750:	42be      	cmp	r6, r7
 8006752:	d830      	bhi.n	80067b6 <__ssputs_r+0x76>
 8006754:	210c      	movs	r1, #12
 8006756:	5e62      	ldrsh	r2, [r4, r1]
 8006758:	2190      	movs	r1, #144	@ 0x90
 800675a:	00c9      	lsls	r1, r1, #3
 800675c:	420a      	tst	r2, r1
 800675e:	d028      	beq.n	80067b2 <__ssputs_r+0x72>
 8006760:	2003      	movs	r0, #3
 8006762:	6921      	ldr	r1, [r4, #16]
 8006764:	1a5b      	subs	r3, r3, r1
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	6963      	ldr	r3, [r4, #20]
 800676a:	4343      	muls	r3, r0
 800676c:	9801      	ldr	r0, [sp, #4]
 800676e:	0fdd      	lsrs	r5, r3, #31
 8006770:	18ed      	adds	r5, r5, r3
 8006772:	1c7b      	adds	r3, r7, #1
 8006774:	181b      	adds	r3, r3, r0
 8006776:	106d      	asrs	r5, r5, #1
 8006778:	42ab      	cmp	r3, r5
 800677a:	d900      	bls.n	800677e <__ssputs_r+0x3e>
 800677c:	001d      	movs	r5, r3
 800677e:	0552      	lsls	r2, r2, #21
 8006780:	d528      	bpl.n	80067d4 <__ssputs_r+0x94>
 8006782:	0029      	movs	r1, r5
 8006784:	9802      	ldr	r0, [sp, #8]
 8006786:	f7ff ff4b 	bl	8006620 <_malloc_r>
 800678a:	1e06      	subs	r6, r0, #0
 800678c:	d02c      	beq.n	80067e8 <__ssputs_r+0xa8>
 800678e:	9a01      	ldr	r2, [sp, #4]
 8006790:	6921      	ldr	r1, [r4, #16]
 8006792:	f7ff fecf 	bl	8006534 <memcpy>
 8006796:	89a2      	ldrh	r2, [r4, #12]
 8006798:	4b18      	ldr	r3, [pc, #96]	@ (80067fc <__ssputs_r+0xbc>)
 800679a:	401a      	ands	r2, r3
 800679c:	2380      	movs	r3, #128	@ 0x80
 800679e:	4313      	orrs	r3, r2
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	9b01      	ldr	r3, [sp, #4]
 80067a4:	6126      	str	r6, [r4, #16]
 80067a6:	18f6      	adds	r6, r6, r3
 80067a8:	6026      	str	r6, [r4, #0]
 80067aa:	003e      	movs	r6, r7
 80067ac:	6165      	str	r5, [r4, #20]
 80067ae:	1aed      	subs	r5, r5, r3
 80067b0:	60a5      	str	r5, [r4, #8]
 80067b2:	42be      	cmp	r6, r7
 80067b4:	d900      	bls.n	80067b8 <__ssputs_r+0x78>
 80067b6:	003e      	movs	r6, r7
 80067b8:	0032      	movs	r2, r6
 80067ba:	9903      	ldr	r1, [sp, #12]
 80067bc:	6820      	ldr	r0, [r4, #0]
 80067be:	f000 fa9b 	bl	8006cf8 <memmove>
 80067c2:	2000      	movs	r0, #0
 80067c4:	68a3      	ldr	r3, [r4, #8]
 80067c6:	1b9b      	subs	r3, r3, r6
 80067c8:	60a3      	str	r3, [r4, #8]
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	199b      	adds	r3, r3, r6
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	b005      	add	sp, #20
 80067d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d4:	002a      	movs	r2, r5
 80067d6:	9802      	ldr	r0, [sp, #8]
 80067d8:	f000 fabf 	bl	8006d5a <_realloc_r>
 80067dc:	1e06      	subs	r6, r0, #0
 80067de:	d1e0      	bne.n	80067a2 <__ssputs_r+0x62>
 80067e0:	6921      	ldr	r1, [r4, #16]
 80067e2:	9802      	ldr	r0, [sp, #8]
 80067e4:	f7ff feb0 	bl	8006548 <_free_r>
 80067e8:	230c      	movs	r3, #12
 80067ea:	2001      	movs	r0, #1
 80067ec:	9a02      	ldr	r2, [sp, #8]
 80067ee:	4240      	negs	r0, r0
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	89a2      	ldrh	r2, [r4, #12]
 80067f4:	3334      	adds	r3, #52	@ 0x34
 80067f6:	4313      	orrs	r3, r2
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	e7e9      	b.n	80067d0 <__ssputs_r+0x90>
 80067fc:	fffffb7f 	.word	0xfffffb7f

08006800 <_svfiprintf_r>:
 8006800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006802:	b0a1      	sub	sp, #132	@ 0x84
 8006804:	9003      	str	r0, [sp, #12]
 8006806:	001d      	movs	r5, r3
 8006808:	898b      	ldrh	r3, [r1, #12]
 800680a:	000f      	movs	r7, r1
 800680c:	0016      	movs	r6, r2
 800680e:	061b      	lsls	r3, r3, #24
 8006810:	d511      	bpl.n	8006836 <_svfiprintf_r+0x36>
 8006812:	690b      	ldr	r3, [r1, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10e      	bne.n	8006836 <_svfiprintf_r+0x36>
 8006818:	2140      	movs	r1, #64	@ 0x40
 800681a:	f7ff ff01 	bl	8006620 <_malloc_r>
 800681e:	6038      	str	r0, [r7, #0]
 8006820:	6138      	str	r0, [r7, #16]
 8006822:	2800      	cmp	r0, #0
 8006824:	d105      	bne.n	8006832 <_svfiprintf_r+0x32>
 8006826:	230c      	movs	r3, #12
 8006828:	9a03      	ldr	r2, [sp, #12]
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	2001      	movs	r0, #1
 800682e:	4240      	negs	r0, r0
 8006830:	e0cf      	b.n	80069d2 <_svfiprintf_r+0x1d2>
 8006832:	2340      	movs	r3, #64	@ 0x40
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	2300      	movs	r3, #0
 8006838:	ac08      	add	r4, sp, #32
 800683a:	6163      	str	r3, [r4, #20]
 800683c:	3320      	adds	r3, #32
 800683e:	7663      	strb	r3, [r4, #25]
 8006840:	3310      	adds	r3, #16
 8006842:	76a3      	strb	r3, [r4, #26]
 8006844:	9507      	str	r5, [sp, #28]
 8006846:	0035      	movs	r5, r6
 8006848:	782b      	ldrb	r3, [r5, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <_svfiprintf_r+0x52>
 800684e:	2b25      	cmp	r3, #37	@ 0x25
 8006850:	d148      	bne.n	80068e4 <_svfiprintf_r+0xe4>
 8006852:	1bab      	subs	r3, r5, r6
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	42b5      	cmp	r5, r6
 8006858:	d00b      	beq.n	8006872 <_svfiprintf_r+0x72>
 800685a:	0032      	movs	r2, r6
 800685c:	0039      	movs	r1, r7
 800685e:	9803      	ldr	r0, [sp, #12]
 8006860:	f7ff ff6e 	bl	8006740 <__ssputs_r>
 8006864:	3001      	adds	r0, #1
 8006866:	d100      	bne.n	800686a <_svfiprintf_r+0x6a>
 8006868:	e0ae      	b.n	80069c8 <_svfiprintf_r+0x1c8>
 800686a:	6963      	ldr	r3, [r4, #20]
 800686c:	9a05      	ldr	r2, [sp, #20]
 800686e:	189b      	adds	r3, r3, r2
 8006870:	6163      	str	r3, [r4, #20]
 8006872:	782b      	ldrb	r3, [r5, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d100      	bne.n	800687a <_svfiprintf_r+0x7a>
 8006878:	e0a6      	b.n	80069c8 <_svfiprintf_r+0x1c8>
 800687a:	2201      	movs	r2, #1
 800687c:	2300      	movs	r3, #0
 800687e:	4252      	negs	r2, r2
 8006880:	6062      	str	r2, [r4, #4]
 8006882:	a904      	add	r1, sp, #16
 8006884:	3254      	adds	r2, #84	@ 0x54
 8006886:	1852      	adds	r2, r2, r1
 8006888:	1c6e      	adds	r6, r5, #1
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	60e3      	str	r3, [r4, #12]
 800688e:	60a3      	str	r3, [r4, #8]
 8006890:	7013      	strb	r3, [r2, #0]
 8006892:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006894:	4b54      	ldr	r3, [pc, #336]	@ (80069e8 <_svfiprintf_r+0x1e8>)
 8006896:	2205      	movs	r2, #5
 8006898:	0018      	movs	r0, r3
 800689a:	7831      	ldrb	r1, [r6, #0]
 800689c:	9305      	str	r3, [sp, #20]
 800689e:	f000 fa51 	bl	8006d44 <memchr>
 80068a2:	1c75      	adds	r5, r6, #1
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d11f      	bne.n	80068e8 <_svfiprintf_r+0xe8>
 80068a8:	6822      	ldr	r2, [r4, #0]
 80068aa:	06d3      	lsls	r3, r2, #27
 80068ac:	d504      	bpl.n	80068b8 <_svfiprintf_r+0xb8>
 80068ae:	2353      	movs	r3, #83	@ 0x53
 80068b0:	a904      	add	r1, sp, #16
 80068b2:	185b      	adds	r3, r3, r1
 80068b4:	2120      	movs	r1, #32
 80068b6:	7019      	strb	r1, [r3, #0]
 80068b8:	0713      	lsls	r3, r2, #28
 80068ba:	d504      	bpl.n	80068c6 <_svfiprintf_r+0xc6>
 80068bc:	2353      	movs	r3, #83	@ 0x53
 80068be:	a904      	add	r1, sp, #16
 80068c0:	185b      	adds	r3, r3, r1
 80068c2:	212b      	movs	r1, #43	@ 0x2b
 80068c4:	7019      	strb	r1, [r3, #0]
 80068c6:	7833      	ldrb	r3, [r6, #0]
 80068c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80068ca:	d016      	beq.n	80068fa <_svfiprintf_r+0xfa>
 80068cc:	0035      	movs	r5, r6
 80068ce:	2100      	movs	r1, #0
 80068d0:	200a      	movs	r0, #10
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	782a      	ldrb	r2, [r5, #0]
 80068d6:	1c6e      	adds	r6, r5, #1
 80068d8:	3a30      	subs	r2, #48	@ 0x30
 80068da:	2a09      	cmp	r2, #9
 80068dc:	d950      	bls.n	8006980 <_svfiprintf_r+0x180>
 80068de:	2900      	cmp	r1, #0
 80068e0:	d111      	bne.n	8006906 <_svfiprintf_r+0x106>
 80068e2:	e017      	b.n	8006914 <_svfiprintf_r+0x114>
 80068e4:	3501      	adds	r5, #1
 80068e6:	e7af      	b.n	8006848 <_svfiprintf_r+0x48>
 80068e8:	9b05      	ldr	r3, [sp, #20]
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	1ac0      	subs	r0, r0, r3
 80068ee:	2301      	movs	r3, #1
 80068f0:	4083      	lsls	r3, r0
 80068f2:	4313      	orrs	r3, r2
 80068f4:	002e      	movs	r6, r5
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	e7cc      	b.n	8006894 <_svfiprintf_r+0x94>
 80068fa:	9b07      	ldr	r3, [sp, #28]
 80068fc:	1d19      	adds	r1, r3, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	9107      	str	r1, [sp, #28]
 8006902:	2b00      	cmp	r3, #0
 8006904:	db01      	blt.n	800690a <_svfiprintf_r+0x10a>
 8006906:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006908:	e004      	b.n	8006914 <_svfiprintf_r+0x114>
 800690a:	425b      	negs	r3, r3
 800690c:	60e3      	str	r3, [r4, #12]
 800690e:	2302      	movs	r3, #2
 8006910:	4313      	orrs	r3, r2
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	782b      	ldrb	r3, [r5, #0]
 8006916:	2b2e      	cmp	r3, #46	@ 0x2e
 8006918:	d10c      	bne.n	8006934 <_svfiprintf_r+0x134>
 800691a:	786b      	ldrb	r3, [r5, #1]
 800691c:	2b2a      	cmp	r3, #42	@ 0x2a
 800691e:	d134      	bne.n	800698a <_svfiprintf_r+0x18a>
 8006920:	9b07      	ldr	r3, [sp, #28]
 8006922:	3502      	adds	r5, #2
 8006924:	1d1a      	adds	r2, r3, #4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	9207      	str	r2, [sp, #28]
 800692a:	2b00      	cmp	r3, #0
 800692c:	da01      	bge.n	8006932 <_svfiprintf_r+0x132>
 800692e:	2301      	movs	r3, #1
 8006930:	425b      	negs	r3, r3
 8006932:	9309      	str	r3, [sp, #36]	@ 0x24
 8006934:	4e2d      	ldr	r6, [pc, #180]	@ (80069ec <_svfiprintf_r+0x1ec>)
 8006936:	2203      	movs	r2, #3
 8006938:	0030      	movs	r0, r6
 800693a:	7829      	ldrb	r1, [r5, #0]
 800693c:	f000 fa02 	bl	8006d44 <memchr>
 8006940:	2800      	cmp	r0, #0
 8006942:	d006      	beq.n	8006952 <_svfiprintf_r+0x152>
 8006944:	2340      	movs	r3, #64	@ 0x40
 8006946:	1b80      	subs	r0, r0, r6
 8006948:	4083      	lsls	r3, r0
 800694a:	6822      	ldr	r2, [r4, #0]
 800694c:	3501      	adds	r5, #1
 800694e:	4313      	orrs	r3, r2
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	7829      	ldrb	r1, [r5, #0]
 8006954:	2206      	movs	r2, #6
 8006956:	4826      	ldr	r0, [pc, #152]	@ (80069f0 <_svfiprintf_r+0x1f0>)
 8006958:	1c6e      	adds	r6, r5, #1
 800695a:	7621      	strb	r1, [r4, #24]
 800695c:	f000 f9f2 	bl	8006d44 <memchr>
 8006960:	2800      	cmp	r0, #0
 8006962:	d038      	beq.n	80069d6 <_svfiprintf_r+0x1d6>
 8006964:	4b23      	ldr	r3, [pc, #140]	@ (80069f4 <_svfiprintf_r+0x1f4>)
 8006966:	2b00      	cmp	r3, #0
 8006968:	d122      	bne.n	80069b0 <_svfiprintf_r+0x1b0>
 800696a:	2207      	movs	r2, #7
 800696c:	9b07      	ldr	r3, [sp, #28]
 800696e:	3307      	adds	r3, #7
 8006970:	4393      	bics	r3, r2
 8006972:	3308      	adds	r3, #8
 8006974:	9307      	str	r3, [sp, #28]
 8006976:	6963      	ldr	r3, [r4, #20]
 8006978:	9a04      	ldr	r2, [sp, #16]
 800697a:	189b      	adds	r3, r3, r2
 800697c:	6163      	str	r3, [r4, #20]
 800697e:	e762      	b.n	8006846 <_svfiprintf_r+0x46>
 8006980:	4343      	muls	r3, r0
 8006982:	0035      	movs	r5, r6
 8006984:	2101      	movs	r1, #1
 8006986:	189b      	adds	r3, r3, r2
 8006988:	e7a4      	b.n	80068d4 <_svfiprintf_r+0xd4>
 800698a:	2300      	movs	r3, #0
 800698c:	200a      	movs	r0, #10
 800698e:	0019      	movs	r1, r3
 8006990:	3501      	adds	r5, #1
 8006992:	6063      	str	r3, [r4, #4]
 8006994:	782a      	ldrb	r2, [r5, #0]
 8006996:	1c6e      	adds	r6, r5, #1
 8006998:	3a30      	subs	r2, #48	@ 0x30
 800699a:	2a09      	cmp	r2, #9
 800699c:	d903      	bls.n	80069a6 <_svfiprintf_r+0x1a6>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0c8      	beq.n	8006934 <_svfiprintf_r+0x134>
 80069a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80069a4:	e7c6      	b.n	8006934 <_svfiprintf_r+0x134>
 80069a6:	4341      	muls	r1, r0
 80069a8:	0035      	movs	r5, r6
 80069aa:	2301      	movs	r3, #1
 80069ac:	1889      	adds	r1, r1, r2
 80069ae:	e7f1      	b.n	8006994 <_svfiprintf_r+0x194>
 80069b0:	aa07      	add	r2, sp, #28
 80069b2:	9200      	str	r2, [sp, #0]
 80069b4:	0021      	movs	r1, r4
 80069b6:	003a      	movs	r2, r7
 80069b8:	4b0f      	ldr	r3, [pc, #60]	@ (80069f8 <_svfiprintf_r+0x1f8>)
 80069ba:	9803      	ldr	r0, [sp, #12]
 80069bc:	e000      	b.n	80069c0 <_svfiprintf_r+0x1c0>
 80069be:	bf00      	nop
 80069c0:	9004      	str	r0, [sp, #16]
 80069c2:	9b04      	ldr	r3, [sp, #16]
 80069c4:	3301      	adds	r3, #1
 80069c6:	d1d6      	bne.n	8006976 <_svfiprintf_r+0x176>
 80069c8:	89bb      	ldrh	r3, [r7, #12]
 80069ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80069cc:	065b      	lsls	r3, r3, #25
 80069ce:	d500      	bpl.n	80069d2 <_svfiprintf_r+0x1d2>
 80069d0:	e72c      	b.n	800682c <_svfiprintf_r+0x2c>
 80069d2:	b021      	add	sp, #132	@ 0x84
 80069d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d6:	aa07      	add	r2, sp, #28
 80069d8:	9200      	str	r2, [sp, #0]
 80069da:	0021      	movs	r1, r4
 80069dc:	003a      	movs	r2, r7
 80069de:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <_svfiprintf_r+0x1f8>)
 80069e0:	9803      	ldr	r0, [sp, #12]
 80069e2:	f000 f87b 	bl	8006adc <_printf_i>
 80069e6:	e7eb      	b.n	80069c0 <_svfiprintf_r+0x1c0>
 80069e8:	08006eec 	.word	0x08006eec
 80069ec:	08006ef2 	.word	0x08006ef2
 80069f0:	08006ef6 	.word	0x08006ef6
 80069f4:	00000000 	.word	0x00000000
 80069f8:	08006741 	.word	0x08006741

080069fc <_printf_common>:
 80069fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069fe:	0016      	movs	r6, r2
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	688a      	ldr	r2, [r1, #8]
 8006a04:	690b      	ldr	r3, [r1, #16]
 8006a06:	000c      	movs	r4, r1
 8006a08:	9000      	str	r0, [sp, #0]
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	da00      	bge.n	8006a10 <_printf_common+0x14>
 8006a0e:	0013      	movs	r3, r2
 8006a10:	0022      	movs	r2, r4
 8006a12:	6033      	str	r3, [r6, #0]
 8006a14:	3243      	adds	r2, #67	@ 0x43
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	2a00      	cmp	r2, #0
 8006a1a:	d001      	beq.n	8006a20 <_printf_common+0x24>
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	6033      	str	r3, [r6, #0]
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	069b      	lsls	r3, r3, #26
 8006a24:	d502      	bpl.n	8006a2c <_printf_common+0x30>
 8006a26:	6833      	ldr	r3, [r6, #0]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	6033      	str	r3, [r6, #0]
 8006a2c:	6822      	ldr	r2, [r4, #0]
 8006a2e:	2306      	movs	r3, #6
 8006a30:	0015      	movs	r5, r2
 8006a32:	401d      	ands	r5, r3
 8006a34:	421a      	tst	r2, r3
 8006a36:	d027      	beq.n	8006a88 <_printf_common+0x8c>
 8006a38:	0023      	movs	r3, r4
 8006a3a:	3343      	adds	r3, #67	@ 0x43
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	1e5a      	subs	r2, r3, #1
 8006a40:	4193      	sbcs	r3, r2
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	0692      	lsls	r2, r2, #26
 8006a46:	d430      	bmi.n	8006aaa <_printf_common+0xae>
 8006a48:	0022      	movs	r2, r4
 8006a4a:	9901      	ldr	r1, [sp, #4]
 8006a4c:	9800      	ldr	r0, [sp, #0]
 8006a4e:	9d08      	ldr	r5, [sp, #32]
 8006a50:	3243      	adds	r2, #67	@ 0x43
 8006a52:	47a8      	blx	r5
 8006a54:	3001      	adds	r0, #1
 8006a56:	d025      	beq.n	8006aa4 <_printf_common+0xa8>
 8006a58:	2206      	movs	r2, #6
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d105      	bne.n	8006a70 <_printf_common+0x74>
 8006a64:	6833      	ldr	r3, [r6, #0]
 8006a66:	68e5      	ldr	r5, [r4, #12]
 8006a68:	1aed      	subs	r5, r5, r3
 8006a6a:	43eb      	mvns	r3, r5
 8006a6c:	17db      	asrs	r3, r3, #31
 8006a6e:	401d      	ands	r5, r3
 8006a70:	68a3      	ldr	r3, [r4, #8]
 8006a72:	6922      	ldr	r2, [r4, #16]
 8006a74:	4293      	cmp	r3, r2
 8006a76:	dd01      	ble.n	8006a7c <_printf_common+0x80>
 8006a78:	1a9b      	subs	r3, r3, r2
 8006a7a:	18ed      	adds	r5, r5, r3
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	42b5      	cmp	r5, r6
 8006a80:	d120      	bne.n	8006ac4 <_printf_common+0xc8>
 8006a82:	2000      	movs	r0, #0
 8006a84:	e010      	b.n	8006aa8 <_printf_common+0xac>
 8006a86:	3501      	adds	r5, #1
 8006a88:	68e3      	ldr	r3, [r4, #12]
 8006a8a:	6832      	ldr	r2, [r6, #0]
 8006a8c:	1a9b      	subs	r3, r3, r2
 8006a8e:	42ab      	cmp	r3, r5
 8006a90:	ddd2      	ble.n	8006a38 <_printf_common+0x3c>
 8006a92:	0022      	movs	r2, r4
 8006a94:	2301      	movs	r3, #1
 8006a96:	9901      	ldr	r1, [sp, #4]
 8006a98:	9800      	ldr	r0, [sp, #0]
 8006a9a:	9f08      	ldr	r7, [sp, #32]
 8006a9c:	3219      	adds	r2, #25
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d1f0      	bne.n	8006a86 <_printf_common+0x8a>
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	4240      	negs	r0, r0
 8006aa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006aaa:	2030      	movs	r0, #48	@ 0x30
 8006aac:	18e1      	adds	r1, r4, r3
 8006aae:	3143      	adds	r1, #67	@ 0x43
 8006ab0:	7008      	strb	r0, [r1, #0]
 8006ab2:	0021      	movs	r1, r4
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	3145      	adds	r1, #69	@ 0x45
 8006ab8:	7809      	ldrb	r1, [r1, #0]
 8006aba:	18a2      	adds	r2, r4, r2
 8006abc:	3243      	adds	r2, #67	@ 0x43
 8006abe:	3302      	adds	r3, #2
 8006ac0:	7011      	strb	r1, [r2, #0]
 8006ac2:	e7c1      	b.n	8006a48 <_printf_common+0x4c>
 8006ac4:	0022      	movs	r2, r4
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	9901      	ldr	r1, [sp, #4]
 8006aca:	9800      	ldr	r0, [sp, #0]
 8006acc:	9f08      	ldr	r7, [sp, #32]
 8006ace:	321a      	adds	r2, #26
 8006ad0:	47b8      	blx	r7
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d0e6      	beq.n	8006aa4 <_printf_common+0xa8>
 8006ad6:	3601      	adds	r6, #1
 8006ad8:	e7d1      	b.n	8006a7e <_printf_common+0x82>
	...

08006adc <_printf_i>:
 8006adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ade:	b08b      	sub	sp, #44	@ 0x2c
 8006ae0:	9206      	str	r2, [sp, #24]
 8006ae2:	000a      	movs	r2, r1
 8006ae4:	3243      	adds	r2, #67	@ 0x43
 8006ae6:	9307      	str	r3, [sp, #28]
 8006ae8:	9005      	str	r0, [sp, #20]
 8006aea:	9203      	str	r2, [sp, #12]
 8006aec:	7e0a      	ldrb	r2, [r1, #24]
 8006aee:	000c      	movs	r4, r1
 8006af0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006af2:	2a78      	cmp	r2, #120	@ 0x78
 8006af4:	d809      	bhi.n	8006b0a <_printf_i+0x2e>
 8006af6:	2a62      	cmp	r2, #98	@ 0x62
 8006af8:	d80b      	bhi.n	8006b12 <_printf_i+0x36>
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	d100      	bne.n	8006b00 <_printf_i+0x24>
 8006afe:	e0bc      	b.n	8006c7a <_printf_i+0x19e>
 8006b00:	497b      	ldr	r1, [pc, #492]	@ (8006cf0 <_printf_i+0x214>)
 8006b02:	9104      	str	r1, [sp, #16]
 8006b04:	2a58      	cmp	r2, #88	@ 0x58
 8006b06:	d100      	bne.n	8006b0a <_printf_i+0x2e>
 8006b08:	e090      	b.n	8006c2c <_printf_i+0x150>
 8006b0a:	0025      	movs	r5, r4
 8006b0c:	3542      	adds	r5, #66	@ 0x42
 8006b0e:	702a      	strb	r2, [r5, #0]
 8006b10:	e022      	b.n	8006b58 <_printf_i+0x7c>
 8006b12:	0010      	movs	r0, r2
 8006b14:	3863      	subs	r0, #99	@ 0x63
 8006b16:	2815      	cmp	r0, #21
 8006b18:	d8f7      	bhi.n	8006b0a <_printf_i+0x2e>
 8006b1a:	f7f9 faf5 	bl	8000108 <__gnu_thumb1_case_shi>
 8006b1e:	0016      	.short	0x0016
 8006b20:	fff6001f 	.word	0xfff6001f
 8006b24:	fff6fff6 	.word	0xfff6fff6
 8006b28:	001ffff6 	.word	0x001ffff6
 8006b2c:	fff6fff6 	.word	0xfff6fff6
 8006b30:	fff6fff6 	.word	0xfff6fff6
 8006b34:	003600a1 	.word	0x003600a1
 8006b38:	fff60080 	.word	0xfff60080
 8006b3c:	00b2fff6 	.word	0x00b2fff6
 8006b40:	0036fff6 	.word	0x0036fff6
 8006b44:	fff6fff6 	.word	0xfff6fff6
 8006b48:	0084      	.short	0x0084
 8006b4a:	0025      	movs	r5, r4
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	3542      	adds	r5, #66	@ 0x42
 8006b50:	1d11      	adds	r1, r2, #4
 8006b52:	6019      	str	r1, [r3, #0]
 8006b54:	6813      	ldr	r3, [r2, #0]
 8006b56:	702b      	strb	r3, [r5, #0]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0a0      	b.n	8006c9e <_printf_i+0x1c2>
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	6809      	ldr	r1, [r1, #0]
 8006b60:	1d02      	adds	r2, r0, #4
 8006b62:	060d      	lsls	r5, r1, #24
 8006b64:	d50b      	bpl.n	8006b7e <_printf_i+0xa2>
 8006b66:	6806      	ldr	r6, [r0, #0]
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	2e00      	cmp	r6, #0
 8006b6c:	da03      	bge.n	8006b76 <_printf_i+0x9a>
 8006b6e:	232d      	movs	r3, #45	@ 0x2d
 8006b70:	9a03      	ldr	r2, [sp, #12]
 8006b72:	4276      	negs	r6, r6
 8006b74:	7013      	strb	r3, [r2, #0]
 8006b76:	4b5e      	ldr	r3, [pc, #376]	@ (8006cf0 <_printf_i+0x214>)
 8006b78:	270a      	movs	r7, #10
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	e018      	b.n	8006bb0 <_printf_i+0xd4>
 8006b7e:	6806      	ldr	r6, [r0, #0]
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	0649      	lsls	r1, r1, #25
 8006b84:	d5f1      	bpl.n	8006b6a <_printf_i+0x8e>
 8006b86:	b236      	sxth	r6, r6
 8006b88:	e7ef      	b.n	8006b6a <_printf_i+0x8e>
 8006b8a:	6808      	ldr	r0, [r1, #0]
 8006b8c:	6819      	ldr	r1, [r3, #0]
 8006b8e:	c940      	ldmia	r1!, {r6}
 8006b90:	0605      	lsls	r5, r0, #24
 8006b92:	d402      	bmi.n	8006b9a <_printf_i+0xbe>
 8006b94:	0640      	lsls	r0, r0, #25
 8006b96:	d500      	bpl.n	8006b9a <_printf_i+0xbe>
 8006b98:	b2b6      	uxth	r6, r6
 8006b9a:	6019      	str	r1, [r3, #0]
 8006b9c:	4b54      	ldr	r3, [pc, #336]	@ (8006cf0 <_printf_i+0x214>)
 8006b9e:	270a      	movs	r7, #10
 8006ba0:	9304      	str	r3, [sp, #16]
 8006ba2:	2a6f      	cmp	r2, #111	@ 0x6f
 8006ba4:	d100      	bne.n	8006ba8 <_printf_i+0xcc>
 8006ba6:	3f02      	subs	r7, #2
 8006ba8:	0023      	movs	r3, r4
 8006baa:	2200      	movs	r2, #0
 8006bac:	3343      	adds	r3, #67	@ 0x43
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	60a3      	str	r3, [r4, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	db03      	blt.n	8006bc0 <_printf_i+0xe4>
 8006bb8:	2104      	movs	r1, #4
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	438a      	bics	r2, r1
 8006bbe:	6022      	str	r2, [r4, #0]
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	d102      	bne.n	8006bca <_printf_i+0xee>
 8006bc4:	9d03      	ldr	r5, [sp, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00c      	beq.n	8006be4 <_printf_i+0x108>
 8006bca:	9d03      	ldr	r5, [sp, #12]
 8006bcc:	0030      	movs	r0, r6
 8006bce:	0039      	movs	r1, r7
 8006bd0:	f7f9 fb2a 	bl	8000228 <__aeabi_uidivmod>
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	3d01      	subs	r5, #1
 8006bd8:	5c5b      	ldrb	r3, [r3, r1]
 8006bda:	702b      	strb	r3, [r5, #0]
 8006bdc:	0033      	movs	r3, r6
 8006bde:	0006      	movs	r6, r0
 8006be0:	429f      	cmp	r7, r3
 8006be2:	d9f3      	bls.n	8006bcc <_printf_i+0xf0>
 8006be4:	2f08      	cmp	r7, #8
 8006be6:	d109      	bne.n	8006bfc <_printf_i+0x120>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	07db      	lsls	r3, r3, #31
 8006bec:	d506      	bpl.n	8006bfc <_printf_i+0x120>
 8006bee:	6862      	ldr	r2, [r4, #4]
 8006bf0:	6923      	ldr	r3, [r4, #16]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	dc02      	bgt.n	8006bfc <_printf_i+0x120>
 8006bf6:	2330      	movs	r3, #48	@ 0x30
 8006bf8:	3d01      	subs	r5, #1
 8006bfa:	702b      	strb	r3, [r5, #0]
 8006bfc:	9b03      	ldr	r3, [sp, #12]
 8006bfe:	1b5b      	subs	r3, r3, r5
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	9b07      	ldr	r3, [sp, #28]
 8006c04:	0021      	movs	r1, r4
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	9805      	ldr	r0, [sp, #20]
 8006c0a:	9b06      	ldr	r3, [sp, #24]
 8006c0c:	aa09      	add	r2, sp, #36	@ 0x24
 8006c0e:	f7ff fef5 	bl	80069fc <_printf_common>
 8006c12:	3001      	adds	r0, #1
 8006c14:	d148      	bne.n	8006ca8 <_printf_i+0x1cc>
 8006c16:	2001      	movs	r0, #1
 8006c18:	4240      	negs	r0, r0
 8006c1a:	b00b      	add	sp, #44	@ 0x2c
 8006c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1e:	2220      	movs	r2, #32
 8006c20:	6809      	ldr	r1, [r1, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	6022      	str	r2, [r4, #0]
 8006c26:	2278      	movs	r2, #120	@ 0x78
 8006c28:	4932      	ldr	r1, [pc, #200]	@ (8006cf4 <_printf_i+0x218>)
 8006c2a:	9104      	str	r1, [sp, #16]
 8006c2c:	0021      	movs	r1, r4
 8006c2e:	3145      	adds	r1, #69	@ 0x45
 8006c30:	700a      	strb	r2, [r1, #0]
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	c940      	ldmia	r1!, {r6}
 8006c38:	0610      	lsls	r0, r2, #24
 8006c3a:	d402      	bmi.n	8006c42 <_printf_i+0x166>
 8006c3c:	0650      	lsls	r0, r2, #25
 8006c3e:	d500      	bpl.n	8006c42 <_printf_i+0x166>
 8006c40:	b2b6      	uxth	r6, r6
 8006c42:	6019      	str	r1, [r3, #0]
 8006c44:	07d3      	lsls	r3, r2, #31
 8006c46:	d502      	bpl.n	8006c4e <_printf_i+0x172>
 8006c48:	2320      	movs	r3, #32
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	2e00      	cmp	r6, #0
 8006c50:	d001      	beq.n	8006c56 <_printf_i+0x17a>
 8006c52:	2710      	movs	r7, #16
 8006c54:	e7a8      	b.n	8006ba8 <_printf_i+0xcc>
 8006c56:	2220      	movs	r2, #32
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	4393      	bics	r3, r2
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	e7f8      	b.n	8006c52 <_printf_i+0x176>
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	680d      	ldr	r5, [r1, #0]
 8006c64:	1d10      	adds	r0, r2, #4
 8006c66:	6949      	ldr	r1, [r1, #20]
 8006c68:	6018      	str	r0, [r3, #0]
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	062e      	lsls	r6, r5, #24
 8006c6e:	d501      	bpl.n	8006c74 <_printf_i+0x198>
 8006c70:	6019      	str	r1, [r3, #0]
 8006c72:	e002      	b.n	8006c7a <_printf_i+0x19e>
 8006c74:	066d      	lsls	r5, r5, #25
 8006c76:	d5fb      	bpl.n	8006c70 <_printf_i+0x194>
 8006c78:	8019      	strh	r1, [r3, #0]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9d03      	ldr	r5, [sp, #12]
 8006c7e:	6123      	str	r3, [r4, #16]
 8006c80:	e7bf      	b.n	8006c02 <_printf_i+0x126>
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	1d11      	adds	r1, r2, #4
 8006c86:	6019      	str	r1, [r3, #0]
 8006c88:	6815      	ldr	r5, [r2, #0]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	0028      	movs	r0, r5
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	f000 f858 	bl	8006d44 <memchr>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d001      	beq.n	8006c9c <_printf_i+0x1c0>
 8006c98:	1b40      	subs	r0, r0, r5
 8006c9a:	6060      	str	r0, [r4, #4]
 8006c9c:	6863      	ldr	r3, [r4, #4]
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9a03      	ldr	r2, [sp, #12]
 8006ca4:	7013      	strb	r3, [r2, #0]
 8006ca6:	e7ac      	b.n	8006c02 <_printf_i+0x126>
 8006ca8:	002a      	movs	r2, r5
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	9906      	ldr	r1, [sp, #24]
 8006cae:	9805      	ldr	r0, [sp, #20]
 8006cb0:	9d07      	ldr	r5, [sp, #28]
 8006cb2:	47a8      	blx	r5
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d0ae      	beq.n	8006c16 <_printf_i+0x13a>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	d415      	bmi.n	8006cea <_printf_i+0x20e>
 8006cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc0:	68e0      	ldr	r0, [r4, #12]
 8006cc2:	4298      	cmp	r0, r3
 8006cc4:	daa9      	bge.n	8006c1a <_printf_i+0x13e>
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	e7a7      	b.n	8006c1a <_printf_i+0x13e>
 8006cca:	0022      	movs	r2, r4
 8006ccc:	2301      	movs	r3, #1
 8006cce:	9906      	ldr	r1, [sp, #24]
 8006cd0:	9805      	ldr	r0, [sp, #20]
 8006cd2:	9e07      	ldr	r6, [sp, #28]
 8006cd4:	3219      	adds	r2, #25
 8006cd6:	47b0      	blx	r6
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d09c      	beq.n	8006c16 <_printf_i+0x13a>
 8006cdc:	3501      	adds	r5, #1
 8006cde:	68e3      	ldr	r3, [r4, #12]
 8006ce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ce2:	1a9b      	subs	r3, r3, r2
 8006ce4:	42ab      	cmp	r3, r5
 8006ce6:	dcf0      	bgt.n	8006cca <_printf_i+0x1ee>
 8006ce8:	e7e9      	b.n	8006cbe <_printf_i+0x1e2>
 8006cea:	2500      	movs	r5, #0
 8006cec:	e7f7      	b.n	8006cde <_printf_i+0x202>
 8006cee:	46c0      	nop			@ (mov r8, r8)
 8006cf0:	08006efd 	.word	0x08006efd
 8006cf4:	08006f0e 	.word	0x08006f0e

08006cf8 <memmove>:
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	4288      	cmp	r0, r1
 8006cfc:	d806      	bhi.n	8006d0c <memmove+0x14>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d008      	beq.n	8006d16 <memmove+0x1e>
 8006d04:	5ccc      	ldrb	r4, [r1, r3]
 8006d06:	54c4      	strb	r4, [r0, r3]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	e7f9      	b.n	8006d00 <memmove+0x8>
 8006d0c:	188b      	adds	r3, r1, r2
 8006d0e:	4298      	cmp	r0, r3
 8006d10:	d2f5      	bcs.n	8006cfe <memmove+0x6>
 8006d12:	3a01      	subs	r2, #1
 8006d14:	d200      	bcs.n	8006d18 <memmove+0x20>
 8006d16:	bd10      	pop	{r4, pc}
 8006d18:	5c8b      	ldrb	r3, [r1, r2]
 8006d1a:	5483      	strb	r3, [r0, r2]
 8006d1c:	e7f9      	b.n	8006d12 <memmove+0x1a>
	...

08006d20 <_sbrk_r>:
 8006d20:	2300      	movs	r3, #0
 8006d22:	b570      	push	{r4, r5, r6, lr}
 8006d24:	4d06      	ldr	r5, [pc, #24]	@ (8006d40 <_sbrk_r+0x20>)
 8006d26:	0004      	movs	r4, r0
 8006d28:	0008      	movs	r0, r1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	f7fc fba6 	bl	800347c <_sbrk>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d103      	bne.n	8006d3c <_sbrk_r+0x1c>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d000      	beq.n	8006d3c <_sbrk_r+0x1c>
 8006d3a:	6023      	str	r3, [r4, #0]
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	200002b8 	.word	0x200002b8

08006d44 <memchr>:
 8006d44:	b2c9      	uxtb	r1, r1
 8006d46:	1882      	adds	r2, r0, r2
 8006d48:	4290      	cmp	r0, r2
 8006d4a:	d101      	bne.n	8006d50 <memchr+0xc>
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	4770      	bx	lr
 8006d50:	7803      	ldrb	r3, [r0, #0]
 8006d52:	428b      	cmp	r3, r1
 8006d54:	d0fb      	beq.n	8006d4e <memchr+0xa>
 8006d56:	3001      	adds	r0, #1
 8006d58:	e7f6      	b.n	8006d48 <memchr+0x4>

08006d5a <_realloc_r>:
 8006d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5c:	0006      	movs	r6, r0
 8006d5e:	000c      	movs	r4, r1
 8006d60:	0015      	movs	r5, r2
 8006d62:	2900      	cmp	r1, #0
 8006d64:	d105      	bne.n	8006d72 <_realloc_r+0x18>
 8006d66:	0011      	movs	r1, r2
 8006d68:	f7ff fc5a 	bl	8006620 <_malloc_r>
 8006d6c:	0004      	movs	r4, r0
 8006d6e:	0020      	movs	r0, r4
 8006d70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d72:	2a00      	cmp	r2, #0
 8006d74:	d103      	bne.n	8006d7e <_realloc_r+0x24>
 8006d76:	f7ff fbe7 	bl	8006548 <_free_r>
 8006d7a:	2400      	movs	r4, #0
 8006d7c:	e7f7      	b.n	8006d6e <_realloc_r+0x14>
 8006d7e:	f000 f81b 	bl	8006db8 <_malloc_usable_size_r>
 8006d82:	0007      	movs	r7, r0
 8006d84:	4285      	cmp	r5, r0
 8006d86:	d802      	bhi.n	8006d8e <_realloc_r+0x34>
 8006d88:	0843      	lsrs	r3, r0, #1
 8006d8a:	42ab      	cmp	r3, r5
 8006d8c:	d3ef      	bcc.n	8006d6e <_realloc_r+0x14>
 8006d8e:	0029      	movs	r1, r5
 8006d90:	0030      	movs	r0, r6
 8006d92:	f7ff fc45 	bl	8006620 <_malloc_r>
 8006d96:	9001      	str	r0, [sp, #4]
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d0ee      	beq.n	8006d7a <_realloc_r+0x20>
 8006d9c:	002a      	movs	r2, r5
 8006d9e:	42bd      	cmp	r5, r7
 8006da0:	d900      	bls.n	8006da4 <_realloc_r+0x4a>
 8006da2:	003a      	movs	r2, r7
 8006da4:	0021      	movs	r1, r4
 8006da6:	9801      	ldr	r0, [sp, #4]
 8006da8:	f7ff fbc4 	bl	8006534 <memcpy>
 8006dac:	0021      	movs	r1, r4
 8006dae:	0030      	movs	r0, r6
 8006db0:	f7ff fbca 	bl	8006548 <_free_r>
 8006db4:	9c01      	ldr	r4, [sp, #4]
 8006db6:	e7da      	b.n	8006d6e <_realloc_r+0x14>

08006db8 <_malloc_usable_size_r>:
 8006db8:	1f0b      	subs	r3, r1, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	1f18      	subs	r0, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da01      	bge.n	8006dc6 <_malloc_usable_size_r+0xe>
 8006dc2:	580b      	ldr	r3, [r1, r0]
 8006dc4:	18c0      	adds	r0, r0, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_init>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr

08006dd4 <_fini>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	46c0      	nop			@ (mov r8, r8)
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr
