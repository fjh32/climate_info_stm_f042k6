
climate_info_f042k6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f54  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08007014  08007014  00008014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800715c  0800715c  0000905c  2**0
                  CONTENTS
  4 .ARM          00000000  0800715c  0800715c  0000905c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800715c  0800715c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800715c  0800715c  0000815c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007160  08007160  00008160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007164  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  080071c0  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080071c0  000092c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e56f  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  000175f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00019a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5e  00000000  00000000  0001a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c53  00000000  00000000  0001b42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119a0  00000000  00000000  0001e081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000930d8  00000000  00000000  0002fa21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2af9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  000c2b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c6624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ffc 	.word	0x08006ffc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006ffc 	.word	0x08006ffc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0008      	movs	r0, r1
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 f8ab 	bl	8000398 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f82b 	bl	80002a8 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f89d 	bl	8000398 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f893 	bl	8000398 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f839 	bl	80002f8 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f82f 	bl	80002f8 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			@ (mov r8, r8)

080002a8 <__eqsf2>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	0042      	lsls	r2, r0, #1
 80002ac:	024e      	lsls	r6, r1, #9
 80002ae:	004c      	lsls	r4, r1, #1
 80002b0:	0245      	lsls	r5, r0, #9
 80002b2:	0a6d      	lsrs	r5, r5, #9
 80002b4:	0e12      	lsrs	r2, r2, #24
 80002b6:	0fc3      	lsrs	r3, r0, #31
 80002b8:	0a76      	lsrs	r6, r6, #9
 80002ba:	0e24      	lsrs	r4, r4, #24
 80002bc:	0fc9      	lsrs	r1, r1, #31
 80002be:	2aff      	cmp	r2, #255	@ 0xff
 80002c0:	d010      	beq.n	80002e4 <__eqsf2+0x3c>
 80002c2:	2cff      	cmp	r4, #255	@ 0xff
 80002c4:	d00c      	beq.n	80002e0 <__eqsf2+0x38>
 80002c6:	2001      	movs	r0, #1
 80002c8:	42a2      	cmp	r2, r4
 80002ca:	d10a      	bne.n	80002e2 <__eqsf2+0x3a>
 80002cc:	42b5      	cmp	r5, r6
 80002ce:	d108      	bne.n	80002e2 <__eqsf2+0x3a>
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d00f      	beq.n	80002f4 <__eqsf2+0x4c>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	d104      	bne.n	80002e2 <__eqsf2+0x3a>
 80002d8:	0028      	movs	r0, r5
 80002da:	1e43      	subs	r3, r0, #1
 80002dc:	4198      	sbcs	r0, r3
 80002de:	e000      	b.n	80002e2 <__eqsf2+0x3a>
 80002e0:	2001      	movs	r0, #1
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	2001      	movs	r0, #1
 80002e6:	2cff      	cmp	r4, #255	@ 0xff
 80002e8:	d1fb      	bne.n	80002e2 <__eqsf2+0x3a>
 80002ea:	4335      	orrs	r5, r6
 80002ec:	d1f9      	bne.n	80002e2 <__eqsf2+0x3a>
 80002ee:	404b      	eors	r3, r1
 80002f0:	0018      	movs	r0, r3
 80002f2:	e7f6      	b.n	80002e2 <__eqsf2+0x3a>
 80002f4:	2000      	movs	r0, #0
 80002f6:	e7f4      	b.n	80002e2 <__eqsf2+0x3a>

080002f8 <__gesf2>:
 80002f8:	b530      	push	{r4, r5, lr}
 80002fa:	0042      	lsls	r2, r0, #1
 80002fc:	0244      	lsls	r4, r0, #9
 80002fe:	024d      	lsls	r5, r1, #9
 8000300:	0fc3      	lsrs	r3, r0, #31
 8000302:	0048      	lsls	r0, r1, #1
 8000304:	0a64      	lsrs	r4, r4, #9
 8000306:	0e12      	lsrs	r2, r2, #24
 8000308:	0a6d      	lsrs	r5, r5, #9
 800030a:	0e00      	lsrs	r0, r0, #24
 800030c:	0fc9      	lsrs	r1, r1, #31
 800030e:	2aff      	cmp	r2, #255	@ 0xff
 8000310:	d019      	beq.n	8000346 <__gesf2+0x4e>
 8000312:	28ff      	cmp	r0, #255	@ 0xff
 8000314:	d00b      	beq.n	800032e <__gesf2+0x36>
 8000316:	2a00      	cmp	r2, #0
 8000318:	d11e      	bne.n	8000358 <__gesf2+0x60>
 800031a:	2800      	cmp	r0, #0
 800031c:	d10b      	bne.n	8000336 <__gesf2+0x3e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	d027      	beq.n	8000372 <__gesf2+0x7a>
 8000322:	2c00      	cmp	r4, #0
 8000324:	d134      	bne.n	8000390 <__gesf2+0x98>
 8000326:	2900      	cmp	r1, #0
 8000328:	d02f      	beq.n	800038a <__gesf2+0x92>
 800032a:	0008      	movs	r0, r1
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2d00      	cmp	r5, #0
 8000330:	d128      	bne.n	8000384 <__gesf2+0x8c>
 8000332:	2a00      	cmp	r2, #0
 8000334:	d101      	bne.n	800033a <__gesf2+0x42>
 8000336:	2c00      	cmp	r4, #0
 8000338:	d0f5      	beq.n	8000326 <__gesf2+0x2e>
 800033a:	428b      	cmp	r3, r1
 800033c:	d107      	bne.n	800034e <__gesf2+0x56>
 800033e:	2b00      	cmp	r3, #0
 8000340:	d023      	beq.n	800038a <__gesf2+0x92>
 8000342:	0018      	movs	r0, r3
 8000344:	e7f2      	b.n	800032c <__gesf2+0x34>
 8000346:	2c00      	cmp	r4, #0
 8000348:	d11c      	bne.n	8000384 <__gesf2+0x8c>
 800034a:	28ff      	cmp	r0, #255	@ 0xff
 800034c:	d014      	beq.n	8000378 <__gesf2+0x80>
 800034e:	1e58      	subs	r0, r3, #1
 8000350:	2302      	movs	r3, #2
 8000352:	4018      	ands	r0, r3
 8000354:	3801      	subs	r0, #1
 8000356:	e7e9      	b.n	800032c <__gesf2+0x34>
 8000358:	2800      	cmp	r0, #0
 800035a:	d0f8      	beq.n	800034e <__gesf2+0x56>
 800035c:	428b      	cmp	r3, r1
 800035e:	d1f6      	bne.n	800034e <__gesf2+0x56>
 8000360:	4282      	cmp	r2, r0
 8000362:	dcf4      	bgt.n	800034e <__gesf2+0x56>
 8000364:	dbeb      	blt.n	800033e <__gesf2+0x46>
 8000366:	42ac      	cmp	r4, r5
 8000368:	d8f1      	bhi.n	800034e <__gesf2+0x56>
 800036a:	2000      	movs	r0, #0
 800036c:	42ac      	cmp	r4, r5
 800036e:	d2dd      	bcs.n	800032c <__gesf2+0x34>
 8000370:	e7e5      	b.n	800033e <__gesf2+0x46>
 8000372:	2c00      	cmp	r4, #0
 8000374:	d0da      	beq.n	800032c <__gesf2+0x34>
 8000376:	e7ea      	b.n	800034e <__gesf2+0x56>
 8000378:	2d00      	cmp	r5, #0
 800037a:	d103      	bne.n	8000384 <__gesf2+0x8c>
 800037c:	428b      	cmp	r3, r1
 800037e:	d1e6      	bne.n	800034e <__gesf2+0x56>
 8000380:	2000      	movs	r0, #0
 8000382:	e7d3      	b.n	800032c <__gesf2+0x34>
 8000384:	2002      	movs	r0, #2
 8000386:	4240      	negs	r0, r0
 8000388:	e7d0      	b.n	800032c <__gesf2+0x34>
 800038a:	2001      	movs	r0, #1
 800038c:	4240      	negs	r0, r0
 800038e:	e7cd      	b.n	800032c <__gesf2+0x34>
 8000390:	428b      	cmp	r3, r1
 8000392:	d0e8      	beq.n	8000366 <__gesf2+0x6e>
 8000394:	e7db      	b.n	800034e <__gesf2+0x56>
 8000396:	46c0      	nop			@ (mov r8, r8)

08000398 <__lesf2>:
 8000398:	b530      	push	{r4, r5, lr}
 800039a:	0042      	lsls	r2, r0, #1
 800039c:	0244      	lsls	r4, r0, #9
 800039e:	024d      	lsls	r5, r1, #9
 80003a0:	0fc3      	lsrs	r3, r0, #31
 80003a2:	0048      	lsls	r0, r1, #1
 80003a4:	0a64      	lsrs	r4, r4, #9
 80003a6:	0e12      	lsrs	r2, r2, #24
 80003a8:	0a6d      	lsrs	r5, r5, #9
 80003aa:	0e00      	lsrs	r0, r0, #24
 80003ac:	0fc9      	lsrs	r1, r1, #31
 80003ae:	2aff      	cmp	r2, #255	@ 0xff
 80003b0:	d01a      	beq.n	80003e8 <__lesf2+0x50>
 80003b2:	28ff      	cmp	r0, #255	@ 0xff
 80003b4:	d00e      	beq.n	80003d4 <__lesf2+0x3c>
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d11e      	bne.n	80003f8 <__lesf2+0x60>
 80003ba:	2800      	cmp	r0, #0
 80003bc:	d10e      	bne.n	80003dc <__lesf2+0x44>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d02a      	beq.n	8000418 <__lesf2+0x80>
 80003c2:	2c00      	cmp	r4, #0
 80003c4:	d00c      	beq.n	80003e0 <__lesf2+0x48>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d01d      	beq.n	8000406 <__lesf2+0x6e>
 80003ca:	1e58      	subs	r0, r3, #1
 80003cc:	2302      	movs	r3, #2
 80003ce:	4018      	ands	r0, r3
 80003d0:	3801      	subs	r0, #1
 80003d2:	e010      	b.n	80003f6 <__lesf2+0x5e>
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d10d      	bne.n	80003f4 <__lesf2+0x5c>
 80003d8:	2a00      	cmp	r2, #0
 80003da:	d120      	bne.n	800041e <__lesf2+0x86>
 80003dc:	2c00      	cmp	r4, #0
 80003de:	d11e      	bne.n	800041e <__lesf2+0x86>
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d023      	beq.n	800042c <__lesf2+0x94>
 80003e4:	0008      	movs	r0, r1
 80003e6:	e006      	b.n	80003f6 <__lesf2+0x5e>
 80003e8:	2c00      	cmp	r4, #0
 80003ea:	d103      	bne.n	80003f4 <__lesf2+0x5c>
 80003ec:	28ff      	cmp	r0, #255	@ 0xff
 80003ee:	d1ec      	bne.n	80003ca <__lesf2+0x32>
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d017      	beq.n	8000424 <__lesf2+0x8c>
 80003f4:	2002      	movs	r0, #2
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d0e6      	beq.n	80003ca <__lesf2+0x32>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d1e4      	bne.n	80003ca <__lesf2+0x32>
 8000400:	4282      	cmp	r2, r0
 8000402:	dce2      	bgt.n	80003ca <__lesf2+0x32>
 8000404:	db04      	blt.n	8000410 <__lesf2+0x78>
 8000406:	42ac      	cmp	r4, r5
 8000408:	d8df      	bhi.n	80003ca <__lesf2+0x32>
 800040a:	2000      	movs	r0, #0
 800040c:	42ac      	cmp	r4, r5
 800040e:	d2f2      	bcs.n	80003f6 <__lesf2+0x5e>
 8000410:	2b00      	cmp	r3, #0
 8000412:	d00b      	beq.n	800042c <__lesf2+0x94>
 8000414:	0018      	movs	r0, r3
 8000416:	e7ee      	b.n	80003f6 <__lesf2+0x5e>
 8000418:	2c00      	cmp	r4, #0
 800041a:	d0ec      	beq.n	80003f6 <__lesf2+0x5e>
 800041c:	e7d5      	b.n	80003ca <__lesf2+0x32>
 800041e:	428b      	cmp	r3, r1
 8000420:	d1d3      	bne.n	80003ca <__lesf2+0x32>
 8000422:	e7f5      	b.n	8000410 <__lesf2+0x78>
 8000424:	2000      	movs	r0, #0
 8000426:	428b      	cmp	r3, r1
 8000428:	d0e5      	beq.n	80003f6 <__lesf2+0x5e>
 800042a:	e7ce      	b.n	80003ca <__lesf2+0x32>
 800042c:	2001      	movs	r0, #1
 800042e:	4240      	negs	r0, r0
 8000430:	e7e1      	b.n	80003f6 <__lesf2+0x5e>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_f2iz>:
 8000434:	0241      	lsls	r1, r0, #9
 8000436:	0042      	lsls	r2, r0, #1
 8000438:	0fc3      	lsrs	r3, r0, #31
 800043a:	0a49      	lsrs	r1, r1, #9
 800043c:	2000      	movs	r0, #0
 800043e:	0e12      	lsrs	r2, r2, #24
 8000440:	2a7e      	cmp	r2, #126	@ 0x7e
 8000442:	dd03      	ble.n	800044c <__aeabi_f2iz+0x18>
 8000444:	2a9d      	cmp	r2, #157	@ 0x9d
 8000446:	dd02      	ble.n	800044e <__aeabi_f2iz+0x1a>
 8000448:	4a09      	ldr	r2, [pc, #36]	@ (8000470 <__aeabi_f2iz+0x3c>)
 800044a:	1898      	adds	r0, r3, r2
 800044c:	4770      	bx	lr
 800044e:	2080      	movs	r0, #128	@ 0x80
 8000450:	0400      	lsls	r0, r0, #16
 8000452:	4301      	orrs	r1, r0
 8000454:	2a95      	cmp	r2, #149	@ 0x95
 8000456:	dc07      	bgt.n	8000468 <__aeabi_f2iz+0x34>
 8000458:	2096      	movs	r0, #150	@ 0x96
 800045a:	1a82      	subs	r2, r0, r2
 800045c:	40d1      	lsrs	r1, r2
 800045e:	4248      	negs	r0, r1
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1f3      	bne.n	800044c <__aeabi_f2iz+0x18>
 8000464:	0008      	movs	r0, r1
 8000466:	e7f1      	b.n	800044c <__aeabi_f2iz+0x18>
 8000468:	3a96      	subs	r2, #150	@ 0x96
 800046a:	4091      	lsls	r1, r2
 800046c:	e7f7      	b.n	800045e <__aeabi_f2iz+0x2a>
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	7fffffff 	.word	0x7fffffff

08000474 <__aeabi_dadd>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	4657      	mov	r7, sl
 8000478:	464e      	mov	r6, r9
 800047a:	4645      	mov	r5, r8
 800047c:	46de      	mov	lr, fp
 800047e:	b5e0      	push	{r5, r6, r7, lr}
 8000480:	b083      	sub	sp, #12
 8000482:	9000      	str	r0, [sp, #0]
 8000484:	9101      	str	r1, [sp, #4]
 8000486:	030c      	lsls	r4, r1, #12
 8000488:	004f      	lsls	r7, r1, #1
 800048a:	0fce      	lsrs	r6, r1, #31
 800048c:	0a61      	lsrs	r1, r4, #9
 800048e:	9c00      	ldr	r4, [sp, #0]
 8000490:	031d      	lsls	r5, r3, #12
 8000492:	0f64      	lsrs	r4, r4, #29
 8000494:	430c      	orrs	r4, r1
 8000496:	9900      	ldr	r1, [sp, #0]
 8000498:	9200      	str	r2, [sp, #0]
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	00c8      	lsls	r0, r1, #3
 800049e:	0059      	lsls	r1, r3, #1
 80004a0:	0d4b      	lsrs	r3, r1, #21
 80004a2:	4699      	mov	r9, r3
 80004a4:	9a00      	ldr	r2, [sp, #0]
 80004a6:	9b01      	ldr	r3, [sp, #4]
 80004a8:	0a6d      	lsrs	r5, r5, #9
 80004aa:	0fd9      	lsrs	r1, r3, #31
 80004ac:	0f53      	lsrs	r3, r2, #29
 80004ae:	432b      	orrs	r3, r5
 80004b0:	469a      	mov	sl, r3
 80004b2:	9b00      	ldr	r3, [sp, #0]
 80004b4:	0d7f      	lsrs	r7, r7, #21
 80004b6:	00da      	lsls	r2, r3, #3
 80004b8:	4694      	mov	ip, r2
 80004ba:	464a      	mov	r2, r9
 80004bc:	46b0      	mov	r8, r6
 80004be:	1aba      	subs	r2, r7, r2
 80004c0:	428e      	cmp	r6, r1
 80004c2:	d100      	bne.n	80004c6 <__aeabi_dadd+0x52>
 80004c4:	e0b0      	b.n	8000628 <__aeabi_dadd+0x1b4>
 80004c6:	2a00      	cmp	r2, #0
 80004c8:	dc00      	bgt.n	80004cc <__aeabi_dadd+0x58>
 80004ca:	e078      	b.n	80005be <__aeabi_dadd+0x14a>
 80004cc:	4649      	mov	r1, r9
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d100      	bne.n	80004d4 <__aeabi_dadd+0x60>
 80004d2:	e0e9      	b.n	80006a8 <__aeabi_dadd+0x234>
 80004d4:	49c9      	ldr	r1, [pc, #804]	@ (80007fc <__aeabi_dadd+0x388>)
 80004d6:	428f      	cmp	r7, r1
 80004d8:	d100      	bne.n	80004dc <__aeabi_dadd+0x68>
 80004da:	e195      	b.n	8000808 <__aeabi_dadd+0x394>
 80004dc:	2501      	movs	r5, #1
 80004de:	2a38      	cmp	r2, #56	@ 0x38
 80004e0:	dc16      	bgt.n	8000510 <__aeabi_dadd+0x9c>
 80004e2:	2180      	movs	r1, #128	@ 0x80
 80004e4:	4653      	mov	r3, sl
 80004e6:	0409      	lsls	r1, r1, #16
 80004e8:	430b      	orrs	r3, r1
 80004ea:	469a      	mov	sl, r3
 80004ec:	2a1f      	cmp	r2, #31
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dadd+0x7e>
 80004f0:	e1e7      	b.n	80008c2 <__aeabi_dadd+0x44e>
 80004f2:	2120      	movs	r1, #32
 80004f4:	4655      	mov	r5, sl
 80004f6:	1a8b      	subs	r3, r1, r2
 80004f8:	4661      	mov	r1, ip
 80004fa:	409d      	lsls	r5, r3
 80004fc:	40d1      	lsrs	r1, r2
 80004fe:	430d      	orrs	r5, r1
 8000500:	4661      	mov	r1, ip
 8000502:	4099      	lsls	r1, r3
 8000504:	1e4b      	subs	r3, r1, #1
 8000506:	4199      	sbcs	r1, r3
 8000508:	4653      	mov	r3, sl
 800050a:	40d3      	lsrs	r3, r2
 800050c:	430d      	orrs	r5, r1
 800050e:	1ae4      	subs	r4, r4, r3
 8000510:	1b45      	subs	r5, r0, r5
 8000512:	42a8      	cmp	r0, r5
 8000514:	4180      	sbcs	r0, r0
 8000516:	4240      	negs	r0, r0
 8000518:	1a24      	subs	r4, r4, r0
 800051a:	0223      	lsls	r3, r4, #8
 800051c:	d400      	bmi.n	8000520 <__aeabi_dadd+0xac>
 800051e:	e10f      	b.n	8000740 <__aeabi_dadd+0x2cc>
 8000520:	0264      	lsls	r4, r4, #9
 8000522:	0a64      	lsrs	r4, r4, #9
 8000524:	2c00      	cmp	r4, #0
 8000526:	d100      	bne.n	800052a <__aeabi_dadd+0xb6>
 8000528:	e139      	b.n	800079e <__aeabi_dadd+0x32a>
 800052a:	0020      	movs	r0, r4
 800052c:	f001 fd7e 	bl	800202c <__clzsi2>
 8000530:	0003      	movs	r3, r0
 8000532:	3b08      	subs	r3, #8
 8000534:	2120      	movs	r1, #32
 8000536:	0028      	movs	r0, r5
 8000538:	1aca      	subs	r2, r1, r3
 800053a:	40d0      	lsrs	r0, r2
 800053c:	409c      	lsls	r4, r3
 800053e:	0002      	movs	r2, r0
 8000540:	409d      	lsls	r5, r3
 8000542:	4322      	orrs	r2, r4
 8000544:	429f      	cmp	r7, r3
 8000546:	dd00      	ble.n	800054a <__aeabi_dadd+0xd6>
 8000548:	e173      	b.n	8000832 <__aeabi_dadd+0x3be>
 800054a:	1bd8      	subs	r0, r3, r7
 800054c:	3001      	adds	r0, #1
 800054e:	1a09      	subs	r1, r1, r0
 8000550:	002c      	movs	r4, r5
 8000552:	408d      	lsls	r5, r1
 8000554:	40c4      	lsrs	r4, r0
 8000556:	1e6b      	subs	r3, r5, #1
 8000558:	419d      	sbcs	r5, r3
 800055a:	0013      	movs	r3, r2
 800055c:	40c2      	lsrs	r2, r0
 800055e:	408b      	lsls	r3, r1
 8000560:	4325      	orrs	r5, r4
 8000562:	2700      	movs	r7, #0
 8000564:	0014      	movs	r4, r2
 8000566:	431d      	orrs	r5, r3
 8000568:	076b      	lsls	r3, r5, #29
 800056a:	d009      	beq.n	8000580 <__aeabi_dadd+0x10c>
 800056c:	230f      	movs	r3, #15
 800056e:	402b      	ands	r3, r5
 8000570:	2b04      	cmp	r3, #4
 8000572:	d005      	beq.n	8000580 <__aeabi_dadd+0x10c>
 8000574:	1d2b      	adds	r3, r5, #4
 8000576:	42ab      	cmp	r3, r5
 8000578:	41ad      	sbcs	r5, r5
 800057a:	426d      	negs	r5, r5
 800057c:	1964      	adds	r4, r4, r5
 800057e:	001d      	movs	r5, r3
 8000580:	0223      	lsls	r3, r4, #8
 8000582:	d400      	bmi.n	8000586 <__aeabi_dadd+0x112>
 8000584:	e12d      	b.n	80007e2 <__aeabi_dadd+0x36e>
 8000586:	4a9d      	ldr	r2, [pc, #628]	@ (80007fc <__aeabi_dadd+0x388>)
 8000588:	3701      	adds	r7, #1
 800058a:	4297      	cmp	r7, r2
 800058c:	d100      	bne.n	8000590 <__aeabi_dadd+0x11c>
 800058e:	e0d3      	b.n	8000738 <__aeabi_dadd+0x2c4>
 8000590:	4646      	mov	r6, r8
 8000592:	499b      	ldr	r1, [pc, #620]	@ (8000800 <__aeabi_dadd+0x38c>)
 8000594:	08ed      	lsrs	r5, r5, #3
 8000596:	4021      	ands	r1, r4
 8000598:	074a      	lsls	r2, r1, #29
 800059a:	432a      	orrs	r2, r5
 800059c:	057c      	lsls	r4, r7, #21
 800059e:	024d      	lsls	r5, r1, #9
 80005a0:	0b2d      	lsrs	r5, r5, #12
 80005a2:	0d64      	lsrs	r4, r4, #21
 80005a4:	0524      	lsls	r4, r4, #20
 80005a6:	432c      	orrs	r4, r5
 80005a8:	07f6      	lsls	r6, r6, #31
 80005aa:	4334      	orrs	r4, r6
 80005ac:	0010      	movs	r0, r2
 80005ae:	0021      	movs	r1, r4
 80005b0:	b003      	add	sp, #12
 80005b2:	bcf0      	pop	{r4, r5, r6, r7}
 80005b4:	46bb      	mov	fp, r7
 80005b6:	46b2      	mov	sl, r6
 80005b8:	46a9      	mov	r9, r5
 80005ba:	46a0      	mov	r8, r4
 80005bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x150>
 80005c2:	e084      	b.n	80006ce <__aeabi_dadd+0x25a>
 80005c4:	464a      	mov	r2, r9
 80005c6:	1bd2      	subs	r2, r2, r7
 80005c8:	2f00      	cmp	r7, #0
 80005ca:	d000      	beq.n	80005ce <__aeabi_dadd+0x15a>
 80005cc:	e16d      	b.n	80008aa <__aeabi_dadd+0x436>
 80005ce:	0025      	movs	r5, r4
 80005d0:	4305      	orrs	r5, r0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x162>
 80005d4:	e127      	b.n	8000826 <__aeabi_dadd+0x3b2>
 80005d6:	1e56      	subs	r6, r2, #1
 80005d8:	2a01      	cmp	r2, #1
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x16a>
 80005dc:	e23b      	b.n	8000a56 <__aeabi_dadd+0x5e2>
 80005de:	4d87      	ldr	r5, [pc, #540]	@ (80007fc <__aeabi_dadd+0x388>)
 80005e0:	42aa      	cmp	r2, r5
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x172>
 80005e4:	e26a      	b.n	8000abc <__aeabi_dadd+0x648>
 80005e6:	2501      	movs	r5, #1
 80005e8:	2e38      	cmp	r6, #56	@ 0x38
 80005ea:	dc12      	bgt.n	8000612 <__aeabi_dadd+0x19e>
 80005ec:	0032      	movs	r2, r6
 80005ee:	2a1f      	cmp	r2, #31
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x180>
 80005f2:	e1f8      	b.n	80009e6 <__aeabi_dadd+0x572>
 80005f4:	2620      	movs	r6, #32
 80005f6:	0025      	movs	r5, r4
 80005f8:	1ab6      	subs	r6, r6, r2
 80005fa:	0007      	movs	r7, r0
 80005fc:	4653      	mov	r3, sl
 80005fe:	40b0      	lsls	r0, r6
 8000600:	40d4      	lsrs	r4, r2
 8000602:	40b5      	lsls	r5, r6
 8000604:	40d7      	lsrs	r7, r2
 8000606:	1e46      	subs	r6, r0, #1
 8000608:	41b0      	sbcs	r0, r6
 800060a:	1b1b      	subs	r3, r3, r4
 800060c:	469a      	mov	sl, r3
 800060e:	433d      	orrs	r5, r7
 8000610:	4305      	orrs	r5, r0
 8000612:	4662      	mov	r2, ip
 8000614:	1b55      	subs	r5, r2, r5
 8000616:	45ac      	cmp	ip, r5
 8000618:	4192      	sbcs	r2, r2
 800061a:	4653      	mov	r3, sl
 800061c:	4252      	negs	r2, r2
 800061e:	000e      	movs	r6, r1
 8000620:	464f      	mov	r7, r9
 8000622:	4688      	mov	r8, r1
 8000624:	1a9c      	subs	r4, r3, r2
 8000626:	e778      	b.n	800051a <__aeabi_dadd+0xa6>
 8000628:	2a00      	cmp	r2, #0
 800062a:	dc00      	bgt.n	800062e <__aeabi_dadd+0x1ba>
 800062c:	e08e      	b.n	800074c <__aeabi_dadd+0x2d8>
 800062e:	4649      	mov	r1, r9
 8000630:	2900      	cmp	r1, #0
 8000632:	d175      	bne.n	8000720 <__aeabi_dadd+0x2ac>
 8000634:	4661      	mov	r1, ip
 8000636:	4653      	mov	r3, sl
 8000638:	4319      	orrs	r1, r3
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x1ca>
 800063c:	e0f6      	b.n	800082c <__aeabi_dadd+0x3b8>
 800063e:	1e51      	subs	r1, r2, #1
 8000640:	2a01      	cmp	r2, #1
 8000642:	d100      	bne.n	8000646 <__aeabi_dadd+0x1d2>
 8000644:	e191      	b.n	800096a <__aeabi_dadd+0x4f6>
 8000646:	4d6d      	ldr	r5, [pc, #436]	@ (80007fc <__aeabi_dadd+0x388>)
 8000648:	42aa      	cmp	r2, r5
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x1da>
 800064c:	e0dc      	b.n	8000808 <__aeabi_dadd+0x394>
 800064e:	2501      	movs	r5, #1
 8000650:	2938      	cmp	r1, #56	@ 0x38
 8000652:	dc14      	bgt.n	800067e <__aeabi_dadd+0x20a>
 8000654:	000a      	movs	r2, r1
 8000656:	2a1f      	cmp	r2, #31
 8000658:	dd00      	ble.n	800065c <__aeabi_dadd+0x1e8>
 800065a:	e1a2      	b.n	80009a2 <__aeabi_dadd+0x52e>
 800065c:	2120      	movs	r1, #32
 800065e:	4653      	mov	r3, sl
 8000660:	1a89      	subs	r1, r1, r2
 8000662:	408b      	lsls	r3, r1
 8000664:	001d      	movs	r5, r3
 8000666:	4663      	mov	r3, ip
 8000668:	40d3      	lsrs	r3, r2
 800066a:	431d      	orrs	r5, r3
 800066c:	4663      	mov	r3, ip
 800066e:	408b      	lsls	r3, r1
 8000670:	0019      	movs	r1, r3
 8000672:	1e4b      	subs	r3, r1, #1
 8000674:	4199      	sbcs	r1, r3
 8000676:	4653      	mov	r3, sl
 8000678:	40d3      	lsrs	r3, r2
 800067a:	430d      	orrs	r5, r1
 800067c:	18e4      	adds	r4, r4, r3
 800067e:	182d      	adds	r5, r5, r0
 8000680:	4285      	cmp	r5, r0
 8000682:	4180      	sbcs	r0, r0
 8000684:	4240      	negs	r0, r0
 8000686:	1824      	adds	r4, r4, r0
 8000688:	0223      	lsls	r3, r4, #8
 800068a:	d559      	bpl.n	8000740 <__aeabi_dadd+0x2cc>
 800068c:	4b5b      	ldr	r3, [pc, #364]	@ (80007fc <__aeabi_dadd+0x388>)
 800068e:	3701      	adds	r7, #1
 8000690:	429f      	cmp	r7, r3
 8000692:	d051      	beq.n	8000738 <__aeabi_dadd+0x2c4>
 8000694:	2101      	movs	r1, #1
 8000696:	4b5a      	ldr	r3, [pc, #360]	@ (8000800 <__aeabi_dadd+0x38c>)
 8000698:	086a      	lsrs	r2, r5, #1
 800069a:	401c      	ands	r4, r3
 800069c:	4029      	ands	r1, r5
 800069e:	430a      	orrs	r2, r1
 80006a0:	07e5      	lsls	r5, r4, #31
 80006a2:	4315      	orrs	r5, r2
 80006a4:	0864      	lsrs	r4, r4, #1
 80006a6:	e75f      	b.n	8000568 <__aeabi_dadd+0xf4>
 80006a8:	4661      	mov	r1, ip
 80006aa:	4653      	mov	r3, sl
 80006ac:	4319      	orrs	r1, r3
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x23e>
 80006b0:	e0bc      	b.n	800082c <__aeabi_dadd+0x3b8>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x246>
 80006b8:	e164      	b.n	8000984 <__aeabi_dadd+0x510>
 80006ba:	4d50      	ldr	r5, [pc, #320]	@ (80007fc <__aeabi_dadd+0x388>)
 80006bc:	42aa      	cmp	r2, r5
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x24e>
 80006c0:	e16a      	b.n	8000998 <__aeabi_dadd+0x524>
 80006c2:	2501      	movs	r5, #1
 80006c4:	2938      	cmp	r1, #56	@ 0x38
 80006c6:	dd00      	ble.n	80006ca <__aeabi_dadd+0x256>
 80006c8:	e722      	b.n	8000510 <__aeabi_dadd+0x9c>
 80006ca:	000a      	movs	r2, r1
 80006cc:	e70e      	b.n	80004ec <__aeabi_dadd+0x78>
 80006ce:	4a4d      	ldr	r2, [pc, #308]	@ (8000804 <__aeabi_dadd+0x390>)
 80006d0:	1c7d      	adds	r5, r7, #1
 80006d2:	4215      	tst	r5, r2
 80006d4:	d000      	beq.n	80006d8 <__aeabi_dadd+0x264>
 80006d6:	e0d0      	b.n	800087a <__aeabi_dadd+0x406>
 80006d8:	0025      	movs	r5, r4
 80006da:	4662      	mov	r2, ip
 80006dc:	4653      	mov	r3, sl
 80006de:	4305      	orrs	r5, r0
 80006e0:	431a      	orrs	r2, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d000      	beq.n	80006e8 <__aeabi_dadd+0x274>
 80006e6:	e137      	b.n	8000958 <__aeabi_dadd+0x4e4>
 80006e8:	2d00      	cmp	r5, #0
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x27a>
 80006ec:	e1a8      	b.n	8000a40 <__aeabi_dadd+0x5cc>
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d100      	bne.n	80006f4 <__aeabi_dadd+0x280>
 80006f2:	e16a      	b.n	80009ca <__aeabi_dadd+0x556>
 80006f4:	4663      	mov	r3, ip
 80006f6:	1ac5      	subs	r5, r0, r3
 80006f8:	4653      	mov	r3, sl
 80006fa:	1ae2      	subs	r2, r4, r3
 80006fc:	42a8      	cmp	r0, r5
 80006fe:	419b      	sbcs	r3, r3
 8000700:	425b      	negs	r3, r3
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	021a      	lsls	r2, r3, #8
 8000706:	d400      	bmi.n	800070a <__aeabi_dadd+0x296>
 8000708:	e203      	b.n	8000b12 <__aeabi_dadd+0x69e>
 800070a:	4663      	mov	r3, ip
 800070c:	1a1d      	subs	r5, r3, r0
 800070e:	45ac      	cmp	ip, r5
 8000710:	4192      	sbcs	r2, r2
 8000712:	4653      	mov	r3, sl
 8000714:	4252      	negs	r2, r2
 8000716:	1b1c      	subs	r4, r3, r4
 8000718:	000e      	movs	r6, r1
 800071a:	4688      	mov	r8, r1
 800071c:	1aa4      	subs	r4, r4, r2
 800071e:	e723      	b.n	8000568 <__aeabi_dadd+0xf4>
 8000720:	4936      	ldr	r1, [pc, #216]	@ (80007fc <__aeabi_dadd+0x388>)
 8000722:	428f      	cmp	r7, r1
 8000724:	d070      	beq.n	8000808 <__aeabi_dadd+0x394>
 8000726:	2501      	movs	r5, #1
 8000728:	2a38      	cmp	r2, #56	@ 0x38
 800072a:	dca8      	bgt.n	800067e <__aeabi_dadd+0x20a>
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	4653      	mov	r3, sl
 8000730:	0409      	lsls	r1, r1, #16
 8000732:	430b      	orrs	r3, r1
 8000734:	469a      	mov	sl, r3
 8000736:	e78e      	b.n	8000656 <__aeabi_dadd+0x1e2>
 8000738:	003c      	movs	r4, r7
 800073a:	2500      	movs	r5, #0
 800073c:	2200      	movs	r2, #0
 800073e:	e731      	b.n	80005a4 <__aeabi_dadd+0x130>
 8000740:	2307      	movs	r3, #7
 8000742:	402b      	ands	r3, r5
 8000744:	2b00      	cmp	r3, #0
 8000746:	d000      	beq.n	800074a <__aeabi_dadd+0x2d6>
 8000748:	e710      	b.n	800056c <__aeabi_dadd+0xf8>
 800074a:	e093      	b.n	8000874 <__aeabi_dadd+0x400>
 800074c:	2a00      	cmp	r2, #0
 800074e:	d074      	beq.n	800083a <__aeabi_dadd+0x3c6>
 8000750:	464a      	mov	r2, r9
 8000752:	1bd2      	subs	r2, r2, r7
 8000754:	2f00      	cmp	r7, #0
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x2e6>
 8000758:	e0c7      	b.n	80008ea <__aeabi_dadd+0x476>
 800075a:	4928      	ldr	r1, [pc, #160]	@ (80007fc <__aeabi_dadd+0x388>)
 800075c:	4589      	cmp	r9, r1
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0x2ee>
 8000760:	e185      	b.n	8000a6e <__aeabi_dadd+0x5fa>
 8000762:	2501      	movs	r5, #1
 8000764:	2a38      	cmp	r2, #56	@ 0x38
 8000766:	dc12      	bgt.n	800078e <__aeabi_dadd+0x31a>
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	430c      	orrs	r4, r1
 800076e:	2a1f      	cmp	r2, #31
 8000770:	dd00      	ble.n	8000774 <__aeabi_dadd+0x300>
 8000772:	e1ab      	b.n	8000acc <__aeabi_dadd+0x658>
 8000774:	2120      	movs	r1, #32
 8000776:	0025      	movs	r5, r4
 8000778:	1a89      	subs	r1, r1, r2
 800077a:	0007      	movs	r7, r0
 800077c:	4088      	lsls	r0, r1
 800077e:	408d      	lsls	r5, r1
 8000780:	40d7      	lsrs	r7, r2
 8000782:	1e41      	subs	r1, r0, #1
 8000784:	4188      	sbcs	r0, r1
 8000786:	40d4      	lsrs	r4, r2
 8000788:	433d      	orrs	r5, r7
 800078a:	4305      	orrs	r5, r0
 800078c:	44a2      	add	sl, r4
 800078e:	4465      	add	r5, ip
 8000790:	4565      	cmp	r5, ip
 8000792:	4192      	sbcs	r2, r2
 8000794:	4252      	negs	r2, r2
 8000796:	4452      	add	r2, sl
 8000798:	0014      	movs	r4, r2
 800079a:	464f      	mov	r7, r9
 800079c:	e774      	b.n	8000688 <__aeabi_dadd+0x214>
 800079e:	0028      	movs	r0, r5
 80007a0:	f001 fc44 	bl	800202c <__clzsi2>
 80007a4:	0003      	movs	r3, r0
 80007a6:	3318      	adds	r3, #24
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	dc00      	bgt.n	80007ae <__aeabi_dadd+0x33a>
 80007ac:	e6c2      	b.n	8000534 <__aeabi_dadd+0xc0>
 80007ae:	002a      	movs	r2, r5
 80007b0:	3808      	subs	r0, #8
 80007b2:	4082      	lsls	r2, r0
 80007b4:	429f      	cmp	r7, r3
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dadd+0x346>
 80007b8:	e0a9      	b.n	800090e <__aeabi_dadd+0x49a>
 80007ba:	1bdb      	subs	r3, r3, r7
 80007bc:	1c58      	adds	r0, r3, #1
 80007be:	281f      	cmp	r0, #31
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_dadd+0x350>
 80007c2:	e1ac      	b.n	8000b1e <__aeabi_dadd+0x6aa>
 80007c4:	0015      	movs	r5, r2
 80007c6:	3b1f      	subs	r3, #31
 80007c8:	40dd      	lsrs	r5, r3
 80007ca:	2820      	cmp	r0, #32
 80007cc:	d005      	beq.n	80007da <__aeabi_dadd+0x366>
 80007ce:	2340      	movs	r3, #64	@ 0x40
 80007d0:	1a1b      	subs	r3, r3, r0
 80007d2:	409a      	lsls	r2, r3
 80007d4:	1e53      	subs	r3, r2, #1
 80007d6:	419a      	sbcs	r2, r3
 80007d8:	4315      	orrs	r5, r2
 80007da:	2307      	movs	r3, #7
 80007dc:	2700      	movs	r7, #0
 80007de:	402b      	ands	r3, r5
 80007e0:	e7b0      	b.n	8000744 <__aeabi_dadd+0x2d0>
 80007e2:	08ed      	lsrs	r5, r5, #3
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <__aeabi_dadd+0x388>)
 80007e6:	0762      	lsls	r2, r4, #29
 80007e8:	432a      	orrs	r2, r5
 80007ea:	08e4      	lsrs	r4, r4, #3
 80007ec:	429f      	cmp	r7, r3
 80007ee:	d00f      	beq.n	8000810 <__aeabi_dadd+0x39c>
 80007f0:	0324      	lsls	r4, r4, #12
 80007f2:	0b25      	lsrs	r5, r4, #12
 80007f4:	057c      	lsls	r4, r7, #21
 80007f6:	0d64      	lsrs	r4, r4, #21
 80007f8:	e6d4      	b.n	80005a4 <__aeabi_dadd+0x130>
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	000007ff 	.word	0x000007ff
 8000800:	ff7fffff 	.word	0xff7fffff
 8000804:	000007fe 	.word	0x000007fe
 8000808:	08c0      	lsrs	r0, r0, #3
 800080a:	0762      	lsls	r2, r4, #29
 800080c:	4302      	orrs	r2, r0
 800080e:	08e4      	lsrs	r4, r4, #3
 8000810:	0013      	movs	r3, r2
 8000812:	4323      	orrs	r3, r4
 8000814:	d100      	bne.n	8000818 <__aeabi_dadd+0x3a4>
 8000816:	e186      	b.n	8000b26 <__aeabi_dadd+0x6b2>
 8000818:	2580      	movs	r5, #128	@ 0x80
 800081a:	032d      	lsls	r5, r5, #12
 800081c:	4325      	orrs	r5, r4
 800081e:	032d      	lsls	r5, r5, #12
 8000820:	4cc3      	ldr	r4, [pc, #780]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 8000822:	0b2d      	lsrs	r5, r5, #12
 8000824:	e6be      	b.n	80005a4 <__aeabi_dadd+0x130>
 8000826:	4660      	mov	r0, ip
 8000828:	4654      	mov	r4, sl
 800082a:	000e      	movs	r6, r1
 800082c:	0017      	movs	r7, r2
 800082e:	08c5      	lsrs	r5, r0, #3
 8000830:	e7d8      	b.n	80007e4 <__aeabi_dadd+0x370>
 8000832:	4cc0      	ldr	r4, [pc, #768]	@ (8000b34 <__aeabi_dadd+0x6c0>)
 8000834:	1aff      	subs	r7, r7, r3
 8000836:	4014      	ands	r4, r2
 8000838:	e696      	b.n	8000568 <__aeabi_dadd+0xf4>
 800083a:	4abf      	ldr	r2, [pc, #764]	@ (8000b38 <__aeabi_dadd+0x6c4>)
 800083c:	1c79      	adds	r1, r7, #1
 800083e:	4211      	tst	r1, r2
 8000840:	d16b      	bne.n	800091a <__aeabi_dadd+0x4a6>
 8000842:	0022      	movs	r2, r4
 8000844:	4302      	orrs	r2, r0
 8000846:	2f00      	cmp	r7, #0
 8000848:	d000      	beq.n	800084c <__aeabi_dadd+0x3d8>
 800084a:	e0db      	b.n	8000a04 <__aeabi_dadd+0x590>
 800084c:	2a00      	cmp	r2, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x3de>
 8000850:	e12d      	b.n	8000aae <__aeabi_dadd+0x63a>
 8000852:	4662      	mov	r2, ip
 8000854:	4653      	mov	r3, sl
 8000856:	431a      	orrs	r2, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3e8>
 800085a:	e0b6      	b.n	80009ca <__aeabi_dadd+0x556>
 800085c:	4663      	mov	r3, ip
 800085e:	18c5      	adds	r5, r0, r3
 8000860:	4285      	cmp	r5, r0
 8000862:	4180      	sbcs	r0, r0
 8000864:	4454      	add	r4, sl
 8000866:	4240      	negs	r0, r0
 8000868:	1824      	adds	r4, r4, r0
 800086a:	0223      	lsls	r3, r4, #8
 800086c:	d502      	bpl.n	8000874 <__aeabi_dadd+0x400>
 800086e:	000f      	movs	r7, r1
 8000870:	4bb0      	ldr	r3, [pc, #704]	@ (8000b34 <__aeabi_dadd+0x6c0>)
 8000872:	401c      	ands	r4, r3
 8000874:	003a      	movs	r2, r7
 8000876:	0028      	movs	r0, r5
 8000878:	e7d8      	b.n	800082c <__aeabi_dadd+0x3b8>
 800087a:	4662      	mov	r2, ip
 800087c:	1a85      	subs	r5, r0, r2
 800087e:	42a8      	cmp	r0, r5
 8000880:	4192      	sbcs	r2, r2
 8000882:	4653      	mov	r3, sl
 8000884:	4252      	negs	r2, r2
 8000886:	4691      	mov	r9, r2
 8000888:	1ae3      	subs	r3, r4, r3
 800088a:	001a      	movs	r2, r3
 800088c:	464b      	mov	r3, r9
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	4691      	mov	r9, r2
 8000894:	021a      	lsls	r2, r3, #8
 8000896:	d454      	bmi.n	8000942 <__aeabi_dadd+0x4ce>
 8000898:	464a      	mov	r2, r9
 800089a:	464c      	mov	r4, r9
 800089c:	432a      	orrs	r2, r5
 800089e:	d000      	beq.n	80008a2 <__aeabi_dadd+0x42e>
 80008a0:	e640      	b.n	8000524 <__aeabi_dadd+0xb0>
 80008a2:	2600      	movs	r6, #0
 80008a4:	2400      	movs	r4, #0
 80008a6:	2500      	movs	r5, #0
 80008a8:	e67c      	b.n	80005a4 <__aeabi_dadd+0x130>
 80008aa:	4da1      	ldr	r5, [pc, #644]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 80008ac:	45a9      	cmp	r9, r5
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x43e>
 80008b0:	e090      	b.n	80009d4 <__aeabi_dadd+0x560>
 80008b2:	2501      	movs	r5, #1
 80008b4:	2a38      	cmp	r2, #56	@ 0x38
 80008b6:	dd00      	ble.n	80008ba <__aeabi_dadd+0x446>
 80008b8:	e6ab      	b.n	8000612 <__aeabi_dadd+0x19e>
 80008ba:	2580      	movs	r5, #128	@ 0x80
 80008bc:	042d      	lsls	r5, r5, #16
 80008be:	432c      	orrs	r4, r5
 80008c0:	e695      	b.n	80005ee <__aeabi_dadd+0x17a>
 80008c2:	0011      	movs	r1, r2
 80008c4:	4655      	mov	r5, sl
 80008c6:	3920      	subs	r1, #32
 80008c8:	40cd      	lsrs	r5, r1
 80008ca:	46a9      	mov	r9, r5
 80008cc:	2a20      	cmp	r2, #32
 80008ce:	d006      	beq.n	80008de <__aeabi_dadd+0x46a>
 80008d0:	2140      	movs	r1, #64	@ 0x40
 80008d2:	4653      	mov	r3, sl
 80008d4:	1a8a      	subs	r2, r1, r2
 80008d6:	4093      	lsls	r3, r2
 80008d8:	4662      	mov	r2, ip
 80008da:	431a      	orrs	r2, r3
 80008dc:	4694      	mov	ip, r2
 80008de:	4665      	mov	r5, ip
 80008e0:	1e6b      	subs	r3, r5, #1
 80008e2:	419d      	sbcs	r5, r3
 80008e4:	464b      	mov	r3, r9
 80008e6:	431d      	orrs	r5, r3
 80008e8:	e612      	b.n	8000510 <__aeabi_dadd+0x9c>
 80008ea:	0021      	movs	r1, r4
 80008ec:	4301      	orrs	r1, r0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x47e>
 80008f0:	e0c4      	b.n	8000a7c <__aeabi_dadd+0x608>
 80008f2:	1e51      	subs	r1, r2, #1
 80008f4:	2a01      	cmp	r2, #1
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x486>
 80008f8:	e0fb      	b.n	8000af2 <__aeabi_dadd+0x67e>
 80008fa:	4d8d      	ldr	r5, [pc, #564]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 80008fc:	42aa      	cmp	r2, r5
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x48e>
 8000900:	e0b5      	b.n	8000a6e <__aeabi_dadd+0x5fa>
 8000902:	2501      	movs	r5, #1
 8000904:	2938      	cmp	r1, #56	@ 0x38
 8000906:	dd00      	ble.n	800090a <__aeabi_dadd+0x496>
 8000908:	e741      	b.n	800078e <__aeabi_dadd+0x31a>
 800090a:	000a      	movs	r2, r1
 800090c:	e72f      	b.n	800076e <__aeabi_dadd+0x2fa>
 800090e:	4c89      	ldr	r4, [pc, #548]	@ (8000b34 <__aeabi_dadd+0x6c0>)
 8000910:	1aff      	subs	r7, r7, r3
 8000912:	4014      	ands	r4, r2
 8000914:	0762      	lsls	r2, r4, #29
 8000916:	08e4      	lsrs	r4, r4, #3
 8000918:	e76a      	b.n	80007f0 <__aeabi_dadd+0x37c>
 800091a:	4a85      	ldr	r2, [pc, #532]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 800091c:	4291      	cmp	r1, r2
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x4ae>
 8000920:	e0e3      	b.n	8000aea <__aeabi_dadd+0x676>
 8000922:	4663      	mov	r3, ip
 8000924:	18c2      	adds	r2, r0, r3
 8000926:	4282      	cmp	r2, r0
 8000928:	4180      	sbcs	r0, r0
 800092a:	0023      	movs	r3, r4
 800092c:	4240      	negs	r0, r0
 800092e:	4453      	add	r3, sl
 8000930:	181b      	adds	r3, r3, r0
 8000932:	07dd      	lsls	r5, r3, #31
 8000934:	085c      	lsrs	r4, r3, #1
 8000936:	2307      	movs	r3, #7
 8000938:	0852      	lsrs	r2, r2, #1
 800093a:	4315      	orrs	r5, r2
 800093c:	000f      	movs	r7, r1
 800093e:	402b      	ands	r3, r5
 8000940:	e700      	b.n	8000744 <__aeabi_dadd+0x2d0>
 8000942:	4663      	mov	r3, ip
 8000944:	1a1d      	subs	r5, r3, r0
 8000946:	45ac      	cmp	ip, r5
 8000948:	4192      	sbcs	r2, r2
 800094a:	4653      	mov	r3, sl
 800094c:	4252      	negs	r2, r2
 800094e:	1b1c      	subs	r4, r3, r4
 8000950:	000e      	movs	r6, r1
 8000952:	4688      	mov	r8, r1
 8000954:	1aa4      	subs	r4, r4, r2
 8000956:	e5e5      	b.n	8000524 <__aeabi_dadd+0xb0>
 8000958:	2d00      	cmp	r5, #0
 800095a:	d000      	beq.n	800095e <__aeabi_dadd+0x4ea>
 800095c:	e091      	b.n	8000a82 <__aeabi_dadd+0x60e>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d138      	bne.n	80009d4 <__aeabi_dadd+0x560>
 8000962:	2480      	movs	r4, #128	@ 0x80
 8000964:	2600      	movs	r6, #0
 8000966:	0324      	lsls	r4, r4, #12
 8000968:	e756      	b.n	8000818 <__aeabi_dadd+0x3a4>
 800096a:	4663      	mov	r3, ip
 800096c:	18c5      	adds	r5, r0, r3
 800096e:	4285      	cmp	r5, r0
 8000970:	4180      	sbcs	r0, r0
 8000972:	4454      	add	r4, sl
 8000974:	4240      	negs	r0, r0
 8000976:	1824      	adds	r4, r4, r0
 8000978:	2701      	movs	r7, #1
 800097a:	0223      	lsls	r3, r4, #8
 800097c:	d400      	bmi.n	8000980 <__aeabi_dadd+0x50c>
 800097e:	e6df      	b.n	8000740 <__aeabi_dadd+0x2cc>
 8000980:	2702      	movs	r7, #2
 8000982:	e687      	b.n	8000694 <__aeabi_dadd+0x220>
 8000984:	4663      	mov	r3, ip
 8000986:	1ac5      	subs	r5, r0, r3
 8000988:	42a8      	cmp	r0, r5
 800098a:	4180      	sbcs	r0, r0
 800098c:	4653      	mov	r3, sl
 800098e:	4240      	negs	r0, r0
 8000990:	1ae4      	subs	r4, r4, r3
 8000992:	2701      	movs	r7, #1
 8000994:	1a24      	subs	r4, r4, r0
 8000996:	e5c0      	b.n	800051a <__aeabi_dadd+0xa6>
 8000998:	0762      	lsls	r2, r4, #29
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	4302      	orrs	r2, r0
 800099e:	08e4      	lsrs	r4, r4, #3
 80009a0:	e736      	b.n	8000810 <__aeabi_dadd+0x39c>
 80009a2:	0011      	movs	r1, r2
 80009a4:	4653      	mov	r3, sl
 80009a6:	3920      	subs	r1, #32
 80009a8:	40cb      	lsrs	r3, r1
 80009aa:	4699      	mov	r9, r3
 80009ac:	2a20      	cmp	r2, #32
 80009ae:	d006      	beq.n	80009be <__aeabi_dadd+0x54a>
 80009b0:	2140      	movs	r1, #64	@ 0x40
 80009b2:	4653      	mov	r3, sl
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	4093      	lsls	r3, r2
 80009b8:	4662      	mov	r2, ip
 80009ba:	431a      	orrs	r2, r3
 80009bc:	4694      	mov	ip, r2
 80009be:	4665      	mov	r5, ip
 80009c0:	1e6b      	subs	r3, r5, #1
 80009c2:	419d      	sbcs	r5, r3
 80009c4:	464b      	mov	r3, r9
 80009c6:	431d      	orrs	r5, r3
 80009c8:	e659      	b.n	800067e <__aeabi_dadd+0x20a>
 80009ca:	0762      	lsls	r2, r4, #29
 80009cc:	08c0      	lsrs	r0, r0, #3
 80009ce:	4302      	orrs	r2, r0
 80009d0:	08e4      	lsrs	r4, r4, #3
 80009d2:	e70d      	b.n	80007f0 <__aeabi_dadd+0x37c>
 80009d4:	4653      	mov	r3, sl
 80009d6:	075a      	lsls	r2, r3, #29
 80009d8:	4663      	mov	r3, ip
 80009da:	08d8      	lsrs	r0, r3, #3
 80009dc:	4653      	mov	r3, sl
 80009de:	000e      	movs	r6, r1
 80009e0:	4302      	orrs	r2, r0
 80009e2:	08dc      	lsrs	r4, r3, #3
 80009e4:	e714      	b.n	8000810 <__aeabi_dadd+0x39c>
 80009e6:	0015      	movs	r5, r2
 80009e8:	0026      	movs	r6, r4
 80009ea:	3d20      	subs	r5, #32
 80009ec:	40ee      	lsrs	r6, r5
 80009ee:	2a20      	cmp	r2, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x586>
 80009f2:	2540      	movs	r5, #64	@ 0x40
 80009f4:	1aaa      	subs	r2, r5, r2
 80009f6:	4094      	lsls	r4, r2
 80009f8:	4320      	orrs	r0, r4
 80009fa:	1e42      	subs	r2, r0, #1
 80009fc:	4190      	sbcs	r0, r2
 80009fe:	0005      	movs	r5, r0
 8000a00:	4335      	orrs	r5, r6
 8000a02:	e606      	b.n	8000612 <__aeabi_dadd+0x19e>
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	d07c      	beq.n	8000b02 <__aeabi_dadd+0x68e>
 8000a08:	4662      	mov	r2, ip
 8000a0a:	4653      	mov	r3, sl
 8000a0c:	08c0      	lsrs	r0, r0, #3
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dadd+0x5a0>
 8000a12:	e6fa      	b.n	800080a <__aeabi_dadd+0x396>
 8000a14:	0762      	lsls	r2, r4, #29
 8000a16:	4310      	orrs	r0, r2
 8000a18:	2280      	movs	r2, #128	@ 0x80
 8000a1a:	08e4      	lsrs	r4, r4, #3
 8000a1c:	0312      	lsls	r2, r2, #12
 8000a1e:	4214      	tst	r4, r2
 8000a20:	d008      	beq.n	8000a34 <__aeabi_dadd+0x5c0>
 8000a22:	08d9      	lsrs	r1, r3, #3
 8000a24:	4211      	tst	r1, r2
 8000a26:	d105      	bne.n	8000a34 <__aeabi_dadd+0x5c0>
 8000a28:	4663      	mov	r3, ip
 8000a2a:	08d8      	lsrs	r0, r3, #3
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	000c      	movs	r4, r1
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4318      	orrs	r0, r3
 8000a34:	0f42      	lsrs	r2, r0, #29
 8000a36:	00c0      	lsls	r0, r0, #3
 8000a38:	08c0      	lsrs	r0, r0, #3
 8000a3a:	0752      	lsls	r2, r2, #29
 8000a3c:	4302      	orrs	r2, r0
 8000a3e:	e6e7      	b.n	8000810 <__aeabi_dadd+0x39c>
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x5d2>
 8000a44:	e72d      	b.n	80008a2 <__aeabi_dadd+0x42e>
 8000a46:	4663      	mov	r3, ip
 8000a48:	08d8      	lsrs	r0, r3, #3
 8000a4a:	4653      	mov	r3, sl
 8000a4c:	075a      	lsls	r2, r3, #29
 8000a4e:	000e      	movs	r6, r1
 8000a50:	4302      	orrs	r2, r0
 8000a52:	08dc      	lsrs	r4, r3, #3
 8000a54:	e6cc      	b.n	80007f0 <__aeabi_dadd+0x37c>
 8000a56:	4663      	mov	r3, ip
 8000a58:	1a1d      	subs	r5, r3, r0
 8000a5a:	45ac      	cmp	ip, r5
 8000a5c:	4192      	sbcs	r2, r2
 8000a5e:	4653      	mov	r3, sl
 8000a60:	4252      	negs	r2, r2
 8000a62:	1b1c      	subs	r4, r3, r4
 8000a64:	000e      	movs	r6, r1
 8000a66:	4688      	mov	r8, r1
 8000a68:	1aa4      	subs	r4, r4, r2
 8000a6a:	3701      	adds	r7, #1
 8000a6c:	e555      	b.n	800051a <__aeabi_dadd+0xa6>
 8000a6e:	4663      	mov	r3, ip
 8000a70:	08d9      	lsrs	r1, r3, #3
 8000a72:	4653      	mov	r3, sl
 8000a74:	075a      	lsls	r2, r3, #29
 8000a76:	430a      	orrs	r2, r1
 8000a78:	08dc      	lsrs	r4, r3, #3
 8000a7a:	e6c9      	b.n	8000810 <__aeabi_dadd+0x39c>
 8000a7c:	4660      	mov	r0, ip
 8000a7e:	4654      	mov	r4, sl
 8000a80:	e6d4      	b.n	800082c <__aeabi_dadd+0x3b8>
 8000a82:	08c0      	lsrs	r0, r0, #3
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x616>
 8000a88:	e6bf      	b.n	800080a <__aeabi_dadd+0x396>
 8000a8a:	0762      	lsls	r2, r4, #29
 8000a8c:	4310      	orrs	r0, r2
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	08e4      	lsrs	r4, r4, #3
 8000a92:	0312      	lsls	r2, r2, #12
 8000a94:	4214      	tst	r4, r2
 8000a96:	d0cd      	beq.n	8000a34 <__aeabi_dadd+0x5c0>
 8000a98:	08dd      	lsrs	r5, r3, #3
 8000a9a:	4215      	tst	r5, r2
 8000a9c:	d1ca      	bne.n	8000a34 <__aeabi_dadd+0x5c0>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	08d8      	lsrs	r0, r3, #3
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	075b      	lsls	r3, r3, #29
 8000aa6:	000e      	movs	r6, r1
 8000aa8:	002c      	movs	r4, r5
 8000aaa:	4318      	orrs	r0, r3
 8000aac:	e7c2      	b.n	8000a34 <__aeabi_dadd+0x5c0>
 8000aae:	4663      	mov	r3, ip
 8000ab0:	08d9      	lsrs	r1, r3, #3
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	08dc      	lsrs	r4, r3, #3
 8000aba:	e699      	b.n	80007f0 <__aeabi_dadd+0x37c>
 8000abc:	4663      	mov	r3, ip
 8000abe:	08d8      	lsrs	r0, r3, #3
 8000ac0:	4653      	mov	r3, sl
 8000ac2:	075a      	lsls	r2, r3, #29
 8000ac4:	000e      	movs	r6, r1
 8000ac6:	4302      	orrs	r2, r0
 8000ac8:	08dc      	lsrs	r4, r3, #3
 8000aca:	e6a1      	b.n	8000810 <__aeabi_dadd+0x39c>
 8000acc:	0011      	movs	r1, r2
 8000ace:	0027      	movs	r7, r4
 8000ad0:	3920      	subs	r1, #32
 8000ad2:	40cf      	lsrs	r7, r1
 8000ad4:	2a20      	cmp	r2, #32
 8000ad6:	d003      	beq.n	8000ae0 <__aeabi_dadd+0x66c>
 8000ad8:	2140      	movs	r1, #64	@ 0x40
 8000ada:	1a8a      	subs	r2, r1, r2
 8000adc:	4094      	lsls	r4, r2
 8000ade:	4320      	orrs	r0, r4
 8000ae0:	1e42      	subs	r2, r0, #1
 8000ae2:	4190      	sbcs	r0, r2
 8000ae4:	0005      	movs	r5, r0
 8000ae6:	433d      	orrs	r5, r7
 8000ae8:	e651      	b.n	800078e <__aeabi_dadd+0x31a>
 8000aea:	000c      	movs	r4, r1
 8000aec:	2500      	movs	r5, #0
 8000aee:	2200      	movs	r2, #0
 8000af0:	e558      	b.n	80005a4 <__aeabi_dadd+0x130>
 8000af2:	4460      	add	r0, ip
 8000af4:	4560      	cmp	r0, ip
 8000af6:	4192      	sbcs	r2, r2
 8000af8:	4454      	add	r4, sl
 8000afa:	4252      	negs	r2, r2
 8000afc:	0005      	movs	r5, r0
 8000afe:	18a4      	adds	r4, r4, r2
 8000b00:	e73a      	b.n	8000978 <__aeabi_dadd+0x504>
 8000b02:	4653      	mov	r3, sl
 8000b04:	075a      	lsls	r2, r3, #29
 8000b06:	4663      	mov	r3, ip
 8000b08:	08d9      	lsrs	r1, r3, #3
 8000b0a:	4653      	mov	r3, sl
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	08dc      	lsrs	r4, r3, #3
 8000b10:	e67e      	b.n	8000810 <__aeabi_dadd+0x39c>
 8000b12:	001a      	movs	r2, r3
 8000b14:	001c      	movs	r4, r3
 8000b16:	432a      	orrs	r2, r5
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x6a8>
 8000b1a:	e6ab      	b.n	8000874 <__aeabi_dadd+0x400>
 8000b1c:	e6c1      	b.n	80008a2 <__aeabi_dadd+0x42e>
 8000b1e:	2120      	movs	r1, #32
 8000b20:	2500      	movs	r5, #0
 8000b22:	1a09      	subs	r1, r1, r0
 8000b24:	e519      	b.n	800055a <__aeabi_dadd+0xe6>
 8000b26:	2200      	movs	r2, #0
 8000b28:	2500      	movs	r5, #0
 8000b2a:	4c01      	ldr	r4, [pc, #4]	@ (8000b30 <__aeabi_dadd+0x6bc>)
 8000b2c:	e53a      	b.n	80005a4 <__aeabi_dadd+0x130>
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	000007ff 	.word	0x000007ff
 8000b34:	ff7fffff 	.word	0xff7fffff
 8000b38:	000007fe 	.word	0x000007fe

08000b3c <__aeabi_ddiv>:
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	46de      	mov	lr, fp
 8000b40:	4645      	mov	r5, r8
 8000b42:	4657      	mov	r7, sl
 8000b44:	464e      	mov	r6, r9
 8000b46:	b5e0      	push	{r5, r6, r7, lr}
 8000b48:	b087      	sub	sp, #28
 8000b4a:	9200      	str	r2, [sp, #0]
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	030b      	lsls	r3, r1, #12
 8000b50:	0b1b      	lsrs	r3, r3, #12
 8000b52:	469b      	mov	fp, r3
 8000b54:	0fca      	lsrs	r2, r1, #31
 8000b56:	004b      	lsls	r3, r1, #1
 8000b58:	0004      	movs	r4, r0
 8000b5a:	4680      	mov	r8, r0
 8000b5c:	0d5b      	lsrs	r3, r3, #21
 8000b5e:	9202      	str	r2, [sp, #8]
 8000b60:	d100      	bne.n	8000b64 <__aeabi_ddiv+0x28>
 8000b62:	e16a      	b.n	8000e3a <__aeabi_ddiv+0x2fe>
 8000b64:	4ad4      	ldr	r2, [pc, #848]	@ (8000eb8 <__aeabi_ddiv+0x37c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x30>
 8000b6a:	e18c      	b.n	8000e86 <__aeabi_ddiv+0x34a>
 8000b6c:	4659      	mov	r1, fp
 8000b6e:	0f42      	lsrs	r2, r0, #29
 8000b70:	00c9      	lsls	r1, r1, #3
 8000b72:	430a      	orrs	r2, r1
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	0409      	lsls	r1, r1, #16
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	00c2      	lsls	r2, r0, #3
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	4acf      	ldr	r2, [pc, #828]	@ (8000ebc <__aeabi_ddiv+0x380>)
 8000b80:	4689      	mov	r9, r1
 8000b82:	4692      	mov	sl, r2
 8000b84:	449a      	add	sl, r3
 8000b86:	2300      	movs	r3, #0
 8000b88:	2400      	movs	r4, #0
 8000b8a:	9303      	str	r3, [sp, #12]
 8000b8c:	9e00      	ldr	r6, [sp, #0]
 8000b8e:	9f01      	ldr	r7, [sp, #4]
 8000b90:	033b      	lsls	r3, r7, #12
 8000b92:	0b1b      	lsrs	r3, r3, #12
 8000b94:	469b      	mov	fp, r3
 8000b96:	007b      	lsls	r3, r7, #1
 8000b98:	0030      	movs	r0, r6
 8000b9a:	0d5b      	lsrs	r3, r3, #21
 8000b9c:	0ffd      	lsrs	r5, r7, #31
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_ddiv+0x68>
 8000ba2:	e128      	b.n	8000df6 <__aeabi_ddiv+0x2ba>
 8000ba4:	4ac4      	ldr	r2, [pc, #784]	@ (8000eb8 <__aeabi_ddiv+0x37c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d100      	bne.n	8000bac <__aeabi_ddiv+0x70>
 8000baa:	e177      	b.n	8000e9c <__aeabi_ddiv+0x360>
 8000bac:	4659      	mov	r1, fp
 8000bae:	0f72      	lsrs	r2, r6, #29
 8000bb0:	00c9      	lsls	r1, r1, #3
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	0409      	lsls	r1, r1, #16
 8000bb8:	4311      	orrs	r1, r2
 8000bba:	468b      	mov	fp, r1
 8000bbc:	49bf      	ldr	r1, [pc, #764]	@ (8000ebc <__aeabi_ddiv+0x380>)
 8000bbe:	00f2      	lsls	r2, r6, #3
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	4651      	mov	r1, sl
 8000bc4:	4463      	add	r3, ip
 8000bc6:	1acb      	subs	r3, r1, r3
 8000bc8:	469a      	mov	sl, r3
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9e02      	ldr	r6, [sp, #8]
 8000bce:	406e      	eors	r6, r5
 8000bd0:	2c0f      	cmp	r4, #15
 8000bd2:	d827      	bhi.n	8000c24 <__aeabi_ddiv+0xe8>
 8000bd4:	49ba      	ldr	r1, [pc, #744]	@ (8000ec0 <__aeabi_ddiv+0x384>)
 8000bd6:	00a4      	lsls	r4, r4, #2
 8000bd8:	5909      	ldr	r1, [r1, r4]
 8000bda:	468f      	mov	pc, r1
 8000bdc:	46cb      	mov	fp, r9
 8000bde:	4642      	mov	r2, r8
 8000be0:	9e02      	ldr	r6, [sp, #8]
 8000be2:	9b03      	ldr	r3, [sp, #12]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d016      	beq.n	8000c16 <__aeabi_ddiv+0xda>
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d100      	bne.n	8000bee <__aeabi_ddiv+0xb2>
 8000bec:	e2a6      	b.n	800113c <__aeabi_ddiv+0x600>
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_ddiv+0xb8>
 8000bf2:	e0df      	b.n	8000db4 <__aeabi_ddiv+0x278>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	4690      	mov	r8, r2
 8000bfc:	051b      	lsls	r3, r3, #20
 8000bfe:	4323      	orrs	r3, r4
 8000c00:	07f6      	lsls	r6, r6, #31
 8000c02:	4333      	orrs	r3, r6
 8000c04:	4640      	mov	r0, r8
 8000c06:	0019      	movs	r1, r3
 8000c08:	b007      	add	sp, #28
 8000c0a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c0c:	46bb      	mov	fp, r7
 8000c0e:	46b2      	mov	sl, r6
 8000c10:	46a9      	mov	r9, r5
 8000c12:	46a0      	mov	r8, r4
 8000c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c16:	2200      	movs	r2, #0
 8000c18:	2400      	movs	r4, #0
 8000c1a:	4690      	mov	r8, r2
 8000c1c:	4ba6      	ldr	r3, [pc, #664]	@ (8000eb8 <__aeabi_ddiv+0x37c>)
 8000c1e:	e7ed      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000c20:	002e      	movs	r6, r5
 8000c22:	e7df      	b.n	8000be4 <__aeabi_ddiv+0xa8>
 8000c24:	45cb      	cmp	fp, r9
 8000c26:	d200      	bcs.n	8000c2a <__aeabi_ddiv+0xee>
 8000c28:	e1d4      	b.n	8000fd4 <__aeabi_ddiv+0x498>
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_ddiv+0xf2>
 8000c2c:	e1cf      	b.n	8000fce <__aeabi_ddiv+0x492>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	425b      	negs	r3, r3
 8000c32:	469c      	mov	ip, r3
 8000c34:	4644      	mov	r4, r8
 8000c36:	4648      	mov	r0, r9
 8000c38:	2700      	movs	r7, #0
 8000c3a:	44e2      	add	sl, ip
 8000c3c:	465b      	mov	r3, fp
 8000c3e:	0e15      	lsrs	r5, r2, #24
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	431d      	orrs	r5, r3
 8000c44:	0c19      	lsrs	r1, r3, #16
 8000c46:	042b      	lsls	r3, r5, #16
 8000c48:	0212      	lsls	r2, r2, #8
 8000c4a:	9500      	str	r5, [sp, #0]
 8000c4c:	0c1d      	lsrs	r5, r3, #16
 8000c4e:	4691      	mov	r9, r2
 8000c50:	9102      	str	r1, [sp, #8]
 8000c52:	9503      	str	r5, [sp, #12]
 8000c54:	f7ff fae8 	bl	8000228 <__aeabi_uidivmod>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	436a      	muls	r2, r5
 8000c5c:	040b      	lsls	r3, r1, #16
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	4680      	mov	r8, r0
 8000c62:	4319      	orrs	r1, r3
 8000c64:	428a      	cmp	r2, r1
 8000c66:	d909      	bls.n	8000c7c <__aeabi_ddiv+0x140>
 8000c68:	9d00      	ldr	r5, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	46ac      	mov	ip, r5
 8000c6e:	425b      	negs	r3, r3
 8000c70:	4461      	add	r1, ip
 8000c72:	469c      	mov	ip, r3
 8000c74:	44e0      	add	r8, ip
 8000c76:	428d      	cmp	r5, r1
 8000c78:	d800      	bhi.n	8000c7c <__aeabi_ddiv+0x140>
 8000c7a:	e1fb      	b.n	8001074 <__aeabi_ddiv+0x538>
 8000c7c:	1a88      	subs	r0, r1, r2
 8000c7e:	9902      	ldr	r1, [sp, #8]
 8000c80:	f7ff fad2 	bl	8000228 <__aeabi_uidivmod>
 8000c84:	9a03      	ldr	r2, [sp, #12]
 8000c86:	0424      	lsls	r4, r4, #16
 8000c88:	4342      	muls	r2, r0
 8000c8a:	0409      	lsls	r1, r1, #16
 8000c8c:	0c24      	lsrs	r4, r4, #16
 8000c8e:	0003      	movs	r3, r0
 8000c90:	430c      	orrs	r4, r1
 8000c92:	42a2      	cmp	r2, r4
 8000c94:	d906      	bls.n	8000ca4 <__aeabi_ddiv+0x168>
 8000c96:	9900      	ldr	r1, [sp, #0]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	468c      	mov	ip, r1
 8000c9c:	4464      	add	r4, ip
 8000c9e:	42a1      	cmp	r1, r4
 8000ca0:	d800      	bhi.n	8000ca4 <__aeabi_ddiv+0x168>
 8000ca2:	e1e1      	b.n	8001068 <__aeabi_ddiv+0x52c>
 8000ca4:	1aa0      	subs	r0, r4, r2
 8000ca6:	4642      	mov	r2, r8
 8000ca8:	0412      	lsls	r2, r2, #16
 8000caa:	431a      	orrs	r2, r3
 8000cac:	4693      	mov	fp, r2
 8000cae:	464b      	mov	r3, r9
 8000cb0:	4659      	mov	r1, fp
 8000cb2:	0c1b      	lsrs	r3, r3, #16
 8000cb4:	001d      	movs	r5, r3
 8000cb6:	9304      	str	r3, [sp, #16]
 8000cb8:	040b      	lsls	r3, r1, #16
 8000cba:	4649      	mov	r1, r9
 8000cbc:	0409      	lsls	r1, r1, #16
 8000cbe:	0c09      	lsrs	r1, r1, #16
 8000cc0:	000c      	movs	r4, r1
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	435c      	muls	r4, r3
 8000cc6:	0c12      	lsrs	r2, r2, #16
 8000cc8:	436b      	muls	r3, r5
 8000cca:	4688      	mov	r8, r1
 8000ccc:	4351      	muls	r1, r2
 8000cce:	436a      	muls	r2, r5
 8000cd0:	0c25      	lsrs	r5, r4, #16
 8000cd2:	46ac      	mov	ip, r5
 8000cd4:	185b      	adds	r3, r3, r1
 8000cd6:	4463      	add	r3, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d903      	bls.n	8000ce4 <__aeabi_ddiv+0x1a8>
 8000cdc:	2180      	movs	r1, #128	@ 0x80
 8000cde:	0249      	lsls	r1, r1, #9
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	4462      	add	r2, ip
 8000ce4:	0c19      	lsrs	r1, r3, #16
 8000ce6:	0424      	lsls	r4, r4, #16
 8000ce8:	041b      	lsls	r3, r3, #16
 8000cea:	0c24      	lsrs	r4, r4, #16
 8000cec:	188a      	adds	r2, r1, r2
 8000cee:	191c      	adds	r4, r3, r4
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d302      	bcc.n	8000cfa <__aeabi_ddiv+0x1be>
 8000cf4:	d116      	bne.n	8000d24 <__aeabi_ddiv+0x1e8>
 8000cf6:	42a7      	cmp	r7, r4
 8000cf8:	d214      	bcs.n	8000d24 <__aeabi_ddiv+0x1e8>
 8000cfa:	465b      	mov	r3, fp
 8000cfc:	9d00      	ldr	r5, [sp, #0]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	444f      	add	r7, r9
 8000d02:	9305      	str	r3, [sp, #20]
 8000d04:	454f      	cmp	r7, r9
 8000d06:	419b      	sbcs	r3, r3
 8000d08:	46ac      	mov	ip, r5
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	4463      	add	r3, ip
 8000d0e:	18c0      	adds	r0, r0, r3
 8000d10:	4285      	cmp	r5, r0
 8000d12:	d300      	bcc.n	8000d16 <__aeabi_ddiv+0x1da>
 8000d14:	e1a1      	b.n	800105a <__aeabi_ddiv+0x51e>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	d900      	bls.n	8000d1c <__aeabi_ddiv+0x1e0>
 8000d1a:	e1f6      	b.n	800110a <__aeabi_ddiv+0x5ce>
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_ddiv+0x1e4>
 8000d1e:	e1f1      	b.n	8001104 <__aeabi_ddiv+0x5c8>
 8000d20:	9b05      	ldr	r3, [sp, #20]
 8000d22:	469b      	mov	fp, r3
 8000d24:	1b3c      	subs	r4, r7, r4
 8000d26:	42a7      	cmp	r7, r4
 8000d28:	41bf      	sbcs	r7, r7
 8000d2a:	9d00      	ldr	r5, [sp, #0]
 8000d2c:	1a80      	subs	r0, r0, r2
 8000d2e:	427f      	negs	r7, r7
 8000d30:	1bc0      	subs	r0, r0, r7
 8000d32:	4285      	cmp	r5, r0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x1fc>
 8000d36:	e1d0      	b.n	80010da <__aeabi_ddiv+0x59e>
 8000d38:	9902      	ldr	r1, [sp, #8]
 8000d3a:	f7ff fa75 	bl	8000228 <__aeabi_uidivmod>
 8000d3e:	9a03      	ldr	r2, [sp, #12]
 8000d40:	040b      	lsls	r3, r1, #16
 8000d42:	4342      	muls	r2, r0
 8000d44:	0c21      	lsrs	r1, r4, #16
 8000d46:	0007      	movs	r7, r0
 8000d48:	4319      	orrs	r1, r3
 8000d4a:	428a      	cmp	r2, r1
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x214>
 8000d4e:	e178      	b.n	8001042 <__aeabi_ddiv+0x506>
 8000d50:	1a88      	subs	r0, r1, r2
 8000d52:	9902      	ldr	r1, [sp, #8]
 8000d54:	f7ff fa68 	bl	8000228 <__aeabi_uidivmod>
 8000d58:	9a03      	ldr	r2, [sp, #12]
 8000d5a:	0424      	lsls	r4, r4, #16
 8000d5c:	4342      	muls	r2, r0
 8000d5e:	0409      	lsls	r1, r1, #16
 8000d60:	0c24      	lsrs	r4, r4, #16
 8000d62:	0003      	movs	r3, r0
 8000d64:	430c      	orrs	r4, r1
 8000d66:	42a2      	cmp	r2, r4
 8000d68:	d900      	bls.n	8000d6c <__aeabi_ddiv+0x230>
 8000d6a:	e15d      	b.n	8001028 <__aeabi_ddiv+0x4ec>
 8000d6c:	4641      	mov	r1, r8
 8000d6e:	1aa4      	subs	r4, r4, r2
 8000d70:	043a      	lsls	r2, r7, #16
 8000d72:	431a      	orrs	r2, r3
 8000d74:	9d04      	ldr	r5, [sp, #16]
 8000d76:	0413      	lsls	r3, r2, #16
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	4359      	muls	r1, r3
 8000d7c:	4647      	mov	r7, r8
 8000d7e:	436b      	muls	r3, r5
 8000d80:	469c      	mov	ip, r3
 8000d82:	0c10      	lsrs	r0, r2, #16
 8000d84:	4347      	muls	r7, r0
 8000d86:	0c0b      	lsrs	r3, r1, #16
 8000d88:	44bc      	add	ip, r7
 8000d8a:	4463      	add	r3, ip
 8000d8c:	4368      	muls	r0, r5
 8000d8e:	429f      	cmp	r7, r3
 8000d90:	d903      	bls.n	8000d9a <__aeabi_ddiv+0x25e>
 8000d92:	2580      	movs	r5, #128	@ 0x80
 8000d94:	026d      	lsls	r5, r5, #9
 8000d96:	46ac      	mov	ip, r5
 8000d98:	4460      	add	r0, ip
 8000d9a:	0c1f      	lsrs	r7, r3, #16
 8000d9c:	0409      	lsls	r1, r1, #16
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	0c09      	lsrs	r1, r1, #16
 8000da2:	183f      	adds	r7, r7, r0
 8000da4:	185b      	adds	r3, r3, r1
 8000da6:	42bc      	cmp	r4, r7
 8000da8:	d200      	bcs.n	8000dac <__aeabi_ddiv+0x270>
 8000daa:	e102      	b.n	8000fb2 <__aeabi_ddiv+0x476>
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x274>
 8000dae:	e0fd      	b.n	8000fac <__aeabi_ddiv+0x470>
 8000db0:	2301      	movs	r3, #1
 8000db2:	431a      	orrs	r2, r3
 8000db4:	4b43      	ldr	r3, [pc, #268]	@ (8000ec4 <__aeabi_ddiv+0x388>)
 8000db6:	4453      	add	r3, sl
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_ddiv+0x282>
 8000dbc:	e0ae      	b.n	8000f1c <__aeabi_ddiv+0x3e0>
 8000dbe:	0751      	lsls	r1, r2, #29
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_ddiv+0x288>
 8000dc2:	e198      	b.n	80010f6 <__aeabi_ddiv+0x5ba>
 8000dc4:	4659      	mov	r1, fp
 8000dc6:	01c9      	lsls	r1, r1, #7
 8000dc8:	d506      	bpl.n	8000dd8 <__aeabi_ddiv+0x29c>
 8000dca:	4659      	mov	r1, fp
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec8 <__aeabi_ddiv+0x38c>)
 8000dce:	4019      	ands	r1, r3
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	468b      	mov	fp, r1
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4453      	add	r3, sl
 8000dd8:	493c      	ldr	r1, [pc, #240]	@ (8000ecc <__aeabi_ddiv+0x390>)
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_ddiv+0x2a4>
 8000dde:	e71a      	b.n	8000c16 <__aeabi_ddiv+0xda>
 8000de0:	4659      	mov	r1, fp
 8000de2:	08d2      	lsrs	r2, r2, #3
 8000de4:	0749      	lsls	r1, r1, #29
 8000de6:	4311      	orrs	r1, r2
 8000de8:	465a      	mov	r2, fp
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	0254      	lsls	r4, r2, #9
 8000dee:	4688      	mov	r8, r1
 8000df0:	0b24      	lsrs	r4, r4, #12
 8000df2:	0d5b      	lsrs	r3, r3, #21
 8000df4:	e702      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000df6:	465a      	mov	r2, fp
 8000df8:	9b00      	ldr	r3, [sp, #0]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_ddiv+0x2c4>
 8000dfe:	e07e      	b.n	8000efe <__aeabi_ddiv+0x3c2>
 8000e00:	465b      	mov	r3, fp
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x2cc>
 8000e06:	e100      	b.n	800100a <__aeabi_ddiv+0x4ce>
 8000e08:	4658      	mov	r0, fp
 8000e0a:	f001 f90f 	bl	800202c <__clzsi2>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	0003      	movs	r3, r0
 8000e12:	3a0b      	subs	r2, #11
 8000e14:	271d      	movs	r7, #29
 8000e16:	9e00      	ldr	r6, [sp, #0]
 8000e18:	1aba      	subs	r2, r7, r2
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	4658      	mov	r0, fp
 8000e1e:	40d6      	lsrs	r6, r2
 8000e20:	3908      	subs	r1, #8
 8000e22:	4088      	lsls	r0, r1
 8000e24:	0032      	movs	r2, r6
 8000e26:	4302      	orrs	r2, r0
 8000e28:	4693      	mov	fp, r2
 8000e2a:	9a00      	ldr	r2, [sp, #0]
 8000e2c:	408a      	lsls	r2, r1
 8000e2e:	4928      	ldr	r1, [pc, #160]	@ (8000ed0 <__aeabi_ddiv+0x394>)
 8000e30:	4453      	add	r3, sl
 8000e32:	468a      	mov	sl, r1
 8000e34:	449a      	add	sl, r3
 8000e36:	2300      	movs	r3, #0
 8000e38:	e6c8      	b.n	8000bcc <__aeabi_ddiv+0x90>
 8000e3a:	465b      	mov	r3, fp
 8000e3c:	4303      	orrs	r3, r0
 8000e3e:	4699      	mov	r9, r3
 8000e40:	d056      	beq.n	8000ef0 <__aeabi_ddiv+0x3b4>
 8000e42:	465b      	mov	r3, fp
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0x30e>
 8000e48:	e0cd      	b.n	8000fe6 <__aeabi_ddiv+0x4aa>
 8000e4a:	4658      	mov	r0, fp
 8000e4c:	f001 f8ee 	bl	800202c <__clzsi2>
 8000e50:	230b      	movs	r3, #11
 8000e52:	425b      	negs	r3, r3
 8000e54:	469c      	mov	ip, r3
 8000e56:	0002      	movs	r2, r0
 8000e58:	4484      	add	ip, r0
 8000e5a:	4666      	mov	r6, ip
 8000e5c:	231d      	movs	r3, #29
 8000e5e:	1b9b      	subs	r3, r3, r6
 8000e60:	0026      	movs	r6, r4
 8000e62:	0011      	movs	r1, r2
 8000e64:	4658      	mov	r0, fp
 8000e66:	40de      	lsrs	r6, r3
 8000e68:	3908      	subs	r1, #8
 8000e6a:	4088      	lsls	r0, r1
 8000e6c:	0033      	movs	r3, r6
 8000e6e:	4303      	orrs	r3, r0
 8000e70:	4699      	mov	r9, r3
 8000e72:	0023      	movs	r3, r4
 8000e74:	408b      	lsls	r3, r1
 8000e76:	4698      	mov	r8, r3
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <__aeabi_ddiv+0x398>)
 8000e7a:	2400      	movs	r4, #0
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	469a      	mov	sl, r3
 8000e80:	2300      	movs	r3, #0
 8000e82:	9303      	str	r3, [sp, #12]
 8000e84:	e682      	b.n	8000b8c <__aeabi_ddiv+0x50>
 8000e86:	465a      	mov	r2, fp
 8000e88:	4302      	orrs	r2, r0
 8000e8a:	4691      	mov	r9, r2
 8000e8c:	d12a      	bne.n	8000ee4 <__aeabi_ddiv+0x3a8>
 8000e8e:	2200      	movs	r2, #0
 8000e90:	469a      	mov	sl, r3
 8000e92:	2302      	movs	r3, #2
 8000e94:	4690      	mov	r8, r2
 8000e96:	2408      	movs	r4, #8
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	e677      	b.n	8000b8c <__aeabi_ddiv+0x50>
 8000e9c:	465a      	mov	r2, fp
 8000e9e:	9b00      	ldr	r3, [sp, #0]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <__aeabi_ddiv+0x39c>)
 8000ea4:	469c      	mov	ip, r3
 8000ea6:	44e2      	add	sl, ip
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d117      	bne.n	8000edc <__aeabi_ddiv+0x3a0>
 8000eac:	2302      	movs	r3, #2
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	e689      	b.n	8000bcc <__aeabi_ddiv+0x90>
 8000eb8:	000007ff 	.word	0x000007ff
 8000ebc:	fffffc01 	.word	0xfffffc01
 8000ec0:	080070b8 	.word	0x080070b8
 8000ec4:	000003ff 	.word	0x000003ff
 8000ec8:	feffffff 	.word	0xfeffffff
 8000ecc:	000007fe 	.word	0x000007fe
 8000ed0:	000003f3 	.word	0x000003f3
 8000ed4:	fffffc0d 	.word	0xfffffc0d
 8000ed8:	fffff801 	.word	0xfffff801
 8000edc:	2303      	movs	r3, #3
 8000ede:	0032      	movs	r2, r6
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	e673      	b.n	8000bcc <__aeabi_ddiv+0x90>
 8000ee4:	469a      	mov	sl, r3
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	46d9      	mov	r9, fp
 8000eea:	240c      	movs	r4, #12
 8000eec:	9303      	str	r3, [sp, #12]
 8000eee:	e64d      	b.n	8000b8c <__aeabi_ddiv+0x50>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4698      	mov	r8, r3
 8000ef4:	469a      	mov	sl, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	2404      	movs	r4, #4
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	e646      	b.n	8000b8c <__aeabi_ddiv+0x50>
 8000efe:	2301      	movs	r3, #1
 8000f00:	431c      	orrs	r4, r3
 8000f02:	2300      	movs	r3, #0
 8000f04:	469b      	mov	fp, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	e660      	b.n	8000bcc <__aeabi_ddiv+0x90>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2480      	movs	r4, #128	@ 0x80
 8000f0e:	4698      	mov	r8, r3
 8000f10:	2600      	movs	r6, #0
 8000f12:	4b92      	ldr	r3, [pc, #584]	@ (800115c <__aeabi_ddiv+0x620>)
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	e671      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4252      	negs	r2, r2
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	1ac9      	subs	r1, r1, r3
 8000f20:	2938      	cmp	r1, #56	@ 0x38
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_ddiv+0x3ea>
 8000f24:	e666      	b.n	8000bf4 <__aeabi_ddiv+0xb8>
 8000f26:	291f      	cmp	r1, #31
 8000f28:	dc00      	bgt.n	8000f2c <__aeabi_ddiv+0x3f0>
 8000f2a:	e0ab      	b.n	8001084 <__aeabi_ddiv+0x548>
 8000f2c:	201f      	movs	r0, #31
 8000f2e:	4240      	negs	r0, r0
 8000f30:	1ac3      	subs	r3, r0, r3
 8000f32:	4658      	mov	r0, fp
 8000f34:	40d8      	lsrs	r0, r3
 8000f36:	0003      	movs	r3, r0
 8000f38:	2920      	cmp	r1, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_ddiv+0x40a>
 8000f3c:	4658      	mov	r0, fp
 8000f3e:	4988      	ldr	r1, [pc, #544]	@ (8001160 <__aeabi_ddiv+0x624>)
 8000f40:	4451      	add	r1, sl
 8000f42:	4088      	lsls	r0, r1
 8000f44:	4302      	orrs	r2, r0
 8000f46:	1e51      	subs	r1, r2, #1
 8000f48:	418a      	sbcs	r2, r1
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	0019      	movs	r1, r3
 8000f50:	2400      	movs	r4, #0
 8000f52:	4011      	ands	r1, r2
 8000f54:	4213      	tst	r3, r2
 8000f56:	d00c      	beq.n	8000f72 <__aeabi_ddiv+0x436>
 8000f58:	230f      	movs	r3, #15
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0x426>
 8000f60:	e0f9      	b.n	8001156 <__aeabi_ddiv+0x61a>
 8000f62:	1d11      	adds	r1, r2, #4
 8000f64:	4291      	cmp	r1, r2
 8000f66:	419b      	sbcs	r3, r3
 8000f68:	000a      	movs	r2, r1
 8000f6a:	425b      	negs	r3, r3
 8000f6c:	0759      	lsls	r1, r3, #29
 8000f6e:	025b      	lsls	r3, r3, #9
 8000f70:	0b1c      	lsrs	r4, r3, #12
 8000f72:	08d2      	lsrs	r2, r2, #3
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4690      	mov	r8, r2
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e63f      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000f7c:	2480      	movs	r4, #128	@ 0x80
 8000f7e:	464b      	mov	r3, r9
 8000f80:	0324      	lsls	r4, r4, #12
 8000f82:	4223      	tst	r3, r4
 8000f84:	d009      	beq.n	8000f9a <__aeabi_ddiv+0x45e>
 8000f86:	465b      	mov	r3, fp
 8000f88:	4223      	tst	r3, r4
 8000f8a:	d106      	bne.n	8000f9a <__aeabi_ddiv+0x45e>
 8000f8c:	431c      	orrs	r4, r3
 8000f8e:	0324      	lsls	r4, r4, #12
 8000f90:	002e      	movs	r6, r5
 8000f92:	4690      	mov	r8, r2
 8000f94:	4b71      	ldr	r3, [pc, #452]	@ (800115c <__aeabi_ddiv+0x620>)
 8000f96:	0b24      	lsrs	r4, r4, #12
 8000f98:	e630      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000f9a:	2480      	movs	r4, #128	@ 0x80
 8000f9c:	464b      	mov	r3, r9
 8000f9e:	0324      	lsls	r4, r4, #12
 8000fa0:	431c      	orrs	r4, r3
 8000fa2:	0324      	lsls	r4, r4, #12
 8000fa4:	9e02      	ldr	r6, [sp, #8]
 8000fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800115c <__aeabi_ddiv+0x620>)
 8000fa8:	0b24      	lsrs	r4, r4, #12
 8000faa:	e627      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_ddiv+0x476>
 8000fb0:	e700      	b.n	8000db4 <__aeabi_ddiv+0x278>
 8000fb2:	9800      	ldr	r0, [sp, #0]
 8000fb4:	1e51      	subs	r1, r2, #1
 8000fb6:	4684      	mov	ip, r0
 8000fb8:	4464      	add	r4, ip
 8000fba:	4284      	cmp	r4, r0
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x484>
 8000fbe:	e084      	b.n	80010ca <__aeabi_ddiv+0x58e>
 8000fc0:	42bc      	cmp	r4, r7
 8000fc2:	d200      	bcs.n	8000fc6 <__aeabi_ddiv+0x48a>
 8000fc4:	e0ae      	b.n	8001124 <__aeabi_ddiv+0x5e8>
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x48e>
 8000fc8:	e0c1      	b.n	800114e <__aeabi_ddiv+0x612>
 8000fca:	000a      	movs	r2, r1
 8000fcc:	e6f0      	b.n	8000db0 <__aeabi_ddiv+0x274>
 8000fce:	4542      	cmp	r2, r8
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x498>
 8000fd2:	e62c      	b.n	8000c2e <__aeabi_ddiv+0xf2>
 8000fd4:	464b      	mov	r3, r9
 8000fd6:	07dc      	lsls	r4, r3, #31
 8000fd8:	0858      	lsrs	r0, r3, #1
 8000fda:	4643      	mov	r3, r8
 8000fdc:	085b      	lsrs	r3, r3, #1
 8000fde:	431c      	orrs	r4, r3
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	07df      	lsls	r7, r3, #31
 8000fe4:	e62a      	b.n	8000c3c <__aeabi_ddiv+0x100>
 8000fe6:	f001 f821 	bl	800202c <__clzsi2>
 8000fea:	2315      	movs	r3, #21
 8000fec:	469c      	mov	ip, r3
 8000fee:	4484      	add	ip, r0
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	4663      	mov	r3, ip
 8000ff4:	3220      	adds	r2, #32
 8000ff6:	2b1c      	cmp	r3, #28
 8000ff8:	dc00      	bgt.n	8000ffc <__aeabi_ddiv+0x4c0>
 8000ffa:	e72e      	b.n	8000e5a <__aeabi_ddiv+0x31e>
 8000ffc:	0023      	movs	r3, r4
 8000ffe:	3808      	subs	r0, #8
 8001000:	4083      	lsls	r3, r0
 8001002:	4699      	mov	r9, r3
 8001004:	2300      	movs	r3, #0
 8001006:	4698      	mov	r8, r3
 8001008:	e736      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 800100a:	f001 f80f 	bl	800202c <__clzsi2>
 800100e:	0002      	movs	r2, r0
 8001010:	0003      	movs	r3, r0
 8001012:	3215      	adds	r2, #21
 8001014:	3320      	adds	r3, #32
 8001016:	2a1c      	cmp	r2, #28
 8001018:	dc00      	bgt.n	800101c <__aeabi_ddiv+0x4e0>
 800101a:	e6fb      	b.n	8000e14 <__aeabi_ddiv+0x2d8>
 800101c:	9900      	ldr	r1, [sp, #0]
 800101e:	3808      	subs	r0, #8
 8001020:	4081      	lsls	r1, r0
 8001022:	2200      	movs	r2, #0
 8001024:	468b      	mov	fp, r1
 8001026:	e702      	b.n	8000e2e <__aeabi_ddiv+0x2f2>
 8001028:	9900      	ldr	r1, [sp, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	468c      	mov	ip, r1
 800102e:	4464      	add	r4, ip
 8001030:	42a1      	cmp	r1, r4
 8001032:	d900      	bls.n	8001036 <__aeabi_ddiv+0x4fa>
 8001034:	e69a      	b.n	8000d6c <__aeabi_ddiv+0x230>
 8001036:	42a2      	cmp	r2, r4
 8001038:	d800      	bhi.n	800103c <__aeabi_ddiv+0x500>
 800103a:	e697      	b.n	8000d6c <__aeabi_ddiv+0x230>
 800103c:	1e83      	subs	r3, r0, #2
 800103e:	4464      	add	r4, ip
 8001040:	e694      	b.n	8000d6c <__aeabi_ddiv+0x230>
 8001042:	46ac      	mov	ip, r5
 8001044:	4461      	add	r1, ip
 8001046:	3f01      	subs	r7, #1
 8001048:	428d      	cmp	r5, r1
 800104a:	d900      	bls.n	800104e <__aeabi_ddiv+0x512>
 800104c:	e680      	b.n	8000d50 <__aeabi_ddiv+0x214>
 800104e:	428a      	cmp	r2, r1
 8001050:	d800      	bhi.n	8001054 <__aeabi_ddiv+0x518>
 8001052:	e67d      	b.n	8000d50 <__aeabi_ddiv+0x214>
 8001054:	1e87      	subs	r7, r0, #2
 8001056:	4461      	add	r1, ip
 8001058:	e67a      	b.n	8000d50 <__aeabi_ddiv+0x214>
 800105a:	4285      	cmp	r5, r0
 800105c:	d000      	beq.n	8001060 <__aeabi_ddiv+0x524>
 800105e:	e65f      	b.n	8000d20 <__aeabi_ddiv+0x1e4>
 8001060:	45b9      	cmp	r9, r7
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x52a>
 8001064:	e65c      	b.n	8000d20 <__aeabi_ddiv+0x1e4>
 8001066:	e656      	b.n	8000d16 <__aeabi_ddiv+0x1da>
 8001068:	42a2      	cmp	r2, r4
 800106a:	d800      	bhi.n	800106e <__aeabi_ddiv+0x532>
 800106c:	e61a      	b.n	8000ca4 <__aeabi_ddiv+0x168>
 800106e:	1e83      	subs	r3, r0, #2
 8001070:	4464      	add	r4, ip
 8001072:	e617      	b.n	8000ca4 <__aeabi_ddiv+0x168>
 8001074:	428a      	cmp	r2, r1
 8001076:	d800      	bhi.n	800107a <__aeabi_ddiv+0x53e>
 8001078:	e600      	b.n	8000c7c <__aeabi_ddiv+0x140>
 800107a:	46ac      	mov	ip, r5
 800107c:	1e83      	subs	r3, r0, #2
 800107e:	4698      	mov	r8, r3
 8001080:	4461      	add	r1, ip
 8001082:	e5fb      	b.n	8000c7c <__aeabi_ddiv+0x140>
 8001084:	4837      	ldr	r0, [pc, #220]	@ (8001164 <__aeabi_ddiv+0x628>)
 8001086:	0014      	movs	r4, r2
 8001088:	4450      	add	r0, sl
 800108a:	4082      	lsls	r2, r0
 800108c:	465b      	mov	r3, fp
 800108e:	0017      	movs	r7, r2
 8001090:	4083      	lsls	r3, r0
 8001092:	40cc      	lsrs	r4, r1
 8001094:	1e7a      	subs	r2, r7, #1
 8001096:	4197      	sbcs	r7, r2
 8001098:	4323      	orrs	r3, r4
 800109a:	433b      	orrs	r3, r7
 800109c:	001a      	movs	r2, r3
 800109e:	465b      	mov	r3, fp
 80010a0:	40cb      	lsrs	r3, r1
 80010a2:	0751      	lsls	r1, r2, #29
 80010a4:	d009      	beq.n	80010ba <__aeabi_ddiv+0x57e>
 80010a6:	210f      	movs	r1, #15
 80010a8:	4011      	ands	r1, r2
 80010aa:	2904      	cmp	r1, #4
 80010ac:	d005      	beq.n	80010ba <__aeabi_ddiv+0x57e>
 80010ae:	1d11      	adds	r1, r2, #4
 80010b0:	4291      	cmp	r1, r2
 80010b2:	4192      	sbcs	r2, r2
 80010b4:	4252      	negs	r2, r2
 80010b6:	189b      	adds	r3, r3, r2
 80010b8:	000a      	movs	r2, r1
 80010ba:	0219      	lsls	r1, r3, #8
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_ddiv+0x584>
 80010be:	e755      	b.n	8000f6c <__aeabi_ddiv+0x430>
 80010c0:	2200      	movs	r2, #0
 80010c2:	2301      	movs	r3, #1
 80010c4:	2400      	movs	r4, #0
 80010c6:	4690      	mov	r8, r2
 80010c8:	e598      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 80010ca:	000a      	movs	r2, r1
 80010cc:	42bc      	cmp	r4, r7
 80010ce:	d000      	beq.n	80010d2 <__aeabi_ddiv+0x596>
 80010d0:	e66e      	b.n	8000db0 <__aeabi_ddiv+0x274>
 80010d2:	454b      	cmp	r3, r9
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x59c>
 80010d6:	e66b      	b.n	8000db0 <__aeabi_ddiv+0x274>
 80010d8:	e66c      	b.n	8000db4 <__aeabi_ddiv+0x278>
 80010da:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <__aeabi_ddiv+0x62c>)
 80010dc:	4a23      	ldr	r2, [pc, #140]	@ (800116c <__aeabi_ddiv+0x630>)
 80010de:	4453      	add	r3, sl
 80010e0:	4592      	cmp	sl, r2
 80010e2:	da00      	bge.n	80010e6 <__aeabi_ddiv+0x5aa>
 80010e4:	e718      	b.n	8000f18 <__aeabi_ddiv+0x3dc>
 80010e6:	2101      	movs	r1, #1
 80010e8:	4249      	negs	r1, r1
 80010ea:	1d0a      	adds	r2, r1, #4
 80010ec:	428a      	cmp	r2, r1
 80010ee:	4189      	sbcs	r1, r1
 80010f0:	4249      	negs	r1, r1
 80010f2:	448b      	add	fp, r1
 80010f4:	e666      	b.n	8000dc4 <__aeabi_ddiv+0x288>
 80010f6:	210f      	movs	r1, #15
 80010f8:	4011      	ands	r1, r2
 80010fa:	2904      	cmp	r1, #4
 80010fc:	d100      	bne.n	8001100 <__aeabi_ddiv+0x5c4>
 80010fe:	e661      	b.n	8000dc4 <__aeabi_ddiv+0x288>
 8001100:	0011      	movs	r1, r2
 8001102:	e7f2      	b.n	80010ea <__aeabi_ddiv+0x5ae>
 8001104:	42bc      	cmp	r4, r7
 8001106:	d800      	bhi.n	800110a <__aeabi_ddiv+0x5ce>
 8001108:	e60a      	b.n	8000d20 <__aeabi_ddiv+0x1e4>
 800110a:	2302      	movs	r3, #2
 800110c:	425b      	negs	r3, r3
 800110e:	469c      	mov	ip, r3
 8001110:	9900      	ldr	r1, [sp, #0]
 8001112:	444f      	add	r7, r9
 8001114:	454f      	cmp	r7, r9
 8001116:	419b      	sbcs	r3, r3
 8001118:	44e3      	add	fp, ip
 800111a:	468c      	mov	ip, r1
 800111c:	425b      	negs	r3, r3
 800111e:	4463      	add	r3, ip
 8001120:	18c0      	adds	r0, r0, r3
 8001122:	e5ff      	b.n	8000d24 <__aeabi_ddiv+0x1e8>
 8001124:	4649      	mov	r1, r9
 8001126:	9d00      	ldr	r5, [sp, #0]
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	4548      	cmp	r0, r9
 800112c:	4189      	sbcs	r1, r1
 800112e:	46ac      	mov	ip, r5
 8001130:	4249      	negs	r1, r1
 8001132:	4461      	add	r1, ip
 8001134:	4681      	mov	r9, r0
 8001136:	3a02      	subs	r2, #2
 8001138:	1864      	adds	r4, r4, r1
 800113a:	e7c7      	b.n	80010cc <__aeabi_ddiv+0x590>
 800113c:	2480      	movs	r4, #128	@ 0x80
 800113e:	465b      	mov	r3, fp
 8001140:	0324      	lsls	r4, r4, #12
 8001142:	431c      	orrs	r4, r3
 8001144:	0324      	lsls	r4, r4, #12
 8001146:	4690      	mov	r8, r2
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <__aeabi_ddiv+0x620>)
 800114a:	0b24      	lsrs	r4, r4, #12
 800114c:	e556      	b.n	8000bfc <__aeabi_ddiv+0xc0>
 800114e:	4599      	cmp	r9, r3
 8001150:	d3e8      	bcc.n	8001124 <__aeabi_ddiv+0x5e8>
 8001152:	000a      	movs	r2, r1
 8001154:	e7bd      	b.n	80010d2 <__aeabi_ddiv+0x596>
 8001156:	2300      	movs	r3, #0
 8001158:	e708      	b.n	8000f6c <__aeabi_ddiv+0x430>
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	000007ff 	.word	0x000007ff
 8001160:	0000043e 	.word	0x0000043e
 8001164:	0000041e 	.word	0x0000041e
 8001168:	000003ff 	.word	0x000003ff
 800116c:	fffffc02 	.word	0xfffffc02

08001170 <__aeabi_dmul>:
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	4657      	mov	r7, sl
 8001174:	46de      	mov	lr, fp
 8001176:	464e      	mov	r6, r9
 8001178:	4645      	mov	r5, r8
 800117a:	b5e0      	push	{r5, r6, r7, lr}
 800117c:	001f      	movs	r7, r3
 800117e:	030b      	lsls	r3, r1, #12
 8001180:	0b1b      	lsrs	r3, r3, #12
 8001182:	0016      	movs	r6, r2
 8001184:	469a      	mov	sl, r3
 8001186:	0fca      	lsrs	r2, r1, #31
 8001188:	004b      	lsls	r3, r1, #1
 800118a:	0004      	movs	r4, r0
 800118c:	4693      	mov	fp, r2
 800118e:	b087      	sub	sp, #28
 8001190:	0d5b      	lsrs	r3, r3, #21
 8001192:	d100      	bne.n	8001196 <__aeabi_dmul+0x26>
 8001194:	e0d5      	b.n	8001342 <__aeabi_dmul+0x1d2>
 8001196:	4abb      	ldr	r2, [pc, #748]	@ (8001484 <__aeabi_dmul+0x314>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d100      	bne.n	800119e <__aeabi_dmul+0x2e>
 800119c:	e0f8      	b.n	8001390 <__aeabi_dmul+0x220>
 800119e:	4651      	mov	r1, sl
 80011a0:	0f42      	lsrs	r2, r0, #29
 80011a2:	00c9      	lsls	r1, r1, #3
 80011a4:	430a      	orrs	r2, r1
 80011a6:	2180      	movs	r1, #128	@ 0x80
 80011a8:	0409      	lsls	r1, r1, #16
 80011aa:	4311      	orrs	r1, r2
 80011ac:	00c2      	lsls	r2, r0, #3
 80011ae:	4691      	mov	r9, r2
 80011b0:	4ab5      	ldr	r2, [pc, #724]	@ (8001488 <__aeabi_dmul+0x318>)
 80011b2:	468a      	mov	sl, r1
 80011b4:	189d      	adds	r5, r3, r2
 80011b6:	2300      	movs	r3, #0
 80011b8:	4698      	mov	r8, r3
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	033c      	lsls	r4, r7, #12
 80011be:	007b      	lsls	r3, r7, #1
 80011c0:	0ffa      	lsrs	r2, r7, #31
 80011c2:	0030      	movs	r0, r6
 80011c4:	0b24      	lsrs	r4, r4, #12
 80011c6:	0d5b      	lsrs	r3, r3, #21
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	d100      	bne.n	80011ce <__aeabi_dmul+0x5e>
 80011cc:	e096      	b.n	80012fc <__aeabi_dmul+0x18c>
 80011ce:	4aad      	ldr	r2, [pc, #692]	@ (8001484 <__aeabi_dmul+0x314>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d031      	beq.n	8001238 <__aeabi_dmul+0xc8>
 80011d4:	0f72      	lsrs	r2, r6, #29
 80011d6:	00e4      	lsls	r4, r4, #3
 80011d8:	4322      	orrs	r2, r4
 80011da:	2480      	movs	r4, #128	@ 0x80
 80011dc:	0424      	lsls	r4, r4, #16
 80011de:	4314      	orrs	r4, r2
 80011e0:	4aa9      	ldr	r2, [pc, #676]	@ (8001488 <__aeabi_dmul+0x318>)
 80011e2:	00f0      	lsls	r0, r6, #3
 80011e4:	4694      	mov	ip, r2
 80011e6:	4463      	add	r3, ip
 80011e8:	195b      	adds	r3, r3, r5
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	9201      	str	r2, [sp, #4]
 80011ee:	4642      	mov	r2, r8
 80011f0:	2600      	movs	r6, #0
 80011f2:	2a0a      	cmp	r2, #10
 80011f4:	dc42      	bgt.n	800127c <__aeabi_dmul+0x10c>
 80011f6:	465a      	mov	r2, fp
 80011f8:	9900      	ldr	r1, [sp, #0]
 80011fa:	404a      	eors	r2, r1
 80011fc:	4693      	mov	fp, r2
 80011fe:	4642      	mov	r2, r8
 8001200:	2a02      	cmp	r2, #2
 8001202:	dc32      	bgt.n	800126a <__aeabi_dmul+0xfa>
 8001204:	3a01      	subs	r2, #1
 8001206:	2a01      	cmp	r2, #1
 8001208:	d900      	bls.n	800120c <__aeabi_dmul+0x9c>
 800120a:	e149      	b.n	80014a0 <__aeabi_dmul+0x330>
 800120c:	2e02      	cmp	r6, #2
 800120e:	d100      	bne.n	8001212 <__aeabi_dmul+0xa2>
 8001210:	e0ca      	b.n	80013a8 <__aeabi_dmul+0x238>
 8001212:	2e01      	cmp	r6, #1
 8001214:	d13d      	bne.n	8001292 <__aeabi_dmul+0x122>
 8001216:	2300      	movs	r3, #0
 8001218:	2400      	movs	r4, #0
 800121a:	2200      	movs	r2, #0
 800121c:	0010      	movs	r0, r2
 800121e:	465a      	mov	r2, fp
 8001220:	051b      	lsls	r3, r3, #20
 8001222:	4323      	orrs	r3, r4
 8001224:	07d2      	lsls	r2, r2, #31
 8001226:	4313      	orrs	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	b007      	add	sp, #28
 800122c:	bcf0      	pop	{r4, r5, r6, r7}
 800122e:	46bb      	mov	fp, r7
 8001230:	46b2      	mov	sl, r6
 8001232:	46a9      	mov	r9, r5
 8001234:	46a0      	mov	r8, r4
 8001236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001238:	4b92      	ldr	r3, [pc, #584]	@ (8001484 <__aeabi_dmul+0x314>)
 800123a:	4326      	orrs	r6, r4
 800123c:	18eb      	adds	r3, r5, r3
 800123e:	2e00      	cmp	r6, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_dmul+0xd4>
 8001242:	e0bb      	b.n	80013bc <__aeabi_dmul+0x24c>
 8001244:	2203      	movs	r2, #3
 8001246:	4641      	mov	r1, r8
 8001248:	4311      	orrs	r1, r2
 800124a:	465a      	mov	r2, fp
 800124c:	4688      	mov	r8, r1
 800124e:	9900      	ldr	r1, [sp, #0]
 8001250:	404a      	eors	r2, r1
 8001252:	2180      	movs	r1, #128	@ 0x80
 8001254:	0109      	lsls	r1, r1, #4
 8001256:	468c      	mov	ip, r1
 8001258:	0029      	movs	r1, r5
 800125a:	4461      	add	r1, ip
 800125c:	9101      	str	r1, [sp, #4]
 800125e:	4641      	mov	r1, r8
 8001260:	290a      	cmp	r1, #10
 8001262:	dd00      	ble.n	8001266 <__aeabi_dmul+0xf6>
 8001264:	e233      	b.n	80016ce <__aeabi_dmul+0x55e>
 8001266:	4693      	mov	fp, r2
 8001268:	2603      	movs	r6, #3
 800126a:	4642      	mov	r2, r8
 800126c:	2701      	movs	r7, #1
 800126e:	4097      	lsls	r7, r2
 8001270:	21a6      	movs	r1, #166	@ 0xa6
 8001272:	003a      	movs	r2, r7
 8001274:	00c9      	lsls	r1, r1, #3
 8001276:	400a      	ands	r2, r1
 8001278:	420f      	tst	r7, r1
 800127a:	d031      	beq.n	80012e0 <__aeabi_dmul+0x170>
 800127c:	9e02      	ldr	r6, [sp, #8]
 800127e:	2e02      	cmp	r6, #2
 8001280:	d100      	bne.n	8001284 <__aeabi_dmul+0x114>
 8001282:	e235      	b.n	80016f0 <__aeabi_dmul+0x580>
 8001284:	2e03      	cmp	r6, #3
 8001286:	d100      	bne.n	800128a <__aeabi_dmul+0x11a>
 8001288:	e1d2      	b.n	8001630 <__aeabi_dmul+0x4c0>
 800128a:	4654      	mov	r4, sl
 800128c:	4648      	mov	r0, r9
 800128e:	2e01      	cmp	r6, #1
 8001290:	d0c1      	beq.n	8001216 <__aeabi_dmul+0xa6>
 8001292:	9a01      	ldr	r2, [sp, #4]
 8001294:	4b7d      	ldr	r3, [pc, #500]	@ (800148c <__aeabi_dmul+0x31c>)
 8001296:	4694      	mov	ip, r2
 8001298:	4463      	add	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_dmul+0x130>
 800129e:	e0c0      	b.n	8001422 <__aeabi_dmul+0x2b2>
 80012a0:	0742      	lsls	r2, r0, #29
 80012a2:	d009      	beq.n	80012b8 <__aeabi_dmul+0x148>
 80012a4:	220f      	movs	r2, #15
 80012a6:	4002      	ands	r2, r0
 80012a8:	2a04      	cmp	r2, #4
 80012aa:	d005      	beq.n	80012b8 <__aeabi_dmul+0x148>
 80012ac:	1d02      	adds	r2, r0, #4
 80012ae:	4282      	cmp	r2, r0
 80012b0:	4180      	sbcs	r0, r0
 80012b2:	4240      	negs	r0, r0
 80012b4:	1824      	adds	r4, r4, r0
 80012b6:	0010      	movs	r0, r2
 80012b8:	01e2      	lsls	r2, r4, #7
 80012ba:	d506      	bpl.n	80012ca <__aeabi_dmul+0x15a>
 80012bc:	4b74      	ldr	r3, [pc, #464]	@ (8001490 <__aeabi_dmul+0x320>)
 80012be:	9a01      	ldr	r2, [sp, #4]
 80012c0:	401c      	ands	r4, r3
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	4694      	mov	ip, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4463      	add	r3, ip
 80012ca:	4a72      	ldr	r2, [pc, #456]	@ (8001494 <__aeabi_dmul+0x324>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	dc6b      	bgt.n	80013a8 <__aeabi_dmul+0x238>
 80012d0:	0762      	lsls	r2, r4, #29
 80012d2:	08c0      	lsrs	r0, r0, #3
 80012d4:	0264      	lsls	r4, r4, #9
 80012d6:	055b      	lsls	r3, r3, #21
 80012d8:	4302      	orrs	r2, r0
 80012da:	0b24      	lsrs	r4, r4, #12
 80012dc:	0d5b      	lsrs	r3, r3, #21
 80012de:	e79d      	b.n	800121c <__aeabi_dmul+0xac>
 80012e0:	2190      	movs	r1, #144	@ 0x90
 80012e2:	0089      	lsls	r1, r1, #2
 80012e4:	420f      	tst	r7, r1
 80012e6:	d163      	bne.n	80013b0 <__aeabi_dmul+0x240>
 80012e8:	2288      	movs	r2, #136	@ 0x88
 80012ea:	423a      	tst	r2, r7
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dmul+0x180>
 80012ee:	e0d7      	b.n	80014a0 <__aeabi_dmul+0x330>
 80012f0:	9b00      	ldr	r3, [sp, #0]
 80012f2:	46a2      	mov	sl, r4
 80012f4:	469b      	mov	fp, r3
 80012f6:	4681      	mov	r9, r0
 80012f8:	9602      	str	r6, [sp, #8]
 80012fa:	e7bf      	b.n	800127c <__aeabi_dmul+0x10c>
 80012fc:	0023      	movs	r3, r4
 80012fe:	4333      	orrs	r3, r6
 8001300:	d100      	bne.n	8001304 <__aeabi_dmul+0x194>
 8001302:	e07f      	b.n	8001404 <__aeabi_dmul+0x294>
 8001304:	2c00      	cmp	r4, #0
 8001306:	d100      	bne.n	800130a <__aeabi_dmul+0x19a>
 8001308:	e1ad      	b.n	8001666 <__aeabi_dmul+0x4f6>
 800130a:	0020      	movs	r0, r4
 800130c:	f000 fe8e 	bl	800202c <__clzsi2>
 8001310:	0002      	movs	r2, r0
 8001312:	0003      	movs	r3, r0
 8001314:	3a0b      	subs	r2, #11
 8001316:	201d      	movs	r0, #29
 8001318:	0019      	movs	r1, r3
 800131a:	1a82      	subs	r2, r0, r2
 800131c:	0030      	movs	r0, r6
 800131e:	3908      	subs	r1, #8
 8001320:	40d0      	lsrs	r0, r2
 8001322:	408c      	lsls	r4, r1
 8001324:	4304      	orrs	r4, r0
 8001326:	0030      	movs	r0, r6
 8001328:	4088      	lsls	r0, r1
 800132a:	4a5b      	ldr	r2, [pc, #364]	@ (8001498 <__aeabi_dmul+0x328>)
 800132c:	1aeb      	subs	r3, r5, r3
 800132e:	4694      	mov	ip, r2
 8001330:	4463      	add	r3, ip
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	9201      	str	r2, [sp, #4]
 8001336:	4642      	mov	r2, r8
 8001338:	2600      	movs	r6, #0
 800133a:	2a0a      	cmp	r2, #10
 800133c:	dc00      	bgt.n	8001340 <__aeabi_dmul+0x1d0>
 800133e:	e75a      	b.n	80011f6 <__aeabi_dmul+0x86>
 8001340:	e79c      	b.n	800127c <__aeabi_dmul+0x10c>
 8001342:	4653      	mov	r3, sl
 8001344:	4303      	orrs	r3, r0
 8001346:	4699      	mov	r9, r3
 8001348:	d054      	beq.n	80013f4 <__aeabi_dmul+0x284>
 800134a:	4653      	mov	r3, sl
 800134c:	2b00      	cmp	r3, #0
 800134e:	d100      	bne.n	8001352 <__aeabi_dmul+0x1e2>
 8001350:	e177      	b.n	8001642 <__aeabi_dmul+0x4d2>
 8001352:	4650      	mov	r0, sl
 8001354:	f000 fe6a 	bl	800202c <__clzsi2>
 8001358:	230b      	movs	r3, #11
 800135a:	425b      	negs	r3, r3
 800135c:	469c      	mov	ip, r3
 800135e:	0002      	movs	r2, r0
 8001360:	4484      	add	ip, r0
 8001362:	0011      	movs	r1, r2
 8001364:	4650      	mov	r0, sl
 8001366:	3908      	subs	r1, #8
 8001368:	4088      	lsls	r0, r1
 800136a:	231d      	movs	r3, #29
 800136c:	4680      	mov	r8, r0
 800136e:	4660      	mov	r0, ip
 8001370:	1a1b      	subs	r3, r3, r0
 8001372:	0020      	movs	r0, r4
 8001374:	40d8      	lsrs	r0, r3
 8001376:	0003      	movs	r3, r0
 8001378:	4640      	mov	r0, r8
 800137a:	4303      	orrs	r3, r0
 800137c:	469a      	mov	sl, r3
 800137e:	0023      	movs	r3, r4
 8001380:	408b      	lsls	r3, r1
 8001382:	4699      	mov	r9, r3
 8001384:	2300      	movs	r3, #0
 8001386:	4d44      	ldr	r5, [pc, #272]	@ (8001498 <__aeabi_dmul+0x328>)
 8001388:	4698      	mov	r8, r3
 800138a:	1aad      	subs	r5, r5, r2
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	e715      	b.n	80011bc <__aeabi_dmul+0x4c>
 8001390:	4652      	mov	r2, sl
 8001392:	4302      	orrs	r2, r0
 8001394:	4691      	mov	r9, r2
 8001396:	d126      	bne.n	80013e6 <__aeabi_dmul+0x276>
 8001398:	2200      	movs	r2, #0
 800139a:	001d      	movs	r5, r3
 800139c:	2302      	movs	r3, #2
 800139e:	4692      	mov	sl, r2
 80013a0:	3208      	adds	r2, #8
 80013a2:	4690      	mov	r8, r2
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	e709      	b.n	80011bc <__aeabi_dmul+0x4c>
 80013a8:	2400      	movs	r4, #0
 80013aa:	2200      	movs	r2, #0
 80013ac:	4b35      	ldr	r3, [pc, #212]	@ (8001484 <__aeabi_dmul+0x314>)
 80013ae:	e735      	b.n	800121c <__aeabi_dmul+0xac>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2480      	movs	r4, #128	@ 0x80
 80013b4:	469b      	mov	fp, r3
 80013b6:	0324      	lsls	r4, r4, #12
 80013b8:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <__aeabi_dmul+0x314>)
 80013ba:	e72f      	b.n	800121c <__aeabi_dmul+0xac>
 80013bc:	2202      	movs	r2, #2
 80013be:	4641      	mov	r1, r8
 80013c0:	4311      	orrs	r1, r2
 80013c2:	2280      	movs	r2, #128	@ 0x80
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	4694      	mov	ip, r2
 80013c8:	002a      	movs	r2, r5
 80013ca:	4462      	add	r2, ip
 80013cc:	4688      	mov	r8, r1
 80013ce:	9201      	str	r2, [sp, #4]
 80013d0:	290a      	cmp	r1, #10
 80013d2:	dd00      	ble.n	80013d6 <__aeabi_dmul+0x266>
 80013d4:	e752      	b.n	800127c <__aeabi_dmul+0x10c>
 80013d6:	465a      	mov	r2, fp
 80013d8:	2000      	movs	r0, #0
 80013da:	9900      	ldr	r1, [sp, #0]
 80013dc:	0004      	movs	r4, r0
 80013de:	404a      	eors	r2, r1
 80013e0:	4693      	mov	fp, r2
 80013e2:	2602      	movs	r6, #2
 80013e4:	e70b      	b.n	80011fe <__aeabi_dmul+0x8e>
 80013e6:	220c      	movs	r2, #12
 80013e8:	001d      	movs	r5, r3
 80013ea:	2303      	movs	r3, #3
 80013ec:	4681      	mov	r9, r0
 80013ee:	4690      	mov	r8, r2
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	e6e3      	b.n	80011bc <__aeabi_dmul+0x4c>
 80013f4:	2300      	movs	r3, #0
 80013f6:	469a      	mov	sl, r3
 80013f8:	3304      	adds	r3, #4
 80013fa:	4698      	mov	r8, r3
 80013fc:	3b03      	subs	r3, #3
 80013fe:	2500      	movs	r5, #0
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	e6db      	b.n	80011bc <__aeabi_dmul+0x4c>
 8001404:	4642      	mov	r2, r8
 8001406:	3301      	adds	r3, #1
 8001408:	431a      	orrs	r2, r3
 800140a:	002b      	movs	r3, r5
 800140c:	4690      	mov	r8, r2
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	9201      	str	r2, [sp, #4]
 8001412:	4642      	mov	r2, r8
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2601      	movs	r6, #1
 800141a:	2a0a      	cmp	r2, #10
 800141c:	dc00      	bgt.n	8001420 <__aeabi_dmul+0x2b0>
 800141e:	e6ea      	b.n	80011f6 <__aeabi_dmul+0x86>
 8001420:	e72c      	b.n	800127c <__aeabi_dmul+0x10c>
 8001422:	2201      	movs	r2, #1
 8001424:	1ad2      	subs	r2, r2, r3
 8001426:	2a38      	cmp	r2, #56	@ 0x38
 8001428:	dd00      	ble.n	800142c <__aeabi_dmul+0x2bc>
 800142a:	e6f4      	b.n	8001216 <__aeabi_dmul+0xa6>
 800142c:	2a1f      	cmp	r2, #31
 800142e:	dc00      	bgt.n	8001432 <__aeabi_dmul+0x2c2>
 8001430:	e12a      	b.n	8001688 <__aeabi_dmul+0x518>
 8001432:	211f      	movs	r1, #31
 8001434:	4249      	negs	r1, r1
 8001436:	1acb      	subs	r3, r1, r3
 8001438:	0021      	movs	r1, r4
 800143a:	40d9      	lsrs	r1, r3
 800143c:	000b      	movs	r3, r1
 800143e:	2a20      	cmp	r2, #32
 8001440:	d005      	beq.n	800144e <__aeabi_dmul+0x2de>
 8001442:	4a16      	ldr	r2, [pc, #88]	@ (800149c <__aeabi_dmul+0x32c>)
 8001444:	9d01      	ldr	r5, [sp, #4]
 8001446:	4694      	mov	ip, r2
 8001448:	4465      	add	r5, ip
 800144a:	40ac      	lsls	r4, r5
 800144c:	4320      	orrs	r0, r4
 800144e:	1e42      	subs	r2, r0, #1
 8001450:	4190      	sbcs	r0, r2
 8001452:	4318      	orrs	r0, r3
 8001454:	2307      	movs	r3, #7
 8001456:	0019      	movs	r1, r3
 8001458:	2400      	movs	r4, #0
 800145a:	4001      	ands	r1, r0
 800145c:	4203      	tst	r3, r0
 800145e:	d00c      	beq.n	800147a <__aeabi_dmul+0x30a>
 8001460:	230f      	movs	r3, #15
 8001462:	4003      	ands	r3, r0
 8001464:	2b04      	cmp	r3, #4
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x2fa>
 8001468:	e140      	b.n	80016ec <__aeabi_dmul+0x57c>
 800146a:	1d03      	adds	r3, r0, #4
 800146c:	4283      	cmp	r3, r0
 800146e:	41a4      	sbcs	r4, r4
 8001470:	0018      	movs	r0, r3
 8001472:	4264      	negs	r4, r4
 8001474:	0761      	lsls	r1, r4, #29
 8001476:	0264      	lsls	r4, r4, #9
 8001478:	0b24      	lsrs	r4, r4, #12
 800147a:	08c2      	lsrs	r2, r0, #3
 800147c:	2300      	movs	r3, #0
 800147e:	430a      	orrs	r2, r1
 8001480:	e6cc      	b.n	800121c <__aeabi_dmul+0xac>
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	000007ff 	.word	0x000007ff
 8001488:	fffffc01 	.word	0xfffffc01
 800148c:	000003ff 	.word	0x000003ff
 8001490:	feffffff 	.word	0xfeffffff
 8001494:	000007fe 	.word	0x000007fe
 8001498:	fffffc0d 	.word	0xfffffc0d
 800149c:	0000043e 	.word	0x0000043e
 80014a0:	4649      	mov	r1, r9
 80014a2:	464a      	mov	r2, r9
 80014a4:	0409      	lsls	r1, r1, #16
 80014a6:	0c09      	lsrs	r1, r1, #16
 80014a8:	000d      	movs	r5, r1
 80014aa:	0c16      	lsrs	r6, r2, #16
 80014ac:	0c02      	lsrs	r2, r0, #16
 80014ae:	0400      	lsls	r0, r0, #16
 80014b0:	0c00      	lsrs	r0, r0, #16
 80014b2:	4345      	muls	r5, r0
 80014b4:	46ac      	mov	ip, r5
 80014b6:	0005      	movs	r5, r0
 80014b8:	4375      	muls	r5, r6
 80014ba:	46a8      	mov	r8, r5
 80014bc:	0015      	movs	r5, r2
 80014be:	000f      	movs	r7, r1
 80014c0:	4375      	muls	r5, r6
 80014c2:	9200      	str	r2, [sp, #0]
 80014c4:	9502      	str	r5, [sp, #8]
 80014c6:	002a      	movs	r2, r5
 80014c8:	9d00      	ldr	r5, [sp, #0]
 80014ca:	436f      	muls	r7, r5
 80014cc:	4665      	mov	r5, ip
 80014ce:	0c2d      	lsrs	r5, r5, #16
 80014d0:	46a9      	mov	r9, r5
 80014d2:	4447      	add	r7, r8
 80014d4:	444f      	add	r7, r9
 80014d6:	45b8      	cmp	r8, r7
 80014d8:	d905      	bls.n	80014e6 <__aeabi_dmul+0x376>
 80014da:	0015      	movs	r5, r2
 80014dc:	2280      	movs	r2, #128	@ 0x80
 80014de:	0252      	lsls	r2, r2, #9
 80014e0:	4690      	mov	r8, r2
 80014e2:	4445      	add	r5, r8
 80014e4:	9502      	str	r5, [sp, #8]
 80014e6:	0c3d      	lsrs	r5, r7, #16
 80014e8:	9503      	str	r5, [sp, #12]
 80014ea:	4665      	mov	r5, ip
 80014ec:	042d      	lsls	r5, r5, #16
 80014ee:	043f      	lsls	r7, r7, #16
 80014f0:	0c2d      	lsrs	r5, r5, #16
 80014f2:	46ac      	mov	ip, r5
 80014f4:	003d      	movs	r5, r7
 80014f6:	4465      	add	r5, ip
 80014f8:	9504      	str	r5, [sp, #16]
 80014fa:	0c25      	lsrs	r5, r4, #16
 80014fc:	0424      	lsls	r4, r4, #16
 80014fe:	0c24      	lsrs	r4, r4, #16
 8001500:	46ac      	mov	ip, r5
 8001502:	0025      	movs	r5, r4
 8001504:	4375      	muls	r5, r6
 8001506:	46a8      	mov	r8, r5
 8001508:	4665      	mov	r5, ip
 800150a:	000f      	movs	r7, r1
 800150c:	4369      	muls	r1, r5
 800150e:	4441      	add	r1, r8
 8001510:	4689      	mov	r9, r1
 8001512:	4367      	muls	r7, r4
 8001514:	0c39      	lsrs	r1, r7, #16
 8001516:	4449      	add	r1, r9
 8001518:	436e      	muls	r6, r5
 800151a:	4588      	cmp	r8, r1
 800151c:	d903      	bls.n	8001526 <__aeabi_dmul+0x3b6>
 800151e:	2280      	movs	r2, #128	@ 0x80
 8001520:	0252      	lsls	r2, r2, #9
 8001522:	4690      	mov	r8, r2
 8001524:	4446      	add	r6, r8
 8001526:	0c0d      	lsrs	r5, r1, #16
 8001528:	46a8      	mov	r8, r5
 800152a:	0035      	movs	r5, r6
 800152c:	4445      	add	r5, r8
 800152e:	9505      	str	r5, [sp, #20]
 8001530:	9d03      	ldr	r5, [sp, #12]
 8001532:	043f      	lsls	r7, r7, #16
 8001534:	46a8      	mov	r8, r5
 8001536:	0c3f      	lsrs	r7, r7, #16
 8001538:	0409      	lsls	r1, r1, #16
 800153a:	19c9      	adds	r1, r1, r7
 800153c:	4488      	add	r8, r1
 800153e:	4645      	mov	r5, r8
 8001540:	9503      	str	r5, [sp, #12]
 8001542:	4655      	mov	r5, sl
 8001544:	042e      	lsls	r6, r5, #16
 8001546:	0c36      	lsrs	r6, r6, #16
 8001548:	0c2f      	lsrs	r7, r5, #16
 800154a:	0035      	movs	r5, r6
 800154c:	4345      	muls	r5, r0
 800154e:	4378      	muls	r0, r7
 8001550:	4681      	mov	r9, r0
 8001552:	0038      	movs	r0, r7
 8001554:	46a8      	mov	r8, r5
 8001556:	0c2d      	lsrs	r5, r5, #16
 8001558:	46aa      	mov	sl, r5
 800155a:	9a00      	ldr	r2, [sp, #0]
 800155c:	4350      	muls	r0, r2
 800155e:	4372      	muls	r2, r6
 8001560:	444a      	add	r2, r9
 8001562:	4452      	add	r2, sl
 8001564:	4591      	cmp	r9, r2
 8001566:	d903      	bls.n	8001570 <__aeabi_dmul+0x400>
 8001568:	2580      	movs	r5, #128	@ 0x80
 800156a:	026d      	lsls	r5, r5, #9
 800156c:	46a9      	mov	r9, r5
 800156e:	4448      	add	r0, r9
 8001570:	0c15      	lsrs	r5, r2, #16
 8001572:	46a9      	mov	r9, r5
 8001574:	4645      	mov	r5, r8
 8001576:	042d      	lsls	r5, r5, #16
 8001578:	0c2d      	lsrs	r5, r5, #16
 800157a:	46a8      	mov	r8, r5
 800157c:	4665      	mov	r5, ip
 800157e:	437d      	muls	r5, r7
 8001580:	0412      	lsls	r2, r2, #16
 8001582:	4448      	add	r0, r9
 8001584:	4490      	add	r8, r2
 8001586:	46a9      	mov	r9, r5
 8001588:	0032      	movs	r2, r6
 800158a:	4665      	mov	r5, ip
 800158c:	4362      	muls	r2, r4
 800158e:	436e      	muls	r6, r5
 8001590:	437c      	muls	r4, r7
 8001592:	0c17      	lsrs	r7, r2, #16
 8001594:	1936      	adds	r6, r6, r4
 8001596:	19bf      	adds	r7, r7, r6
 8001598:	42bc      	cmp	r4, r7
 800159a:	d903      	bls.n	80015a4 <__aeabi_dmul+0x434>
 800159c:	2480      	movs	r4, #128	@ 0x80
 800159e:	0264      	lsls	r4, r4, #9
 80015a0:	46a4      	mov	ip, r4
 80015a2:	44e1      	add	r9, ip
 80015a4:	9c02      	ldr	r4, [sp, #8]
 80015a6:	9e03      	ldr	r6, [sp, #12]
 80015a8:	46a4      	mov	ip, r4
 80015aa:	9d05      	ldr	r5, [sp, #20]
 80015ac:	4466      	add	r6, ip
 80015ae:	428e      	cmp	r6, r1
 80015b0:	4189      	sbcs	r1, r1
 80015b2:	46ac      	mov	ip, r5
 80015b4:	0412      	lsls	r2, r2, #16
 80015b6:	043c      	lsls	r4, r7, #16
 80015b8:	0c12      	lsrs	r2, r2, #16
 80015ba:	18a2      	adds	r2, r4, r2
 80015bc:	4462      	add	r2, ip
 80015be:	4249      	negs	r1, r1
 80015c0:	1854      	adds	r4, r2, r1
 80015c2:	4446      	add	r6, r8
 80015c4:	46a4      	mov	ip, r4
 80015c6:	4546      	cmp	r6, r8
 80015c8:	41a4      	sbcs	r4, r4
 80015ca:	4682      	mov	sl, r0
 80015cc:	4264      	negs	r4, r4
 80015ce:	46a0      	mov	r8, r4
 80015d0:	42aa      	cmp	r2, r5
 80015d2:	4192      	sbcs	r2, r2
 80015d4:	458c      	cmp	ip, r1
 80015d6:	4189      	sbcs	r1, r1
 80015d8:	44e2      	add	sl, ip
 80015da:	44d0      	add	r8, sl
 80015dc:	4249      	negs	r1, r1
 80015de:	4252      	negs	r2, r2
 80015e0:	430a      	orrs	r2, r1
 80015e2:	45a0      	cmp	r8, r4
 80015e4:	41a4      	sbcs	r4, r4
 80015e6:	4582      	cmp	sl, r0
 80015e8:	4189      	sbcs	r1, r1
 80015ea:	4264      	negs	r4, r4
 80015ec:	4249      	negs	r1, r1
 80015ee:	430c      	orrs	r4, r1
 80015f0:	4641      	mov	r1, r8
 80015f2:	0c3f      	lsrs	r7, r7, #16
 80015f4:	19d2      	adds	r2, r2, r7
 80015f6:	1912      	adds	r2, r2, r4
 80015f8:	0dcc      	lsrs	r4, r1, #23
 80015fa:	9904      	ldr	r1, [sp, #16]
 80015fc:	0270      	lsls	r0, r6, #9
 80015fe:	4308      	orrs	r0, r1
 8001600:	1e41      	subs	r1, r0, #1
 8001602:	4188      	sbcs	r0, r1
 8001604:	4641      	mov	r1, r8
 8001606:	444a      	add	r2, r9
 8001608:	0df6      	lsrs	r6, r6, #23
 800160a:	0252      	lsls	r2, r2, #9
 800160c:	4330      	orrs	r0, r6
 800160e:	0249      	lsls	r1, r1, #9
 8001610:	4314      	orrs	r4, r2
 8001612:	4308      	orrs	r0, r1
 8001614:	01d2      	lsls	r2, r2, #7
 8001616:	d535      	bpl.n	8001684 <__aeabi_dmul+0x514>
 8001618:	2201      	movs	r2, #1
 800161a:	0843      	lsrs	r3, r0, #1
 800161c:	4002      	ands	r2, r0
 800161e:	4313      	orrs	r3, r2
 8001620:	07e0      	lsls	r0, r4, #31
 8001622:	4318      	orrs	r0, r3
 8001624:	0864      	lsrs	r4, r4, #1
 8001626:	e634      	b.n	8001292 <__aeabi_dmul+0x122>
 8001628:	9b00      	ldr	r3, [sp, #0]
 800162a:	46a2      	mov	sl, r4
 800162c:	469b      	mov	fp, r3
 800162e:	4681      	mov	r9, r0
 8001630:	2480      	movs	r4, #128	@ 0x80
 8001632:	4653      	mov	r3, sl
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	431c      	orrs	r4, r3
 8001638:	0324      	lsls	r4, r4, #12
 800163a:	464a      	mov	r2, r9
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <__aeabi_dmul+0x588>)
 800163e:	0b24      	lsrs	r4, r4, #12
 8001640:	e5ec      	b.n	800121c <__aeabi_dmul+0xac>
 8001642:	f000 fcf3 	bl	800202c <__clzsi2>
 8001646:	2315      	movs	r3, #21
 8001648:	469c      	mov	ip, r3
 800164a:	4484      	add	ip, r0
 800164c:	0002      	movs	r2, r0
 800164e:	4663      	mov	r3, ip
 8001650:	3220      	adds	r2, #32
 8001652:	2b1c      	cmp	r3, #28
 8001654:	dc00      	bgt.n	8001658 <__aeabi_dmul+0x4e8>
 8001656:	e684      	b.n	8001362 <__aeabi_dmul+0x1f2>
 8001658:	2300      	movs	r3, #0
 800165a:	4699      	mov	r9, r3
 800165c:	0023      	movs	r3, r4
 800165e:	3808      	subs	r0, #8
 8001660:	4083      	lsls	r3, r0
 8001662:	469a      	mov	sl, r3
 8001664:	e68e      	b.n	8001384 <__aeabi_dmul+0x214>
 8001666:	f000 fce1 	bl	800202c <__clzsi2>
 800166a:	0002      	movs	r2, r0
 800166c:	0003      	movs	r3, r0
 800166e:	3215      	adds	r2, #21
 8001670:	3320      	adds	r3, #32
 8001672:	2a1c      	cmp	r2, #28
 8001674:	dc00      	bgt.n	8001678 <__aeabi_dmul+0x508>
 8001676:	e64e      	b.n	8001316 <__aeabi_dmul+0x1a6>
 8001678:	0002      	movs	r2, r0
 800167a:	0034      	movs	r4, r6
 800167c:	3a08      	subs	r2, #8
 800167e:	2000      	movs	r0, #0
 8001680:	4094      	lsls	r4, r2
 8001682:	e652      	b.n	800132a <__aeabi_dmul+0x1ba>
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	e604      	b.n	8001292 <__aeabi_dmul+0x122>
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <__aeabi_dmul+0x58c>)
 800168a:	0021      	movs	r1, r4
 800168c:	469c      	mov	ip, r3
 800168e:	0003      	movs	r3, r0
 8001690:	9d01      	ldr	r5, [sp, #4]
 8001692:	40d3      	lsrs	r3, r2
 8001694:	4465      	add	r5, ip
 8001696:	40a9      	lsls	r1, r5
 8001698:	4319      	orrs	r1, r3
 800169a:	0003      	movs	r3, r0
 800169c:	40ab      	lsls	r3, r5
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	4183      	sbcs	r3, r0
 80016a2:	4319      	orrs	r1, r3
 80016a4:	0008      	movs	r0, r1
 80016a6:	40d4      	lsrs	r4, r2
 80016a8:	074b      	lsls	r3, r1, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_dmul+0x550>
 80016ac:	230f      	movs	r3, #15
 80016ae:	400b      	ands	r3, r1
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_dmul+0x550>
 80016b4:	1d0b      	adds	r3, r1, #4
 80016b6:	428b      	cmp	r3, r1
 80016b8:	4180      	sbcs	r0, r0
 80016ba:	4240      	negs	r0, r0
 80016bc:	1824      	adds	r4, r4, r0
 80016be:	0018      	movs	r0, r3
 80016c0:	0223      	lsls	r3, r4, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dmul+0x556>
 80016c4:	e6d6      	b.n	8001474 <__aeabi_dmul+0x304>
 80016c6:	2301      	movs	r3, #1
 80016c8:	2400      	movs	r4, #0
 80016ca:	2200      	movs	r2, #0
 80016cc:	e5a6      	b.n	800121c <__aeabi_dmul+0xac>
 80016ce:	290f      	cmp	r1, #15
 80016d0:	d1aa      	bne.n	8001628 <__aeabi_dmul+0x4b8>
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	4652      	mov	r2, sl
 80016d6:	031b      	lsls	r3, r3, #12
 80016d8:	421a      	tst	r2, r3
 80016da:	d0a9      	beq.n	8001630 <__aeabi_dmul+0x4c0>
 80016dc:	421c      	tst	r4, r3
 80016de:	d1a7      	bne.n	8001630 <__aeabi_dmul+0x4c0>
 80016e0:	431c      	orrs	r4, r3
 80016e2:	9b00      	ldr	r3, [sp, #0]
 80016e4:	0002      	movs	r2, r0
 80016e6:	469b      	mov	fp, r3
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <__aeabi_dmul+0x588>)
 80016ea:	e597      	b.n	800121c <__aeabi_dmul+0xac>
 80016ec:	2400      	movs	r4, #0
 80016ee:	e6c1      	b.n	8001474 <__aeabi_dmul+0x304>
 80016f0:	2400      	movs	r4, #0
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <__aeabi_dmul+0x588>)
 80016f4:	0022      	movs	r2, r4
 80016f6:	e591      	b.n	800121c <__aeabi_dmul+0xac>
 80016f8:	000007ff 	.word	0x000007ff
 80016fc:	0000041e 	.word	0x0000041e

08001700 <__aeabi_dsub>:
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	464e      	mov	r6, r9
 8001704:	4645      	mov	r5, r8
 8001706:	46de      	mov	lr, fp
 8001708:	4657      	mov	r7, sl
 800170a:	b5e0      	push	{r5, r6, r7, lr}
 800170c:	b085      	sub	sp, #20
 800170e:	9000      	str	r0, [sp, #0]
 8001710:	9101      	str	r1, [sp, #4]
 8001712:	030c      	lsls	r4, r1, #12
 8001714:	004f      	lsls	r7, r1, #1
 8001716:	0fce      	lsrs	r6, r1, #31
 8001718:	0a61      	lsrs	r1, r4, #9
 800171a:	9c00      	ldr	r4, [sp, #0]
 800171c:	46b0      	mov	r8, r6
 800171e:	0f64      	lsrs	r4, r4, #29
 8001720:	430c      	orrs	r4, r1
 8001722:	9900      	ldr	r1, [sp, #0]
 8001724:	0d7f      	lsrs	r7, r7, #21
 8001726:	00c8      	lsls	r0, r1, #3
 8001728:	0011      	movs	r1, r2
 800172a:	001a      	movs	r2, r3
 800172c:	031b      	lsls	r3, r3, #12
 800172e:	469c      	mov	ip, r3
 8001730:	9100      	str	r1, [sp, #0]
 8001732:	9201      	str	r2, [sp, #4]
 8001734:	0051      	lsls	r1, r2, #1
 8001736:	0d4b      	lsrs	r3, r1, #21
 8001738:	4699      	mov	r9, r3
 800173a:	9b01      	ldr	r3, [sp, #4]
 800173c:	9d00      	ldr	r5, [sp, #0]
 800173e:	0fd9      	lsrs	r1, r3, #31
 8001740:	4663      	mov	r3, ip
 8001742:	0f6a      	lsrs	r2, r5, #29
 8001744:	0a5b      	lsrs	r3, r3, #9
 8001746:	4313      	orrs	r3, r2
 8001748:	00ea      	lsls	r2, r5, #3
 800174a:	4694      	mov	ip, r2
 800174c:	4693      	mov	fp, r2
 800174e:	4ac1      	ldr	r2, [pc, #772]	@ (8001a54 <__aeabi_dsub+0x354>)
 8001750:	9003      	str	r0, [sp, #12]
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	4591      	cmp	r9, r2
 8001756:	d100      	bne.n	800175a <__aeabi_dsub+0x5a>
 8001758:	e0cd      	b.n	80018f6 <__aeabi_dsub+0x1f6>
 800175a:	2501      	movs	r5, #1
 800175c:	4069      	eors	r1, r5
 800175e:	464d      	mov	r5, r9
 8001760:	1b7d      	subs	r5, r7, r5
 8001762:	46aa      	mov	sl, r5
 8001764:	428e      	cmp	r6, r1
 8001766:	d100      	bne.n	800176a <__aeabi_dsub+0x6a>
 8001768:	e080      	b.n	800186c <__aeabi_dsub+0x16c>
 800176a:	2d00      	cmp	r5, #0
 800176c:	dc00      	bgt.n	8001770 <__aeabi_dsub+0x70>
 800176e:	e335      	b.n	8001ddc <__aeabi_dsub+0x6dc>
 8001770:	4649      	mov	r1, r9
 8001772:	2900      	cmp	r1, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dsub+0x78>
 8001776:	e0df      	b.n	8001938 <__aeabi_dsub+0x238>
 8001778:	4297      	cmp	r7, r2
 800177a:	d100      	bne.n	800177e <__aeabi_dsub+0x7e>
 800177c:	e194      	b.n	8001aa8 <__aeabi_dsub+0x3a8>
 800177e:	4652      	mov	r2, sl
 8001780:	2501      	movs	r5, #1
 8001782:	2a38      	cmp	r2, #56	@ 0x38
 8001784:	dc19      	bgt.n	80017ba <__aeabi_dsub+0xba>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	9b02      	ldr	r3, [sp, #8]
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	4313      	orrs	r3, r2
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	4652      	mov	r2, sl
 8001792:	2a1f      	cmp	r2, #31
 8001794:	dd00      	ble.n	8001798 <__aeabi_dsub+0x98>
 8001796:	e1e3      	b.n	8001b60 <__aeabi_dsub+0x460>
 8001798:	4653      	mov	r3, sl
 800179a:	2220      	movs	r2, #32
 800179c:	4661      	mov	r1, ip
 800179e:	9d02      	ldr	r5, [sp, #8]
 80017a0:	1ad2      	subs	r2, r2, r3
 80017a2:	4095      	lsls	r5, r2
 80017a4:	40d9      	lsrs	r1, r3
 80017a6:	430d      	orrs	r5, r1
 80017a8:	4661      	mov	r1, ip
 80017aa:	4091      	lsls	r1, r2
 80017ac:	000a      	movs	r2, r1
 80017ae:	1e51      	subs	r1, r2, #1
 80017b0:	418a      	sbcs	r2, r1
 80017b2:	4315      	orrs	r5, r2
 80017b4:	9a02      	ldr	r2, [sp, #8]
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	1aa4      	subs	r4, r4, r2
 80017ba:	1b45      	subs	r5, r0, r5
 80017bc:	42a8      	cmp	r0, r5
 80017be:	4180      	sbcs	r0, r0
 80017c0:	4240      	negs	r0, r0
 80017c2:	1a24      	subs	r4, r4, r0
 80017c4:	0223      	lsls	r3, r4, #8
 80017c6:	d400      	bmi.n	80017ca <__aeabi_dsub+0xca>
 80017c8:	e13d      	b.n	8001a46 <__aeabi_dsub+0x346>
 80017ca:	0264      	lsls	r4, r4, #9
 80017cc:	0a64      	lsrs	r4, r4, #9
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0xd4>
 80017d2:	e147      	b.n	8001a64 <__aeabi_dsub+0x364>
 80017d4:	0020      	movs	r0, r4
 80017d6:	f000 fc29 	bl	800202c <__clzsi2>
 80017da:	0003      	movs	r3, r0
 80017dc:	3b08      	subs	r3, #8
 80017de:	2120      	movs	r1, #32
 80017e0:	0028      	movs	r0, r5
 80017e2:	1aca      	subs	r2, r1, r3
 80017e4:	40d0      	lsrs	r0, r2
 80017e6:	409c      	lsls	r4, r3
 80017e8:	0002      	movs	r2, r0
 80017ea:	409d      	lsls	r5, r3
 80017ec:	4322      	orrs	r2, r4
 80017ee:	429f      	cmp	r7, r3
 80017f0:	dd00      	ble.n	80017f4 <__aeabi_dsub+0xf4>
 80017f2:	e177      	b.n	8001ae4 <__aeabi_dsub+0x3e4>
 80017f4:	1bd8      	subs	r0, r3, r7
 80017f6:	3001      	adds	r0, #1
 80017f8:	1a09      	subs	r1, r1, r0
 80017fa:	002c      	movs	r4, r5
 80017fc:	408d      	lsls	r5, r1
 80017fe:	40c4      	lsrs	r4, r0
 8001800:	1e6b      	subs	r3, r5, #1
 8001802:	419d      	sbcs	r5, r3
 8001804:	0013      	movs	r3, r2
 8001806:	40c2      	lsrs	r2, r0
 8001808:	408b      	lsls	r3, r1
 800180a:	4325      	orrs	r5, r4
 800180c:	2700      	movs	r7, #0
 800180e:	0014      	movs	r4, r2
 8001810:	431d      	orrs	r5, r3
 8001812:	076b      	lsls	r3, r5, #29
 8001814:	d009      	beq.n	800182a <__aeabi_dsub+0x12a>
 8001816:	230f      	movs	r3, #15
 8001818:	402b      	ands	r3, r5
 800181a:	2b04      	cmp	r3, #4
 800181c:	d005      	beq.n	800182a <__aeabi_dsub+0x12a>
 800181e:	1d2b      	adds	r3, r5, #4
 8001820:	42ab      	cmp	r3, r5
 8001822:	41ad      	sbcs	r5, r5
 8001824:	426d      	negs	r5, r5
 8001826:	1964      	adds	r4, r4, r5
 8001828:	001d      	movs	r5, r3
 800182a:	0223      	lsls	r3, r4, #8
 800182c:	d400      	bmi.n	8001830 <__aeabi_dsub+0x130>
 800182e:	e140      	b.n	8001ab2 <__aeabi_dsub+0x3b2>
 8001830:	4a88      	ldr	r2, [pc, #544]	@ (8001a54 <__aeabi_dsub+0x354>)
 8001832:	3701      	adds	r7, #1
 8001834:	4297      	cmp	r7, r2
 8001836:	d100      	bne.n	800183a <__aeabi_dsub+0x13a>
 8001838:	e101      	b.n	8001a3e <__aeabi_dsub+0x33e>
 800183a:	2601      	movs	r6, #1
 800183c:	4643      	mov	r3, r8
 800183e:	4986      	ldr	r1, [pc, #536]	@ (8001a58 <__aeabi_dsub+0x358>)
 8001840:	08ed      	lsrs	r5, r5, #3
 8001842:	4021      	ands	r1, r4
 8001844:	074a      	lsls	r2, r1, #29
 8001846:	432a      	orrs	r2, r5
 8001848:	057c      	lsls	r4, r7, #21
 800184a:	024d      	lsls	r5, r1, #9
 800184c:	0b2d      	lsrs	r5, r5, #12
 800184e:	0d64      	lsrs	r4, r4, #21
 8001850:	401e      	ands	r6, r3
 8001852:	0524      	lsls	r4, r4, #20
 8001854:	432c      	orrs	r4, r5
 8001856:	07f6      	lsls	r6, r6, #31
 8001858:	4334      	orrs	r4, r6
 800185a:	0010      	movs	r0, r2
 800185c:	0021      	movs	r1, r4
 800185e:	b005      	add	sp, #20
 8001860:	bcf0      	pop	{r4, r5, r6, r7}
 8001862:	46bb      	mov	fp, r7
 8001864:	46b2      	mov	sl, r6
 8001866:	46a9      	mov	r9, r5
 8001868:	46a0      	mov	r8, r4
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	2d00      	cmp	r5, #0
 800186e:	dc00      	bgt.n	8001872 <__aeabi_dsub+0x172>
 8001870:	e2d0      	b.n	8001e14 <__aeabi_dsub+0x714>
 8001872:	4649      	mov	r1, r9
 8001874:	2900      	cmp	r1, #0
 8001876:	d000      	beq.n	800187a <__aeabi_dsub+0x17a>
 8001878:	e0d4      	b.n	8001a24 <__aeabi_dsub+0x324>
 800187a:	4661      	mov	r1, ip
 800187c:	9b02      	ldr	r3, [sp, #8]
 800187e:	4319      	orrs	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_dsub+0x184>
 8001882:	e12b      	b.n	8001adc <__aeabi_dsub+0x3dc>
 8001884:	1e69      	subs	r1, r5, #1
 8001886:	2d01      	cmp	r5, #1
 8001888:	d100      	bne.n	800188c <__aeabi_dsub+0x18c>
 800188a:	e1d9      	b.n	8001c40 <__aeabi_dsub+0x540>
 800188c:	4295      	cmp	r5, r2
 800188e:	d100      	bne.n	8001892 <__aeabi_dsub+0x192>
 8001890:	e10a      	b.n	8001aa8 <__aeabi_dsub+0x3a8>
 8001892:	2501      	movs	r5, #1
 8001894:	2938      	cmp	r1, #56	@ 0x38
 8001896:	dc17      	bgt.n	80018c8 <__aeabi_dsub+0x1c8>
 8001898:	468a      	mov	sl, r1
 800189a:	4653      	mov	r3, sl
 800189c:	2b1f      	cmp	r3, #31
 800189e:	dd00      	ble.n	80018a2 <__aeabi_dsub+0x1a2>
 80018a0:	e1e7      	b.n	8001c72 <__aeabi_dsub+0x572>
 80018a2:	2220      	movs	r2, #32
 80018a4:	1ad2      	subs	r2, r2, r3
 80018a6:	9b02      	ldr	r3, [sp, #8]
 80018a8:	4661      	mov	r1, ip
 80018aa:	4093      	lsls	r3, r2
 80018ac:	001d      	movs	r5, r3
 80018ae:	4653      	mov	r3, sl
 80018b0:	40d9      	lsrs	r1, r3
 80018b2:	4663      	mov	r3, ip
 80018b4:	4093      	lsls	r3, r2
 80018b6:	001a      	movs	r2, r3
 80018b8:	430d      	orrs	r5, r1
 80018ba:	1e51      	subs	r1, r2, #1
 80018bc:	418a      	sbcs	r2, r1
 80018be:	4653      	mov	r3, sl
 80018c0:	4315      	orrs	r5, r2
 80018c2:	9a02      	ldr	r2, [sp, #8]
 80018c4:	40da      	lsrs	r2, r3
 80018c6:	18a4      	adds	r4, r4, r2
 80018c8:	182d      	adds	r5, r5, r0
 80018ca:	4285      	cmp	r5, r0
 80018cc:	4180      	sbcs	r0, r0
 80018ce:	4240      	negs	r0, r0
 80018d0:	1824      	adds	r4, r4, r0
 80018d2:	0223      	lsls	r3, r4, #8
 80018d4:	d400      	bmi.n	80018d8 <__aeabi_dsub+0x1d8>
 80018d6:	e0b6      	b.n	8001a46 <__aeabi_dsub+0x346>
 80018d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a54 <__aeabi_dsub+0x354>)
 80018da:	3701      	adds	r7, #1
 80018dc:	429f      	cmp	r7, r3
 80018de:	d100      	bne.n	80018e2 <__aeabi_dsub+0x1e2>
 80018e0:	e0ad      	b.n	8001a3e <__aeabi_dsub+0x33e>
 80018e2:	2101      	movs	r1, #1
 80018e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001a58 <__aeabi_dsub+0x358>)
 80018e6:	086a      	lsrs	r2, r5, #1
 80018e8:	401c      	ands	r4, r3
 80018ea:	4029      	ands	r1, r5
 80018ec:	430a      	orrs	r2, r1
 80018ee:	07e5      	lsls	r5, r4, #31
 80018f0:	4315      	orrs	r5, r2
 80018f2:	0864      	lsrs	r4, r4, #1
 80018f4:	e78d      	b.n	8001812 <__aeabi_dsub+0x112>
 80018f6:	4a59      	ldr	r2, [pc, #356]	@ (8001a5c <__aeabi_dsub+0x35c>)
 80018f8:	9b02      	ldr	r3, [sp, #8]
 80018fa:	4692      	mov	sl, r2
 80018fc:	4662      	mov	r2, ip
 80018fe:	44ba      	add	sl, r7
 8001900:	431a      	orrs	r2, r3
 8001902:	d02c      	beq.n	800195e <__aeabi_dsub+0x25e>
 8001904:	428e      	cmp	r6, r1
 8001906:	d02e      	beq.n	8001966 <__aeabi_dsub+0x266>
 8001908:	4652      	mov	r2, sl
 800190a:	2a00      	cmp	r2, #0
 800190c:	d060      	beq.n	80019d0 <__aeabi_dsub+0x2d0>
 800190e:	2f00      	cmp	r7, #0
 8001910:	d100      	bne.n	8001914 <__aeabi_dsub+0x214>
 8001912:	e0db      	b.n	8001acc <__aeabi_dsub+0x3cc>
 8001914:	4663      	mov	r3, ip
 8001916:	000e      	movs	r6, r1
 8001918:	9c02      	ldr	r4, [sp, #8]
 800191a:	08d8      	lsrs	r0, r3, #3
 800191c:	0762      	lsls	r2, r4, #29
 800191e:	4302      	orrs	r2, r0
 8001920:	08e4      	lsrs	r4, r4, #3
 8001922:	0013      	movs	r3, r2
 8001924:	4323      	orrs	r3, r4
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x22a>
 8001928:	e254      	b.n	8001dd4 <__aeabi_dsub+0x6d4>
 800192a:	2580      	movs	r5, #128	@ 0x80
 800192c:	032d      	lsls	r5, r5, #12
 800192e:	4325      	orrs	r5, r4
 8001930:	032d      	lsls	r5, r5, #12
 8001932:	4c48      	ldr	r4, [pc, #288]	@ (8001a54 <__aeabi_dsub+0x354>)
 8001934:	0b2d      	lsrs	r5, r5, #12
 8001936:	e78c      	b.n	8001852 <__aeabi_dsub+0x152>
 8001938:	4661      	mov	r1, ip
 800193a:	9b02      	ldr	r3, [sp, #8]
 800193c:	4319      	orrs	r1, r3
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x242>
 8001940:	e0cc      	b.n	8001adc <__aeabi_dsub+0x3dc>
 8001942:	0029      	movs	r1, r5
 8001944:	3901      	subs	r1, #1
 8001946:	2d01      	cmp	r5, #1
 8001948:	d100      	bne.n	800194c <__aeabi_dsub+0x24c>
 800194a:	e188      	b.n	8001c5e <__aeabi_dsub+0x55e>
 800194c:	4295      	cmp	r5, r2
 800194e:	d100      	bne.n	8001952 <__aeabi_dsub+0x252>
 8001950:	e0aa      	b.n	8001aa8 <__aeabi_dsub+0x3a8>
 8001952:	2501      	movs	r5, #1
 8001954:	2938      	cmp	r1, #56	@ 0x38
 8001956:	dd00      	ble.n	800195a <__aeabi_dsub+0x25a>
 8001958:	e72f      	b.n	80017ba <__aeabi_dsub+0xba>
 800195a:	468a      	mov	sl, r1
 800195c:	e718      	b.n	8001790 <__aeabi_dsub+0x90>
 800195e:	2201      	movs	r2, #1
 8001960:	4051      	eors	r1, r2
 8001962:	428e      	cmp	r6, r1
 8001964:	d1d0      	bne.n	8001908 <__aeabi_dsub+0x208>
 8001966:	4653      	mov	r3, sl
 8001968:	2b00      	cmp	r3, #0
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x26e>
 800196c:	e0be      	b.n	8001aec <__aeabi_dsub+0x3ec>
 800196e:	2f00      	cmp	r7, #0
 8001970:	d000      	beq.n	8001974 <__aeabi_dsub+0x274>
 8001972:	e138      	b.n	8001be6 <__aeabi_dsub+0x4e6>
 8001974:	46ca      	mov	sl, r9
 8001976:	0022      	movs	r2, r4
 8001978:	4302      	orrs	r2, r0
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0x27e>
 800197c:	e1e2      	b.n	8001d44 <__aeabi_dsub+0x644>
 800197e:	4653      	mov	r3, sl
 8001980:	1e59      	subs	r1, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x288>
 8001986:	e20d      	b.n	8001da4 <__aeabi_dsub+0x6a4>
 8001988:	4a32      	ldr	r2, [pc, #200]	@ (8001a54 <__aeabi_dsub+0x354>)
 800198a:	4592      	cmp	sl, r2
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x290>
 800198e:	e1d2      	b.n	8001d36 <__aeabi_dsub+0x636>
 8001990:	2701      	movs	r7, #1
 8001992:	2938      	cmp	r1, #56	@ 0x38
 8001994:	dc13      	bgt.n	80019be <__aeabi_dsub+0x2be>
 8001996:	291f      	cmp	r1, #31
 8001998:	dd00      	ble.n	800199c <__aeabi_dsub+0x29c>
 800199a:	e1ee      	b.n	8001d7a <__aeabi_dsub+0x67a>
 800199c:	2220      	movs	r2, #32
 800199e:	9b02      	ldr	r3, [sp, #8]
 80019a0:	1a52      	subs	r2, r2, r1
 80019a2:	0025      	movs	r5, r4
 80019a4:	0007      	movs	r7, r0
 80019a6:	469a      	mov	sl, r3
 80019a8:	40cc      	lsrs	r4, r1
 80019aa:	4090      	lsls	r0, r2
 80019ac:	4095      	lsls	r5, r2
 80019ae:	40cf      	lsrs	r7, r1
 80019b0:	44a2      	add	sl, r4
 80019b2:	1e42      	subs	r2, r0, #1
 80019b4:	4190      	sbcs	r0, r2
 80019b6:	4653      	mov	r3, sl
 80019b8:	432f      	orrs	r7, r5
 80019ba:	4307      	orrs	r7, r0
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	003d      	movs	r5, r7
 80019c0:	4465      	add	r5, ip
 80019c2:	4565      	cmp	r5, ip
 80019c4:	4192      	sbcs	r2, r2
 80019c6:	9b02      	ldr	r3, [sp, #8]
 80019c8:	4252      	negs	r2, r2
 80019ca:	464f      	mov	r7, r9
 80019cc:	18d4      	adds	r4, r2, r3
 80019ce:	e780      	b.n	80018d2 <__aeabi_dsub+0x1d2>
 80019d0:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <__aeabi_dsub+0x360>)
 80019d2:	1c7d      	adds	r5, r7, #1
 80019d4:	4215      	tst	r5, r2
 80019d6:	d000      	beq.n	80019da <__aeabi_dsub+0x2da>
 80019d8:	e0aa      	b.n	8001b30 <__aeabi_dsub+0x430>
 80019da:	4662      	mov	r2, ip
 80019dc:	0025      	movs	r5, r4
 80019de:	9b02      	ldr	r3, [sp, #8]
 80019e0:	4305      	orrs	r5, r0
 80019e2:	431a      	orrs	r2, r3
 80019e4:	2f00      	cmp	r7, #0
 80019e6:	d000      	beq.n	80019ea <__aeabi_dsub+0x2ea>
 80019e8:	e0f5      	b.n	8001bd6 <__aeabi_dsub+0x4d6>
 80019ea:	2d00      	cmp	r5, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x2f0>
 80019ee:	e16b      	b.n	8001cc8 <__aeabi_dsub+0x5c8>
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dsub+0x2f6>
 80019f4:	e152      	b.n	8001c9c <__aeabi_dsub+0x59c>
 80019f6:	4663      	mov	r3, ip
 80019f8:	1ac5      	subs	r5, r0, r3
 80019fa:	9b02      	ldr	r3, [sp, #8]
 80019fc:	1ae2      	subs	r2, r4, r3
 80019fe:	42a8      	cmp	r0, r5
 8001a00:	419b      	sbcs	r3, r3
 8001a02:	425b      	negs	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	021a      	lsls	r2, r3, #8
 8001a08:	d400      	bmi.n	8001a0c <__aeabi_dsub+0x30c>
 8001a0a:	e1d5      	b.n	8001db8 <__aeabi_dsub+0x6b8>
 8001a0c:	4663      	mov	r3, ip
 8001a0e:	1a1d      	subs	r5, r3, r0
 8001a10:	45ac      	cmp	ip, r5
 8001a12:	4192      	sbcs	r2, r2
 8001a14:	2601      	movs	r6, #1
 8001a16:	9b02      	ldr	r3, [sp, #8]
 8001a18:	4252      	negs	r2, r2
 8001a1a:	1b1c      	subs	r4, r3, r4
 8001a1c:	4688      	mov	r8, r1
 8001a1e:	1aa4      	subs	r4, r4, r2
 8001a20:	400e      	ands	r6, r1
 8001a22:	e6f6      	b.n	8001812 <__aeabi_dsub+0x112>
 8001a24:	4297      	cmp	r7, r2
 8001a26:	d03f      	beq.n	8001aa8 <__aeabi_dsub+0x3a8>
 8001a28:	4652      	mov	r2, sl
 8001a2a:	2501      	movs	r5, #1
 8001a2c:	2a38      	cmp	r2, #56	@ 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x332>
 8001a30:	e74a      	b.n	80018c8 <__aeabi_dsub+0x1c8>
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	9b02      	ldr	r3, [sp, #8]
 8001a36:	0412      	lsls	r2, r2, #16
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	e72d      	b.n	800189a <__aeabi_dsub+0x19a>
 8001a3e:	003c      	movs	r4, r7
 8001a40:	2500      	movs	r5, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	e705      	b.n	8001852 <__aeabi_dsub+0x152>
 8001a46:	2307      	movs	r3, #7
 8001a48:	402b      	ands	r3, r5
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dsub+0x350>
 8001a4e:	e6e2      	b.n	8001816 <__aeabi_dsub+0x116>
 8001a50:	e06b      	b.n	8001b2a <__aeabi_dsub+0x42a>
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	000007ff 	.word	0x000007ff
 8001a58:	ff7fffff 	.word	0xff7fffff
 8001a5c:	fffff801 	.word	0xfffff801
 8001a60:	000007fe 	.word	0x000007fe
 8001a64:	0028      	movs	r0, r5
 8001a66:	f000 fae1 	bl	800202c <__clzsi2>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	2b1f      	cmp	r3, #31
 8001a70:	dc00      	bgt.n	8001a74 <__aeabi_dsub+0x374>
 8001a72:	e6b4      	b.n	80017de <__aeabi_dsub+0xde>
 8001a74:	002a      	movs	r2, r5
 8001a76:	3808      	subs	r0, #8
 8001a78:	4082      	lsls	r2, r0
 8001a7a:	429f      	cmp	r7, r3
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dsub+0x380>
 8001a7e:	e0b9      	b.n	8001bf4 <__aeabi_dsub+0x4f4>
 8001a80:	1bdb      	subs	r3, r3, r7
 8001a82:	1c58      	adds	r0, r3, #1
 8001a84:	281f      	cmp	r0, #31
 8001a86:	dc00      	bgt.n	8001a8a <__aeabi_dsub+0x38a>
 8001a88:	e1a0      	b.n	8001dcc <__aeabi_dsub+0x6cc>
 8001a8a:	0015      	movs	r5, r2
 8001a8c:	3b1f      	subs	r3, #31
 8001a8e:	40dd      	lsrs	r5, r3
 8001a90:	2820      	cmp	r0, #32
 8001a92:	d005      	beq.n	8001aa0 <__aeabi_dsub+0x3a0>
 8001a94:	2340      	movs	r3, #64	@ 0x40
 8001a96:	1a1b      	subs	r3, r3, r0
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	1e53      	subs	r3, r2, #1
 8001a9c:	419a      	sbcs	r2, r3
 8001a9e:	4315      	orrs	r5, r2
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	2700      	movs	r7, #0
 8001aa4:	402b      	ands	r3, r5
 8001aa6:	e7d0      	b.n	8001a4a <__aeabi_dsub+0x34a>
 8001aa8:	08c0      	lsrs	r0, r0, #3
 8001aaa:	0762      	lsls	r2, r4, #29
 8001aac:	4302      	orrs	r2, r0
 8001aae:	08e4      	lsrs	r4, r4, #3
 8001ab0:	e737      	b.n	8001922 <__aeabi_dsub+0x222>
 8001ab2:	08ea      	lsrs	r2, r5, #3
 8001ab4:	0763      	lsls	r3, r4, #29
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	4bd3      	ldr	r3, [pc, #844]	@ (8001e08 <__aeabi_dsub+0x708>)
 8001aba:	08e4      	lsrs	r4, r4, #3
 8001abc:	429f      	cmp	r7, r3
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x3c2>
 8001ac0:	e72f      	b.n	8001922 <__aeabi_dsub+0x222>
 8001ac2:	0324      	lsls	r4, r4, #12
 8001ac4:	0b25      	lsrs	r5, r4, #12
 8001ac6:	057c      	lsls	r4, r7, #21
 8001ac8:	0d64      	lsrs	r4, r4, #21
 8001aca:	e6c2      	b.n	8001852 <__aeabi_dsub+0x152>
 8001acc:	46ca      	mov	sl, r9
 8001ace:	0022      	movs	r2, r4
 8001ad0:	4302      	orrs	r2, r0
 8001ad2:	d158      	bne.n	8001b86 <__aeabi_dsub+0x486>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	000e      	movs	r6, r1
 8001ad8:	9c02      	ldr	r4, [sp, #8]
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	9b03      	ldr	r3, [sp, #12]
 8001ade:	4657      	mov	r7, sl
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	e7e7      	b.n	8001ab4 <__aeabi_dsub+0x3b4>
 8001ae4:	4cc9      	ldr	r4, [pc, #804]	@ (8001e0c <__aeabi_dsub+0x70c>)
 8001ae6:	1aff      	subs	r7, r7, r3
 8001ae8:	4014      	ands	r4, r2
 8001aea:	e692      	b.n	8001812 <__aeabi_dsub+0x112>
 8001aec:	4dc8      	ldr	r5, [pc, #800]	@ (8001e10 <__aeabi_dsub+0x710>)
 8001aee:	1c7a      	adds	r2, r7, #1
 8001af0:	422a      	tst	r2, r5
 8001af2:	d000      	beq.n	8001af6 <__aeabi_dsub+0x3f6>
 8001af4:	e084      	b.n	8001c00 <__aeabi_dsub+0x500>
 8001af6:	0022      	movs	r2, r4
 8001af8:	4302      	orrs	r2, r0
 8001afa:	2f00      	cmp	r7, #0
 8001afc:	d000      	beq.n	8001b00 <__aeabi_dsub+0x400>
 8001afe:	e0ef      	b.n	8001ce0 <__aeabi_dsub+0x5e0>
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x406>
 8001b04:	e0e5      	b.n	8001cd2 <__aeabi_dsub+0x5d2>
 8001b06:	4662      	mov	r2, ip
 8001b08:	9902      	ldr	r1, [sp, #8]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x410>
 8001b0e:	e0c5      	b.n	8001c9c <__aeabi_dsub+0x59c>
 8001b10:	4663      	mov	r3, ip
 8001b12:	18c5      	adds	r5, r0, r3
 8001b14:	468c      	mov	ip, r1
 8001b16:	4285      	cmp	r5, r0
 8001b18:	4180      	sbcs	r0, r0
 8001b1a:	4464      	add	r4, ip
 8001b1c:	4240      	negs	r0, r0
 8001b1e:	1824      	adds	r4, r4, r0
 8001b20:	0223      	lsls	r3, r4, #8
 8001b22:	d502      	bpl.n	8001b2a <__aeabi_dsub+0x42a>
 8001b24:	4bb9      	ldr	r3, [pc, #740]	@ (8001e0c <__aeabi_dsub+0x70c>)
 8001b26:	3701      	adds	r7, #1
 8001b28:	401c      	ands	r4, r3
 8001b2a:	46ba      	mov	sl, r7
 8001b2c:	9503      	str	r5, [sp, #12]
 8001b2e:	e7d5      	b.n	8001adc <__aeabi_dsub+0x3dc>
 8001b30:	4662      	mov	r2, ip
 8001b32:	1a85      	subs	r5, r0, r2
 8001b34:	42a8      	cmp	r0, r5
 8001b36:	4192      	sbcs	r2, r2
 8001b38:	4252      	negs	r2, r2
 8001b3a:	4691      	mov	r9, r2
 8001b3c:	9b02      	ldr	r3, [sp, #8]
 8001b3e:	1ae3      	subs	r3, r4, r3
 8001b40:	001a      	movs	r2, r3
 8001b42:	464b      	mov	r3, r9
 8001b44:	1ad2      	subs	r2, r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	4691      	mov	r9, r2
 8001b4a:	021a      	lsls	r2, r3, #8
 8001b4c:	d46c      	bmi.n	8001c28 <__aeabi_dsub+0x528>
 8001b4e:	464a      	mov	r2, r9
 8001b50:	464c      	mov	r4, r9
 8001b52:	432a      	orrs	r2, r5
 8001b54:	d000      	beq.n	8001b58 <__aeabi_dsub+0x458>
 8001b56:	e63a      	b.n	80017ce <__aeabi_dsub+0xce>
 8001b58:	2600      	movs	r6, #0
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	2500      	movs	r5, #0
 8001b5e:	e678      	b.n	8001852 <__aeabi_dsub+0x152>
 8001b60:	9902      	ldr	r1, [sp, #8]
 8001b62:	4653      	mov	r3, sl
 8001b64:	000d      	movs	r5, r1
 8001b66:	3a20      	subs	r2, #32
 8001b68:	40d5      	lsrs	r5, r2
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d006      	beq.n	8001b7c <__aeabi_dsub+0x47c>
 8001b6e:	2240      	movs	r2, #64	@ 0x40
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	000b      	movs	r3, r1
 8001b74:	4093      	lsls	r3, r2
 8001b76:	4662      	mov	r2, ip
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	4693      	mov	fp, r2
 8001b7c:	465b      	mov	r3, fp
 8001b7e:	1e5a      	subs	r2, r3, #1
 8001b80:	4193      	sbcs	r3, r2
 8001b82:	431d      	orrs	r5, r3
 8001b84:	e619      	b.n	80017ba <__aeabi_dsub+0xba>
 8001b86:	4653      	mov	r3, sl
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x490>
 8001b8e:	e0c6      	b.n	8001d1e <__aeabi_dsub+0x61e>
 8001b90:	4e9d      	ldr	r6, [pc, #628]	@ (8001e08 <__aeabi_dsub+0x708>)
 8001b92:	45b2      	cmp	sl, r6
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x498>
 8001b96:	e6bd      	b.n	8001914 <__aeabi_dsub+0x214>
 8001b98:	4688      	mov	r8, r1
 8001b9a:	000e      	movs	r6, r1
 8001b9c:	2501      	movs	r5, #1
 8001b9e:	2a38      	cmp	r2, #56	@ 0x38
 8001ba0:	dc10      	bgt.n	8001bc4 <__aeabi_dsub+0x4c4>
 8001ba2:	2a1f      	cmp	r2, #31
 8001ba4:	dc7f      	bgt.n	8001ca6 <__aeabi_dsub+0x5a6>
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	0025      	movs	r5, r4
 8001baa:	1a89      	subs	r1, r1, r2
 8001bac:	0007      	movs	r7, r0
 8001bae:	4088      	lsls	r0, r1
 8001bb0:	408d      	lsls	r5, r1
 8001bb2:	40d7      	lsrs	r7, r2
 8001bb4:	40d4      	lsrs	r4, r2
 8001bb6:	1e41      	subs	r1, r0, #1
 8001bb8:	4188      	sbcs	r0, r1
 8001bba:	9b02      	ldr	r3, [sp, #8]
 8001bbc:	433d      	orrs	r5, r7
 8001bbe:	1b1b      	subs	r3, r3, r4
 8001bc0:	4305      	orrs	r5, r0
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	4662      	mov	r2, ip
 8001bc6:	1b55      	subs	r5, r2, r5
 8001bc8:	45ac      	cmp	ip, r5
 8001bca:	4192      	sbcs	r2, r2
 8001bcc:	9b02      	ldr	r3, [sp, #8]
 8001bce:	4252      	negs	r2, r2
 8001bd0:	464f      	mov	r7, r9
 8001bd2:	1a9c      	subs	r4, r3, r2
 8001bd4:	e5f6      	b.n	80017c4 <__aeabi_dsub+0xc4>
 8001bd6:	2d00      	cmp	r5, #0
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_dsub+0x4dc>
 8001bda:	e0b7      	b.n	8001d4c <__aeabi_dsub+0x64c>
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x4e2>
 8001be0:	e0f0      	b.n	8001dc4 <__aeabi_dsub+0x6c4>
 8001be2:	2601      	movs	r6, #1
 8001be4:	400e      	ands	r6, r1
 8001be6:	4663      	mov	r3, ip
 8001be8:	9802      	ldr	r0, [sp, #8]
 8001bea:	08d9      	lsrs	r1, r3, #3
 8001bec:	0742      	lsls	r2, r0, #29
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	08c4      	lsrs	r4, r0, #3
 8001bf2:	e696      	b.n	8001922 <__aeabi_dsub+0x222>
 8001bf4:	4c85      	ldr	r4, [pc, #532]	@ (8001e0c <__aeabi_dsub+0x70c>)
 8001bf6:	1aff      	subs	r7, r7, r3
 8001bf8:	4014      	ands	r4, r2
 8001bfa:	0762      	lsls	r2, r4, #29
 8001bfc:	08e4      	lsrs	r4, r4, #3
 8001bfe:	e760      	b.n	8001ac2 <__aeabi_dsub+0x3c2>
 8001c00:	4981      	ldr	r1, [pc, #516]	@ (8001e08 <__aeabi_dsub+0x708>)
 8001c02:	428a      	cmp	r2, r1
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x508>
 8001c06:	e0c9      	b.n	8001d9c <__aeabi_dsub+0x69c>
 8001c08:	4663      	mov	r3, ip
 8001c0a:	18c1      	adds	r1, r0, r3
 8001c0c:	4281      	cmp	r1, r0
 8001c0e:	4180      	sbcs	r0, r0
 8001c10:	9b02      	ldr	r3, [sp, #8]
 8001c12:	4240      	negs	r0, r0
 8001c14:	18e3      	adds	r3, r4, r3
 8001c16:	181b      	adds	r3, r3, r0
 8001c18:	07dd      	lsls	r5, r3, #31
 8001c1a:	085c      	lsrs	r4, r3, #1
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	0849      	lsrs	r1, r1, #1
 8001c20:	430d      	orrs	r5, r1
 8001c22:	0017      	movs	r7, r2
 8001c24:	402b      	ands	r3, r5
 8001c26:	e710      	b.n	8001a4a <__aeabi_dsub+0x34a>
 8001c28:	4663      	mov	r3, ip
 8001c2a:	1a1d      	subs	r5, r3, r0
 8001c2c:	45ac      	cmp	ip, r5
 8001c2e:	4192      	sbcs	r2, r2
 8001c30:	2601      	movs	r6, #1
 8001c32:	9b02      	ldr	r3, [sp, #8]
 8001c34:	4252      	negs	r2, r2
 8001c36:	1b1c      	subs	r4, r3, r4
 8001c38:	4688      	mov	r8, r1
 8001c3a:	1aa4      	subs	r4, r4, r2
 8001c3c:	400e      	ands	r6, r1
 8001c3e:	e5c6      	b.n	80017ce <__aeabi_dsub+0xce>
 8001c40:	4663      	mov	r3, ip
 8001c42:	18c5      	adds	r5, r0, r3
 8001c44:	9b02      	ldr	r3, [sp, #8]
 8001c46:	4285      	cmp	r5, r0
 8001c48:	4180      	sbcs	r0, r0
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	4240      	negs	r0, r0
 8001c4e:	4464      	add	r4, ip
 8001c50:	1824      	adds	r4, r4, r0
 8001c52:	2701      	movs	r7, #1
 8001c54:	0223      	lsls	r3, r4, #8
 8001c56:	d400      	bmi.n	8001c5a <__aeabi_dsub+0x55a>
 8001c58:	e6f5      	b.n	8001a46 <__aeabi_dsub+0x346>
 8001c5a:	2702      	movs	r7, #2
 8001c5c:	e641      	b.n	80018e2 <__aeabi_dsub+0x1e2>
 8001c5e:	4663      	mov	r3, ip
 8001c60:	1ac5      	subs	r5, r0, r3
 8001c62:	42a8      	cmp	r0, r5
 8001c64:	4180      	sbcs	r0, r0
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4240      	negs	r0, r0
 8001c6a:	1ae4      	subs	r4, r4, r3
 8001c6c:	2701      	movs	r7, #1
 8001c6e:	1a24      	subs	r4, r4, r0
 8001c70:	e5a8      	b.n	80017c4 <__aeabi_dsub+0xc4>
 8001c72:	9d02      	ldr	r5, [sp, #8]
 8001c74:	4652      	mov	r2, sl
 8001c76:	002b      	movs	r3, r5
 8001c78:	3a20      	subs	r2, #32
 8001c7a:	40d3      	lsrs	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d006      	beq.n	8001c92 <__aeabi_dsub+0x592>
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	002b      	movs	r3, r5
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	4662      	mov	r2, ip
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	4693      	mov	fp, r2
 8001c92:	465d      	mov	r5, fp
 8001c94:	1e6b      	subs	r3, r5, #1
 8001c96:	419d      	sbcs	r5, r3
 8001c98:	430d      	orrs	r5, r1
 8001c9a:	e615      	b.n	80018c8 <__aeabi_dsub+0x1c8>
 8001c9c:	0762      	lsls	r2, r4, #29
 8001c9e:	08c0      	lsrs	r0, r0, #3
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	08e4      	lsrs	r4, r4, #3
 8001ca4:	e70d      	b.n	8001ac2 <__aeabi_dsub+0x3c2>
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0027      	movs	r7, r4
 8001caa:	3920      	subs	r1, #32
 8001cac:	40cf      	lsrs	r7, r1
 8001cae:	2a20      	cmp	r2, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dsub+0x5be>
 8001cb2:	2140      	movs	r1, #64	@ 0x40
 8001cb4:	1a8a      	subs	r2, r1, r2
 8001cb6:	4094      	lsls	r4, r2
 8001cb8:	0025      	movs	r5, r4
 8001cba:	4305      	orrs	r5, r0
 8001cbc:	9503      	str	r5, [sp, #12]
 8001cbe:	9d03      	ldr	r5, [sp, #12]
 8001cc0:	1e6a      	subs	r2, r5, #1
 8001cc2:	4195      	sbcs	r5, r2
 8001cc4:	433d      	orrs	r5, r7
 8001cc6:	e77d      	b.n	8001bc4 <__aeabi_dsub+0x4c4>
 8001cc8:	2a00      	cmp	r2, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x5ce>
 8001ccc:	e744      	b.n	8001b58 <__aeabi_dsub+0x458>
 8001cce:	2601      	movs	r6, #1
 8001cd0:	400e      	ands	r6, r1
 8001cd2:	4663      	mov	r3, ip
 8001cd4:	08d9      	lsrs	r1, r3, #3
 8001cd6:	9b02      	ldr	r3, [sp, #8]
 8001cd8:	075a      	lsls	r2, r3, #29
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	08dc      	lsrs	r4, r3, #3
 8001cde:	e6f0      	b.n	8001ac2 <__aeabi_dsub+0x3c2>
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d028      	beq.n	8001d36 <__aeabi_dsub+0x636>
 8001ce4:	4662      	mov	r2, ip
 8001ce6:	9f02      	ldr	r7, [sp, #8]
 8001ce8:	08c0      	lsrs	r0, r0, #3
 8001cea:	433a      	orrs	r2, r7
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x5f0>
 8001cee:	e6dc      	b.n	8001aaa <__aeabi_dsub+0x3aa>
 8001cf0:	0762      	lsls	r2, r4, #29
 8001cf2:	4310      	orrs	r0, r2
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	08e4      	lsrs	r4, r4, #3
 8001cf8:	0312      	lsls	r2, r2, #12
 8001cfa:	4214      	tst	r4, r2
 8001cfc:	d009      	beq.n	8001d12 <__aeabi_dsub+0x612>
 8001cfe:	08fd      	lsrs	r5, r7, #3
 8001d00:	4215      	tst	r5, r2
 8001d02:	d106      	bne.n	8001d12 <__aeabi_dsub+0x612>
 8001d04:	4663      	mov	r3, ip
 8001d06:	2601      	movs	r6, #1
 8001d08:	002c      	movs	r4, r5
 8001d0a:	08d8      	lsrs	r0, r3, #3
 8001d0c:	077b      	lsls	r3, r7, #29
 8001d0e:	4318      	orrs	r0, r3
 8001d10:	400e      	ands	r6, r1
 8001d12:	0f42      	lsrs	r2, r0, #29
 8001d14:	00c0      	lsls	r0, r0, #3
 8001d16:	08c0      	lsrs	r0, r0, #3
 8001d18:	0752      	lsls	r2, r2, #29
 8001d1a:	4302      	orrs	r2, r0
 8001d1c:	e601      	b.n	8001922 <__aeabi_dsub+0x222>
 8001d1e:	4663      	mov	r3, ip
 8001d20:	1a1d      	subs	r5, r3, r0
 8001d22:	45ac      	cmp	ip, r5
 8001d24:	4192      	sbcs	r2, r2
 8001d26:	9b02      	ldr	r3, [sp, #8]
 8001d28:	4252      	negs	r2, r2
 8001d2a:	1b1c      	subs	r4, r3, r4
 8001d2c:	000e      	movs	r6, r1
 8001d2e:	4688      	mov	r8, r1
 8001d30:	2701      	movs	r7, #1
 8001d32:	1aa4      	subs	r4, r4, r2
 8001d34:	e546      	b.n	80017c4 <__aeabi_dsub+0xc4>
 8001d36:	4663      	mov	r3, ip
 8001d38:	08d9      	lsrs	r1, r3, #3
 8001d3a:	9b02      	ldr	r3, [sp, #8]
 8001d3c:	075a      	lsls	r2, r3, #29
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e5ee      	b.n	8001922 <__aeabi_dsub+0x222>
 8001d44:	4663      	mov	r3, ip
 8001d46:	9c02      	ldr	r4, [sp, #8]
 8001d48:	9303      	str	r3, [sp, #12]
 8001d4a:	e6c7      	b.n	8001adc <__aeabi_dsub+0x3dc>
 8001d4c:	08c0      	lsrs	r0, r0, #3
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x654>
 8001d52:	e6aa      	b.n	8001aaa <__aeabi_dsub+0x3aa>
 8001d54:	0762      	lsls	r2, r4, #29
 8001d56:	4310      	orrs	r0, r2
 8001d58:	2280      	movs	r2, #128	@ 0x80
 8001d5a:	08e4      	lsrs	r4, r4, #3
 8001d5c:	0312      	lsls	r2, r2, #12
 8001d5e:	4214      	tst	r4, r2
 8001d60:	d0d7      	beq.n	8001d12 <__aeabi_dsub+0x612>
 8001d62:	9f02      	ldr	r7, [sp, #8]
 8001d64:	08fd      	lsrs	r5, r7, #3
 8001d66:	4215      	tst	r5, r2
 8001d68:	d1d3      	bne.n	8001d12 <__aeabi_dsub+0x612>
 8001d6a:	4663      	mov	r3, ip
 8001d6c:	2601      	movs	r6, #1
 8001d6e:	08d8      	lsrs	r0, r3, #3
 8001d70:	077b      	lsls	r3, r7, #29
 8001d72:	002c      	movs	r4, r5
 8001d74:	4318      	orrs	r0, r3
 8001d76:	400e      	ands	r6, r1
 8001d78:	e7cb      	b.n	8001d12 <__aeabi_dsub+0x612>
 8001d7a:	000a      	movs	r2, r1
 8001d7c:	0027      	movs	r7, r4
 8001d7e:	3a20      	subs	r2, #32
 8001d80:	40d7      	lsrs	r7, r2
 8001d82:	2920      	cmp	r1, #32
 8001d84:	d005      	beq.n	8001d92 <__aeabi_dsub+0x692>
 8001d86:	2240      	movs	r2, #64	@ 0x40
 8001d88:	1a52      	subs	r2, r2, r1
 8001d8a:	4094      	lsls	r4, r2
 8001d8c:	0025      	movs	r5, r4
 8001d8e:	4305      	orrs	r5, r0
 8001d90:	9503      	str	r5, [sp, #12]
 8001d92:	9d03      	ldr	r5, [sp, #12]
 8001d94:	1e6a      	subs	r2, r5, #1
 8001d96:	4195      	sbcs	r5, r2
 8001d98:	432f      	orrs	r7, r5
 8001d9a:	e610      	b.n	80019be <__aeabi_dsub+0x2be>
 8001d9c:	0014      	movs	r4, r2
 8001d9e:	2500      	movs	r5, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	e556      	b.n	8001852 <__aeabi_dsub+0x152>
 8001da4:	9b02      	ldr	r3, [sp, #8]
 8001da6:	4460      	add	r0, ip
 8001da8:	4699      	mov	r9, r3
 8001daa:	4560      	cmp	r0, ip
 8001dac:	4192      	sbcs	r2, r2
 8001dae:	444c      	add	r4, r9
 8001db0:	4252      	negs	r2, r2
 8001db2:	0005      	movs	r5, r0
 8001db4:	18a4      	adds	r4, r4, r2
 8001db6:	e74c      	b.n	8001c52 <__aeabi_dsub+0x552>
 8001db8:	001a      	movs	r2, r3
 8001dba:	001c      	movs	r4, r3
 8001dbc:	432a      	orrs	r2, r5
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x6c2>
 8001dc0:	e6b3      	b.n	8001b2a <__aeabi_dsub+0x42a>
 8001dc2:	e6c9      	b.n	8001b58 <__aeabi_dsub+0x458>
 8001dc4:	2480      	movs	r4, #128	@ 0x80
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	0324      	lsls	r4, r4, #12
 8001dca:	e5ae      	b.n	800192a <__aeabi_dsub+0x22a>
 8001dcc:	2120      	movs	r1, #32
 8001dce:	2500      	movs	r5, #0
 8001dd0:	1a09      	subs	r1, r1, r0
 8001dd2:	e517      	b.n	8001804 <__aeabi_dsub+0x104>
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2500      	movs	r5, #0
 8001dd8:	4c0b      	ldr	r4, [pc, #44]	@ (8001e08 <__aeabi_dsub+0x708>)
 8001dda:	e53a      	b.n	8001852 <__aeabi_dsub+0x152>
 8001ddc:	2d00      	cmp	r5, #0
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x6e2>
 8001de0:	e5f6      	b.n	80019d0 <__aeabi_dsub+0x2d0>
 8001de2:	464b      	mov	r3, r9
 8001de4:	1bda      	subs	r2, r3, r7
 8001de6:	4692      	mov	sl, r2
 8001de8:	2f00      	cmp	r7, #0
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x6ee>
 8001dec:	e66f      	b.n	8001ace <__aeabi_dsub+0x3ce>
 8001dee:	2a38      	cmp	r2, #56	@ 0x38
 8001df0:	dc05      	bgt.n	8001dfe <__aeabi_dsub+0x6fe>
 8001df2:	2680      	movs	r6, #128	@ 0x80
 8001df4:	0436      	lsls	r6, r6, #16
 8001df6:	4334      	orrs	r4, r6
 8001df8:	4688      	mov	r8, r1
 8001dfa:	000e      	movs	r6, r1
 8001dfc:	e6d1      	b.n	8001ba2 <__aeabi_dsub+0x4a2>
 8001dfe:	4688      	mov	r8, r1
 8001e00:	000e      	movs	r6, r1
 8001e02:	2501      	movs	r5, #1
 8001e04:	e6de      	b.n	8001bc4 <__aeabi_dsub+0x4c4>
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	ff7fffff 	.word	0xff7fffff
 8001e10:	000007fe 	.word	0x000007fe
 8001e14:	2d00      	cmp	r5, #0
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x71a>
 8001e18:	e668      	b.n	8001aec <__aeabi_dsub+0x3ec>
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	1bd9      	subs	r1, r3, r7
 8001e1e:	2f00      	cmp	r7, #0
 8001e20:	d101      	bne.n	8001e26 <__aeabi_dsub+0x726>
 8001e22:	468a      	mov	sl, r1
 8001e24:	e5a7      	b.n	8001976 <__aeabi_dsub+0x276>
 8001e26:	2701      	movs	r7, #1
 8001e28:	2938      	cmp	r1, #56	@ 0x38
 8001e2a:	dd00      	ble.n	8001e2e <__aeabi_dsub+0x72e>
 8001e2c:	e5c7      	b.n	80019be <__aeabi_dsub+0x2be>
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	0412      	lsls	r2, r2, #16
 8001e32:	4314      	orrs	r4, r2
 8001e34:	e5af      	b.n	8001996 <__aeabi_dsub+0x296>
 8001e36:	46c0      	nop			@ (mov r8, r8)

08001e38 <__aeabi_i2d>:
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d016      	beq.n	8001e6c <__aeabi_i2d+0x34>
 8001e3e:	17c3      	asrs	r3, r0, #31
 8001e40:	18c5      	adds	r5, r0, r3
 8001e42:	405d      	eors	r5, r3
 8001e44:	0fc4      	lsrs	r4, r0, #31
 8001e46:	0028      	movs	r0, r5
 8001e48:	f000 f8f0 	bl	800202c <__clzsi2>
 8001e4c:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <__aeabi_i2d+0x58>)
 8001e4e:	1a1b      	subs	r3, r3, r0
 8001e50:	055b      	lsls	r3, r3, #21
 8001e52:	0d5b      	lsrs	r3, r3, #21
 8001e54:	280a      	cmp	r0, #10
 8001e56:	dc14      	bgt.n	8001e82 <__aeabi_i2d+0x4a>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	002e      	movs	r6, r5
 8001e5c:	3215      	adds	r2, #21
 8001e5e:	4096      	lsls	r6, r2
 8001e60:	220b      	movs	r2, #11
 8001e62:	1a12      	subs	r2, r2, r0
 8001e64:	40d5      	lsrs	r5, r2
 8001e66:	032d      	lsls	r5, r5, #12
 8001e68:	0b2d      	lsrs	r5, r5, #12
 8001e6a:	e003      	b.n	8001e74 <__aeabi_i2d+0x3c>
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2500      	movs	r5, #0
 8001e72:	2600      	movs	r6, #0
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	432b      	orrs	r3, r5
 8001e78:	07e4      	lsls	r4, r4, #31
 8001e7a:	4323      	orrs	r3, r4
 8001e7c:	0030      	movs	r0, r6
 8001e7e:	0019      	movs	r1, r3
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	380b      	subs	r0, #11
 8001e84:	4085      	lsls	r5, r0
 8001e86:	032d      	lsls	r5, r5, #12
 8001e88:	2600      	movs	r6, #0
 8001e8a:	0b2d      	lsrs	r5, r5, #12
 8001e8c:	e7f2      	b.n	8001e74 <__aeabi_i2d+0x3c>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	0000041e 	.word	0x0000041e

08001e94 <__aeabi_f2d>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	0242      	lsls	r2, r0, #9
 8001e98:	0043      	lsls	r3, r0, #1
 8001e9a:	0fc4      	lsrs	r4, r0, #31
 8001e9c:	20fe      	movs	r0, #254	@ 0xfe
 8001e9e:	0e1b      	lsrs	r3, r3, #24
 8001ea0:	1c59      	adds	r1, r3, #1
 8001ea2:	0a55      	lsrs	r5, r2, #9
 8001ea4:	4208      	tst	r0, r1
 8001ea6:	d00c      	beq.n	8001ec2 <__aeabi_f2d+0x2e>
 8001ea8:	21e0      	movs	r1, #224	@ 0xe0
 8001eaa:	0089      	lsls	r1, r1, #2
 8001eac:	468c      	mov	ip, r1
 8001eae:	076d      	lsls	r5, r5, #29
 8001eb0:	0b12      	lsrs	r2, r2, #12
 8001eb2:	4463      	add	r3, ip
 8001eb4:	051b      	lsls	r3, r3, #20
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	07e4      	lsls	r4, r4, #31
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	0028      	movs	r0, r5
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d114      	bne.n	8001ef0 <__aeabi_f2d+0x5c>
 8001ec6:	2d00      	cmp	r5, #0
 8001ec8:	d01b      	beq.n	8001f02 <__aeabi_f2d+0x6e>
 8001eca:	0028      	movs	r0, r5
 8001ecc:	f000 f8ae 	bl	800202c <__clzsi2>
 8001ed0:	280a      	cmp	r0, #10
 8001ed2:	dc1c      	bgt.n	8001f0e <__aeabi_f2d+0x7a>
 8001ed4:	230b      	movs	r3, #11
 8001ed6:	002a      	movs	r2, r5
 8001ed8:	1a1b      	subs	r3, r3, r0
 8001eda:	40da      	lsrs	r2, r3
 8001edc:	0003      	movs	r3, r0
 8001ede:	3315      	adds	r3, #21
 8001ee0:	409d      	lsls	r5, r3
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <__aeabi_f2d+0x88>)
 8001ee4:	0312      	lsls	r2, r2, #12
 8001ee6:	1a1b      	subs	r3, r3, r0
 8001ee8:	055b      	lsls	r3, r3, #21
 8001eea:	0b12      	lsrs	r2, r2, #12
 8001eec:	0d5b      	lsrs	r3, r3, #21
 8001eee:	e7e1      	b.n	8001eb4 <__aeabi_f2d+0x20>
 8001ef0:	2d00      	cmp	r5, #0
 8001ef2:	d009      	beq.n	8001f08 <__aeabi_f2d+0x74>
 8001ef4:	0b13      	lsrs	r3, r2, #12
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	0312      	lsls	r2, r2, #12
 8001efa:	431a      	orrs	r2, r3
 8001efc:	076d      	lsls	r5, r5, #29
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <__aeabi_f2d+0x8c>)
 8001f00:	e7d8      	b.n	8001eb4 <__aeabi_f2d+0x20>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2200      	movs	r2, #0
 8001f06:	e7d5      	b.n	8001eb4 <__aeabi_f2d+0x20>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <__aeabi_f2d+0x8c>)
 8001f0c:	e7d2      	b.n	8001eb4 <__aeabi_f2d+0x20>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	002a      	movs	r2, r5
 8001f12:	3b0b      	subs	r3, #11
 8001f14:	409a      	lsls	r2, r3
 8001f16:	2500      	movs	r5, #0
 8001f18:	e7e3      	b.n	8001ee2 <__aeabi_f2d+0x4e>
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	00000389 	.word	0x00000389
 8001f20:	000007ff 	.word	0x000007ff

08001f24 <__aeabi_d2f>:
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	004b      	lsls	r3, r1, #1
 8001f28:	030f      	lsls	r7, r1, #12
 8001f2a:	0d5b      	lsrs	r3, r3, #21
 8001f2c:	4c3b      	ldr	r4, [pc, #236]	@ (800201c <__aeabi_d2f+0xf8>)
 8001f2e:	0f45      	lsrs	r5, r0, #29
 8001f30:	b083      	sub	sp, #12
 8001f32:	0a7f      	lsrs	r7, r7, #9
 8001f34:	1c5e      	adds	r6, r3, #1
 8001f36:	432f      	orrs	r7, r5
 8001f38:	9000      	str	r0, [sp, #0]
 8001f3a:	9101      	str	r1, [sp, #4]
 8001f3c:	0fca      	lsrs	r2, r1, #31
 8001f3e:	00c5      	lsls	r5, r0, #3
 8001f40:	4226      	tst	r6, r4
 8001f42:	d00b      	beq.n	8001f5c <__aeabi_d2f+0x38>
 8001f44:	4936      	ldr	r1, [pc, #216]	@ (8002020 <__aeabi_d2f+0xfc>)
 8001f46:	185c      	adds	r4, r3, r1
 8001f48:	2cfe      	cmp	r4, #254	@ 0xfe
 8001f4a:	dd13      	ble.n	8001f74 <__aeabi_d2f+0x50>
 8001f4c:	20ff      	movs	r0, #255	@ 0xff
 8001f4e:	2300      	movs	r3, #0
 8001f50:	05c0      	lsls	r0, r0, #23
 8001f52:	4318      	orrs	r0, r3
 8001f54:	07d2      	lsls	r2, r2, #31
 8001f56:	4310      	orrs	r0, r2
 8001f58:	b003      	add	sp, #12
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <__aeabi_d2f+0x42>
 8001f60:	2000      	movs	r0, #0
 8001f62:	2300      	movs	r3, #0
 8001f64:	e7f4      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8001f66:	433d      	orrs	r5, r7
 8001f68:	d0f0      	beq.n	8001f4c <__aeabi_d2f+0x28>
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	03db      	lsls	r3, r3, #15
 8001f6e:	20ff      	movs	r0, #255	@ 0xff
 8001f70:	433b      	orrs	r3, r7
 8001f72:	e7ed      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8001f74:	2c00      	cmp	r4, #0
 8001f76:	dd14      	ble.n	8001fa2 <__aeabi_d2f+0x7e>
 8001f78:	9b00      	ldr	r3, [sp, #0]
 8001f7a:	00ff      	lsls	r7, r7, #3
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	1e58      	subs	r0, r3, #1
 8001f80:	4183      	sbcs	r3, r0
 8001f82:	0f69      	lsrs	r1, r5, #29
 8001f84:	433b      	orrs	r3, r7
 8001f86:	430b      	orrs	r3, r1
 8001f88:	0759      	lsls	r1, r3, #29
 8001f8a:	d041      	beq.n	8002010 <__aeabi_d2f+0xec>
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	4019      	ands	r1, r3
 8001f90:	2904      	cmp	r1, #4
 8001f92:	d028      	beq.n	8001fe6 <__aeabi_d2f+0xc2>
 8001f94:	3304      	adds	r3, #4
 8001f96:	0159      	lsls	r1, r3, #5
 8001f98:	d525      	bpl.n	8001fe6 <__aeabi_d2f+0xc2>
 8001f9a:	3401      	adds	r4, #1
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	b2e0      	uxtb	r0, r4
 8001fa0:	e7d6      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8001fa2:	0021      	movs	r1, r4
 8001fa4:	3117      	adds	r1, #23
 8001fa6:	dbdb      	blt.n	8001f60 <__aeabi_d2f+0x3c>
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	201e      	movs	r0, #30
 8001fac:	0409      	lsls	r1, r1, #16
 8001fae:	4339      	orrs	r1, r7
 8001fb0:	1b00      	subs	r0, r0, r4
 8001fb2:	281f      	cmp	r0, #31
 8001fb4:	dd1b      	ble.n	8001fee <__aeabi_d2f+0xca>
 8001fb6:	2602      	movs	r6, #2
 8001fb8:	4276      	negs	r6, r6
 8001fba:	1b34      	subs	r4, r6, r4
 8001fbc:	000e      	movs	r6, r1
 8001fbe:	40e6      	lsrs	r6, r4
 8001fc0:	0034      	movs	r4, r6
 8001fc2:	2820      	cmp	r0, #32
 8001fc4:	d004      	beq.n	8001fd0 <__aeabi_d2f+0xac>
 8001fc6:	4817      	ldr	r0, [pc, #92]	@ (8002024 <__aeabi_d2f+0x100>)
 8001fc8:	4684      	mov	ip, r0
 8001fca:	4463      	add	r3, ip
 8001fcc:	4099      	lsls	r1, r3
 8001fce:	430d      	orrs	r5, r1
 8001fd0:	002b      	movs	r3, r5
 8001fd2:	1e59      	subs	r1, r3, #1
 8001fd4:	418b      	sbcs	r3, r1
 8001fd6:	4323      	orrs	r3, r4
 8001fd8:	0759      	lsls	r1, r3, #29
 8001fda:	d015      	beq.n	8002008 <__aeabi_d2f+0xe4>
 8001fdc:	210f      	movs	r1, #15
 8001fde:	2400      	movs	r4, #0
 8001fe0:	4019      	ands	r1, r3
 8001fe2:	2904      	cmp	r1, #4
 8001fe4:	d117      	bne.n	8002016 <__aeabi_d2f+0xf2>
 8001fe6:	019b      	lsls	r3, r3, #6
 8001fe8:	0a5b      	lsrs	r3, r3, #9
 8001fea:	b2e0      	uxtb	r0, r4
 8001fec:	e7b0      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8001fee:	4c0e      	ldr	r4, [pc, #56]	@ (8002028 <__aeabi_d2f+0x104>)
 8001ff0:	191c      	adds	r4, r3, r4
 8001ff2:	002b      	movs	r3, r5
 8001ff4:	40a5      	lsls	r5, r4
 8001ff6:	40c3      	lsrs	r3, r0
 8001ff8:	40a1      	lsls	r1, r4
 8001ffa:	1e68      	subs	r0, r5, #1
 8001ffc:	4185      	sbcs	r5, r0
 8001ffe:	4329      	orrs	r1, r5
 8002000:	430b      	orrs	r3, r1
 8002002:	2400      	movs	r4, #0
 8002004:	0759      	lsls	r1, r3, #29
 8002006:	d1c1      	bne.n	8001f8c <__aeabi_d2f+0x68>
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	2000      	movs	r0, #0
 800200c:	0a5b      	lsrs	r3, r3, #9
 800200e:	e79f      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	b2e0      	uxtb	r0, r4
 8002014:	e79c      	b.n	8001f50 <__aeabi_d2f+0x2c>
 8002016:	3304      	adds	r3, #4
 8002018:	e7e5      	b.n	8001fe6 <__aeabi_d2f+0xc2>
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	000007fe 	.word	0x000007fe
 8002020:	fffffc80 	.word	0xfffffc80
 8002024:	fffffca2 	.word	0xfffffca2
 8002028:	fffffc82 	.word	0xfffffc82

0800202c <__clzsi2>:
 800202c:	211c      	movs	r1, #28
 800202e:	2301      	movs	r3, #1
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	4298      	cmp	r0, r3
 8002034:	d301      	bcc.n	800203a <__clzsi2+0xe>
 8002036:	0c00      	lsrs	r0, r0, #16
 8002038:	3910      	subs	r1, #16
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	4298      	cmp	r0, r3
 800203e:	d301      	bcc.n	8002044 <__clzsi2+0x18>
 8002040:	0a00      	lsrs	r0, r0, #8
 8002042:	3908      	subs	r1, #8
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	4298      	cmp	r0, r3
 8002048:	d301      	bcc.n	800204e <__clzsi2+0x22>
 800204a:	0900      	lsrs	r0, r0, #4
 800204c:	3904      	subs	r1, #4
 800204e:	a202      	add	r2, pc, #8	@ (adr r2, 8002058 <__clzsi2+0x2c>)
 8002050:	5c10      	ldrb	r0, [r2, r0]
 8002052:	1840      	adds	r0, r0, r1
 8002054:	4770      	bx	lr
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	02020304 	.word	0x02020304
 800205c:	01010101 	.word	0x01010101
	...

08002068 <eeprom_write_float>:
    return HAL_OK;
}

// #define EEPROM_I2C_ADDRESS 0x50 << 1 is defined in header file
static HAL_StatusTypeDef eeprom_write_float(I2C_HandleTypeDef *i2c, uint16_t eeprom_mem_addr, float value)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b08a      	sub	sp, #40	@ 0x28
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	230a      	movs	r3, #10
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	1c0a      	adds	r2, r1, #0
 8002078:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 800207a:	231e      	movs	r3, #30
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]

	uint8_t *value_bytes = (uint8_t *)&value;
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	61bb      	str	r3, [r7, #24]
	uint8_t send_buffer[3];
	for(uint8_t i = 0; i < 4; i++)
 8002086:	231f      	movs	r3, #31
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e03b      	b.n	8002108 <eeprom_write_float+0xa0>
	{
		uint16_t eeprom_store_addr = eeprom_mem_addr + i;
 8002090:	241f      	movs	r4, #31
 8002092:	193b      	adds	r3, r7, r4
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b299      	uxth	r1, r3
 8002098:	2016      	movs	r0, #22
 800209a:	183b      	adds	r3, r7, r0
 800209c:	220a      	movs	r2, #10
 800209e:	18ba      	adds	r2, r7, r2
 80020a0:	8812      	ldrh	r2, [r2, #0]
 80020a2:	188a      	adds	r2, r1, r2
 80020a4:	801a      	strh	r2, [r3, #0]
		send_buffer[0] = (uint8_t)((eeprom_store_addr >> 8) & 0xFF);  // High Byte
 80020a6:	183b      	adds	r3, r7, r0
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	2110      	movs	r1, #16
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	701a      	strb	r2, [r3, #0]
		send_buffer[1] = (uint8_t)(eeprom_store_addr & 0xFF);         // Low Byte
 80020b6:	183b      	adds	r3, r7, r0
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	705a      	strb	r2, [r3, #1]
		send_buffer[2] = value_bytes[i];
 80020c0:	193b      	adds	r3, r7, r4
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	18d3      	adds	r3, r2, r3
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	709a      	strb	r2, [r3, #2]
		retval = HAL_I2C_Master_Transmit(i2c, EEPROM_I2C_ADDRESS, send_buffer, 3, HAL_MAX_DELAY);
 80020ce:	251e      	movs	r5, #30
 80020d0:	197c      	adds	r4, r7, r5
 80020d2:	187a      	adds	r2, r7, r1
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	2301      	movs	r3, #1
 80020d8:	425b      	negs	r3, r3
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2303      	movs	r3, #3
 80020de:	21a0      	movs	r1, #160	@ 0xa0
 80020e0:	f001 fe16 	bl	8003d10 <HAL_I2C_Master_Transmit>
 80020e4:	0003      	movs	r3, r0
 80020e6:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 80020e8:	197b      	adds	r3, r7, r5
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <eeprom_write_float+0x8e>
		{
			return retval;
 80020f0:	197b      	adds	r3, r7, r5
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	e00e      	b.n	8002114 <eeprom_write_float+0xac>
		}
		HAL_Delay(10);
 80020f6:	200a      	movs	r0, #10
 80020f8:	f001 fac0 	bl	800367c <HAL_Delay>
	for(uint8_t i = 0; i < 4; i++)
 80020fc:	211f      	movs	r1, #31
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	187b      	adds	r3, r7, r1
 8002104:	3201      	adds	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	231f      	movs	r3, #31
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d9be      	bls.n	8002090 <eeprom_write_float+0x28>
	}
	return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b008      	add	sp, #32
 800211a:	bdb0      	pop	{r4, r5, r7, pc}

0800211c <eeprom_read_float>:
	return HAL_OK;
}


static HAL_StatusTypeDef eeprom_read_float(I2C_HandleTypeDef *i2c, uint16_t eeprom_mem_addr, float *value_to_read)
{
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	230a      	movs	r3, #10
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	1c0a      	adds	r2, r1, #0
 800212c:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 800212e:	231e      	movs	r3, #30
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]

	uint8_t value_bytes[4];
	uint8_t send_buffer[2];
	for(uint8_t i = 0; i < 4; i++)
 8002136:	231f      	movs	r3, #31
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e051      	b.n	80021e4 <eeprom_read_float+0xc8>
	{
		uint16_t eeprom_store_addr = eeprom_mem_addr + i;
 8002140:	231f      	movs	r3, #31
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b299      	uxth	r1, r3
 8002148:	201c      	movs	r0, #28
 800214a:	183b      	adds	r3, r7, r0
 800214c:	220a      	movs	r2, #10
 800214e:	18ba      	adds	r2, r7, r2
 8002150:	8812      	ldrh	r2, [r2, #0]
 8002152:	188a      	adds	r2, r1, r2
 8002154:	801a      	strh	r2, [r3, #0]
		send_buffer[0] = (uint8_t)((eeprom_store_addr >> 8) & 0xFF);  // High Byte
 8002156:	0001      	movs	r1, r0
 8002158:	187b      	adds	r3, r7, r1
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	b29b      	uxth	r3, r3
 8002160:	b2da      	uxtb	r2, r3
 8002162:	2014      	movs	r0, #20
 8002164:	183b      	adds	r3, r7, r0
 8002166:	701a      	strb	r2, [r3, #0]
		send_buffer[1] = (uint8_t)(eeprom_store_addr & 0xFF);         // Low Byte
 8002168:	187b      	adds	r3, r7, r1
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	183b      	adds	r3, r7, r0
 8002170:	705a      	strb	r2, [r3, #1]

		retval = HAL_I2C_Master_Transmit(i2c, EEPROM_I2C_ADDRESS, send_buffer, 2, HAL_MAX_DELAY);
 8002172:	251e      	movs	r5, #30
 8002174:	197c      	adds	r4, r7, r5
 8002176:	183a      	adds	r2, r7, r0
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	2301      	movs	r3, #1
 800217c:	425b      	negs	r3, r3
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2302      	movs	r3, #2
 8002182:	21a0      	movs	r1, #160	@ 0xa0
 8002184:	f001 fdc4 	bl	8003d10 <HAL_I2C_Master_Transmit>
 8002188:	0003      	movs	r3, r0
 800218a:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 800218c:	197b      	adds	r3, r7, r5
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <eeprom_read_float+0x7e>
		{
			return retval;
 8002194:	197b      	adds	r3, r7, r5
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	e033      	b.n	8002202 <eeprom_read_float+0xe6>
		}
		HAL_Delay(10);
 800219a:	200a      	movs	r0, #10
 800219c:	f001 fa6e 	bl	800367c <HAL_Delay>

		retval = HAL_I2C_Master_Receive(i2c, EEPROM_I2C_ADDRESS, &(value_bytes[i]), 1, HAL_MAX_DELAY);
 80021a0:	231f      	movs	r3, #31
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2218      	movs	r2, #24
 80021a8:	18ba      	adds	r2, r7, r2
 80021aa:	18d2      	adds	r2, r2, r3
 80021ac:	251e      	movs	r5, #30
 80021ae:	197c      	adds	r4, r7, r5
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	2301      	movs	r3, #1
 80021b4:	425b      	negs	r3, r3
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2301      	movs	r3, #1
 80021ba:	21a0      	movs	r1, #160	@ 0xa0
 80021bc:	f001 fed2 	bl	8003f64 <HAL_I2C_Master_Receive>
 80021c0:	0003      	movs	r3, r0
 80021c2:	7023      	strb	r3, [r4, #0]
		if(retval != HAL_OK)
 80021c4:	197b      	adds	r3, r7, r5
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <eeprom_read_float+0xb6>
		{
			return retval;
 80021cc:	197b      	adds	r3, r7, r5
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	e017      	b.n	8002202 <eeprom_read_float+0xe6>
		}
		HAL_Delay(10);
 80021d2:	200a      	movs	r0, #10
 80021d4:	f001 fa52 	bl	800367c <HAL_Delay>
	for(uint8_t i = 0; i < 4; i++)
 80021d8:	211f      	movs	r1, #31
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	3201      	adds	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	231f      	movs	r3, #31
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d9a8      	bls.n	8002140 <eeprom_read_float+0x24>
	}

	memcpy(value_to_read, value_bytes, sizeof(float));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	2318      	movs	r3, #24
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	0010      	movs	r0, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	2304      	movs	r3, #4
 80021fa:	001a      	movs	r2, r3
 80021fc:	f004 fab4 	bl	8006768 <memcpy>

	return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b008      	add	sp, #32
 8002208:	bdb0      	pop	{r4, r5, r7, pc}

0800220a <init_climate_data>:
 * This function needs to initialize a new climate_data struct
 * 1) get current values from sht41
 * 2) get min/max values from eeprom
 */
HAL_StatusTypeDef init_climate_data(climate_data * cdata, I2C_HandleTypeDef * hi2c)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 8002214:	2317      	movs	r3, #23
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
	cdata->hal_i2c = hi2c;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	619a      	str	r2, [r3, #24]
	float current_climate_vals[2];
	if(get_temperature_sht41(cdata->hal_i2c, current_climate_vals) != HAL_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	220c      	movs	r2, #12
 8002228:	18ba      	adds	r2, r7, r2
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f000 ff85 	bl	800313c <get_temperature_sht41>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d001      	beq.n	800223a <init_climate_data+0x30>
	{
		return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e011      	b.n	800225e <init_climate_data+0x54>
	}
	cdata->current_temp = current_climate_vals[0];
 800223a:	210c      	movs	r1, #12
 800223c:	187b      	adds	r3, r7, r1
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	611a      	str	r2, [r3, #16]
	cdata->current_hum  = current_climate_vals[1];
 8002244:	187b      	adds	r3, r7, r1
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]

	if(read_eeprom_into_climate_data(cdata) != HAL_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f88e 	bl	8002370 <read_eeprom_into_climate_data>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d001      	beq.n	800225c <init_climate_data+0x52>
	{
		return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <init_climate_data+0x54>
	}
	return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b006      	add	sp, #24
 8002264:	bd80      	pop	{r7, pc}

08002266 <update_climate_data_in_eeprom>:
 * Compares the current values to the input climate_data pointer.
 * Update input climate_data values with new values where appropriate.
 * If anything changed, write climate_data to eeprom.
 */
HAL_StatusTypeDef update_climate_data_in_eeprom(climate_data * data)
{
 8002266:	b5b0      	push	{r4, r5, r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retval = HAL_OK;
 800226e:	2517      	movs	r5, #23
 8002270:	197b      	adds	r3, r7, r5
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
	float current_climate_vals[2];
	retval |= get_temperature_sht41(data->hal_i2c, current_climate_vals);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	240c      	movs	r4, #12
 800227c:	193a      	adds	r2, r7, r4
 800227e:	0011      	movs	r1, r2
 8002280:	0018      	movs	r0, r3
 8002282:	f000 ff5b 	bl	800313c <get_temperature_sht41>
 8002286:	0003      	movs	r3, r0
 8002288:	0019      	movs	r1, r3
 800228a:	197b      	adds	r3, r7, r5
 800228c:	197a      	adds	r2, r7, r5
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	701a      	strb	r2, [r3, #0]

	data->current_temp = current_climate_vals[0];
 8002294:	193b      	adds	r3, r7, r4
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]
	data->current_hum = current_climate_vals[1];
 800229c:	193b      	adds	r3, r7, r4
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	615a      	str	r2, [r3, #20]

	uint8_t updateEEPROMorNot = 0;
 80022a4:	2516      	movs	r5, #22
 80022a6:	197b      	adds	r3, r7, r5
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
	if(current_climate_vals[0] > data->max_temp)
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c19      	adds	r1, r3, #0
 80022b6:	1c10      	adds	r0, r2, #0
 80022b8:	f7fd ffe2 	bl	8000280 <__aeabi_fcmpgt>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d006      	beq.n	80022ce <update_climate_data_in_eeprom+0x68>
	{
		data->max_temp = current_climate_vals[0];
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	601a      	str	r2, [r3, #0]
		updateEEPROMorNot = 1;
 80022c8:	197b      	adds	r3, r7, r5
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[0] < data->min_temp)
 80022ce:	240c      	movs	r4, #12
 80022d0:	193b      	adds	r3, r7, r4
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	1c19      	adds	r1, r3, #0
 80022da:	1c10      	adds	r0, r2, #0
 80022dc:	f7fd ffbc 	bl	8000258 <__aeabi_fcmplt>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d007      	beq.n	80022f4 <update_climate_data_in_eeprom+0x8e>
	{
		data->min_temp = current_climate_vals[0];
 80022e4:	193b      	adds	r3, r7, r4
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	605a      	str	r2, [r3, #4]
		updateEEPROMorNot = 1;
 80022ec:	2316      	movs	r3, #22
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[1] > data->max_hum)
 80022f4:	240c      	movs	r4, #12
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	1c19      	adds	r1, r3, #0
 8002300:	1c10      	adds	r0, r2, #0
 8002302:	f7fd ffbd 	bl	8000280 <__aeabi_fcmpgt>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d007      	beq.n	800231a <update_climate_data_in_eeprom+0xb4>
	{
		data->max_hum = current_climate_vals[1];
 800230a:	193b      	adds	r3, r7, r4
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	609a      	str	r2, [r3, #8]
		updateEEPROMorNot = 1;
 8002312:	2316      	movs	r3, #22
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
	}
	if(current_climate_vals[1] < data->min_hum)
 800231a:	240c      	movs	r4, #12
 800231c:	193b      	adds	r3, r7, r4
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	1c19      	adds	r1, r3, #0
 8002326:	1c10      	adds	r0, r2, #0
 8002328:	f7fd ff96 	bl	8000258 <__aeabi_fcmplt>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d007      	beq.n	8002340 <update_climate_data_in_eeprom+0xda>
	{
		data->min_hum = current_climate_vals[1];
 8002330:	193b      	adds	r3, r7, r4
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]
		updateEEPROMorNot = 1;
 8002338:	2316      	movs	r3, #22
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
	}

	if(updateEEPROMorNot)
 8002340:	2316      	movs	r3, #22
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <update_climate_data_in_eeprom+0xfc>
	{
		retval|= write_eeprom_from_climate_data(data);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f84f 	bl	80023f0 <write_eeprom_from_climate_data>
 8002352:	0003      	movs	r3, r0
 8002354:	0019      	movs	r1, r3
 8002356:	2217      	movs	r2, #23
 8002358:	18bb      	adds	r3, r7, r2
 800235a:	18ba      	adds	r2, r7, r2
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	701a      	strb	r2, [r3, #0]
	}


	return retval;
 8002362:	2317      	movs	r3, #23
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bdb0      	pop	{r4, r5, r7, pc}

08002370 <read_eeprom_into_climate_data>:

HAL_StatusTypeDef read_eeprom_into_climate_data(climate_data * data)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	if( eeprom_read_float(data->hal_i2c, EEPROM_MAX_TEMP_ADDR, &(data->max_temp)) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4918      	ldr	r1, [pc, #96]	@ (80023e0 <read_eeprom_into_climate_data+0x70>)
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff fecb 	bl	800211c <eeprom_read_float>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <read_eeprom_into_climate_data+0x1e>
	{
		return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e023      	b.n	80023d6 <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MIN_TEMP_ADDR, &(data->min_temp)) != HAL_OK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6998      	ldr	r0, [r3, #24]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	4913      	ldr	r1, [pc, #76]	@ (80023e4 <read_eeprom_into_climate_data+0x74>)
 8002398:	001a      	movs	r2, r3
 800239a:	f7ff febf 	bl	800211c <eeprom_read_float>
 800239e:	1e03      	subs	r3, r0, #0
 80023a0:	d001      	beq.n	80023a6 <read_eeprom_into_climate_data+0x36>
	{
		return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e017      	b.n	80023d6 <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MAX_HUM_ADDR, &(data->max_hum)) != HAL_OK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6998      	ldr	r0, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3308      	adds	r3, #8
 80023ae:	490e      	ldr	r1, [pc, #56]	@ (80023e8 <read_eeprom_into_climate_data+0x78>)
 80023b0:	001a      	movs	r2, r3
 80023b2:	f7ff feb3 	bl	800211c <eeprom_read_float>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d001      	beq.n	80023be <read_eeprom_into_climate_data+0x4e>
	{
		return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00b      	b.n	80023d6 <read_eeprom_into_climate_data+0x66>
	}
	if( eeprom_read_float(data->hal_i2c, EEPROM_MIN_HUM_ADDR, &(data->min_hum)) != HAL_OK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6998      	ldr	r0, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	330c      	adds	r3, #12
 80023c6:	4909      	ldr	r1, [pc, #36]	@ (80023ec <read_eeprom_into_climate_data+0x7c>)
 80023c8:	001a      	movs	r2, r3
 80023ca:	f7ff fea7 	bl	800211c <eeprom_read_float>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <read_eeprom_into_climate_data+0x66>
	{
		return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e7ff      	b.n	80023d6 <read_eeprom_into_climate_data+0x66>
	}
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	00001555 	.word	0x00001555
 80023e4:	00001559 	.word	0x00001559
 80023e8:	0000155d 	.word	0x0000155d
 80023ec:	00001561 	.word	0x00001561

080023f0 <write_eeprom_from_climate_data>:

HAL_StatusTypeDef write_eeprom_from_climate_data(climate_data * data)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	if( eeprom_write_float(data->hal_i2c, EEPROM_MAX_TEMP_ADDR, data->max_temp) != HAL_OK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6998      	ldr	r0, [r3, #24]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4917      	ldr	r1, [pc, #92]	@ (8002460 <write_eeprom_from_climate_data+0x70>)
 8002402:	1c1a      	adds	r2, r3, #0
 8002404:	f7ff fe30 	bl	8002068 <eeprom_write_float>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d001      	beq.n	8002410 <write_eeprom_from_climate_data+0x20>
	{
		return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e023      	b.n	8002458 <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MIN_TEMP_ADDR, data->min_temp) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6998      	ldr	r0, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4912      	ldr	r1, [pc, #72]	@ (8002464 <write_eeprom_from_climate_data+0x74>)
 800241a:	1c1a      	adds	r2, r3, #0
 800241c:	f7ff fe24 	bl	8002068 <eeprom_write_float>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <write_eeprom_from_climate_data+0x38>
	{
		return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e017      	b.n	8002458 <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MAX_HUM_ADDR, data->max_hum) != HAL_OK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6998      	ldr	r0, [r3, #24]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	490d      	ldr	r1, [pc, #52]	@ (8002468 <write_eeprom_from_climate_data+0x78>)
 8002432:	1c1a      	adds	r2, r3, #0
 8002434:	f7ff fe18 	bl	8002068 <eeprom_write_float>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d001      	beq.n	8002440 <write_eeprom_from_climate_data+0x50>
	{
		return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e00b      	b.n	8002458 <write_eeprom_from_climate_data+0x68>
	}
	if( eeprom_write_float(data->hal_i2c, EEPROM_MIN_HUM_ADDR, data->min_hum) != HAL_OK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6998      	ldr	r0, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4908      	ldr	r1, [pc, #32]	@ (800246c <write_eeprom_from_climate_data+0x7c>)
 800244a:	1c1a      	adds	r2, r3, #0
 800244c:	f7ff fe0c 	bl	8002068 <eeprom_write_float>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d001      	beq.n	8002458 <write_eeprom_from_climate_data+0x68>
	{
		return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e7ff      	b.n	8002458 <write_eeprom_from_climate_data+0x68>
	}
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}
 8002460:	00001555 	.word	0x00001555
 8002464:	00001559 	.word	0x00001559
 8002468:	0000155d 	.word	0x0000155d
 800246c:	00001561 	.word	0x00001561

08002470 <reset_climate_data_eeprom>:

HAL_StatusTypeDef reset_climate_data_eeprom(I2C_HandleTypeDef * hi2c)
{
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b08c      	sub	sp, #48	@ 0x30
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retval = HAL_OK;
 8002478:	252f      	movs	r5, #47	@ 0x2f
 800247a:	197b      	adds	r3, r7, r5
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
	float current_climate_vals[2];
	retval |= get_temperature_sht41(hi2c, current_climate_vals);
 8002480:	2424      	movs	r4, #36	@ 0x24
 8002482:	193a      	adds	r2, r7, r4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fe57 	bl	800313c <get_temperature_sht41>
 800248e:	0003      	movs	r3, r0
 8002490:	0019      	movs	r1, r3
 8002492:	197b      	adds	r3, r7, r5
 8002494:	197a      	adds	r2, r7, r5
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]

	climate_data cdata;
	cdata.current_temp = current_climate_vals[0];
 800249c:	0020      	movs	r0, r4
 800249e:	183b      	adds	r3, r7, r0
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2108      	movs	r1, #8
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	611a      	str	r2, [r3, #16]
	cdata.current_hum  = current_climate_vals[1];
 80024a8:	183b      	adds	r3, r7, r0
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	615a      	str	r2, [r3, #20]
	cdata.max_temp = current_climate_vals[0];
 80024b0:	183b      	adds	r3, r7, r0
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	601a      	str	r2, [r3, #0]
	cdata.min_temp = current_climate_vals[0];
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	605a      	str	r2, [r3, #4]
	cdata.max_hum  = current_climate_vals[1];
 80024c0:	183b      	adds	r3, r7, r0
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	609a      	str	r2, [r3, #8]
	cdata.min_hum  = current_climate_vals[1];
 80024c8:	183b      	adds	r3, r7, r0
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	60da      	str	r2, [r3, #12]
	cdata.hal_i2c = hi2c;
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	619a      	str	r2, [r3, #24]

	retval |= write_eeprom_from_climate_data(&cdata);
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff ff89 	bl	80023f0 <write_eeprom_from_climate_data>
 80024de:	0003      	movs	r3, r0
 80024e0:	0019      	movs	r1, r3
 80024e2:	197b      	adds	r3, r7, r5
 80024e4:	197a      	adds	r2, r7, r5
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]

	return retval;
 80024ec:	197b      	adds	r3, r7, r5
 80024ee:	781b      	ldrb	r3, [r3, #0]
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b00c      	add	sp, #48	@ 0x30
 80024f6:	bdb0      	pop	{r4, r5, r7, pc}

080024f8 <lcd_send_command>:
#include "lcd.h"



static HAL_StatusTypeDef lcd_send_command(I2C_HandleTypeDef *hi2c, char cmd)
{
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	000a      	movs	r2, r1
 8002502:	1cfb      	adds	r3, r7, #3
 8002504:	701a      	strb	r2, [r3, #0]
	char data_upper, data_lower;
	data_upper = (cmd & 0xf0);
 8002506:	200f      	movs	r0, #15
 8002508:	183b      	adds	r3, r7, r0
 800250a:	1cfa      	adds	r2, r7, #3
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	210f      	movs	r1, #15
 8002510:	438a      	bics	r2, r1
 8002512:	701a      	strb	r2, [r3, #0]
	data_lower = ((cmd << 4) & 0xf0);
 8002514:	1cfb      	adds	r3, r7, #3
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	011a      	lsls	r2, r3, #4
 800251a:	240e      	movs	r4, #14
 800251c:	193b      	adds	r3, r7, r4
 800251e:	701a      	strb	r2, [r3, #0]
	uint8_t data[4];
	data[0] = data_upper | 0x0C; //en=1, rs=0 -> bxxxx1100
 8002520:	183b      	adds	r3, r7, r0
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	220c      	movs	r2, #12
 8002526:	4313      	orrs	r3, r2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	2108      	movs	r1, #8
 800252c:	187b      	adds	r3, r7, r1
 800252e:	701a      	strb	r2, [r3, #0]
	data[1] = data_upper | 0x08; //en=0, rs=0 -> bxxxx1000
 8002530:	183b      	adds	r3, r7, r0
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2208      	movs	r2, #8
 8002536:	4313      	orrs	r3, r2
 8002538:	b2da      	uxtb	r2, r3
 800253a:	187b      	adds	r3, r7, r1
 800253c:	705a      	strb	r2, [r3, #1]
	data[2] = data_lower | 0x0C;
 800253e:	193b      	adds	r3, r7, r4
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	220c      	movs	r2, #12
 8002544:	4313      	orrs	r3, r2
 8002546:	b2da      	uxtb	r2, r3
 8002548:	187b      	adds	r3, r7, r1
 800254a:	709a      	strb	r2, [r3, #2]
	data[3] = data_lower | 0x08;
 800254c:	193b      	adds	r3, r7, r4
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2208      	movs	r2, #8
 8002552:	4313      	orrs	r3, r2
 8002554:	b2da      	uxtb	r2, r3
 8002556:	187b      	adds	r3, r7, r1
 8002558:	70da      	strb	r2, [r3, #3]
	HAL_StatusTypeDef retval;
	retval = HAL_I2C_Master_Transmit (hi2c, LCD_I2C_ADDR, data, 4, 100);
 800255a:	250d      	movs	r5, #13
 800255c:	197c      	adds	r4, r7, r5
 800255e:	187a      	adds	r2, r7, r1
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	2364      	movs	r3, #100	@ 0x64
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2304      	movs	r3, #4
 8002568:	214e      	movs	r1, #78	@ 0x4e
 800256a:	f001 fbd1 	bl	8003d10 <HAL_I2C_Master_Transmit>
 800256e:	0003      	movs	r3, r0
 8002570:	7023      	strb	r3, [r4, #0]
	return retval;
 8002572:	197b      	adds	r3, r7, r5
 8002574:	781b      	ldrb	r3, [r3, #0]
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bdb0      	pop	{r4, r5, r7, pc}

0800257e <lcd_send_data>:

static HAL_StatusTypeDef lcd_send_data(I2C_HandleTypeDef *hi2c, char data)
{
 800257e:	b5b0      	push	{r4, r5, r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af02      	add	r7, sp, #8
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	000a      	movs	r2, r1
 8002588:	1cfb      	adds	r3, r7, #3
 800258a:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800258c:	200f      	movs	r0, #15
 800258e:	183b      	adds	r3, r7, r0
 8002590:	1cfa      	adds	r2, r7, #3
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	210f      	movs	r1, #15
 8002596:	438a      	bics	r2, r1
 8002598:	701a      	strb	r2, [r3, #0]
	data_l = ((data << 4) & 0xf0);
 800259a:	1cfb      	adds	r3, r7, #3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	011a      	lsls	r2, r3, #4
 80025a0:	240e      	movs	r4, #14
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1 -> bxxxx1101
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	220d      	movs	r2, #13
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	2108      	movs	r1, #8
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u | 0x09;  //en=0, rs=1 -> bxxxx1001
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2209      	movs	r2, #9
 80025bc:	4313      	orrs	r3, r2
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1 -> bxxxx1101
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	220d      	movs	r2, #13
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l | 0x09;  //en=0, rs=1 -> bxxxx1001
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2209      	movs	r2, #9
 80025d8:	4313      	orrs	r3, r2
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	70da      	strb	r2, [r3, #3]
	HAL_StatusTypeDef retval;
	retval = HAL_I2C_Master_Transmit (hi2c, LCD_I2C_ADDR, data_t, 4, 100);
 80025e0:	250d      	movs	r5, #13
 80025e2:	197c      	adds	r4, r7, r5
 80025e4:	187a      	adds	r2, r7, r1
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	2364      	movs	r3, #100	@ 0x64
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2304      	movs	r3, #4
 80025ee:	214e      	movs	r1, #78	@ 0x4e
 80025f0:	f001 fb8e 	bl	8003d10 <HAL_I2C_Master_Transmit>
 80025f4:	0003      	movs	r3, r0
 80025f6:	7023      	strb	r3, [r4, #0]
	return retval;
 80025f8:	197b      	adds	r3, r7, r5
 80025fa:	781b      	ldrb	r3, [r3, #0]
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b004      	add	sp, #16
 8002602:	bdb0      	pop	{r4, r5, r7, pc}

08002604 <lcd_init_settings>:

static HAL_StatusTypeDef lcd_init_settings(I2C_HandleTypeDef *hi2c)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	static uint8_t initialized = 0;

	if(!initialized)
 800260c:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <lcd_init_settings+0xcc>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d158      	bne.n	80026c6 <lcd_init_settings+0xc2>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, LCD_I2C_ADDR, 10, 1000) != HAL_OK) {
 8002614:	23fa      	movs	r3, #250	@ 0xfa
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	220a      	movs	r2, #10
 800261c:	214e      	movs	r1, #78	@ 0x4e
 800261e:	f001 fda9 	bl	8004174 <HAL_I2C_IsDeviceReady>
 8002622:	1e03      	subs	r3, r0, #0
 8002624:	d001      	beq.n	800262a <lcd_init_settings+0x26>
			return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04e      	b.n	80026c8 <lcd_init_settings+0xc4>
		}
		// 4 bit initialisation
		HAL_Delay(50);  // wait for >40ms
 800262a:	2032      	movs	r0, #50	@ 0x32
 800262c:	f001 f826 	bl	800367c <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2130      	movs	r1, #48	@ 0x30
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff ff5f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(5);  // wait for >4.1ms
 800263a:	2005      	movs	r0, #5
 800263c:	f001 f81e 	bl	800367c <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2130      	movs	r1, #48	@ 0x30
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff ff57 	bl	80024f8 <lcd_send_command>
		HAL_Delay(1);  // wait for >100us
 800264a:	2001      	movs	r0, #1
 800264c:	f001 f816 	bl	800367c <HAL_Delay>
		lcd_send_command (hi2c, 0x30);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2130      	movs	r1, #48	@ 0x30
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff ff4f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(10);
 800265a:	200a      	movs	r0, #10
 800265c:	f001 f80e 	bl	800367c <HAL_Delay>
		lcd_send_command (hi2c, 0x20);  // 4bit mode
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2120      	movs	r1, #32
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff ff47 	bl	80024f8 <lcd_send_command>
		HAL_Delay(10);
 800266a:	200a      	movs	r0, #10
 800266c:	f001 f806 	bl	800367c <HAL_Delay>

		// display initialisation
		lcd_send_command (hi2c, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2128      	movs	r1, #40	@ 0x28
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff3f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(1);
 800267a:	2001      	movs	r0, #1
 800267c:	f000 fffe 	bl	800367c <HAL_Delay>
		lcd_send_command (hi2c, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2108      	movs	r1, #8
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff ff37 	bl	80024f8 <lcd_send_command>
		HAL_Delay(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f000 fff6 	bl	800367c <HAL_Delay>
		lcd_send_command (hi2c, 0x01);  // clear display
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2101      	movs	r1, #1
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff ff2f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(2);
 800269a:	2002      	movs	r0, #2
 800269c:	f000 ffee 	bl	800367c <HAL_Delay>
		lcd_send_command (hi2c, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2106      	movs	r1, #6
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff ff27 	bl	80024f8 <lcd_send_command>
		HAL_Delay(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f000 ffe6 	bl	800367c <HAL_Delay>
		lcd_send_command (hi2c, 0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	210c      	movs	r1, #12
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff ff1f 	bl	80024f8 <lcd_send_command>
		HAL_Delay(100);
 80026ba:	2064      	movs	r0, #100	@ 0x64
 80026bc:	f000 ffde 	bl	800367c <HAL_Delay>

		initialized = 1;
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <lcd_init_settings+0xcc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
	}
	return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000078 	.word	0x20000078

080026d4 <lcd_print_string>:


void lcd_print_string (I2C_HandleTypeDef *hi2c, char *str)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
	lcd_init_settings(hi2c);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ff8f 	bl	8002604 <lcd_init_settings>
	while (*str) lcd_send_data (hi2c, *str++);
 80026e6:	e008      	b.n	80026fa <lcd_print_string+0x26>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	603a      	str	r2, [r7, #0]
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7ff ff42 	bl	800257e <lcd_send_data>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f2      	bne.n	80026e8 <lcd_print_string+0x14>
}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <lcd_place_cursor>:

void lcd_place_cursor(I2C_HandleTypeDef *hi2c, int row, int col)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	lcd_init_settings(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff ff72 	bl	8002604 <lcd_init_settings>
    switch (row)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <lcd_place_cursor+0x22>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d005      	beq.n	8002738 <lcd_place_cursor+0x2c>
 800272c:	e009      	b.n	8002742 <lcd_place_cursor+0x36>
    {
        case 0:
            col |= 0x80;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2280      	movs	r2, #128	@ 0x80
 8002732:	4313      	orrs	r3, r2
 8002734:	607b      	str	r3, [r7, #4]
            break;
 8002736:	e004      	b.n	8002742 <lcd_place_cursor+0x36>
        case 1:
            col |= 0xC0;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	22c0      	movs	r2, #192	@ 0xc0
 800273c:	4313      	orrs	r3, r2
 800273e:	607b      	str	r3, [r7, #4]
            break;
 8002740:	46c0      	nop			@ (mov r8, r8)
    }
    lcd_send_command (hi2c, col);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	0011      	movs	r1, r2
 800274a:	0018      	movs	r0, r3
 800274c:	f7ff fed4 	bl	80024f8 <lcd_send_command>
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}

08002758 <lcd_clear_display>:

void lcd_clear_display(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	lcd_send_command (hi2c, 0x01);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2101      	movs	r1, #1
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff fec7 	bl	80024f8 <lcd_send_command>
	HAL_Delay(10);
 800276a:	200a      	movs	r0, #10
 800276c:	f000 ff86 	bl	800367c <HAL_Delay>
}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <lcd_print_2_lines>:

void lcd_print_2_lines(I2C_HandleTypeDef *hi2c, char* top_line, char* bot_line)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
	//lcd_clear_display(hi2c);
	lcd_place_cursor(hi2c, 0, 0);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff ffbe 	bl	800270c <lcd_place_cursor>
	lcd_print_string(hi2c, top_line);
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	0011      	movs	r1, r2
 8002796:	0018      	movs	r0, r3
 8002798:	f7ff ff9c 	bl	80026d4 <lcd_print_string>
	lcd_place_cursor(hi2c, 1, 0);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	2101      	movs	r1, #1
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff ffb2 	bl	800270c <lcd_place_cursor>
	lcd_print_string(hi2c, bot_line);
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7ff ff90 	bl	80026d4 <lcd_print_string>
}
 80027b4:	46c0      	nop			@ (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_PeriodElapsedCallback>:
 * 	- blocking call to WaitForButtonPress()?
 * 	- Callback when a button is pressed?
 * 	-
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	static uint16_t button_down_counter = 0;
	static uint16_t button_up_counter = 0;
	static GPIO_PinState last_button_state = GPIO_PIN_RESET;  // Assume button is normally HIGH
	static uint8_t button_pressed = 0;

	if (htim->Instance == TIM2)  // 100 Hz timer
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	05db      	lsls	r3, r3, #23
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d155      	bne.n	800287c <HAL_TIM_PeriodElapsedCallback+0xc0>
	{
		GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80027d0:	250f      	movs	r5, #15
 80027d2:	197c      	adds	r4, r7, r5
 80027d4:	2390      	movs	r3, #144	@ 0x90
 80027d6:	05db      	lsls	r3, r3, #23
 80027d8:	2180      	movs	r1, #128	@ 0x80
 80027da:	0018      	movs	r0, r3
 80027dc:	f001 f9b8 	bl	8003b50 <HAL_GPIO_ReadPin>
 80027e0:	0003      	movs	r3, r0
 80027e2:	7023      	strb	r3, [r4, #0]
		if (buttonState == GPIO_PIN_SET && last_button_state == GPIO_PIN_RESET)
 80027e4:	197b      	adds	r3, r7, r5
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10a      	bne.n	8002802 <HAL_TIM_PeriodElapsedCallback+0x46>
 80027ec:	4b25      	ldr	r3, [pc, #148]	@ (8002884 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			button_pressed = 1;
 80027f4:	4b24      	ldr	r3, [pc, #144]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
			last_button_state = GPIO_PIN_SET;
 80027fa:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e00a      	b.n	8002818 <HAL_TIM_PeriodElapsedCallback+0x5c>
		}
		else if(buttonState == GPIO_PIN_RESET)
 8002802:	230f      	movs	r3, #15
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			button_pressed = 0;
 800280c:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
			last_button_state = GPIO_PIN_RESET;
 8002812:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
		else
		{

		}

		if(button_pressed)
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_TIM_PeriodElapsedCallback+0x8c>
		{
			button_pressed = 0;
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
			current_lcd_screen = (current_lcd_screen + 1) % NUMBER_LCD_SCREENS;
 8002826:	4b19      	ldr	r3, [pc, #100]	@ (800288c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800282e:	4013      	ands	r3, r2
 8002830:	d504      	bpl.n	800283c <HAL_TIM_PeriodElapsedCallback+0x80>
 8002832:	3b01      	subs	r3, #1
 8002834:	2204      	movs	r2, #4
 8002836:	4252      	negs	r2, r2
 8002838:	4313      	orrs	r3, r2
 800283a:	3301      	adds	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002840:	701a      	strb	r2, [r3, #0]
			lcd_update_pending = 1;  // Signal LCD update
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
		}

		// Temperature sampling
		if (++tick_counter >= 300)  // 3 seconds at 100 Hz
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002856:	881a      	ldrh	r2, [r3, #0]
 8002858:	2396      	movs	r3, #150	@ 0x96
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	429a      	cmp	r2, r3
 800285e:	d306      	bcc.n	800286e <HAL_TIM_PeriodElapsedCallback+0xb2>
		{
			tick_counter = 0;
 8002860:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]
			sample_pending = 1;
 8002866:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
			_1_second_elapsed = 1;
		}


	}
}
 800286c:	e006      	b.n	800287c <HAL_TIM_PeriodElapsedCallback+0xc0>
		else if(tick_counter >= 100) // 1 second
 800286e:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	2b63      	cmp	r3, #99	@ 0x63
 8002874:	d902      	bls.n	800287c <HAL_TIM_PeriodElapsedCallback+0xc0>
			_1_second_elapsed = 1;
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
}
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b004      	add	sp, #16
 8002882:	bdb0      	pop	{r4, r5, r7, pc}
 8002884:	2000016c 	.word	0x2000016c
 8002888:	2000016d 	.word	0x2000016d
 800288c:	20000148 	.word	0x20000148
 8002890:	80000003 	.word	0x80000003
 8002894:	20000149 	.word	0x20000149
 8002898:	2000016e 	.word	0x2000016e
 800289c:	2000014a 	.word	0x2000014a
 80028a0:	2000014c 	.word	0x2000014c

080028a4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	if(current_lcd_screen == 3)
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <HAL_RTC_AlarmAEventCallback+0x20>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d102      	bne.n	80028ba <HAL_RTC_AlarmAEventCallback+0x16>
	{
		lcd_refresh_clock = 1;
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <HAL_RTC_AlarmAEventCallback+0x24>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
	}
}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	20000148 	.word	0x20000148
 80028c8:	2000014d 	.word	0x2000014d

080028cc <set_time>:

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b089      	sub	sp, #36	@ 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	0004      	movs	r4, r0
 80028d4:	0008      	movs	r0, r1
 80028d6:	0011      	movs	r1, r2
 80028d8:	1dfb      	adds	r3, r7, #7
 80028da:	1c22      	adds	r2, r4, #0
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	1dbb      	adds	r3, r7, #6
 80028e0:	1c02      	adds	r2, r0, #0
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	1d7b      	adds	r3, r7, #5
 80028e6:	1c0a      	adds	r2, r1, #0
 80028e8:	701a      	strb	r2, [r3, #0]
	RTC_TimeTypeDef sTime = {0};
 80028ea:	240c      	movs	r4, #12
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	0018      	movs	r0, r3
 80028f0:	2314      	movs	r3, #20
 80028f2:	001a      	movs	r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	f003 ff03 	bl	8006700 <memset>

	sTime.Hours = hr;
 80028fa:	0021      	movs	r1, r4
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	1dfa      	adds	r2, r7, #7
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = min;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	1dba      	adds	r2, r7, #6
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = sec;
 800290c:	187b      	adds	r3, r7, r1
 800290e:	1d7a      	adds	r2, r7, #5
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002914:	187b      	adds	r3, r7, r1
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002920:	1879      	adds	r1, r7, r1
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <set_time+0x70>)
 8002924:	2200      	movs	r2, #0
 8002926:	0018      	movs	r0, r3
 8002928:	f002 fee4 	bl	80056f4 <HAL_RTC_SetTime>
 800292c:	1e03      	subs	r3, r0, #0
 800292e:	d001      	beq.n	8002934 <set_time+0x68>
	{
		Error_Handler();
 8002930:	f000 fbfe 	bl	8003130 <Error_Handler>
	}
}
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b009      	add	sp, #36	@ 0x24
 800293a:	bd90      	pop	{r4, r7, pc}
 800293c:	200000d0 	.word	0x200000d0

08002940 <get_time_date>:

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
}

void get_time_date(char *time, char *date)
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af02      	add	r7, sp, #8
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800294a:	2408      	movs	r4, #8
 800294c:	1939      	adds	r1, r7, r4
 800294e:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <get_time_date+0x70>)
 8002950:	2200      	movs	r2, #0
 8002952:	0018      	movs	r0, r3
 8002954:	f002 ff74 	bl	8005840 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002958:	251c      	movs	r5, #28
 800295a:	1979      	adds	r1, r7, r5
 800295c:	4b14      	ldr	r3, [pc, #80]	@ (80029b0 <get_time_date+0x70>)
 800295e:	2200      	movs	r2, #0
 8002960:	0018      	movs	r0, r3
 8002962:	f003 f85b 	bl	8005a1c <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002966:	0021      	movs	r1, r4
 8002968:	187b      	adds	r3, r7, r1
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	001a      	movs	r2, r3
 800296e:	187b      	adds	r3, r7, r1
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	001c      	movs	r4, r3
 8002974:	187b      	adds	r3, r7, r1
 8002976:	789b      	ldrb	r3, [r3, #2]
 8002978:	490e      	ldr	r1, [pc, #56]	@ (80029b4 <get_time_date+0x74>)
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	0023      	movs	r3, r4
 8002980:	f003 fe9e 	bl	80066c0 <siprintf>

  /* Display date Format: dd-mm-yyyy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8002984:	197b      	adds	r3, r7, r5
 8002986:	789b      	ldrb	r3, [r3, #2]
 8002988:	001a      	movs	r2, r3
 800298a:	197b      	adds	r3, r7, r5
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	001c      	movs	r4, r3
 8002990:	197b      	adds	r3, r7, r5
 8002992:	78db      	ldrb	r3, [r3, #3]
 8002994:	21fa      	movs	r1, #250	@ 0xfa
 8002996:	00c9      	lsls	r1, r1, #3
 8002998:	468c      	mov	ip, r1
 800299a:	4463      	add	r3, ip
 800299c:	4906      	ldr	r1, [pc, #24]	@ (80029b8 <get_time_date+0x78>)
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	0023      	movs	r3, r4
 80029a4:	f003 fe8c 	bl	80066c0 <siprintf>
}
 80029a8:	46c0      	nop			@ (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b008      	add	sp, #32
 80029ae:	bdb0      	pop	{r4, r5, r7, pc}
 80029b0:	200000d0 	.word	0x200000d0
 80029b4:	08007014 	.word	0x08007014
 80029b8:	08007024 	.word	0x08007024

080029bc <init_lcd_screens>:


void init_lcd_screens()
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
	//uint8_t amount_screens = sizeof(lcd_screens) / sizeof(lcd_screens[0]); // way to calculate
	lcd_screens[0] = lcd_print_current_climate;
 80029c0:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <init_lcd_screens+0x2c>)
 80029c2:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <init_lcd_screens+0x30>)
 80029c4:	601a      	str	r2, [r3, #0]
	lcd_screens[1] = lcd_print_minmax_temp;
 80029c6:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <init_lcd_screens+0x2c>)
 80029c8:	4a09      	ldr	r2, [pc, #36]	@ (80029f0 <init_lcd_screens+0x34>)
 80029ca:	605a      	str	r2, [r3, #4]
	lcd_screens[2] = lcd_print_minmax_hum;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <init_lcd_screens+0x2c>)
 80029ce:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <init_lcd_screens+0x38>)
 80029d0:	609a      	str	r2, [r3, #8]
	lcd_screens[3] = lcd_print_time;
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <init_lcd_screens+0x2c>)
 80029d4:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <init_lcd_screens+0x3c>)
 80029d6:	60da      	str	r2, [r3, #12]
	lcd_screens[0](&cdata);
 80029d8:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <init_lcd_screens+0x2c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <init_lcd_screens+0x40>)
 80029de:	0010      	movs	r0, r2
 80029e0:	4798      	blx	r3
}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000138 	.word	0x20000138
 80029ec:	08002a01 	.word	0x08002a01
 80029f0:	08002a7d 	.word	0x08002a7d
 80029f4:	08002af9 	.word	0x08002af9
 80029f8:	08002b75 	.word	0x08002b75
 80029fc:	20000150 	.word	0x20000150

08002a00 <lcd_print_current_climate>:
	lcd_place_cursor(hi2c, 1, 0);
	lcd_print_string(hi2c, hum_buffer);
}

void lcd_print_current_climate(climate_data *clim_data)
{
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b092      	sub	sp, #72	@ 0x48
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002a08:	2428      	movs	r4, #40	@ 0x28
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	3304      	adds	r3, #4
 8002a12:	221c      	movs	r2, #28
 8002a14:	2100      	movs	r1, #0
 8002a16:	0018      	movs	r0, r3
 8002a18:	f003 fe72 	bl	8006700 <memset>
	char hum_str_buffer[32] = {0};
 8002a1c:	2508      	movs	r5, #8
 8002a1e:	197b      	adds	r3, r7, r5
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	3304      	adds	r3, #4
 8002a26:	221c      	movs	r2, #28
 8002a28:	2100      	movs	r1, #0
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f003 fe68 	bl	8006700 <memset>

	sprintf(temp_str_buffer, "Cur Temp: %dF", (int) clim_data->current_temp);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	1c18      	adds	r0, r3, #0
 8002a36:	f7fd fcfd 	bl	8000434 <__aeabi_f2iz>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	490d      	ldr	r1, [pc, #52]	@ (8002a74 <lcd_print_current_climate+0x74>)
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	0018      	movs	r0, r3
 8002a42:	f003 fe3d 	bl	80066c0 <siprintf>
	sprintf(hum_str_buffer, "Cur Hum:  %d%%", (int) clim_data->current_hum);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	1c18      	adds	r0, r3, #0
 8002a4c:	f7fd fcf2 	bl	8000434 <__aeabi_f2iz>
 8002a50:	0002      	movs	r2, r0
 8002a52:	4909      	ldr	r1, [pc, #36]	@ (8002a78 <lcd_print_current_climate+0x78>)
 8002a54:	197b      	adds	r3, r7, r5
 8002a56:	0018      	movs	r0, r3
 8002a58:	f003 fe32 	bl	80066c0 <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	197a      	adds	r2, r7, r5
 8002a62:	1939      	adds	r1, r7, r4
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7ff fe87 	bl	8002778 <lcd_print_2_lines>
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b012      	add	sp, #72	@ 0x48
 8002a70:	bdb0      	pop	{r4, r5, r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	08007034 	.word	0x08007034
 8002a78:	08007044 	.word	0x08007044

08002a7c <lcd_print_minmax_temp>:

void lcd_print_minmax_temp(climate_data *clim_data)
{
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b092      	sub	sp, #72	@ 0x48
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002a84:	2428      	movs	r4, #40	@ 0x28
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	221c      	movs	r2, #28
 8002a90:	2100      	movs	r1, #0
 8002a92:	0018      	movs	r0, r3
 8002a94:	f003 fe34 	bl	8006700 <memset>
	char hum_str_buffer[32] = {0};
 8002a98:	2508      	movs	r5, #8
 8002a9a:	197b      	adds	r3, r7, r5
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	221c      	movs	r2, #28
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f003 fe2a 	bl	8006700 <memset>

	sprintf(temp_str_buffer, "Max Temp: %dF", (int) clim_data->max_temp);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c18      	adds	r0, r3, #0
 8002ab2:	f7fd fcbf 	bl	8000434 <__aeabi_f2iz>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	490d      	ldr	r1, [pc, #52]	@ (8002af0 <lcd_print_minmax_temp+0x74>)
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	0018      	movs	r0, r3
 8002abe:	f003 fdff 	bl	80066c0 <siprintf>
	sprintf(hum_str_buffer, "Min Temp: %dF", (int) clim_data->min_temp);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	1c18      	adds	r0, r3, #0
 8002ac8:	f7fd fcb4 	bl	8000434 <__aeabi_f2iz>
 8002acc:	0002      	movs	r2, r0
 8002ace:	4909      	ldr	r1, [pc, #36]	@ (8002af4 <lcd_print_minmax_temp+0x78>)
 8002ad0:	197b      	adds	r3, r7, r5
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f003 fdf4 	bl	80066c0 <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	197a      	adds	r2, r7, r5
 8002ade:	1939      	adds	r1, r7, r4
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7ff fe49 	bl	8002778 <lcd_print_2_lines>
}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b012      	add	sp, #72	@ 0x48
 8002aec:	bdb0      	pop	{r4, r5, r7, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	08007054 	.word	0x08007054
 8002af4:	08007064 	.word	0x08007064

08002af8 <lcd_print_minmax_hum>:

void lcd_print_minmax_hum(climate_data *clim_data)
{
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b092      	sub	sp, #72	@ 0x48
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	char temp_str_buffer[32] = {0};
 8002b00:	2428      	movs	r4, #40	@ 0x28
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	221c      	movs	r2, #28
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f003 fdf6 	bl	8006700 <memset>
	char hum_str_buffer[32] = {0};
 8002b14:	2508      	movs	r5, #8
 8002b16:	197b      	adds	r3, r7, r5
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	221c      	movs	r2, #28
 8002b20:	2100      	movs	r1, #0
 8002b22:	0018      	movs	r0, r3
 8002b24:	f003 fdec 	bl	8006700 <memset>

	sprintf(temp_str_buffer, "Max Hum: %d%%", (int) clim_data->max_hum);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	1c18      	adds	r0, r3, #0
 8002b2e:	f7fd fc81 	bl	8000434 <__aeabi_f2iz>
 8002b32:	0002      	movs	r2, r0
 8002b34:	490d      	ldr	r1, [pc, #52]	@ (8002b6c <lcd_print_minmax_hum+0x74>)
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f003 fdc1 	bl	80066c0 <siprintf>
	sprintf(hum_str_buffer, "Min Hum: %d%%", (int) clim_data->min_hum);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	1c18      	adds	r0, r3, #0
 8002b44:	f7fd fc76 	bl	8000434 <__aeabi_f2iz>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	4909      	ldr	r1, [pc, #36]	@ (8002b70 <lcd_print_minmax_hum+0x78>)
 8002b4c:	197b      	adds	r3, r7, r5
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f003 fdb6 	bl	80066c0 <siprintf>

	lcd_print_2_lines(clim_data->hal_i2c, temp_str_buffer, hum_str_buffer);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	197a      	adds	r2, r7, r5
 8002b5a:	1939      	adds	r1, r7, r4
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7ff fe0b 	bl	8002778 <lcd_print_2_lines>
}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b012      	add	sp, #72	@ 0x48
 8002b68:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	08007074 	.word	0x08007074
 8002b70:	08007084 	.word	0x08007084

08002b74 <lcd_print_time>:

void lcd_print_time(climate_data *clim_data)
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b098      	sub	sp, #96	@ 0x60
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;

	char time_buf[32] = {0};
 8002b7c:	242c      	movs	r4, #44	@ 0x2c
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	3304      	adds	r3, #4
 8002b86:	221c      	movs	r2, #28
 8002b88:	2100      	movs	r1, #0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f003 fdb8 	bl	8006700 <memset>
	char date_buf[32] = {0};
 8002b90:	250c      	movs	r5, #12
 8002b92:	197b      	adds	r3, r7, r5
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	221c      	movs	r2, #28
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f003 fdae 	bl	8006700 <memset>

	get_time_date(time_buf, date_buf);
 8002ba4:	197a      	adds	r2, r7, r5
 8002ba6:	193b      	adds	r3, r7, r4
 8002ba8:	0011      	movs	r1, r2
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7ff fec8 	bl	8002940 <get_time_date>

	lcd_print_2_lines(clim_data->hal_i2c, "Uptime:", time_buf);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	193a      	adds	r2, r7, r4
 8002bb6:	4904      	ldr	r1, [pc, #16]	@ (8002bc8 <lcd_print_time+0x54>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff fddd 	bl	8002778 <lcd_print_2_lines>
}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b018      	add	sp, #96	@ 0x60
 8002bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	08007094 	.word	0x08007094

08002bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bd2:	f000 fcef 	bl	80035b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd6:	f000 f8b5 	bl	8002d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bda:	f000 fa51 	bl	8003080 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002bde:	f000 f911 	bl	8002e04 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002be2:	f000 f9f5 	bl	8002fd0 <MX_TIM2_Init>
  MX_RTC_Init();
 8002be6:	f000 f94d 	bl	8002e84 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_StatusTypeDef retval = HAL_OK;
 8002bea:	1dbb      	adds	r3, r7, #6
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
  //retval = reset_climate_data_eeprom(&hi2c1);
  retval = init_climate_data(&cdata, &hi2c1);
 8002bf0:	1dbc      	adds	r4, r7, #6
 8002bf2:	4a49      	ldr	r2, [pc, #292]	@ (8002d18 <main+0x14c>)
 8002bf4:	4b49      	ldr	r3, [pc, #292]	@ (8002d1c <main+0x150>)
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7ff fb06 	bl	800220a <init_climate_data>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	7023      	strb	r3, [r4, #0]
  init_lcd_screens();
 8002c02:	f7ff fedb 	bl	80029bc <init_lcd_screens>

  set_time(0,0,0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7ff fe5e 	bl	80028cc <set_time>
  while (1)
  {
	  if(lcd_refresh_clock)
 8002c10:	4b43      	ldr	r3, [pc, #268]	@ (8002d20 <main+0x154>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <main+0x66>
	  {
		  lcd_refresh_clock = 0;
 8002c1a:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <main+0x154>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
		  lcd_screens[current_lcd_screen](&cdata);
 8002c20:	4b40      	ldr	r3, [pc, #256]	@ (8002d24 <main+0x158>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	001a      	movs	r2, r3
 8002c26:	4b40      	ldr	r3, [pc, #256]	@ (8002d28 <main+0x15c>)
 8002c28:	0092      	lsls	r2, r2, #2
 8002c2a:	58d3      	ldr	r3, [r2, r3]
 8002c2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d1c <main+0x150>)
 8002c2e:	0010      	movs	r0, r2
 8002c30:	4798      	blx	r3
	  }

	  if (lcd_update_pending)
 8002c32:	4b3e      	ldr	r3, [pc, #248]	@ (8002d2c <main+0x160>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <main+0x98>
	  {
		  lcd_update_pending = 0;  // Clear the flag
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d2c <main+0x160>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
		  lcd_clear_display(cdata.hal_i2c);
 8002c42:	4b36      	ldr	r3, [pc, #216]	@ (8002d1c <main+0x150>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7ff fd86 	bl	8002758 <lcd_clear_display>
		  HAL_Delay(10);
 8002c4c:	200a      	movs	r0, #10
 8002c4e:	f000 fd15 	bl	800367c <HAL_Delay>
		  lcd_screens[current_lcd_screen](&cdata);  // Update LCD immediately
 8002c52:	4b34      	ldr	r3, [pc, #208]	@ (8002d24 <main+0x158>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	001a      	movs	r2, r3
 8002c58:	4b33      	ldr	r3, [pc, #204]	@ (8002d28 <main+0x15c>)
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	58d3      	ldr	r3, [r2, r3]
 8002c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d1c <main+0x150>)
 8002c60:	0010      	movs	r0, r2
 8002c62:	4798      	blx	r3
	  }

	  // Check for temperature sampling
	  uint8_t trigger_screen_refresh = 0;
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
	  if(reset_eeprom_flag)
 8002c6a:	4b31      	ldr	r3, [pc, #196]	@ (8002d30 <main+0x164>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d025      	beq.n	8002cc0 <main+0xf4>
	  {
		  reset_eeprom_flag = 0;
 8002c74:	4b2e      	ldr	r3, [pc, #184]	@ (8002d30 <main+0x164>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]

		  lcd_print_2_lines(&hi2c1, "RESETTING EEPROM", ".......");
 8002c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d34 <main+0x168>)
 8002c7c:	492e      	ldr	r1, [pc, #184]	@ (8002d38 <main+0x16c>)
 8002c7e:	4b26      	ldr	r3, [pc, #152]	@ (8002d18 <main+0x14c>)
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff fd79 	bl	8002778 <lcd_print_2_lines>
		  HAL_Delay(2500);
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <main+0x170>)
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 fcf7 	bl	800367c <HAL_Delay>
		  if (reset_climate_data_eeprom(&hi2c1) != HAL_OK)
 8002c8e:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <main+0x14c>)
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff fbed 	bl	8002470 <reset_climate_data_eeprom>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d133      	bne.n	8002d02 <main+0x136>
		  {
			  break;
		  }
		  if(init_climate_data(&cdata, &hi2c1) != HAL_OK)
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d18 <main+0x14c>)
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d1c <main+0x150>)
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff fab2 	bl	800220a <init_climate_data>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d12d      	bne.n	8002d06 <main+0x13a>
		  {
			  break;
		  }
		  sample_pending = 1;
 8002caa:	4b25      	ldr	r3, [pc, #148]	@ (8002d40 <main+0x174>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
		  trigger_screen_refresh = 1;
 8002cb0:	1dfb      	adds	r3, r7, #7
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 8002cb6:	23fa      	movs	r3, #250	@ 0xfa
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 fcde 	bl	800367c <HAL_Delay>
	  }


	  if (sample_pending)
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <main+0x174>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d019      	beq.n	8002cfe <main+0x132>
	  {
		  sample_pending = 0;  // Clear the flag
 8002cca:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <main+0x174>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);

		  if (update_climate_data_in_eeprom(&cdata) != HAL_OK)
 8002cd0:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <main+0x150>)
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff fac7 	bl	8002266 <update_climate_data_in_eeprom>
 8002cd8:	1e03      	subs	r3, r0, #0
 8002cda:	d116      	bne.n	8002d0a <main+0x13e>
		  {
			  break;
		  }
		  //print_climate_data_to_uart(&cdata, &huart2);
		  if(current_lcd_screen == 0 || trigger_screen_refresh)
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <main+0x158>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <main+0x120>
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <main+0x132>
		  {
			  lcd_screens[current_lcd_screen](&cdata);
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <main+0x158>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <main+0x15c>)
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	58d3      	ldr	r3, [r2, r3]
 8002cf8:	4a08      	ldr	r2, [pc, #32]	@ (8002d1c <main+0x150>)
 8002cfa:	0010      	movs	r0, r2
 8002cfc:	4798      	blx	r3
	  }
	  */

	  // Other tasks can be added here...

	  __WFI();
 8002cfe:	bf30      	wfi
  {
 8002d00:	e786      	b.n	8002c10 <main+0x44>
			  break;
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	e002      	b.n	8002d0c <main+0x140>
			  break;
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	e000      	b.n	8002d0c <main+0x140>
			  break;
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b003      	add	sp, #12
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	2000007c 	.word	0x2000007c
 8002d1c:	20000150 	.word	0x20000150
 8002d20:	2000014d 	.word	0x2000014d
 8002d24:	20000148 	.word	0x20000148
 8002d28:	20000138 	.word	0x20000138
 8002d2c:	20000149 	.word	0x20000149
 8002d30:	2000014b 	.word	0x2000014b
 8002d34:	0800709c 	.word	0x0800709c
 8002d38:	080070a4 	.word	0x080070a4
 8002d3c:	000009c4 	.word	0x000009c4
 8002d40:	2000014a 	.word	0x2000014a

08002d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b099      	sub	sp, #100	@ 0x64
 8002d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d4a:	242c      	movs	r4, #44	@ 0x2c
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	0018      	movs	r0, r3
 8002d50:	2334      	movs	r3, #52	@ 0x34
 8002d52:	001a      	movs	r2, r3
 8002d54:	2100      	movs	r1, #0
 8002d56:	f003 fcd3 	bl	8006700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d5a:	231c      	movs	r3, #28
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	0018      	movs	r0, r3
 8002d60:	2310      	movs	r3, #16
 8002d62:	001a      	movs	r2, r3
 8002d64:	2100      	movs	r1, #0
 8002d66:	f003 fccb 	bl	8006700 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	2318      	movs	r3, #24
 8002d70:	001a      	movs	r2, r3
 8002d72:	2100      	movs	r1, #0
 8002d74:	f003 fcc4 	bl	8006700 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002d78:	0021      	movs	r1, r4
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	220a      	movs	r2, #10
 8002d7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	2201      	movs	r2, #1
 8002d84:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	2210      	movs	r2, #16
 8002d8a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2201      	movs	r2, #1
 8002d90:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2200      	movs	r2, #0
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f001 fe52 	bl	8004a44 <HAL_RCC_OscConfig>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d001      	beq.n	8002da8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002da4:	f000 f9c4 	bl	8003130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da8:	211c      	movs	r1, #28
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2200      	movs	r2, #0
 8002db4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f002 f9c2 	bl	8005150 <HAL_RCC_ClockConfig>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002dd0:	f000 f9ae 	bl	8003130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <SystemClock_Config+0xbc>)
 8002dd8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2280      	movs	r2, #128	@ 0x80
 8002de4:	0092      	lsls	r2, r2, #2
 8002de6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	0018      	movs	r0, r3
 8002dec:	f002 fafc 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d001      	beq.n	8002df8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002df4:	f000 f99c 	bl	8003130 <Error_Handler>
  }
}
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b019      	add	sp, #100	@ 0x64
 8002dfe:	bd90      	pop	{r4, r7, pc}
 8002e00:	00010020 	.word	0x00010020

08002e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <MX_I2C1_Init+0x78>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e10:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <MX_I2C1_Init+0x7c>)
 8002e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e14:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e1a:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e20:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e26:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 febf 	bl	8003bc4 <HAL_I2C_Init>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d001      	beq.n	8002e4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e4a:	f000 f971 	bl	8003130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e50:	2100      	movs	r1, #0
 8002e52:	0018      	movs	r0, r3
 8002e54:	f001 fd5e 	bl	8004914 <HAL_I2CEx_ConfigAnalogFilter>
 8002e58:	1e03      	subs	r3, r0, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e5c:	f000 f968 	bl	8003130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <MX_I2C1_Init+0x74>)
 8002e62:	2100      	movs	r1, #0
 8002e64:	0018      	movs	r0, r3
 8002e66:	f001 fda1 	bl	80049ac <HAL_I2CEx_ConfigDigitalFilter>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e6e:	f000 f95f 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000007c 	.word	0x2000007c
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	0010020a 	.word	0x0010020a

08002e84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b090      	sub	sp, #64	@ 0x40
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002e8a:	232c      	movs	r3, #44	@ 0x2c
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	0018      	movs	r0, r3
 8002e90:	2314      	movs	r3, #20
 8002e92:	001a      	movs	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	f003 fc33 	bl	8006700 <memset>
  RTC_DateTypeDef sDate = {0};
 8002e9a:	2328      	movs	r3, #40	@ 0x28
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002ea2:	003b      	movs	r3, r7
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	2328      	movs	r3, #40	@ 0x28
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f003 fc28 	bl	8006700 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002eb0:	4b44      	ldr	r3, [pc, #272]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002eb2:	4a45      	ldr	r2, [pc, #276]	@ (8002fc8 <MX_RTC_Init+0x144>)
 8002eb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002eb6:	4b43      	ldr	r3, [pc, #268]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8002ebc:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002ebe:	227c      	movs	r2, #124	@ 0x7c
 8002ec0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 295;
 8002ec2:	4b40      	ldr	r3, [pc, #256]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002ec4:	2228      	movs	r2, #40	@ 0x28
 8002ec6:	32ff      	adds	r2, #255	@ 0xff
 8002ec8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002edc:	4b39      	ldr	r3, [pc, #228]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f002 fb70 	bl	80055c4 <HAL_RTC_Init>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d001      	beq.n	8002eec <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8002ee8:	f000 f922 	bl	8003130 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002eec:	212c      	movs	r1, #44	@ 0x2c
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2200      	movs	r2, #0
 8002efe:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f0c:	1879      	adds	r1, r7, r1
 8002f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	0018      	movs	r0, r3
 8002f14:	f002 fbee 	bl	80056f4 <HAL_RTC_SetTime>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8002f1c:	f000 f908 	bl	8003130 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002f20:	2128      	movs	r1, #40	@ 0x28
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2201      	movs	r2, #1
 8002f32:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2200      	movs	r2, #0
 8002f38:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002f3a:	1879      	adds	r1, r7, r1
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	0018      	movs	r0, r3
 8002f42:	f002 fcdb 	bl	80058fc <HAL_RTC_SetDate>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d001      	beq.n	8002f4e <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8002f4a:	f000 f8f1 	bl	8003130 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002f4e:	003b      	movs	r3, r7
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002f54:	003b      	movs	r3, r7
 8002f56:	2200      	movs	r2, #0
 8002f58:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8002f5a:	003b      	movs	r3, r7
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002f60:	003b      	movs	r3, r7
 8002f62:	2200      	movs	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f66:	003b      	movs	r3, r7
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f6c:	003b      	movs	r3, r7
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8002f72:	003b      	movs	r3, r7
 8002f74:	4a15      	ldr	r2, [pc, #84]	@ (8002fcc <MX_RTC_Init+0x148>)
 8002f76:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8002f78:	003b      	movs	r3, r7
 8002f7a:	22f0      	movs	r2, #240	@ 0xf0
 8002f7c:	0512      	lsls	r2, r2, #20
 8002f7e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002f80:	003b      	movs	r3, r7
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002f86:	003b      	movs	r3, r7
 8002f88:	2220      	movs	r2, #32
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002f8e:	003b      	movs	r3, r7
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	0052      	lsls	r2, r2, #1
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f96:	0039      	movs	r1, r7
 8002f98:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <MX_RTC_Init+0x140>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f002 fd8d 	bl	8005abc <HAL_RTC_SetAlarm_IT>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d001      	beq.n	8002faa <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8002fa6:	f000 f8c3 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f000 fc34 	bl	800381c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002fb4:	2002      	movs	r0, #2
 8002fb6:	f000 fc46 	bl	8003846 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_Init 2 */

}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b010      	add	sp, #64	@ 0x40
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	200000d0 	.word	0x200000d0
 8002fc8:	40002800 	.word	0x40002800
 8002fcc:	80808080 	.word	0x80808080

08002fd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	0018      	movs	r0, r3
 8002fdc:	2310      	movs	r3, #16
 8002fde:	001a      	movs	r2, r3
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	f003 fb8d 	bl	8006700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe6:	003b      	movs	r3, r7
 8002fe8:	0018      	movs	r0, r3
 8002fea:	2308      	movs	r3, #8
 8002fec:	001a      	movs	r2, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f003 fb86 	bl	8006700 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ff4:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <MX_TIM2_Init+0xa8>)
 8002ff6:	2280      	movs	r2, #128	@ 0x80
 8002ff8:	05d2      	lsls	r2, r2, #23
 8002ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8003078 <MX_TIM2_Init+0xa8>)
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <MX_TIM2_Init+0xac>)
 8003000:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003002:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <MX_TIM2_Init+0xa8>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8003008:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <MX_TIM2_Init+0xa8>)
 800300a:	2264      	movs	r2, #100	@ 0x64
 800300c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300e:	4b1a      	ldr	r3, [pc, #104]	@ (8003078 <MX_TIM2_Init+0xa8>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003014:	4b18      	ldr	r3, [pc, #96]	@ (8003078 <MX_TIM2_Init+0xa8>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800301a:	4b17      	ldr	r3, [pc, #92]	@ (8003078 <MX_TIM2_Init+0xa8>)
 800301c:	0018      	movs	r0, r3
 800301e:	f002 ff4b 	bl	8005eb8 <HAL_TIM_Base_Init>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003026:	f000 f883 	bl	8003130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800302a:	2108      	movs	r1, #8
 800302c:	187b      	adds	r3, r7, r1
 800302e:	2280      	movs	r2, #128	@ 0x80
 8003030:	0152      	lsls	r2, r2, #5
 8003032:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003034:	187a      	adds	r2, r7, r1
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <MX_TIM2_Init+0xa8>)
 8003038:	0011      	movs	r1, r2
 800303a:	0018      	movs	r0, r3
 800303c:	f003 f8c6 	bl	80061cc <HAL_TIM_ConfigClockSource>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003044:	f000 f874 	bl	8003130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003048:	003b      	movs	r3, r7
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304e:	003b      	movs	r3, r7
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003054:	003a      	movs	r2, r7
 8003056:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <MX_TIM2_Init+0xa8>)
 8003058:	0011      	movs	r1, r2
 800305a:	0018      	movs	r0, r3
 800305c:	f003 fac8 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003064:	f000 f864 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <MX_TIM2_Init+0xa8>)
 800306a:	0018      	movs	r0, r3
 800306c:	f002 ff74 	bl	8005f58 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b006      	add	sp, #24
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200000f0 	.word	0x200000f0
 800307c:	0000031f 	.word	0x0000031f

08003080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b089      	sub	sp, #36	@ 0x24
 8003084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003086:	240c      	movs	r4, #12
 8003088:	193b      	adds	r3, r7, r4
 800308a:	0018      	movs	r0, r3
 800308c:	2314      	movs	r3, #20
 800308e:	001a      	movs	r2, r3
 8003090:	2100      	movs	r1, #0
 8003092:	f003 fb35 	bl	8006700 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	4b25      	ldr	r3, [pc, #148]	@ (800312c <MX_GPIO_Init+0xac>)
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	4b24      	ldr	r3, [pc, #144]	@ (800312c <MX_GPIO_Init+0xac>)
 800309c:	2180      	movs	r1, #128	@ 0x80
 800309e:	0289      	lsls	r1, r1, #10
 80030a0:	430a      	orrs	r2, r1
 80030a2:	615a      	str	r2, [r3, #20]
 80030a4:	4b21      	ldr	r3, [pc, #132]	@ (800312c <MX_GPIO_Init+0xac>)
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	2380      	movs	r3, #128	@ 0x80
 80030aa:	029b      	lsls	r3, r3, #10
 80030ac:	4013      	ands	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <MX_GPIO_Init+0xac>)
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <MX_GPIO_Init+0xac>)
 80030b8:	2180      	movs	r1, #128	@ 0x80
 80030ba:	02c9      	lsls	r1, r1, #11
 80030bc:	430a      	orrs	r2, r1
 80030be:	615a      	str	r2, [r3, #20]
 80030c0:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <MX_GPIO_Init+0xac>)
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	02db      	lsls	r3, r3, #11
 80030c8:	4013      	ands	r3, r2
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80030ce:	2390      	movs	r3, #144	@ 0x90
 80030d0:	05db      	lsls	r3, r3, #23
 80030d2:	2200      	movs	r2, #0
 80030d4:	2108      	movs	r1, #8
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fd57 	bl	8003b8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030dc:	193b      	adds	r3, r7, r4
 80030de:	2208      	movs	r2, #8
 80030e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e2:	193b      	adds	r3, r7, r4
 80030e4:	2201      	movs	r2, #1
 80030e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	193b      	adds	r3, r7, r4
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	193b      	adds	r3, r7, r4
 80030f0:	2200      	movs	r2, #0
 80030f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f4:	193a      	adds	r2, r7, r4
 80030f6:	2390      	movs	r3, #144	@ 0x90
 80030f8:	05db      	lsls	r3, r3, #23
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 fbbf 	bl	8003880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003102:	193b      	adds	r3, r7, r4
 8003104:	2280      	movs	r2, #128	@ 0x80
 8003106:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003108:	193b      	adds	r3, r7, r4
 800310a:	2200      	movs	r2, #0
 800310c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003114:	193a      	adds	r2, r7, r4
 8003116:	2390      	movs	r3, #144	@ 0x90
 8003118:	05db      	lsls	r3, r3, #23
 800311a:	0011      	movs	r1, r2
 800311c:	0018      	movs	r0, r3
 800311e:	f000 fbaf 	bl	8003880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b009      	add	sp, #36	@ 0x24
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	40021000 	.word	0x40021000

08003130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003134:	b672      	cpsid	i
}
 8003136:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003138:	46c0      	nop			@ (mov r8, r8)
 800313a:	e7fd      	b.n	8003138 <Error_Handler+0x8>

0800313c <get_temperature_sht41>:

#include "sht41.h"


HAL_StatusTypeDef get_temperature_sht41(I2C_HandleTypeDef *i2ch, float* data_buffer)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b08d      	sub	sp, #52	@ 0x34
 8003140:	af02      	add	r7, sp, #8
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
	uint8_t inc_bytes[6] = {0};
 8003146:	230c      	movs	r3, #12
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	809a      	strh	r2, [r3, #4]

	if(HAL_I2C_IsDeviceReady(i2ch, SHT41_I2C_ADDR, 10, 1000) != HAL_OK) {
 8003152:	23fa      	movs	r3, #250	@ 0xfa
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	220a      	movs	r2, #10
 800315a:	2188      	movs	r1, #136	@ 0x88
 800315c:	f001 f80a 	bl	8004174 <HAL_I2C_IsDeviceReady>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d001      	beq.n	8003168 <get_temperature_sht41+0x2c>
	  return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0ab      	b.n	80032c0 <get_temperature_sht41+0x184>
	}

	HAL_Delay(10);
 8003168:	200a      	movs	r0, #10
 800316a:	f000 fa87 	bl	800367c <HAL_Delay>
	uint8_t command = 0xFD;
 800316e:	210b      	movs	r1, #11
 8003170:	187b      	adds	r3, r7, r1
 8003172:	22fd      	movs	r2, #253	@ 0xfd
 8003174:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Master_Transmit(i2ch, SHT41_I2C_ADDR, &command, 1, 1000) != HAL_OK) {
 8003176:	187a      	adds	r2, r7, r1
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	23fa      	movs	r3, #250	@ 0xfa
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2301      	movs	r3, #1
 8003182:	2188      	movs	r1, #136	@ 0x88
 8003184:	f000 fdc4 	bl	8003d10 <HAL_I2C_Master_Transmit>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d001      	beq.n	8003190 <get_temperature_sht41+0x54>
	  return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e097      	b.n	80032c0 <get_temperature_sht41+0x184>
	}

	HAL_Delay(10);
 8003190:	200a      	movs	r0, #10
 8003192:	f000 fa73 	bl	800367c <HAL_Delay>
	if(HAL_I2C_Master_Receive(i2ch, SHT41_I2C_ADDR, &inc_bytes, 6, 1000) != HAL_OK) {
 8003196:	230c      	movs	r3, #12
 8003198:	18fa      	adds	r2, r7, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	23fa      	movs	r3, #250	@ 0xfa
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2306      	movs	r3, #6
 80031a4:	2188      	movs	r1, #136	@ 0x88
 80031a6:	f000 fedd 	bl	8003f64 <HAL_I2C_Master_Receive>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d001      	beq.n	80031b2 <get_temperature_sht41+0x76>
	  return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e086      	b.n	80032c0 <get_temperature_sht41+0x184>
	}

	uint16_t raw_temp = (inc_bytes[0] << 8) | inc_bytes[1];
 80031b2:	210c      	movs	r1, #12
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	b21a      	sxth	r2, r3
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	4313      	orrs	r3, r2
 80031c4:	b21a      	sxth	r2, r3
 80031c6:	2026      	movs	r0, #38	@ 0x26
 80031c8:	183b      	adds	r3, r7, r0
 80031ca:	801a      	strh	r2, [r3, #0]
	uint8_t temp_checksum = inc_bytes[2];
 80031cc:	2325      	movs	r3, #37	@ 0x25
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	187a      	adds	r2, r7, r1
 80031d2:	7892      	ldrb	r2, [r2, #2]
 80031d4:	701a      	strb	r2, [r3, #0]
	uint16_t raw_humidity = (inc_bytes[3] << 8) | inc_bytes[4];
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	78db      	ldrb	r3, [r3, #3]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	b21a      	sxth	r2, r3
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	791b      	ldrb	r3, [r3, #4]
 80031e2:	b21b      	sxth	r3, r3
 80031e4:	4313      	orrs	r3, r2
 80031e6:	b21a      	sxth	r2, r3
 80031e8:	2422      	movs	r4, #34	@ 0x22
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	801a      	strh	r2, [r3, #0]
	uint8_t humidity_checksum = inc_bytes[5];
 80031ee:	2321      	movs	r3, #33	@ 0x21
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	187a      	adds	r2, r7, r1
 80031f4:	7952      	ldrb	r2, [r2, #5]
 80031f6:	701a      	strb	r2, [r3, #0]

	float tempc = -45 + 175 * (raw_temp / 65535.0);
 80031f8:	183b      	adds	r3, r7, r0
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7fe fe1b 	bl	8001e38 <__aeabi_i2d>
 8003202:	2200      	movs	r2, #0
 8003204:	4b30      	ldr	r3, [pc, #192]	@ (80032c8 <get_temperature_sht41+0x18c>)
 8003206:	f7fd fc99 	bl	8000b3c <__aeabi_ddiv>
 800320a:	0002      	movs	r2, r0
 800320c:	000b      	movs	r3, r1
 800320e:	0010      	movs	r0, r2
 8003210:	0019      	movs	r1, r3
 8003212:	2200      	movs	r2, #0
 8003214:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <get_temperature_sht41+0x190>)
 8003216:	f7fd ffab 	bl	8001170 <__aeabi_dmul>
 800321a:	0002      	movs	r2, r0
 800321c:	000b      	movs	r3, r1
 800321e:	0010      	movs	r0, r2
 8003220:	0019      	movs	r1, r3
 8003222:	2200      	movs	r2, #0
 8003224:	4b2a      	ldr	r3, [pc, #168]	@ (80032d0 <get_temperature_sht41+0x194>)
 8003226:	f7fe fa6b 	bl	8001700 <__aeabi_dsub>
 800322a:	0002      	movs	r2, r0
 800322c:	000b      	movs	r3, r1
 800322e:	0010      	movs	r0, r2
 8003230:	0019      	movs	r1, r3
 8003232:	f7fe fe77 	bl	8001f24 <__aeabi_d2f>
 8003236:	1c03      	adds	r3, r0, #0
 8003238:	61fb      	str	r3, [r7, #28]
	float tempf = 32 + (tempc * (9.0/5));
 800323a:	69f8      	ldr	r0, [r7, #28]
 800323c:	f7fe fe2a 	bl	8001e94 <__aeabi_f2d>
 8003240:	4a24      	ldr	r2, [pc, #144]	@ (80032d4 <get_temperature_sht41+0x198>)
 8003242:	4b25      	ldr	r3, [pc, #148]	@ (80032d8 <get_temperature_sht41+0x19c>)
 8003244:	f7fd ff94 	bl	8001170 <__aeabi_dmul>
 8003248:	0002      	movs	r2, r0
 800324a:	000b      	movs	r3, r1
 800324c:	0010      	movs	r0, r2
 800324e:	0019      	movs	r1, r3
 8003250:	2200      	movs	r2, #0
 8003252:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <get_temperature_sht41+0x1a0>)
 8003254:	f7fd f90e 	bl	8000474 <__aeabi_dadd>
 8003258:	0002      	movs	r2, r0
 800325a:	000b      	movs	r3, r1
 800325c:	0010      	movs	r0, r2
 800325e:	0019      	movs	r1, r3
 8003260:	f7fe fe60 	bl	8001f24 <__aeabi_d2f>
 8003264:	1c03      	adds	r3, r0, #0
 8003266:	61bb      	str	r3, [r7, #24]
	float humidity_percent = -6 + 125 * (raw_humidity /65535.0);
 8003268:	193b      	adds	r3, r7, r4
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	0018      	movs	r0, r3
 800326e:	f7fe fde3 	bl	8001e38 <__aeabi_i2d>
 8003272:	2200      	movs	r2, #0
 8003274:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <get_temperature_sht41+0x18c>)
 8003276:	f7fd fc61 	bl	8000b3c <__aeabi_ddiv>
 800327a:	0002      	movs	r2, r0
 800327c:	000b      	movs	r3, r1
 800327e:	0010      	movs	r0, r2
 8003280:	0019      	movs	r1, r3
 8003282:	2200      	movs	r2, #0
 8003284:	4b16      	ldr	r3, [pc, #88]	@ (80032e0 <get_temperature_sht41+0x1a4>)
 8003286:	f7fd ff73 	bl	8001170 <__aeabi_dmul>
 800328a:	0002      	movs	r2, r0
 800328c:	000b      	movs	r3, r1
 800328e:	0010      	movs	r0, r2
 8003290:	0019      	movs	r1, r3
 8003292:	2200      	movs	r2, #0
 8003294:	4b13      	ldr	r3, [pc, #76]	@ (80032e4 <get_temperature_sht41+0x1a8>)
 8003296:	f7fe fa33 	bl	8001700 <__aeabi_dsub>
 800329a:	0002      	movs	r2, r0
 800329c:	000b      	movs	r3, r1
 800329e:	0010      	movs	r0, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	f7fe fe3f 	bl	8001f24 <__aeabi_d2f>
 80032a6:	1c03      	adds	r3, r0, #0
 80032a8:	617b      	str	r3, [r7, #20]

	HAL_Delay(10);
 80032aa:	200a      	movs	r0, #10
 80032ac:	f000 f9e6 	bl	800367c <HAL_Delay>

	data_buffer[0] = tempf;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	601a      	str	r2, [r3, #0]
	data_buffer[1] = humidity_percent;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	3304      	adds	r3, #4
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b00b      	add	sp, #44	@ 0x2c
 80032c6:	bd90      	pop	{r4, r7, pc}
 80032c8:	40efffe0 	.word	0x40efffe0
 80032cc:	4065e000 	.word	0x4065e000
 80032d0:	40468000 	.word	0x40468000
 80032d4:	cccccccd 	.word	0xcccccccd
 80032d8:	3ffccccc 	.word	0x3ffccccc
 80032dc:	40400000 	.word	0x40400000
 80032e0:	405f4000 	.word	0x405f4000
 80032e4:	40180000 	.word	0x40180000

080032e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <HAL_MspInit+0x44>)
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	4b0e      	ldr	r3, [pc, #56]	@ (800332c <HAL_MspInit+0x44>)
 80032f4:	2101      	movs	r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	619a      	str	r2, [r3, #24]
 80032fa:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <HAL_MspInit+0x44>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b09      	ldr	r3, [pc, #36]	@ (800332c <HAL_MspInit+0x44>)
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_MspInit+0x44>)
 800330c:	2180      	movs	r1, #128	@ 0x80
 800330e:	0549      	lsls	r1, r1, #21
 8003310:	430a      	orrs	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_MspInit+0x44>)
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	2380      	movs	r3, #128	@ 0x80
 800331a:	055b      	lsls	r3, r3, #21
 800331c:	4013      	ands	r3, r2
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	40021000 	.word	0x40021000

08003330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b08b      	sub	sp, #44	@ 0x2c
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	2414      	movs	r4, #20
 800333a:	193b      	adds	r3, r7, r4
 800333c:	0018      	movs	r0, r3
 800333e:	2314      	movs	r3, #20
 8003340:	001a      	movs	r2, r3
 8003342:	2100      	movs	r1, #0
 8003344:	f003 f9dc 	bl	8006700 <memset>
  if(hi2c->Instance==I2C1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1c      	ldr	r2, [pc, #112]	@ (80033c0 <HAL_I2C_MspInit+0x90>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d131      	bne.n	80033b6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	4b1c      	ldr	r3, [pc, #112]	@ (80033c4 <HAL_I2C_MspInit+0x94>)
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <HAL_I2C_MspInit+0x94>)
 8003358:	2180      	movs	r1, #128	@ 0x80
 800335a:	02c9      	lsls	r1, r1, #11
 800335c:	430a      	orrs	r2, r1
 800335e:	615a      	str	r2, [r3, #20]
 8003360:	4b18      	ldr	r3, [pc, #96]	@ (80033c4 <HAL_I2C_MspInit+0x94>)
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	2380      	movs	r3, #128	@ 0x80
 8003366:	02db      	lsls	r3, r3, #11
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800336e:	0021      	movs	r1, r4
 8003370:	187b      	adds	r3, r7, r1
 8003372:	22c0      	movs	r2, #192	@ 0xc0
 8003374:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2212      	movs	r2, #18
 800337a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2203      	movs	r2, #3
 8003386:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003388:	187b      	adds	r3, r7, r1
 800338a:	2201      	movs	r2, #1
 800338c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338e:	187b      	adds	r3, r7, r1
 8003390:	4a0d      	ldr	r2, [pc, #52]	@ (80033c8 <HAL_I2C_MspInit+0x98>)
 8003392:	0019      	movs	r1, r3
 8003394:	0010      	movs	r0, r2
 8003396:	f000 fa73 	bl	8003880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <HAL_I2C_MspInit+0x94>)
 800339c:	69da      	ldr	r2, [r3, #28]
 800339e:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <HAL_I2C_MspInit+0x94>)
 80033a0:	2180      	movs	r1, #128	@ 0x80
 80033a2:	0389      	lsls	r1, r1, #14
 80033a4:	430a      	orrs	r2, r1
 80033a6:	61da      	str	r2, [r3, #28]
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_I2C_MspInit+0x94>)
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	2380      	movs	r3, #128	@ 0x80
 80033ae:	039b      	lsls	r3, r3, #14
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b00b      	add	sp, #44	@ 0x2c
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	40005400 	.word	0x40005400
 80033c4:	40021000 	.word	0x40021000
 80033c8:	48000400 	.word	0x48000400

080033cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <HAL_RTC_MspInit+0x38>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d10e      	bne.n	80033fc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033de:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <HAL_RTC_MspInit+0x3c>)
 80033e0:	6a1a      	ldr	r2, [r3, #32]
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_RTC_MspInit+0x3c>)
 80033e4:	2180      	movs	r1, #128	@ 0x80
 80033e6:	0209      	lsls	r1, r1, #8
 80033e8:	430a      	orrs	r2, r1
 80033ea:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	2100      	movs	r1, #0
 80033f0:	2002      	movs	r0, #2
 80033f2:	f000 fa13 	bl	800381c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80033f6:	2002      	movs	r0, #2
 80033f8:	f000 fa25 	bl	8003846 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80033fc:	46c0      	nop			@ (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40002800 	.word	0x40002800
 8003408:	40021000 	.word	0x40021000

0800340c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	05db      	lsls	r3, r3, #23
 800341c:	429a      	cmp	r2, r3
 800341e:	d113      	bne.n	8003448 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_TIM_Base_MspInit+0x44>)
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <HAL_TIM_Base_MspInit+0x44>)
 8003426:	2101      	movs	r1, #1
 8003428:	430a      	orrs	r2, r1
 800342a:	61da      	str	r2, [r3, #28]
 800342c:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <HAL_TIM_Base_MspInit+0x44>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	200f      	movs	r0, #15
 800343e:	f000 f9ed 	bl	800381c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003442:	200f      	movs	r0, #15
 8003444:	f000 f9ff 	bl	8003846 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003448:	46c0      	nop			@ (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000

08003454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	e7fd      	b.n	8003458 <NMI_Handler+0x4>

0800345c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003460:	46c0      	nop			@ (mov r8, r8)
 8003462:	e7fd      	b.n	8003460 <HardFault_Handler+0x4>

08003464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003468:	46c0      	nop			@ (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800347c:	f000 f8e2 	bl	8003644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003480:	46c0      	nop			@ (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800348c:	4b03      	ldr	r3, [pc, #12]	@ (800349c <RTC_IRQHandler+0x14>)
 800348e:	0018      	movs	r0, r3
 8003490:	f002 fc0e 	bl	8005cb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	200000d0 	.word	0x200000d0

080034a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <TIM2_IRQHandler+0x14>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f002 fda2 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034ac:	46c0      	nop			@ (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	200000f0 	.word	0x200000f0

080034b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034c0:	4a14      	ldr	r2, [pc, #80]	@ (8003514 <_sbrk+0x5c>)
 80034c2:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <_sbrk+0x60>)
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <_sbrk+0x64>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034d4:	4b11      	ldr	r3, [pc, #68]	@ (800351c <_sbrk+0x64>)
 80034d6:	4a12      	ldr	r2, [pc, #72]	@ (8003520 <_sbrk+0x68>)
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034da:	4b10      	ldr	r3, [pc, #64]	@ (800351c <_sbrk+0x64>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	18d3      	adds	r3, r2, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d207      	bcs.n	80034f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e8:	f003 f912 	bl	8006710 <__errno>
 80034ec:	0003      	movs	r3, r0
 80034ee:	220c      	movs	r2, #12
 80034f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	425b      	negs	r3, r3
 80034f6:	e009      	b.n	800350c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f8:	4b08      	ldr	r3, [pc, #32]	@ (800351c <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034fe:	4b07      	ldr	r3, [pc, #28]	@ (800351c <_sbrk+0x64>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	18d2      	adds	r2, r2, r3
 8003506:	4b05      	ldr	r3, [pc, #20]	@ (800351c <_sbrk+0x64>)
 8003508:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b006      	add	sp, #24
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20001800 	.word	0x20001800
 8003518:	00000400 	.word	0x00000400
 800351c:	20000170 	.word	0x20000170
 8003520:	200002c0 	.word	0x200002c0

08003524 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003530:	4813      	ldr	r0, [pc, #76]	@ (8003580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003532:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003534:	f7ff fff6 	bl	8003524 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8003538:	4812      	ldr	r0, [pc, #72]	@ (8003584 <LoopForever+0x6>)
    LDR R1, [R0]
 800353a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800353c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800353e:	4a12      	ldr	r2, [pc, #72]	@ (8003588 <LoopForever+0xa>)
    CMP R1, R2
 8003540:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003542:	d105      	bne.n	8003550 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8003544:	4811      	ldr	r0, [pc, #68]	@ (800358c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003546:	4912      	ldr	r1, [pc, #72]	@ (8003590 <LoopForever+0x12>)
    STR R1, [R0]
 8003548:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800354a:	4812      	ldr	r0, [pc, #72]	@ (8003594 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800354c:	4912      	ldr	r1, [pc, #72]	@ (8003598 <LoopForever+0x1a>)
    STR R1, [R0]
 800354e:	6001      	str	r1, [r0, #0]

08003550 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003550:	4812      	ldr	r0, [pc, #72]	@ (800359c <LoopForever+0x1e>)
  ldr r1, =_edata
 8003552:	4913      	ldr	r1, [pc, #76]	@ (80035a0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003554:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <LoopForever+0x26>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003558:	e002      	b.n	8003560 <LoopCopyDataInit>

0800355a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800355c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800355e:	3304      	adds	r3, #4

08003560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003564:	d3f9      	bcc.n	800355a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003566:	4a10      	ldr	r2, [pc, #64]	@ (80035a8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003568:	4c10      	ldr	r4, [pc, #64]	@ (80035ac <LoopForever+0x2e>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800356c:	e001      	b.n	8003572 <LoopFillZerobss>

0800356e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800356e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003570:	3204      	adds	r2, #4

08003572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003574:	d3fb      	bcc.n	800356e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003576:	f003 f8d1 	bl	800671c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800357a:	f7ff fb27 	bl	8002bcc <main>

0800357e <LoopForever>:

LoopForever:
    b LoopForever
 800357e:	e7fe      	b.n	800357e <LoopForever>
  ldr   r0, =_estack
 8003580:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8003584:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003588:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800358c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8003590:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003594:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003598:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800359c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80035a4:	08007164 	.word	0x08007164
  ldr r2, =_sbss
 80035a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80035ac:	200002c0 	.word	0x200002c0

080035b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035b0:	e7fe      	b.n	80035b0 <ADC1_IRQHandler>
	...

080035b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b8:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <HAL_Init+0x24>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_Init+0x24>)
 80035be:	2110      	movs	r1, #16
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80035c4:	2003      	movs	r0, #3
 80035c6:	f000 f809 	bl	80035dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035ca:	f7ff fe8d 	bl	80032e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	40022000 	.word	0x40022000

080035dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e4:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <HAL_InitTick+0x5c>)
 80035e6:	681c      	ldr	r4, [r3, #0]
 80035e8:	4b14      	ldr	r3, [pc, #80]	@ (800363c <HAL_InitTick+0x60>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	0019      	movs	r1, r3
 80035ee:	23fa      	movs	r3, #250	@ 0xfa
 80035f0:	0098      	lsls	r0, r3, #2
 80035f2:	f7fc fd93 	bl	800011c <__udivsi3>
 80035f6:	0003      	movs	r3, r0
 80035f8:	0019      	movs	r1, r3
 80035fa:	0020      	movs	r0, r4
 80035fc:	f7fc fd8e 	bl	800011c <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f92f 	bl	8003866 <HAL_SYSTICK_Config>
 8003608:	1e03      	subs	r3, r0, #0
 800360a:	d001      	beq.n	8003610 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e00f      	b.n	8003630 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b03      	cmp	r3, #3
 8003614:	d80b      	bhi.n	800362e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	2301      	movs	r3, #1
 800361a:	425b      	negs	r3, r3
 800361c:	2200      	movs	r2, #0
 800361e:	0018      	movs	r0, r3
 8003620:	f000 f8fc 	bl	800381c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003624:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <HAL_InitTick+0x64>)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b003      	add	sp, #12
 8003636:	bd90      	pop	{r4, r7, pc}
 8003638:	20000000 	.word	0x20000000
 800363c:	20000008 	.word	0x20000008
 8003640:	20000004 	.word	0x20000004

08003644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_IncTick+0x1c>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	001a      	movs	r2, r3
 800364e:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_IncTick+0x20>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	18d2      	adds	r2, r2, r3
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <HAL_IncTick+0x20>)
 8003656:	601a      	str	r2, [r3, #0]
}
 8003658:	46c0      	nop			@ (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	20000008 	.word	0x20000008
 8003664:	20000174 	.word	0x20000174

08003668 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  return uwTick;
 800366c:	4b02      	ldr	r3, [pc, #8]	@ (8003678 <HAL_GetTick+0x10>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	20000174 	.word	0x20000174

0800367c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff fff0 	bl	8003668 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	d005      	beq.n	80036a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <HAL_Delay+0x44>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	001a      	movs	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	f7ff ffe0 	bl	8003668 <HAL_GetTick>
 80036a8:	0002      	movs	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d8f7      	bhi.n	80036a4 <HAL_Delay+0x28>
  {
  }
}
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	20000008 	.word	0x20000008

080036c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	0002      	movs	r2, r0
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036d0:	1dfb      	adds	r3, r7, #7
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80036d6:	d809      	bhi.n	80036ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	001a      	movs	r2, r3
 80036de:	231f      	movs	r3, #31
 80036e0:	401a      	ands	r2, r3
 80036e2:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <__NVIC_EnableIRQ+0x30>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	4091      	lsls	r1, r2
 80036e8:	000a      	movs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]
  }
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	0002      	movs	r2, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003706:	1dfb      	adds	r3, r7, #7
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b7f      	cmp	r3, #127	@ 0x7f
 800370c:	d828      	bhi.n	8003760 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800370e:	4a2f      	ldr	r2, [pc, #188]	@ (80037cc <__NVIC_SetPriority+0xd4>)
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b25b      	sxtb	r3, r3
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	33c0      	adds	r3, #192	@ 0xc0
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	589b      	ldr	r3, [r3, r2]
 800371e:	1dfa      	adds	r2, r7, #7
 8003720:	7812      	ldrb	r2, [r2, #0]
 8003722:	0011      	movs	r1, r2
 8003724:	2203      	movs	r2, #3
 8003726:	400a      	ands	r2, r1
 8003728:	00d2      	lsls	r2, r2, #3
 800372a:	21ff      	movs	r1, #255	@ 0xff
 800372c:	4091      	lsls	r1, r2
 800372e:	000a      	movs	r2, r1
 8003730:	43d2      	mvns	r2, r2
 8003732:	401a      	ands	r2, r3
 8003734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	22ff      	movs	r2, #255	@ 0xff
 800373c:	401a      	ands	r2, r3
 800373e:	1dfb      	adds	r3, r7, #7
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	0018      	movs	r0, r3
 8003744:	2303      	movs	r3, #3
 8003746:	4003      	ands	r3, r0
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800374c:	481f      	ldr	r0, [pc, #124]	@ (80037cc <__NVIC_SetPriority+0xd4>)
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	b25b      	sxtb	r3, r3
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	430a      	orrs	r2, r1
 8003758:	33c0      	adds	r3, #192	@ 0xc0
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800375e:	e031      	b.n	80037c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003760:	4a1b      	ldr	r2, [pc, #108]	@ (80037d0 <__NVIC_SetPriority+0xd8>)
 8003762:	1dfb      	adds	r3, r7, #7
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	0019      	movs	r1, r3
 8003768:	230f      	movs	r3, #15
 800376a:	400b      	ands	r3, r1
 800376c:	3b08      	subs	r3, #8
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3306      	adds	r3, #6
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	18d3      	adds	r3, r2, r3
 8003776:	3304      	adds	r3, #4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	1dfa      	adds	r2, r7, #7
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	0011      	movs	r1, r2
 8003780:	2203      	movs	r2, #3
 8003782:	400a      	ands	r2, r1
 8003784:	00d2      	lsls	r2, r2, #3
 8003786:	21ff      	movs	r1, #255	@ 0xff
 8003788:	4091      	lsls	r1, r2
 800378a:	000a      	movs	r2, r1
 800378c:	43d2      	mvns	r2, r2
 800378e:	401a      	ands	r2, r3
 8003790:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	22ff      	movs	r2, #255	@ 0xff
 8003798:	401a      	ands	r2, r3
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	0018      	movs	r0, r3
 80037a0:	2303      	movs	r3, #3
 80037a2:	4003      	ands	r3, r0
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a8:	4809      	ldr	r0, [pc, #36]	@ (80037d0 <__NVIC_SetPriority+0xd8>)
 80037aa:	1dfb      	adds	r3, r7, #7
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	001c      	movs	r4, r3
 80037b0:	230f      	movs	r3, #15
 80037b2:	4023      	ands	r3, r4
 80037b4:	3b08      	subs	r3, #8
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	430a      	orrs	r2, r1
 80037ba:	3306      	adds	r3, #6
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	18c3      	adds	r3, r0, r3
 80037c0:	3304      	adds	r3, #4
 80037c2:	601a      	str	r2, [r3, #0]
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b003      	add	sp, #12
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	e000e100 	.word	0xe000e100
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	2380      	movs	r3, #128	@ 0x80
 80037e2:	045b      	lsls	r3, r3, #17
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d301      	bcc.n	80037ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e8:	2301      	movs	r3, #1
 80037ea:	e010      	b.n	800380e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <SysTick_Config+0x44>)
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	3a01      	subs	r2, #1
 80037f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f4:	2301      	movs	r3, #1
 80037f6:	425b      	negs	r3, r3
 80037f8:	2103      	movs	r1, #3
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7ff ff7c 	bl	80036f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <SysTick_Config+0x44>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003806:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <SysTick_Config+0x44>)
 8003808:	2207      	movs	r2, #7
 800380a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800380c:	2300      	movs	r3, #0
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b002      	add	sp, #8
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	e000e010 	.word	0xe000e010

0800381c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	210f      	movs	r1, #15
 8003828:	187b      	adds	r3, r7, r1
 800382a:	1c02      	adds	r2, r0, #0
 800382c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	187b      	adds	r3, r7, r1
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b25b      	sxtb	r3, r3
 8003836:	0011      	movs	r1, r2
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff ff5d 	bl	80036f8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b004      	add	sp, #16
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	0002      	movs	r2, r0
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b25b      	sxtb	r3, r3
 8003858:	0018      	movs	r0, r3
 800385a:	f7ff ff33 	bl	80036c4 <__NVIC_EnableIRQ>
}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	46bd      	mov	sp, r7
 8003862:	b002      	add	sp, #8
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f7ff ffaf 	bl	80037d4 <SysTick_Config>
 8003876:	0003      	movs	r3, r0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800388e:	e149      	b.n	8003b24 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4091      	lsls	r1, r2
 800389a:	000a      	movs	r2, r1
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d100      	bne.n	80038a8 <HAL_GPIO_Init+0x28>
 80038a6:	e13a      	b.n	8003b1e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2203      	movs	r2, #3
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d005      	beq.n	80038c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d130      	bne.n	8003922 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	409a      	lsls	r2, r3
 80038ce:	0013      	movs	r3, r2
 80038d0:	43da      	mvns	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	0013      	movs	r3, r2
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f6:	2201      	movs	r2, #1
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
 80038fc:	0013      	movs	r3, r2
 80038fe:	43da      	mvns	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4013      	ands	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	2201      	movs	r2, #1
 800390e:	401a      	ands	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	409a      	lsls	r2, r3
 8003914:	0013      	movs	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	4013      	ands	r3, r2
 800392a:	2b03      	cmp	r3, #3
 800392c:	d017      	beq.n	800395e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	409a      	lsls	r2, r3
 800393c:	0013      	movs	r3, r2
 800393e:	43da      	mvns	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	409a      	lsls	r2, r3
 8003950:	0013      	movs	r3, r2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2203      	movs	r2, #3
 8003964:	4013      	ands	r3, r2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d123      	bne.n	80039b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	58d3      	ldr	r3, [r2, r3]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2207      	movs	r2, #7
 800397c:	4013      	ands	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	220f      	movs	r2, #15
 8003982:	409a      	lsls	r2, r3
 8003984:	0013      	movs	r3, r2
 8003986:	43da      	mvns	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2107      	movs	r1, #7
 8003996:	400b      	ands	r3, r1
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	0092      	lsls	r2, r2, #2
 80039ae:	6939      	ldr	r1, [r7, #16]
 80039b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2203      	movs	r2, #3
 80039be:	409a      	lsls	r2, r3
 80039c0:	0013      	movs	r3, r2
 80039c2:	43da      	mvns	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2203      	movs	r2, #3
 80039d0:	401a      	ands	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	409a      	lsls	r2, r3
 80039d8:	0013      	movs	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	23c0      	movs	r3, #192	@ 0xc0
 80039ec:	029b      	lsls	r3, r3, #10
 80039ee:	4013      	ands	r3, r2
 80039f0:	d100      	bne.n	80039f4 <HAL_GPIO_Init+0x174>
 80039f2:	e094      	b.n	8003b1e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f4:	4b51      	ldr	r3, [pc, #324]	@ (8003b3c <HAL_GPIO_Init+0x2bc>)
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	4b50      	ldr	r3, [pc, #320]	@ (8003b3c <HAL_GPIO_Init+0x2bc>)
 80039fa:	2101      	movs	r1, #1
 80039fc:	430a      	orrs	r2, r1
 80039fe:	619a      	str	r2, [r3, #24]
 8003a00:	4b4e      	ldr	r3, [pc, #312]	@ (8003b3c <HAL_GPIO_Init+0x2bc>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2201      	movs	r2, #1
 8003a06:	4013      	ands	r3, r2
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b40 <HAL_GPIO_Init+0x2c0>)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	589b      	ldr	r3, [r3, r2]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	4013      	ands	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	220f      	movs	r2, #15
 8003a24:	409a      	lsls	r2, r3
 8003a26:	0013      	movs	r3, r2
 8003a28:	43da      	mvns	r2, r3
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	2390      	movs	r3, #144	@ 0x90
 8003a34:	05db      	lsls	r3, r3, #23
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_Init+0x1d6>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a41      	ldr	r2, [pc, #260]	@ (8003b44 <HAL_GPIO_Init+0x2c4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x1d2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a40      	ldr	r2, [pc, #256]	@ (8003b48 <HAL_GPIO_Init+0x2c8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x1ce>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e004      	b.n	8003a58 <HAL_GPIO_Init+0x1d8>
 8003a4e:	2305      	movs	r3, #5
 8003a50:	e002      	b.n	8003a58 <HAL_GPIO_Init+0x1d8>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_GPIO_Init+0x1d8>
 8003a56:	2300      	movs	r3, #0
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	4093      	lsls	r3, r2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a68:	4935      	ldr	r1, [pc, #212]	@ (8003b40 <HAL_GPIO_Init+0x2c0>)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	3302      	adds	r3, #2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a76:	4b35      	ldr	r3, [pc, #212]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	035b      	lsls	r3, r3, #13
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	039b      	lsls	r3, r3, #14
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ac4:	4b21      	ldr	r3, [pc, #132]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003aca:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	2380      	movs	r3, #128	@ 0x80
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aee:	4b17      	ldr	r3, [pc, #92]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003af4:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	43da      	mvns	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	2380      	movs	r3, #128	@ 0x80
 8003b0a:	025b      	lsls	r3, r3, #9
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b18:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <HAL_GPIO_Init+0x2cc>)
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	3301      	adds	r3, #1
 8003b22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	40da      	lsrs	r2, r3
 8003b2c:	1e13      	subs	r3, r2, #0
 8003b2e:	d000      	beq.n	8003b32 <HAL_GPIO_Init+0x2b2>
 8003b30:	e6ae      	b.n	8003890 <HAL_GPIO_Init+0x10>
  } 
}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b006      	add	sp, #24
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40010000 	.word	0x40010000
 8003b44:	48000400 	.word	0x48000400
 8003b48:	48000800 	.word	0x48000800
 8003b4c:	40010400 	.word	0x40010400

08003b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	000a      	movs	r2, r1
 8003b5a:	1cbb      	adds	r3, r7, #2
 8003b5c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	1cba      	adds	r2, r7, #2
 8003b64:	8812      	ldrh	r2, [r2, #0]
 8003b66:	4013      	ands	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003b6a:	230f      	movs	r3, #15
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e003      	b.n	8003b7c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b74:	230f      	movs	r3, #15
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003b7c:	230f      	movs	r3, #15
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	781b      	ldrb	r3, [r3, #0]
  }
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b004      	add	sp, #16
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	0008      	movs	r0, r1
 8003b94:	0011      	movs	r1, r2
 8003b96:	1cbb      	adds	r3, r7, #2
 8003b98:	1c02      	adds	r2, r0, #0
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	1c7b      	adds	r3, r7, #1
 8003b9e:	1c0a      	adds	r2, r1, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ba2:	1c7b      	adds	r3, r7, #1
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003baa:	1cbb      	adds	r3, r7, #2
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb2:	e003      	b.n	8003bbc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb4:	1cbb      	adds	r3, r7, #2
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bbc:	46c0      	nop			@ (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e08f      	b.n	8003cf6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2241      	movs	r2, #65	@ 0x41
 8003bda:	5c9b      	ldrb	r3, [r3, r2]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2240      	movs	r2, #64	@ 0x40
 8003be6:	2100      	movs	r1, #0
 8003be8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff fb9f 	bl	8003330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2241      	movs	r2, #65	@ 0x41
 8003bf6:	2124      	movs	r1, #36	@ 0x24
 8003bf8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2101      	movs	r1, #1
 8003c06:	438a      	bics	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	493b      	ldr	r1, [pc, #236]	@ (8003d00 <HAL_I2C_Init+0x13c>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4938      	ldr	r1, [pc, #224]	@ (8003d04 <HAL_I2C_Init+0x140>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d108      	bne.n	8003c42 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2180      	movs	r1, #128	@ 0x80
 8003c3a:	0209      	lsls	r1, r1, #8
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	e007      	b.n	8003c52 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2184      	movs	r1, #132	@ 0x84
 8003c4c:	0209      	lsls	r1, r1, #8
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d109      	bne.n	8003c6e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2180      	movs	r1, #128	@ 0x80
 8003c66:	0109      	lsls	r1, r1, #4
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	e007      	b.n	8003c7e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4923      	ldr	r1, [pc, #140]	@ (8003d08 <HAL_I2C_Init+0x144>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4920      	ldr	r1, [pc, #128]	@ (8003d0c <HAL_I2C_Init+0x148>)
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	491a      	ldr	r1, [pc, #104]	@ (8003d04 <HAL_I2C_Init+0x140>)
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69d9      	ldr	r1, [r3, #28]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1a      	ldr	r2, [r3, #32]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2241      	movs	r2, #65	@ 0x41
 8003ce2:	2120      	movs	r1, #32
 8003ce4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2242      	movs	r2, #66	@ 0x42
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	f0ffffff 	.word	0xf0ffffff
 8003d04:	ffff7fff 	.word	0xffff7fff
 8003d08:	fffff7ff 	.word	0xfffff7ff
 8003d0c:	02008000 	.word	0x02008000

08003d10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	@ 0x24
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	0008      	movs	r0, r1
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	230a      	movs	r3, #10
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	1c02      	adds	r2, r0, #0
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	2308      	movs	r3, #8
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	1c0a      	adds	r2, r1, #0
 8003d2c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2241      	movs	r2, #65	@ 0x41
 8003d32:	5c9b      	ldrb	r3, [r3, r2]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d000      	beq.n	8003d3c <HAL_I2C_Master_Transmit+0x2c>
 8003d3a:	e10a      	b.n	8003f52 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2240      	movs	r2, #64	@ 0x40
 8003d40:	5c9b      	ldrb	r3, [r3, r2]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_I2C_Master_Transmit+0x3a>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e104      	b.n	8003f54 <HAL_I2C_Master_Transmit+0x244>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2240      	movs	r2, #64	@ 0x40
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d52:	f7ff fc89 	bl	8003668 <HAL_GetTick>
 8003d56:	0003      	movs	r3, r0
 8003d58:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d5a:	2380      	movs	r3, #128	@ 0x80
 8003d5c:	0219      	lsls	r1, r3, #8
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2319      	movs	r3, #25
 8003d66:	2201      	movs	r2, #1
 8003d68:	f000 fb22 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 8003d6c:	1e03      	subs	r3, r0, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0ef      	b.n	8003f54 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2241      	movs	r2, #65	@ 0x41
 8003d78:	2121      	movs	r1, #33	@ 0x21
 8003d7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2242      	movs	r2, #66	@ 0x42
 8003d80:	2110      	movs	r1, #16
 8003d82:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2208      	movs	r2, #8
 8003d94:	18ba      	adds	r2, r7, r2
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2bff      	cmp	r3, #255	@ 0xff
 8003da8:	d906      	bls.n	8003db8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	22ff      	movs	r2, #255	@ 0xff
 8003dae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003db0:	2380      	movs	r3, #128	@ 0x80
 8003db2:	045b      	lsls	r3, r3, #17
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e007      	b.n	8003dc8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	049b      	lsls	r3, r3, #18
 8003dc6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d027      	beq.n	8003e20 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	697c      	ldr	r4, [r7, #20]
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	8819      	ldrh	r1, [r3, #0]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	4b51      	ldr	r3, [pc, #324]	@ (8003f5c <HAL_I2C_Master_Transmit+0x24c>)
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	0023      	movs	r3, r4
 8003e1a:	f000 fd41 	bl	80048a0 <I2C_TransferConfig>
 8003e1e:	e06f      	b.n	8003f00 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	697c      	ldr	r4, [r7, #20]
 8003e28:	230a      	movs	r3, #10
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	8819      	ldrh	r1, [r3, #0]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	4b4a      	ldr	r3, [pc, #296]	@ (8003f5c <HAL_I2C_Master_Transmit+0x24c>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	0023      	movs	r3, r4
 8003e36:	f000 fd33 	bl	80048a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e3a:	e061      	b.n	8003f00 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 fb0c 	bl	8004460 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e48:	1e03      	subs	r3, r0, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e081      	b.n	8003f54 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03a      	beq.n	8003f00 <HAL_I2C_Master_Transmit+0x1f0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d136      	bne.n	8003f00 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	0013      	movs	r3, r2
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2180      	movs	r1, #128	@ 0x80
 8003ea0:	f000 fa86 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	1e03      	subs	r3, r0, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e053      	b.n	8003f54 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2bff      	cmp	r3, #255	@ 0xff
 8003eb4:	d911      	bls.n	8003eda <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	22ff      	movs	r2, #255	@ 0xff
 8003eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	2380      	movs	r3, #128	@ 0x80
 8003ec4:	045c      	lsls	r4, r3, #17
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	8819      	ldrh	r1, [r3, #0]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	0023      	movs	r3, r4
 8003ed4:	f000 fce4 	bl	80048a0 <I2C_TransferConfig>
 8003ed8:	e012      	b.n	8003f00 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	2380      	movs	r3, #128	@ 0x80
 8003eec:	049c      	lsls	r4, r3, #18
 8003eee:	230a      	movs	r3, #10
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	8819      	ldrh	r1, [r3, #0]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	0023      	movs	r3, r4
 8003efc:	f000 fcd0 	bl	80048a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d198      	bne.n	8003e3c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	0018      	movs	r0, r3
 8003f12:	f000 faeb 	bl	80044ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f16:	1e03      	subs	r3, r0, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e01a      	b.n	8003f54 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2220      	movs	r2, #32
 8003f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	490b      	ldr	r1, [pc, #44]	@ (8003f60 <HAL_I2C_Master_Transmit+0x250>)
 8003f32:	400a      	ands	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2241      	movs	r2, #65	@ 0x41
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2242      	movs	r2, #66	@ 0x42
 8003f42:	2100      	movs	r1, #0
 8003f44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2240      	movs	r2, #64	@ 0x40
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
  }
}
 8003f54:	0018      	movs	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b007      	add	sp, #28
 8003f5a:	bd90      	pop	{r4, r7, pc}
 8003f5c:	80002000 	.word	0x80002000
 8003f60:	fe00e800 	.word	0xfe00e800

08003f64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b089      	sub	sp, #36	@ 0x24
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	0008      	movs	r0, r1
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	0019      	movs	r1, r3
 8003f72:	230a      	movs	r3, #10
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	1c02      	adds	r2, r0, #0
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	1c0a      	adds	r2, r1, #0
 8003f80:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2241      	movs	r2, #65	@ 0x41
 8003f86:	5c9b      	ldrb	r3, [r3, r2]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d000      	beq.n	8003f90 <HAL_I2C_Master_Receive+0x2c>
 8003f8e:	e0e8      	b.n	8004162 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2240      	movs	r2, #64	@ 0x40
 8003f94:	5c9b      	ldrb	r3, [r3, r2]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_I2C_Master_Receive+0x3a>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e0e2      	b.n	8004164 <HAL_I2C_Master_Receive+0x200>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2240      	movs	r2, #64	@ 0x40
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fa6:	f7ff fb5f 	bl	8003668 <HAL_GetTick>
 8003faa:	0003      	movs	r3, r0
 8003fac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fae:	2380      	movs	r3, #128	@ 0x80
 8003fb0:	0219      	lsls	r1, r3, #8
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2319      	movs	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f000 f9f8 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 8003fc0:	1e03      	subs	r3, r0, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cd      	b.n	8004164 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2241      	movs	r2, #65	@ 0x41
 8003fcc:	2122      	movs	r1, #34	@ 0x22
 8003fce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2242      	movs	r2, #66	@ 0x42
 8003fd4:	2110      	movs	r1, #16
 8003fd6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	18ba      	adds	r2, r7, r2
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2bff      	cmp	r3, #255	@ 0xff
 8003ffc:	d911      	bls.n	8004022 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004008:	b2da      	uxtb	r2, r3
 800400a:	2380      	movs	r3, #128	@ 0x80
 800400c:	045c      	lsls	r4, r3, #17
 800400e:	230a      	movs	r3, #10
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	8819      	ldrh	r1, [r3, #0]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	4b55      	ldr	r3, [pc, #340]	@ (800416c <HAL_I2C_Master_Receive+0x208>)
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	0023      	movs	r3, r4
 800401c:	f000 fc40 	bl	80048a0 <I2C_TransferConfig>
 8004020:	e076      	b.n	8004110 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004030:	b2da      	uxtb	r2, r3
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	049c      	lsls	r4, r3, #18
 8004036:	230a      	movs	r3, #10
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	8819      	ldrh	r1, [r3, #0]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	4b4b      	ldr	r3, [pc, #300]	@ (800416c <HAL_I2C_Master_Receive+0x208>)
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	0023      	movs	r3, r4
 8004044:	f000 fc2c 	bl	80048a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004048:	e062      	b.n	8004110 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	0018      	movs	r0, r3
 8004052:	f000 fa8f 	bl	8004574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e082      	b.n	8004164 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03a      	beq.n	8004110 <HAL_I2C_Master_Receive+0x1ac>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d136      	bne.n	8004110 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	0013      	movs	r3, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	2180      	movs	r1, #128	@ 0x80
 80040b0:	f000 f97e 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e053      	b.n	8004164 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2bff      	cmp	r3, #255	@ 0xff
 80040c4:	d911      	bls.n	80040ea <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	22ff      	movs	r2, #255	@ 0xff
 80040ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	2380      	movs	r3, #128	@ 0x80
 80040d4:	045c      	lsls	r4, r3, #17
 80040d6:	230a      	movs	r3, #10
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	8819      	ldrh	r1, [r3, #0]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	2300      	movs	r3, #0
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	0023      	movs	r3, r4
 80040e4:	f000 fbdc 	bl	80048a0 <I2C_TransferConfig>
 80040e8:	e012      	b.n	8004110 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	049c      	lsls	r4, r3, #18
 80040fe:	230a      	movs	r3, #10
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	8819      	ldrh	r1, [r3, #0]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	2300      	movs	r3, #0
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	0023      	movs	r3, r4
 800410c:	f000 fbc8 	bl	80048a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d197      	bne.n	800404a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	0018      	movs	r0, r3
 8004122:	f000 f9e3 	bl	80044ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004126:	1e03      	subs	r3, r0, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e01a      	b.n	8004164 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2220      	movs	r2, #32
 8004134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	490b      	ldr	r1, [pc, #44]	@ (8004170 <HAL_I2C_Master_Receive+0x20c>)
 8004142:	400a      	ands	r2, r1
 8004144:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2241      	movs	r2, #65	@ 0x41
 800414a:	2120      	movs	r1, #32
 800414c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2242      	movs	r2, #66	@ 0x42
 8004152:	2100      	movs	r1, #0
 8004154:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2240      	movs	r2, #64	@ 0x40
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b007      	add	sp, #28
 800416a:	bd90      	pop	{r4, r7, pc}
 800416c:	80002400 	.word	0x80002400
 8004170:	fe00e800 	.word	0xfe00e800

08004174 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	@ 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	230a      	movs	r3, #10
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	1c0a      	adds	r2, r1, #0
 8004186:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2241      	movs	r2, #65	@ 0x41
 8004190:	5c9b      	ldrb	r3, [r3, r2]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b20      	cmp	r3, #32
 8004196:	d000      	beq.n	800419a <HAL_I2C_IsDeviceReady+0x26>
 8004198:	e0df      	b.n	800435a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	401a      	ands	r2, r3
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0d4      	b.n	800435c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2240      	movs	r2, #64	@ 0x40
 80041b6:	5c9b      	ldrb	r3, [r3, r2]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_I2C_IsDeviceReady+0x4c>
 80041bc:	2302      	movs	r3, #2
 80041be:	e0cd      	b.n	800435c <HAL_I2C_IsDeviceReady+0x1e8>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2240      	movs	r2, #64	@ 0x40
 80041c4:	2101      	movs	r1, #1
 80041c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2241      	movs	r2, #65	@ 0x41
 80041cc:	2124      	movs	r1, #36	@ 0x24
 80041ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_I2C_IsDeviceReady+0x7a>
 80041de:	230a      	movs	r3, #10
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	059b      	lsls	r3, r3, #22
 80041e6:	0d9b      	lsrs	r3, r3, #22
 80041e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004364 <HAL_I2C_IsDeviceReady+0x1f0>)
 80041ea:	431a      	orrs	r2, r3
 80041ec:	e006      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x88>
 80041ee:	230a      	movs	r3, #10
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	059b      	lsls	r3, r3, #22
 80041f6:	0d9b      	lsrs	r3, r3, #22
 80041f8:	4a5b      	ldr	r2, [pc, #364]	@ (8004368 <HAL_I2C_IsDeviceReady+0x1f4>)
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004202:	f7ff fa31 	bl	8003668 <HAL_GetTick>
 8004206:	0003      	movs	r3, r0
 8004208:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2220      	movs	r2, #32
 8004212:	4013      	ands	r3, r2
 8004214:	3b20      	subs	r3, #32
 8004216:	425a      	negs	r2, r3
 8004218:	4153      	adcs	r3, r2
 800421a:	b2da      	uxtb	r2, r3
 800421c:	231f      	movs	r3, #31
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2210      	movs	r2, #16
 800422a:	4013      	ands	r3, r2
 800422c:	3b10      	subs	r3, #16
 800422e:	425a      	negs	r2, r3
 8004230:	4153      	adcs	r3, r2
 8004232:	b2da      	uxtb	r2, r3
 8004234:	231e      	movs	r3, #30
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800423a:	e035      	b.n	80042a8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	d01a      	beq.n	8004278 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7ff fa11 	bl	8003668 <HAL_GetTick>
 8004246:	0002      	movs	r2, r0
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <HAL_I2C_IsDeviceReady+0xe4>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10f      	bne.n	8004278 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2241      	movs	r2, #65	@ 0x41
 800425c:	2120      	movs	r1, #32
 800425e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004264:	2220      	movs	r2, #32
 8004266:	431a      	orrs	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2240      	movs	r2, #64	@ 0x40
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e071      	b.n	800435c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2220      	movs	r2, #32
 8004280:	4013      	ands	r3, r2
 8004282:	3b20      	subs	r3, #32
 8004284:	425a      	negs	r2, r3
 8004286:	4153      	adcs	r3, r2
 8004288:	b2da      	uxtb	r2, r3
 800428a:	231f      	movs	r3, #31
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2210      	movs	r2, #16
 8004298:	4013      	ands	r3, r2
 800429a:	3b10      	subs	r3, #16
 800429c:	425a      	negs	r2, r3
 800429e:	4153      	adcs	r3, r2
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	231e      	movs	r3, #30
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80042a8:	231f      	movs	r3, #31
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <HAL_I2C_IsDeviceReady+0x148>
 80042b2:	231e      	movs	r3, #30
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0bf      	beq.n	800423c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2210      	movs	r2, #16
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d01a      	beq.n	8004300 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	0013      	movs	r3, r2
 80042d4:	2200      	movs	r2, #0
 80042d6:	2120      	movs	r1, #32
 80042d8:	f000 f86a 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e03b      	b.n	800435c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2220      	movs	r2, #32
 80042ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2241      	movs	r2, #65	@ 0x41
 80042f0:	2120      	movs	r1, #32
 80042f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2240      	movs	r2, #64	@ 0x40
 80042f8:	2100      	movs	r1, #0
 80042fa:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e02d      	b.n	800435c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	0013      	movs	r3, r2
 800430a:	2200      	movs	r2, #0
 800430c:	2120      	movs	r1, #32
 800430e:	f000 f84f 	bl	80043b0 <I2C_WaitOnFlagUntilTimeout>
 8004312:	1e03      	subs	r3, r0, #0
 8004314:	d001      	beq.n	800431a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e020      	b.n	800435c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2210      	movs	r2, #16
 8004320:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2220      	movs	r2, #32
 8004328:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d900      	bls.n	800433a <HAL_I2C_IsDeviceReady+0x1c6>
 8004338:	e74d      	b.n	80041d6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2241      	movs	r2, #65	@ 0x41
 800433e:	2120      	movs	r1, #32
 8004340:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	2220      	movs	r2, #32
 8004348:	431a      	orrs	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2240      	movs	r2, #64	@ 0x40
 8004352:	2100      	movs	r1, #0
 8004354:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b008      	add	sp, #32
 8004362:	bd80      	pop	{r7, pc}
 8004364:	02002000 	.word	0x02002000
 8004368:	02002800 	.word	0x02002800

0800436c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2202      	movs	r2, #2
 800437c:	4013      	ands	r3, r2
 800437e:	2b02      	cmp	r3, #2
 8004380:	d103      	bne.n	800438a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2201      	movs	r2, #1
 8004392:	4013      	ands	r3, r2
 8004394:	2b01      	cmp	r3, #1
 8004396:	d007      	beq.n	80043a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2101      	movs	r1, #1
 80043a4:	430a      	orrs	r2, r1
 80043a6:	619a      	str	r2, [r3, #24]
  }
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c0:	e03a      	b.n	8004438 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 f971 	bl	80046b0 <I2C_IsErrorOccurred>
 80043ce:	1e03      	subs	r3, r0, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e040      	b.n	8004458 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	3301      	adds	r3, #1
 80043da:	d02d      	beq.n	8004438 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7ff f944 	bl	8003668 <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d122      	bne.n	8004438 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	425a      	negs	r2, r3
 8004402:	4153      	adcs	r3, r2
 8004404:	b2db      	uxtb	r3, r3
 8004406:	001a      	movs	r2, r3
 8004408:	1dfb      	adds	r3, r7, #7
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d113      	bne.n	8004438 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004414:	2220      	movs	r2, #32
 8004416:	431a      	orrs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2241      	movs	r2, #65	@ 0x41
 8004420:	2120      	movs	r1, #32
 8004422:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2242      	movs	r2, #66	@ 0x42
 8004428:	2100      	movs	r1, #0
 800442a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2240      	movs	r2, #64	@ 0x40
 8004430:	2100      	movs	r1, #0
 8004432:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e00f      	b.n	8004458 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	425a      	negs	r2, r3
 8004448:	4153      	adcs	r3, r2
 800444a:	b2db      	uxtb	r3, r3
 800444c:	001a      	movs	r2, r3
 800444e:	1dfb      	adds	r3, r7, #7
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d0b5      	beq.n	80043c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b004      	add	sp, #16
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800446c:	e032      	b.n	80044d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f91b 	bl	80046b0 <I2C_IsErrorOccurred>
 800447a:	1e03      	subs	r3, r0, #0
 800447c:	d001      	beq.n	8004482 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e030      	b.n	80044e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	3301      	adds	r3, #1
 8004486:	d025      	beq.n	80044d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004488:	f7ff f8ee 	bl	8003668 <HAL_GetTick>
 800448c:	0002      	movs	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d302      	bcc.n	800449e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11a      	bne.n	80044d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2202      	movs	r2, #2
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d013      	beq.n	80044d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b0:	2220      	movs	r2, #32
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2241      	movs	r2, #65	@ 0x41
 80044bc:	2120      	movs	r1, #32
 80044be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2242      	movs	r2, #66	@ 0x42
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2240      	movs	r2, #64	@ 0x40
 80044cc:	2100      	movs	r1, #0
 80044ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e007      	b.n	80044e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2202      	movs	r2, #2
 80044dc:	4013      	ands	r3, r2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d1c5      	bne.n	800446e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b004      	add	sp, #16
 80044ea:	bd80      	pop	{r7, pc}

080044ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044f8:	e02f      	b.n	800455a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	0018      	movs	r0, r3
 8004502:	f000 f8d5 	bl	80046b0 <I2C_IsErrorOccurred>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d001      	beq.n	800450e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e02d      	b.n	800456a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7ff f8ab 	bl	8003668 <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11a      	bne.n	800455a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2220      	movs	r2, #32
 800452c:	4013      	ands	r3, r2
 800452e:	2b20      	cmp	r3, #32
 8004530:	d013      	beq.n	800455a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	2220      	movs	r2, #32
 8004538:	431a      	orrs	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2241      	movs	r2, #65	@ 0x41
 8004542:	2120      	movs	r1, #32
 8004544:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2242      	movs	r2, #66	@ 0x42
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2240      	movs	r2, #64	@ 0x40
 8004552:	2100      	movs	r1, #0
 8004554:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e007      	b.n	800456a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2220      	movs	r2, #32
 8004562:	4013      	ands	r3, r2
 8004564:	2b20      	cmp	r3, #32
 8004566:	d1c8      	bne.n	80044fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	0018      	movs	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	b004      	add	sp, #16
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2317      	movs	r3, #23
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004588:	e07b      	b.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	0018      	movs	r0, r3
 8004592:	f000 f88d 	bl	80046b0 <I2C_IsErrorOccurred>
 8004596:	1e03      	subs	r3, r0, #0
 8004598:	d003      	beq.n	80045a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800459a:	2317      	movs	r3, #23
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2220      	movs	r2, #32
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d140      	bne.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80045b0:	2117      	movs	r1, #23
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d13b      	bne.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2204      	movs	r2, #4
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d106      	bne.n	80045d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80045d0:	187b      	adds	r3, r7, r1
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2210      	movs	r2, #16
 80045de:	4013      	ands	r3, r2
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d123      	bne.n	800462c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2210      	movs	r2, #16
 80045ea:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2204      	movs	r2, #4
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2220      	movs	r2, #32
 80045f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4929      	ldr	r1, [pc, #164]	@ (80046ac <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004606:	400a      	ands	r2, r1
 8004608:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2241      	movs	r2, #65	@ 0x41
 800460e:	2120      	movs	r1, #32
 8004610:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2242      	movs	r2, #66	@ 0x42
 8004616:	2100      	movs	r1, #0
 8004618:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2240      	movs	r2, #64	@ 0x40
 800461e:	2100      	movs	r1, #0
 8004620:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004622:	2317      	movs	r3, #23
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e002      	b.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004632:	f7ff f819 	bl	8003668 <HAL_GetTick>
 8004636:	0002      	movs	r2, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11c      	bne.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004648:	2017      	movs	r0, #23
 800464a:	183b      	adds	r3, r7, r0
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d117      	bne.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2204      	movs	r2, #4
 800465a:	4013      	ands	r3, r2
 800465c:	2b04      	cmp	r3, #4
 800465e:	d010      	beq.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004664:	2220      	movs	r2, #32
 8004666:	431a      	orrs	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2241      	movs	r2, #65	@ 0x41
 8004670:	2120      	movs	r1, #32
 8004672:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2240      	movs	r2, #64	@ 0x40
 8004678:	2100      	movs	r1, #0
 800467a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800467c:	183b      	adds	r3, r7, r0
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2204      	movs	r2, #4
 800468a:	4013      	ands	r3, r2
 800468c:	2b04      	cmp	r3, #4
 800468e:	d005      	beq.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004690:	2317      	movs	r3, #23
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d100      	bne.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800469a:	e776      	b.n	800458a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800469c:	2317      	movs	r3, #23
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	781b      	ldrb	r3, [r3, #0]
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b006      	add	sp, #24
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	fe00e800 	.word	0xfe00e800

080046b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	@ 0x28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2327      	movs	r3, #39	@ 0x27
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2210      	movs	r2, #16
 80046d8:	4013      	ands	r3, r2
 80046da:	d100      	bne.n	80046de <I2C_IsErrorOccurred+0x2e>
 80046dc:	e079      	b.n	80047d2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2210      	movs	r2, #16
 80046e4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046e6:	e057      	b.n	8004798 <I2C_IsErrorOccurred+0xe8>
 80046e8:	2227      	movs	r2, #39	@ 0x27
 80046ea:	18bb      	adds	r3, r7, r2
 80046ec:	18ba      	adds	r2, r7, r2
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3301      	adds	r3, #1
 80046f6:	d04f      	beq.n	8004798 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046f8:	f7fe ffb6 	bl	8003668 <HAL_GetTick>
 80046fc:	0002      	movs	r2, r0
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	d302      	bcc.n	800470e <I2C_IsErrorOccurred+0x5e>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d144      	bne.n	8004798 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	01db      	lsls	r3, r3, #7
 8004718:	4013      	ands	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800471c:	2013      	movs	r0, #19
 800471e:	183b      	adds	r3, r7, r0
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	2142      	movs	r1, #66	@ 0x42
 8004724:	5c52      	ldrb	r2, [r2, r1]
 8004726:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	401a      	ands	r2, r3
 8004734:	2380      	movs	r3, #128	@ 0x80
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	429a      	cmp	r2, r3
 800473a:	d126      	bne.n	800478a <I2C_IsErrorOccurred+0xda>
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	2380      	movs	r3, #128	@ 0x80
 8004740:	01db      	lsls	r3, r3, #7
 8004742:	429a      	cmp	r2, r3
 8004744:	d021      	beq.n	800478a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004746:	183b      	adds	r3, r7, r0
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b20      	cmp	r3, #32
 800474c:	d01d      	beq.n	800478a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2180      	movs	r1, #128	@ 0x80
 800475a:	01c9      	lsls	r1, r1, #7
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004760:	f7fe ff82 	bl	8003668 <HAL_GetTick>
 8004764:	0003      	movs	r3, r0
 8004766:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004768:	e00f      	b.n	800478a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800476a:	f7fe ff7d 	bl	8003668 <HAL_GetTick>
 800476e:	0002      	movs	r2, r0
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b19      	cmp	r3, #25
 8004776:	d908      	bls.n	800478a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2220      	movs	r2, #32
 800477c:	4313      	orrs	r3, r2
 800477e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004780:	2327      	movs	r3, #39	@ 0x27
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]

              break;
 8004788:	e006      	b.n	8004798 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2220      	movs	r2, #32
 8004792:	4013      	ands	r3, r2
 8004794:	2b20      	cmp	r3, #32
 8004796:	d1e8      	bne.n	800476a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2220      	movs	r2, #32
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d004      	beq.n	80047b0 <I2C_IsErrorOccurred+0x100>
 80047a6:	2327      	movs	r3, #39	@ 0x27
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d09b      	beq.n	80046e8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047b0:	2327      	movs	r3, #39	@ 0x27
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2220      	movs	r2, #32
 80047c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	2204      	movs	r2, #4
 80047c6:	4313      	orrs	r3, r2
 80047c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047ca:	2327      	movs	r3, #39	@ 0x27
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	2380      	movs	r3, #128	@ 0x80
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00c      	beq.n	80047fe <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2201      	movs	r2, #1
 80047e8:	4313      	orrs	r3, r2
 80047ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2280      	movs	r2, #128	@ 0x80
 80047f2:	0052      	lsls	r2, r2, #1
 80047f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f6:	2327      	movs	r3, #39	@ 0x27
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4013      	ands	r3, r2
 8004806:	d00c      	beq.n	8004822 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2208      	movs	r2, #8
 800480c:	4313      	orrs	r3, r2
 800480e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2280      	movs	r2, #128	@ 0x80
 8004816:	00d2      	lsls	r2, r2, #3
 8004818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800481a:	2327      	movs	r3, #39	@ 0x27
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4013      	ands	r3, r2
 800482a:	d00c      	beq.n	8004846 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2202      	movs	r2, #2
 8004830:	4313      	orrs	r3, r2
 8004832:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2280      	movs	r2, #128	@ 0x80
 800483a:	0092      	lsls	r2, r2, #2
 800483c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800483e:	2327      	movs	r3, #39	@ 0x27
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004846:	2327      	movs	r3, #39	@ 0x27
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01d      	beq.n	800488c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	0018      	movs	r0, r3
 8004854:	f7ff fd8a 	bl	800436c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	490e      	ldr	r1, [pc, #56]	@ (800489c <I2C_IsErrorOccurred+0x1ec>)
 8004864:	400a      	ands	r2, r1
 8004866:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	431a      	orrs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2241      	movs	r2, #65	@ 0x41
 8004878:	2120      	movs	r1, #32
 800487a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2242      	movs	r2, #66	@ 0x42
 8004880:	2100      	movs	r1, #0
 8004882:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	@ 0x40
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800488c:	2327      	movs	r3, #39	@ 0x27
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	781b      	ldrb	r3, [r3, #0]
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b00a      	add	sp, #40	@ 0x28
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	fe00e800 	.word	0xfe00e800

080048a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	0008      	movs	r0, r1
 80048aa:	0011      	movs	r1, r2
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	240a      	movs	r4, #10
 80048b0:	193b      	adds	r3, r7, r4
 80048b2:	1c02      	adds	r2, r0, #0
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	2009      	movs	r0, #9
 80048b8:	183b      	adds	r3, r7, r0
 80048ba:	1c0a      	adds	r2, r1, #0
 80048bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048be:	193b      	adds	r3, r7, r4
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	059b      	lsls	r3, r3, #22
 80048c4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	0419      	lsls	r1, r3, #16
 80048cc:	23ff      	movs	r3, #255	@ 0xff
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048d2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048da:	4313      	orrs	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ea:	0d51      	lsrs	r1, r2, #21
 80048ec:	2280      	movs	r2, #128	@ 0x80
 80048ee:	00d2      	lsls	r2, r2, #3
 80048f0:	400a      	ands	r2, r1
 80048f2:	4907      	ldr	r1, [pc, #28]	@ (8004910 <I2C_TransferConfig+0x70>)
 80048f4:	430a      	orrs	r2, r1
 80048f6:	43d2      	mvns	r2, r2
 80048f8:	401a      	ands	r2, r3
 80048fa:	0011      	movs	r1, r2
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	b007      	add	sp, #28
 800490c:	bd90      	pop	{r4, r7, pc}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	03ff63ff 	.word	0x03ff63ff

08004914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2241      	movs	r2, #65	@ 0x41
 8004922:	5c9b      	ldrb	r3, [r3, r2]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	d138      	bne.n	800499c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2240      	movs	r2, #64	@ 0x40
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004934:	2302      	movs	r3, #2
 8004936:	e032      	b.n	800499e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2240      	movs	r2, #64	@ 0x40
 800493c:	2101      	movs	r1, #1
 800493e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2241      	movs	r2, #65	@ 0x41
 8004944:	2124      	movs	r1, #36	@ 0x24
 8004946:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2101      	movs	r1, #1
 8004954:	438a      	bics	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4911      	ldr	r1, [pc, #68]	@ (80049a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2101      	movs	r1, #1
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2241      	movs	r2, #65	@ 0x41
 800498c:	2120      	movs	r1, #32
 800498e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2240      	movs	r2, #64	@ 0x40
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	ffffefff 	.word	0xffffefff

080049ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2241      	movs	r2, #65	@ 0x41
 80049ba:	5c9b      	ldrb	r3, [r3, r2]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d139      	bne.n	8004a36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2240      	movs	r2, #64	@ 0x40
 80049c6:	5c9b      	ldrb	r3, [r3, r2]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e033      	b.n	8004a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2240      	movs	r2, #64	@ 0x40
 80049d4:	2101      	movs	r1, #1
 80049d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2241      	movs	r2, #65	@ 0x41
 80049dc:	2124      	movs	r1, #36	@ 0x24
 80049de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2101      	movs	r1, #1
 80049ec:	438a      	bics	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a11      	ldr	r2, [pc, #68]	@ (8004a40 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2241      	movs	r2, #65	@ 0x41
 8004a26:	2120      	movs	r1, #32
 8004a28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2240      	movs	r2, #64	@ 0x40
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b004      	add	sp, #16
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	fffff0ff 	.word	0xfffff0ff

08004a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f000 fb76 	bl	8005144 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d100      	bne.n	8004a64 <HAL_RCC_OscConfig+0x20>
 8004a62:	e08e      	b.n	8004b82 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a64:	4bc5      	ldr	r3, [pc, #788]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	220c      	movs	r2, #12
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d00e      	beq.n	8004a8e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a70:	4bc2      	ldr	r3, [pc, #776]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	220c      	movs	r2, #12
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d117      	bne.n	8004aac <HAL_RCC_OscConfig+0x68>
 8004a7c:	4bbf      	ldr	r3, [pc, #764]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	23c0      	movs	r3, #192	@ 0xc0
 8004a82:	025b      	lsls	r3, r3, #9
 8004a84:	401a      	ands	r2, r3
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	025b      	lsls	r3, r3, #9
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d10e      	bne.n	8004aac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8e:	4bbb      	ldr	r3, [pc, #748]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	029b      	lsls	r3, r3, #10
 8004a96:	4013      	ands	r3, r2
 8004a98:	d100      	bne.n	8004a9c <HAL_RCC_OscConfig+0x58>
 8004a9a:	e071      	b.n	8004b80 <HAL_RCC_OscConfig+0x13c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d000      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x62>
 8004aa4:	e06c      	b.n	8004b80 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f000 fb4c 	bl	8005144 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x80>
 8004ab4:	4bb1      	ldr	r3, [pc, #708]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4bb0      	ldr	r3, [pc, #704]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004aba:	2180      	movs	r1, #128	@ 0x80
 8004abc:	0249      	lsls	r1, r1, #9
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e02f      	b.n	8004b24 <HAL_RCC_OscConfig+0xe0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10c      	bne.n	8004ae6 <HAL_RCC_OscConfig+0xa2>
 8004acc:	4bab      	ldr	r3, [pc, #684]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4baa      	ldr	r3, [pc, #680]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ad2:	49ab      	ldr	r1, [pc, #684]	@ (8004d80 <HAL_RCC_OscConfig+0x33c>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	4ba8      	ldr	r3, [pc, #672]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4ba7      	ldr	r3, [pc, #668]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ade:	49a9      	ldr	r1, [pc, #676]	@ (8004d84 <HAL_RCC_OscConfig+0x340>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e01e      	b.n	8004b24 <HAL_RCC_OscConfig+0xe0>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d10e      	bne.n	8004b0c <HAL_RCC_OscConfig+0xc8>
 8004aee:	4ba3      	ldr	r3, [pc, #652]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4ba2      	ldr	r3, [pc, #648]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004af4:	2180      	movs	r1, #128	@ 0x80
 8004af6:	02c9      	lsls	r1, r1, #11
 8004af8:	430a      	orrs	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	4b9f      	ldr	r3, [pc, #636]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b9e      	ldr	r3, [pc, #632]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b02:	2180      	movs	r1, #128	@ 0x80
 8004b04:	0249      	lsls	r1, r1, #9
 8004b06:	430a      	orrs	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xe0>
 8004b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b9a      	ldr	r3, [pc, #616]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b12:	499b      	ldr	r1, [pc, #620]	@ (8004d80 <HAL_RCC_OscConfig+0x33c>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	4b98      	ldr	r3, [pc, #608]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b97      	ldr	r3, [pc, #604]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b1e:	4999      	ldr	r1, [pc, #612]	@ (8004d84 <HAL_RCC_OscConfig+0x340>)
 8004b20:	400a      	ands	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d014      	beq.n	8004b56 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fe fd9c 	bl	8003668 <HAL_GetTick>
 8004b30:	0003      	movs	r3, r0
 8004b32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b36:	f7fe fd97 	bl	8003668 <HAL_GetTick>
 8004b3a:	0002      	movs	r2, r0
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b64      	cmp	r3, #100	@ 0x64
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e2fd      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b48:	4b8c      	ldr	r3, [pc, #560]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2380      	movs	r3, #128	@ 0x80
 8004b4e:	029b      	lsls	r3, r3, #10
 8004b50:	4013      	ands	r3, r2
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0xf2>
 8004b54:	e015      	b.n	8004b82 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fe fd87 	bl	8003668 <HAL_GetTick>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fe fd82 	bl	8003668 <HAL_GetTick>
 8004b64:	0002      	movs	r2, r0
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e2e8      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b72:	4b82      	ldr	r3, [pc, #520]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	029b      	lsls	r3, r3, #10
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x11c>
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2202      	movs	r2, #2
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <HAL_RCC_OscConfig+0x14a>
 8004b8c:	e06c      	b.n	8004c68 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	220c      	movs	r2, #12
 8004b94:	4013      	ands	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b98:	4b78      	ldr	r3, [pc, #480]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	220c      	movs	r2, #12
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d11f      	bne.n	8004be4 <HAL_RCC_OscConfig+0x1a0>
 8004ba4:	4b75      	ldr	r3, [pc, #468]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	23c0      	movs	r3, #192	@ 0xc0
 8004baa:	025b      	lsls	r3, r3, #9
 8004bac:	401a      	ands	r2, r3
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d116      	bne.n	8004be4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	4b71      	ldr	r3, [pc, #452]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_OscConfig+0x188>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e2bb      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	22f8      	movs	r2, #248	@ 0xf8
 8004bd2:	4393      	bics	r3, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00da      	lsls	r2, r3, #3
 8004bdc:	4b67      	ldr	r3, [pc, #412]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be2:	e041      	b.n	8004c68 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d024      	beq.n	8004c36 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bec:	4b63      	ldr	r3, [pc, #396]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b62      	ldr	r3, [pc, #392]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fe fd36 	bl	8003668 <HAL_GetTick>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c02:	f7fe fd31 	bl	8003668 <HAL_GetTick>
 8004c06:	0002      	movs	r2, r0
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e297      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	4b59      	ldr	r3, [pc, #356]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d0f1      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b57      	ldr	r3, [pc, #348]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	22f8      	movs	r2, #248	@ 0xf8
 8004c24:	4393      	bics	r3, r2
 8004c26:	0019      	movs	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	00da      	lsls	r2, r3, #3
 8004c2e:	4b53      	ldr	r3, [pc, #332]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e018      	b.n	8004c68 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c36:	4b51      	ldr	r3, [pc, #324]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b50      	ldr	r3, [pc, #320]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	438a      	bics	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c42:	f7fe fd11 	bl	8003668 <HAL_GetTick>
 8004c46:	0003      	movs	r3, r0
 8004c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7fe fd0c 	bl	8003668 <HAL_GetTick>
 8004c50:	0002      	movs	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e272      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5e:	4b47      	ldr	r3, [pc, #284]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2202      	movs	r2, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	d1f1      	bne.n	8004c4c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d036      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d019      	beq.n	8004cae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7a:	4b40      	ldr	r3, [pc, #256]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004c80:	2101      	movs	r1, #1
 8004c82:	430a      	orrs	r2, r1
 8004c84:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c86:	f7fe fcef 	bl	8003668 <HAL_GetTick>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c90:	f7fe fcea 	bl	8003668 <HAL_GetTick>
 8004c94:	0002      	movs	r2, r0
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e250      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ca2:	4b36      	ldr	r3, [pc, #216]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d0f1      	beq.n	8004c90 <HAL_RCC_OscConfig+0x24c>
 8004cac:	e018      	b.n	8004ce0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cae:	4b33      	ldr	r3, [pc, #204]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cb2:	4b32      	ldr	r3, [pc, #200]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	438a      	bics	r2, r1
 8004cb8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cba:	f7fe fcd5 	bl	8003668 <HAL_GetTick>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fe fcd0 	bl	8003668 <HAL_GetTick>
 8004cc8:	0002      	movs	r2, r0
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e236      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd6:	4b29      	ldr	r3, [pc, #164]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	2202      	movs	r2, #2
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d1f1      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d100      	bne.n	8004cec <HAL_RCC_OscConfig+0x2a8>
 8004cea:	e0b5      	b.n	8004e58 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cec:	201f      	movs	r0, #31
 8004cee:	183b      	adds	r3, r7, r0
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b21      	ldr	r3, [pc, #132]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	2380      	movs	r3, #128	@ 0x80
 8004cfa:	055b      	lsls	r3, r3, #21
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d110      	bne.n	8004d22 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b1e      	ldr	r3, [pc, #120]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	4b1d      	ldr	r3, [pc, #116]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d06:	2180      	movs	r1, #128	@ 0x80
 8004d08:	0549      	lsls	r1, r1, #21
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	61da      	str	r2, [r3, #28]
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	2380      	movs	r3, #128	@ 0x80
 8004d14:	055b      	lsls	r3, r3, #21
 8004d16:	4013      	ands	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d1c:	183b      	adds	r3, r7, r0
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b19      	ldr	r3, [pc, #100]	@ (8004d88 <HAL_RCC_OscConfig+0x344>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	2380      	movs	r3, #128	@ 0x80
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d11a      	bne.n	8004d64 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2e:	4b16      	ldr	r3, [pc, #88]	@ (8004d88 <HAL_RCC_OscConfig+0x344>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b15      	ldr	r3, [pc, #84]	@ (8004d88 <HAL_RCC_OscConfig+0x344>)
 8004d34:	2180      	movs	r1, #128	@ 0x80
 8004d36:	0049      	lsls	r1, r1, #1
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3c:	f7fe fc94 	bl	8003668 <HAL_GetTick>
 8004d40:	0003      	movs	r3, r0
 8004d42:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d46:	f7fe fc8f 	bl	8003668 <HAL_GetTick>
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b64      	cmp	r3, #100	@ 0x64
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e1f5      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_OscConfig+0x344>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4013      	ands	r3, r2
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d10f      	bne.n	8004d8c <HAL_RCC_OscConfig+0x348>
 8004d6c:	4b03      	ldr	r3, [pc, #12]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d6e:	6a1a      	ldr	r2, [r3, #32]
 8004d70:	4b02      	ldr	r3, [pc, #8]	@ (8004d7c <HAL_RCC_OscConfig+0x338>)
 8004d72:	2101      	movs	r1, #1
 8004d74:	430a      	orrs	r2, r1
 8004d76:	621a      	str	r2, [r3, #32]
 8004d78:	e036      	b.n	8004de8 <HAL_RCC_OscConfig+0x3a4>
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	fffeffff 	.word	0xfffeffff
 8004d84:	fffbffff 	.word	0xfffbffff
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10c      	bne.n	8004dae <HAL_RCC_OscConfig+0x36a>
 8004d94:	4bca      	ldr	r3, [pc, #808]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	4bc9      	ldr	r3, [pc, #804]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	621a      	str	r2, [r3, #32]
 8004da0:	4bc7      	ldr	r3, [pc, #796]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	4bc6      	ldr	r3, [pc, #792]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004da6:	2104      	movs	r1, #4
 8004da8:	438a      	bics	r2, r1
 8004daa:	621a      	str	r2, [r3, #32]
 8004dac:	e01c      	b.n	8004de8 <HAL_RCC_OscConfig+0x3a4>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x38c>
 8004db6:	4bc2      	ldr	r3, [pc, #776]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	4bc1      	ldr	r3, [pc, #772]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004dbc:	2104      	movs	r1, #4
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	621a      	str	r2, [r3, #32]
 8004dc2:	4bbf      	ldr	r3, [pc, #764]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	4bbe      	ldr	r3, [pc, #760]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004dc8:	2101      	movs	r1, #1
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	621a      	str	r2, [r3, #32]
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_OscConfig+0x3a4>
 8004dd0:	4bbb      	ldr	r3, [pc, #748]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	4bba      	ldr	r3, [pc, #744]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	438a      	bics	r2, r1
 8004dda:	621a      	str	r2, [r3, #32]
 8004ddc:	4bb8      	ldr	r3, [pc, #736]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	4bb7      	ldr	r3, [pc, #732]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004de2:	2104      	movs	r1, #4
 8004de4:	438a      	bics	r2, r1
 8004de6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d014      	beq.n	8004e1a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df0:	f7fe fc3a 	bl	8003668 <HAL_GetTick>
 8004df4:	0003      	movs	r3, r0
 8004df6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df8:	e009      	b.n	8004e0e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f7fe fc35 	bl	8003668 <HAL_GetTick>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	4aaf      	ldr	r2, [pc, #700]	@ (80050c4 <HAL_RCC_OscConfig+0x680>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e19a      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0e:	4bac      	ldr	r3, [pc, #688]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	2202      	movs	r2, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x3b6>
 8004e18:	e013      	b.n	8004e42 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fe fc25 	bl	8003668 <HAL_GetTick>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e22:	e009      	b.n	8004e38 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fe fc20 	bl	8003668 <HAL_GetTick>
 8004e28:	0002      	movs	r2, r0
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	4aa5      	ldr	r2, [pc, #660]	@ (80050c4 <HAL_RCC_OscConfig+0x680>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e185      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	4ba1      	ldr	r3, [pc, #644]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e42:	231f      	movs	r3, #31
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4c:	4b9c      	ldr	r3, [pc, #624]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	4b9b      	ldr	r3, [pc, #620]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004e52:	499d      	ldr	r1, [pc, #628]	@ (80050c8 <HAL_RCC_OscConfig+0x684>)
 8004e54:	400a      	ands	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2210      	movs	r2, #16
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d063      	beq.n	8004f2a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d12a      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e6a:	4b95      	ldr	r3, [pc, #596]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e6e:	4b94      	ldr	r3, [pc, #592]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004e70:	2104      	movs	r1, #4
 8004e72:	430a      	orrs	r2, r1
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e76:	4b92      	ldr	r3, [pc, #584]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e7a:	4b91      	ldr	r3, [pc, #580]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e82:	f7fe fbf1 	bl	8003668 <HAL_GetTick>
 8004e86:	0003      	movs	r3, r0
 8004e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e8c:	f7fe fbec 	bl	8003668 <HAL_GetTick>
 8004e90:	0002      	movs	r2, r0
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e152      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e9e:	4b88      	ldr	r3, [pc, #544]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d0f1      	beq.n	8004e8c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ea8:	4b85      	ldr	r3, [pc, #532]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eac:	22f8      	movs	r2, #248	@ 0xf8
 8004eae:	4393      	bics	r3, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	00da      	lsls	r2, r3, #3
 8004eb8:	4b81      	ldr	r3, [pc, #516]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ebe:	e034      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	3305      	adds	r3, #5
 8004ec6:	d111      	bne.n	8004eec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004ec8:	4b7d      	ldr	r3, [pc, #500]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ecc:	4b7c      	ldr	r3, [pc, #496]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ece:	2104      	movs	r1, #4
 8004ed0:	438a      	bics	r2, r1
 8004ed2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ed4:	4b7a      	ldr	r3, [pc, #488]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	22f8      	movs	r2, #248	@ 0xf8
 8004eda:	4393      	bics	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	00da      	lsls	r2, r3, #3
 8004ee4:	4b76      	ldr	r3, [pc, #472]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eea:	e01e      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004eec:	4b74      	ldr	r3, [pc, #464]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef0:	4b73      	ldr	r3, [pc, #460]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ef2:	2104      	movs	r1, #4
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ef8:	4b71      	ldr	r3, [pc, #452]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004efc:	4b70      	ldr	r3, [pc, #448]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004efe:	2101      	movs	r1, #1
 8004f00:	438a      	bics	r2, r1
 8004f02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f04:	f7fe fbb0 	bl	8003668 <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f0e:	f7fe fbab 	bl	8003668 <HAL_GetTick>
 8004f12:	0002      	movs	r2, r0
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e111      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f20:	4b67      	ldr	r3, [pc, #412]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f24:	2202      	movs	r2, #2
 8004f26:	4013      	ands	r3, r2
 8004f28:	d1f1      	bne.n	8004f0e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	4013      	ands	r3, r2
 8004f32:	d05c      	beq.n	8004fee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f34:	4b62      	ldr	r3, [pc, #392]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	220c      	movs	r2, #12
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b0c      	cmp	r3, #12
 8004f3e:	d00e      	beq.n	8004f5e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f40:	4b5f      	ldr	r3, [pc, #380]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	220c      	movs	r2, #12
 8004f46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d114      	bne.n	8004f76 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	23c0      	movs	r3, #192	@ 0xc0
 8004f52:	025b      	lsls	r3, r3, #9
 8004f54:	401a      	ands	r2, r3
 8004f56:	23c0      	movs	r3, #192	@ 0xc0
 8004f58:	025b      	lsls	r3, r3, #9
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d10b      	bne.n	8004f76 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004f5e:	4b58      	ldr	r3, [pc, #352]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f62:	2380      	movs	r3, #128	@ 0x80
 8004f64:	029b      	lsls	r3, r3, #10
 8004f66:	4013      	ands	r3, r2
 8004f68:	d040      	beq.n	8004fec <HAL_RCC_OscConfig+0x5a8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d03c      	beq.n	8004fec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0e6      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004f7e:	4b50      	ldr	r3, [pc, #320]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f82:	4b4f      	ldr	r3, [pc, #316]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004f84:	2180      	movs	r1, #128	@ 0x80
 8004f86:	0249      	lsls	r1, r1, #9
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fe fb6c 	bl	8003668 <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f96:	f7fe fb67 	bl	8003668 <HAL_GetTick>
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e0cd      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004fa8:	4b45      	ldr	r3, [pc, #276]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	029b      	lsls	r3, r3, #10
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x552>
 8004fb4:	e01b      	b.n	8004fee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004fb6:	4b42      	ldr	r3, [pc, #264]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fba:	4b41      	ldr	r3, [pc, #260]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004fbc:	4943      	ldr	r1, [pc, #268]	@ (80050cc <HAL_RCC_OscConfig+0x688>)
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fe fb51 	bl	8003668 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fcc:	f7fe fb4c 	bl	8003668 <HAL_GetTick>
 8004fd0:	0002      	movs	r2, r0
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0b2      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004fde:	4b38      	ldr	r3, [pc, #224]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe2:	2380      	movs	r3, #128	@ 0x80
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x588>
 8004fea:	e000      	b.n	8004fee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004fec:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d100      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x5b4>
 8004ff6:	e0a4      	b.n	8005142 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ff8:	4b31      	ldr	r3, [pc, #196]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	220c      	movs	r2, #12
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b08      	cmp	r3, #8
 8005002:	d100      	bne.n	8005006 <HAL_RCC_OscConfig+0x5c2>
 8005004:	e078      	b.n	80050f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	2b02      	cmp	r3, #2
 800500c:	d14c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500e:	4b2c      	ldr	r3, [pc, #176]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b2b      	ldr	r3, [pc, #172]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8005014:	492e      	ldr	r1, [pc, #184]	@ (80050d0 <HAL_RCC_OscConfig+0x68c>)
 8005016:	400a      	ands	r2, r1
 8005018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501a:	f7fe fb25 	bl	8003668 <HAL_GetTick>
 800501e:	0003      	movs	r3, r0
 8005020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005024:	f7fe fb20 	bl	8003668 <HAL_GetTick>
 8005028:	0002      	movs	r2, r0
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e086      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005036:	4b22      	ldr	r3, [pc, #136]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	2380      	movs	r3, #128	@ 0x80
 800503c:	049b      	lsls	r3, r3, #18
 800503e:	4013      	ands	r3, r2
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005042:	4b1f      	ldr	r3, [pc, #124]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	220f      	movs	r2, #15
 8005048:	4393      	bics	r3, r2
 800504a:	0019      	movs	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005050:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8005052:	430a      	orrs	r2, r1
 8005054:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005056:	4b1a      	ldr	r3, [pc, #104]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4a1e      	ldr	r2, [pc, #120]	@ (80050d4 <HAL_RCC_OscConfig+0x690>)
 800505c:	4013      	ands	r3, r2
 800505e:	0019      	movs	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	431a      	orrs	r2, r3
 800506a:	4b15      	ldr	r3, [pc, #84]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005070:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 8005076:	2180      	movs	r1, #128	@ 0x80
 8005078:	0449      	lsls	r1, r1, #17
 800507a:	430a      	orrs	r2, r1
 800507c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507e:	f7fe faf3 	bl	8003668 <HAL_GetTick>
 8005082:	0003      	movs	r3, r0
 8005084:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005088:	f7fe faee 	bl	8003668 <HAL_GetTick>
 800508c:	0002      	movs	r2, r0
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e054      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	2380      	movs	r3, #128	@ 0x80
 80050a0:	049b      	lsls	r3, r3, #18
 80050a2:	4013      	ands	r3, r2
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x644>
 80050a6:	e04c      	b.n	8005142 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b04      	ldr	r3, [pc, #16]	@ (80050c0 <HAL_RCC_OscConfig+0x67c>)
 80050ae:	4908      	ldr	r1, [pc, #32]	@ (80050d0 <HAL_RCC_OscConfig+0x68c>)
 80050b0:	400a      	ands	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fe fad8 	bl	8003668 <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050bc:	e015      	b.n	80050ea <HAL_RCC_OscConfig+0x6a6>
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	40021000 	.word	0x40021000
 80050c4:	00001388 	.word	0x00001388
 80050c8:	efffffff 	.word	0xefffffff
 80050cc:	fffeffff 	.word	0xfffeffff
 80050d0:	feffffff 	.word	0xfeffffff
 80050d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fe fac6 	bl	8003668 <HAL_GetTick>
 80050dc:	0002      	movs	r2, r0
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e02c      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ea:	4b18      	ldr	r3, [pc, #96]	@ (800514c <HAL_RCC_OscConfig+0x708>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	049b      	lsls	r3, r3, #18
 80050f2:	4013      	ands	r3, r2
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x694>
 80050f6:	e024      	b.n	8005142 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e01f      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005104:	4b11      	ldr	r3, [pc, #68]	@ (800514c <HAL_RCC_OscConfig+0x708>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800510a:	4b10      	ldr	r3, [pc, #64]	@ (800514c <HAL_RCC_OscConfig+0x708>)
 800510c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	23c0      	movs	r3, #192	@ 0xc0
 8005114:	025b      	lsls	r3, r3, #9
 8005116:	401a      	ands	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511c:	429a      	cmp	r2, r3
 800511e:	d10e      	bne.n	800513e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	220f      	movs	r2, #15
 8005124:	401a      	ands	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d107      	bne.n	800513e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	23f0      	movs	r3, #240	@ 0xf0
 8005132:	039b      	lsls	r3, r3, #14
 8005134:	401a      	ands	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d001      	beq.n	8005142 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	b008      	add	sp, #32
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40021000 	.word	0x40021000

08005150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0bf      	b.n	80052e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005164:	4b61      	ldr	r3, [pc, #388]	@ (80052ec <HAL_RCC_ClockConfig+0x19c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2201      	movs	r2, #1
 800516a:	4013      	ands	r3, r2
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d911      	bls.n	8005196 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b5e      	ldr	r3, [pc, #376]	@ (80052ec <HAL_RCC_ClockConfig+0x19c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2201      	movs	r2, #1
 8005178:	4393      	bics	r3, r2
 800517a:	0019      	movs	r1, r3
 800517c:	4b5b      	ldr	r3, [pc, #364]	@ (80052ec <HAL_RCC_ClockConfig+0x19c>)
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005184:	4b59      	ldr	r3, [pc, #356]	@ (80052ec <HAL_RCC_ClockConfig+0x19c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	4013      	ands	r3, r2
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d001      	beq.n	8005196 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e0a6      	b.n	80052e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2202      	movs	r2, #2
 800519c:	4013      	ands	r3, r2
 800519e:	d015      	beq.n	80051cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2204      	movs	r2, #4
 80051a6:	4013      	ands	r3, r2
 80051a8:	d006      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80051aa:	4b51      	ldr	r3, [pc, #324]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	4b50      	ldr	r3, [pc, #320]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80051b0:	21e0      	movs	r1, #224	@ 0xe0
 80051b2:	00c9      	lsls	r1, r1, #3
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b8:	4b4d      	ldr	r3, [pc, #308]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	22f0      	movs	r2, #240	@ 0xf0
 80051be:	4393      	bics	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	4b4a      	ldr	r3, [pc, #296]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	4013      	ands	r3, r2
 80051d4:	d04c      	beq.n	8005270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051de:	4b44      	ldr	r3, [pc, #272]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	2380      	movs	r3, #128	@ 0x80
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	4013      	ands	r3, r2
 80051e8:	d120      	bne.n	800522c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e07a      	b.n	80052e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d107      	bne.n	8005206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f6:	4b3e      	ldr	r3, [pc, #248]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	@ 0x80
 80051fc:	049b      	lsls	r3, r3, #18
 80051fe:	4013      	ands	r3, r2
 8005200:	d114      	bne.n	800522c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e06e      	b.n	80052e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b03      	cmp	r3, #3
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800520e:	4b38      	ldr	r3, [pc, #224]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 8005210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005212:	2380      	movs	r3, #128	@ 0x80
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	4013      	ands	r3, r2
 8005218:	d108      	bne.n	800522c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e062      	b.n	80052e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521e:	4b34      	ldr	r3, [pc, #208]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2202      	movs	r2, #2
 8005224:	4013      	ands	r3, r2
 8005226:	d101      	bne.n	800522c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e05b      	b.n	80052e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800522c:	4b30      	ldr	r3, [pc, #192]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2203      	movs	r2, #3
 8005232:	4393      	bics	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4b2d      	ldr	r3, [pc, #180]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005240:	f7fe fa12 	bl	8003668 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005248:	e009      	b.n	800525e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524a:	f7fe fa0d 	bl	8003668 <HAL_GetTick>
 800524e:	0002      	movs	r2, r0
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	4a27      	ldr	r2, [pc, #156]	@ (80052f4 <HAL_RCC_ClockConfig+0x1a4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e042      	b.n	80052e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	4b24      	ldr	r3, [pc, #144]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	220c      	movs	r2, #12
 8005264:	401a      	ands	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	429a      	cmp	r2, r3
 800526e:	d1ec      	bne.n	800524a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005270:	4b1e      	ldr	r3, [pc, #120]	@ (80052ec <HAL_RCC_ClockConfig+0x19c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2201      	movs	r2, #1
 8005276:	4013      	ands	r3, r2
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d211      	bcs.n	80052a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b1b      	ldr	r3, [pc, #108]	@ (80052ec <HAL_RCC_ClockConfig+0x19c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2201      	movs	r2, #1
 8005284:	4393      	bics	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	4b18      	ldr	r3, [pc, #96]	@ (80052ec <HAL_RCC_ClockConfig+0x19c>)
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005290:	4b16      	ldr	r3, [pc, #88]	@ (80052ec <HAL_RCC_ClockConfig+0x19c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2201      	movs	r2, #1
 8005296:	4013      	ands	r3, r2
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d001      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e020      	b.n	80052e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2204      	movs	r2, #4
 80052a8:	4013      	ands	r3, r2
 80052aa:	d009      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052ac:	4b10      	ldr	r3, [pc, #64]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4a11      	ldr	r2, [pc, #68]	@ (80052f8 <HAL_RCC_ClockConfig+0x1a8>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	0019      	movs	r1, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052c0:	f000 f820 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052c4:	0001      	movs	r1, r0
 80052c6:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <HAL_RCC_ClockConfig+0x1a0>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	220f      	movs	r2, #15
 80052ce:	4013      	ands	r3, r2
 80052d0:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <HAL_RCC_ClockConfig+0x1ac>)
 80052d2:	5cd3      	ldrb	r3, [r2, r3]
 80052d4:	000a      	movs	r2, r1
 80052d6:	40da      	lsrs	r2, r3
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <HAL_RCC_ClockConfig+0x1b0>)
 80052da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052dc:	2003      	movs	r0, #3
 80052de:	f7fe f97d 	bl	80035dc <HAL_InitTick>
  
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	0018      	movs	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b004      	add	sp, #16
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40022000 	.word	0x40022000
 80052f0:	40021000 	.word	0x40021000
 80052f4:	00001388 	.word	0x00001388
 80052f8:	fffff8ff 	.word	0xfffff8ff
 80052fc:	080070f8 	.word	0x080070f8
 8005300:	20000000 	.word	0x20000000

08005304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800531e:	4b2d      	ldr	r3, [pc, #180]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	220c      	movs	r2, #12
 8005328:	4013      	ands	r3, r2
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d046      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0xb8>
 800532e:	d848      	bhi.n	80053c2 <HAL_RCC_GetSysClockFreq+0xbe>
 8005330:	2b04      	cmp	r3, #4
 8005332:	d002      	beq.n	800533a <HAL_RCC_GetSysClockFreq+0x36>
 8005334:	2b08      	cmp	r3, #8
 8005336:	d003      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x3c>
 8005338:	e043      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800533a:	4b27      	ldr	r3, [pc, #156]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800533c:	613b      	str	r3, [r7, #16]
      break;
 800533e:	e043      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	0c9b      	lsrs	r3, r3, #18
 8005344:	220f      	movs	r2, #15
 8005346:	4013      	ands	r3, r2
 8005348:	4a24      	ldr	r2, [pc, #144]	@ (80053dc <HAL_RCC_GetSysClockFreq+0xd8>)
 800534a:	5cd3      	ldrb	r3, [r2, r3]
 800534c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800534e:	4b21      	ldr	r3, [pc, #132]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	220f      	movs	r2, #15
 8005354:	4013      	ands	r3, r2
 8005356:	4a22      	ldr	r2, [pc, #136]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005358:	5cd3      	ldrb	r3, [r2, r3]
 800535a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	23c0      	movs	r3, #192	@ 0xc0
 8005360:	025b      	lsls	r3, r3, #9
 8005362:	401a      	ands	r2, r3
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	025b      	lsls	r3, r3, #9
 8005368:	429a      	cmp	r2, r3
 800536a:	d109      	bne.n	8005380 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	481a      	ldr	r0, [pc, #104]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005370:	f7fa fed4 	bl	800011c <__udivsi3>
 8005374:	0003      	movs	r3, r0
 8005376:	001a      	movs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4353      	muls	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e01a      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	23c0      	movs	r3, #192	@ 0xc0
 8005384:	025b      	lsls	r3, r3, #9
 8005386:	401a      	ands	r2, r3
 8005388:	23c0      	movs	r3, #192	@ 0xc0
 800538a:	025b      	lsls	r3, r3, #9
 800538c:	429a      	cmp	r2, r3
 800538e:	d109      	bne.n	80053a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4814      	ldr	r0, [pc, #80]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005394:	f7fa fec2 	bl	800011c <__udivsi3>
 8005398:	0003      	movs	r3, r0
 800539a:	001a      	movs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4353      	muls	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	480c      	ldr	r0, [pc, #48]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053a8:	f7fa feb8 	bl	800011c <__udivsi3>
 80053ac:	0003      	movs	r3, r0
 80053ae:	001a      	movs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4353      	muls	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	613b      	str	r3, [r7, #16]
      break;
 80053ba:	e005      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80053bc:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80053be:	613b      	str	r3, [r7, #16]
      break;
 80053c0:	e002      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053c2:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053c4:	613b      	str	r3, [r7, #16]
      break;
 80053c6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80053c8:	693b      	ldr	r3, [r7, #16]
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b006      	add	sp, #24
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			@ (mov r8, r8)
 80053d4:	40021000 	.word	0x40021000
 80053d8:	007a1200 	.word	0x007a1200
 80053dc:	08007108 	.word	0x08007108
 80053e0:	08007118 	.word	0x08007118
 80053e4:	02dc6c00 	.word	0x02dc6c00

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2380      	movs	r3, #128	@ 0x80
 80053fe:	025b      	lsls	r3, r3, #9
 8005400:	4013      	ands	r3, r2
 8005402:	d100      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005404:	e08e      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005406:	2017      	movs	r0, #23
 8005408:	183b      	adds	r3, r7, r0
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540e:	4b67      	ldr	r3, [pc, #412]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	2380      	movs	r3, #128	@ 0x80
 8005414:	055b      	lsls	r3, r3, #21
 8005416:	4013      	ands	r3, r2
 8005418:	d110      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800541a:	4b64      	ldr	r3, [pc, #400]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	4b63      	ldr	r3, [pc, #396]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005420:	2180      	movs	r1, #128	@ 0x80
 8005422:	0549      	lsls	r1, r1, #21
 8005424:	430a      	orrs	r2, r1
 8005426:	61da      	str	r2, [r3, #28]
 8005428:	4b60      	ldr	r3, [pc, #384]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	055b      	lsls	r3, r3, #21
 8005430:	4013      	ands	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005436:	183b      	adds	r3, r7, r0
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543c:	4b5c      	ldr	r3, [pc, #368]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	2380      	movs	r3, #128	@ 0x80
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4013      	ands	r3, r2
 8005446:	d11a      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005448:	4b59      	ldr	r3, [pc, #356]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4b58      	ldr	r3, [pc, #352]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800544e:	2180      	movs	r1, #128	@ 0x80
 8005450:	0049      	lsls	r1, r1, #1
 8005452:	430a      	orrs	r2, r1
 8005454:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005456:	f7fe f907 	bl	8003668 <HAL_GetTick>
 800545a:	0003      	movs	r3, r0
 800545c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545e:	e008      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005460:	f7fe f902 	bl	8003668 <HAL_GetTick>
 8005464:	0002      	movs	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	@ 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e097      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005472:	4b4f      	ldr	r3, [pc, #316]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4013      	ands	r3, r2
 800547c:	d0f0      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800547e:	4b4b      	ldr	r3, [pc, #300]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005480:	6a1a      	ldr	r2, [r3, #32]
 8005482:	23c0      	movs	r3, #192	@ 0xc0
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4013      	ands	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d034      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	23c0      	movs	r3, #192	@ 0xc0
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4013      	ands	r3, r2
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	429a      	cmp	r2, r3
 800549e:	d02c      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054a0:	4b42      	ldr	r3, [pc, #264]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	4a43      	ldr	r2, [pc, #268]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054aa:	4b40      	ldr	r3, [pc, #256]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	4b3f      	ldr	r3, [pc, #252]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054b0:	2180      	movs	r1, #128	@ 0x80
 80054b2:	0249      	lsls	r1, r1, #9
 80054b4:	430a      	orrs	r2, r1
 80054b6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054b8:	4b3c      	ldr	r3, [pc, #240]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	4b3b      	ldr	r3, [pc, #236]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054be:	493e      	ldr	r1, [pc, #248]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c0:	400a      	ands	r2, r1
 80054c2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054c4:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	4013      	ands	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d2:	f7fe f8c9 	bl	8003668 <HAL_GetTick>
 80054d6:	0003      	movs	r3, r0
 80054d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054da:	e009      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054dc:	f7fe f8c4 	bl	8003668 <HAL_GetTick>
 80054e0:	0002      	movs	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	4a35      	ldr	r2, [pc, #212]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e058      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f0:	4b2e      	ldr	r3, [pc, #184]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	2202      	movs	r2, #2
 80054f6:	4013      	ands	r3, r2
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054fa:	4b2c      	ldr	r3, [pc, #176]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	4a2d      	ldr	r2, [pc, #180]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005500:	4013      	ands	r3, r2
 8005502:	0019      	movs	r1, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	4b28      	ldr	r3, [pc, #160]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800550a:	430a      	orrs	r2, r1
 800550c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800550e:	2317      	movs	r3, #23
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d105      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005518:	4b24      	ldr	r3, [pc, #144]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	4b23      	ldr	r3, [pc, #140]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800551e:	4928      	ldr	r1, [pc, #160]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005520:	400a      	ands	r2, r1
 8005522:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	4013      	ands	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800552e:	4b1f      	ldr	r3, [pc, #124]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	2203      	movs	r2, #3
 8005534:	4393      	bics	r3, r2
 8005536:	0019      	movs	r1, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	4b1b      	ldr	r3, [pc, #108]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800553e:	430a      	orrs	r2, r1
 8005540:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2220      	movs	r2, #32
 8005548:	4013      	ands	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800554c:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005550:	2210      	movs	r2, #16
 8005552:	4393      	bics	r3, r2
 8005554:	0019      	movs	r1, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	4b14      	ldr	r3, [pc, #80]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800555c:	430a      	orrs	r2, r1
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	029b      	lsls	r3, r3, #10
 8005568:	4013      	ands	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800556c:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800556e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005570:	2280      	movs	r2, #128	@ 0x80
 8005572:	4393      	bics	r3, r2
 8005574:	0019      	movs	r1, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695a      	ldr	r2, [r3, #20]
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800557c:	430a      	orrs	r2, r1
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	2380      	movs	r3, #128	@ 0x80
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4013      	ands	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800558c:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800558e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005590:	2240      	movs	r2, #64	@ 0x40
 8005592:	4393      	bics	r3, r2
 8005594:	0019      	movs	r1, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	4b04      	ldr	r3, [pc, #16]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800559c:	430a      	orrs	r2, r1
 800559e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	0018      	movs	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b006      	add	sp, #24
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40007000 	.word	0x40007000
 80055b4:	fffffcff 	.word	0xfffffcff
 80055b8:	fffeffff 	.word	0xfffeffff
 80055bc:	00001388 	.word	0x00001388
 80055c0:	efffffff 	.word	0xefffffff

080055c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055c4:	b5b0      	push	{r4, r5, r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055cc:	230f      	movs	r3, #15
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e081      	b.n	80056e2 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	7f5b      	ldrb	r3, [r3, #29]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7fd feeb 	bl	80033cc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2210      	movs	r2, #16
 8005604:	4013      	ands	r3, r2
 8005606:	2b10      	cmp	r3, #16
 8005608:	d05c      	beq.n	80056c4 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	22ca      	movs	r2, #202	@ 0xca
 8005610:	625a      	str	r2, [r3, #36]	@ 0x24
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2253      	movs	r2, #83	@ 0x53
 8005618:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800561a:	250f      	movs	r5, #15
 800561c:	197c      	adds	r4, r7, r5
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0018      	movs	r0, r3
 8005622:	f000 fb9d 	bl	8005d60 <RTC_EnterInitMode>
 8005626:	0003      	movs	r3, r0
 8005628:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800562a:	0028      	movs	r0, r5
 800562c:	183b      	adds	r3, r7, r0
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d12c      	bne.n	800568e <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	492b      	ldr	r1, [pc, #172]	@ (80056ec <HAL_RTC_Init+0x128>)
 8005640:	400a      	ands	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6899      	ldr	r1, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68d2      	ldr	r2, [r2, #12]
 800566a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6919      	ldr	r1, [r3, #16]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	041a      	lsls	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005680:	183c      	adds	r4, r7, r0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	0018      	movs	r0, r3
 8005686:	f000 fbae 	bl	8005de6 <RTC_ExitInitMode>
 800568a:	0003      	movs	r3, r0
 800568c:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800568e:	230f      	movs	r3, #15
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d110      	bne.n	80056ba <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4913      	ldr	r1, [pc, #76]	@ (80056f0 <HAL_RTC_Init+0x12c>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	22ff      	movs	r2, #255	@ 0xff
 80056c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80056c2:	e003      	b.n	80056cc <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80056c4:	230f      	movs	r3, #15
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80056cc:	230f      	movs	r3, #15
 80056ce:	18fb      	adds	r3, r7, r3
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80056dc:	230f      	movs	r3, #15
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	781b      	ldrb	r3, [r3, #0]
}
 80056e2:	0018      	movs	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b004      	add	sp, #16
 80056e8:	bdb0      	pop	{r4, r5, r7, pc}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	ff8fffbf 	.word	0xff8fffbf
 80056f0:	fffbffff 	.word	0xfffbffff

080056f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056f4:	b5b0      	push	{r4, r5, r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	7f1b      	ldrb	r3, [r3, #28]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_RTC_SetTime+0x1c>
 800570c:	2302      	movs	r3, #2
 800570e:	e08e      	b.n	800582e <HAL_RTC_SetTime+0x13a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2202      	movs	r2, #2
 800571a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d125      	bne.n	800576e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2240      	movs	r2, #64	@ 0x40
 800572a:	4013      	ands	r3, r2
 800572c:	d102      	bne.n	8005734 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2200      	movs	r2, #0
 8005732:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	0018      	movs	r0, r3
 800573a:	f000 fb7d 	bl	8005e38 <RTC_ByteToBcd2>
 800573e:	0003      	movs	r3, r0
 8005740:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	0018      	movs	r0, r3
 8005748:	f000 fb76 	bl	8005e38 <RTC_ByteToBcd2>
 800574c:	0003      	movs	r3, r0
 800574e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005750:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	789b      	ldrb	r3, [r3, #2]
 8005756:	0018      	movs	r0, r3
 8005758:	f000 fb6e 	bl	8005e38 <RTC_ByteToBcd2>
 800575c:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800575e:	0022      	movs	r2, r4
 8005760:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	78db      	ldrb	r3, [r3, #3]
 8005766:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e017      	b.n	800579e <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2240      	movs	r2, #64	@ 0x40
 8005776:	4013      	ands	r3, r2
 8005778:	d102      	bne.n	8005780 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800578c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005792:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	78db      	ldrb	r3, [r3, #3]
 8005798:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	22ca      	movs	r2, #202	@ 0xca
 80057a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2253      	movs	r2, #83	@ 0x53
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057ae:	2513      	movs	r5, #19
 80057b0:	197c      	adds	r4, r7, r5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f000 fad3 	bl	8005d60 <RTC_EnterInitMode>
 80057ba:	0003      	movs	r3, r0
 80057bc:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80057be:	0028      	movs	r0, r5
 80057c0:	183b      	adds	r3, r7, r0
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d120      	bne.n	800580a <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	491a      	ldr	r1, [pc, #104]	@ (8005838 <HAL_RTC_SetTime+0x144>)
 80057d0:	400a      	ands	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4917      	ldr	r1, [pc, #92]	@ (800583c <HAL_RTC_SetTime+0x148>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6899      	ldr	r1, [r3, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057fc:	183c      	adds	r4, r7, r0
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	0018      	movs	r0, r3
 8005802:	f000 faf0 	bl	8005de6 <RTC_ExitInitMode>
 8005806:	0003      	movs	r3, r0
 8005808:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800580a:	2313      	movs	r3, #19
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	22ff      	movs	r2, #255	@ 0xff
 8005820:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	771a      	strb	r2, [r3, #28]

  return status;
 8005828:	2313      	movs	r3, #19
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	781b      	ldrb	r3, [r3, #0]
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b006      	add	sp, #24
 8005834:	bdb0      	pop	{r4, r5, r7, pc}
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	007f7f7f 	.word	0x007f7f7f
 800583c:	fffbffff 	.word	0xfffbffff

08005840 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	045b      	lsls	r3, r3, #17
 8005862:	0c5a      	lsrs	r2, r3, #17
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a22      	ldr	r2, [pc, #136]	@ (80058f8 <HAL_RTC_GetTime+0xb8>)
 8005870:	4013      	ands	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	0c1b      	lsrs	r3, r3, #16
 8005878:	b2db      	uxtb	r3, r3
 800587a:	223f      	movs	r2, #63	@ 0x3f
 800587c:	4013      	ands	r3, r2
 800587e:	b2da      	uxtb	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	b2db      	uxtb	r3, r3
 800588a:	227f      	movs	r2, #127	@ 0x7f
 800588c:	4013      	ands	r3, r2
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	227f      	movs	r2, #127	@ 0x7f
 800589a:	4013      	ands	r3, r2
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	0d9b      	lsrs	r3, r3, #22
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2201      	movs	r2, #1
 80058aa:	4013      	ands	r3, r2
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d11a      	bne.n	80058ee <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	0018      	movs	r0, r3
 80058be:	f000 fadc 	bl	8005e7a <RTC_Bcd2ToByte>
 80058c2:	0003      	movs	r3, r0
 80058c4:	001a      	movs	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f000 fad3 	bl	8005e7a <RTC_Bcd2ToByte>
 80058d4:	0003      	movs	r3, r0
 80058d6:	001a      	movs	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	789b      	ldrb	r3, [r3, #2]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f000 faca 	bl	8005e7a <RTC_Bcd2ToByte>
 80058e6:	0003      	movs	r3, r0
 80058e8:	001a      	movs	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	0018      	movs	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b006      	add	sp, #24
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	007f7f7f 	.word	0x007f7f7f

080058fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058fc:	b5b0      	push	{r4, r5, r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	7f1b      	ldrb	r3, [r3, #28]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_RTC_SetDate+0x1c>
 8005914:	2302      	movs	r3, #2
 8005916:	e07a      	b.n	8005a0e <HAL_RTC_SetDate+0x112>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2202      	movs	r2, #2
 8005922:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10e      	bne.n	8005948 <HAL_RTC_SetDate+0x4c>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	001a      	movs	r2, r3
 8005930:	2310      	movs	r3, #16
 8005932:	4013      	ands	r3, r2
 8005934:	d008      	beq.n	8005948 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2210      	movs	r2, #16
 800593c:	4393      	bics	r3, r2
 800593e:	b2db      	uxtb	r3, r3
 8005940:	330a      	adds	r3, #10
 8005942:	b2da      	uxtb	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d11c      	bne.n	8005988 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	78db      	ldrb	r3, [r3, #3]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 fa70 	bl	8005e38 <RTC_ByteToBcd2>
 8005958:	0003      	movs	r3, r0
 800595a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	0018      	movs	r0, r3
 8005962:	f000 fa69 	bl	8005e38 <RTC_ByteToBcd2>
 8005966:	0003      	movs	r3, r0
 8005968:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800596a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	789b      	ldrb	r3, [r3, #2]
 8005970:	0018      	movs	r0, r3
 8005972:	f000 fa61 	bl	8005e38 <RTC_ByteToBcd2>
 8005976:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005978:	0022      	movs	r2, r4
 800597a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e00e      	b.n	80059a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	78db      	ldrb	r3, [r3, #3]
 800598c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005994:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800599a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	22ca      	movs	r2, #202	@ 0xca
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2253      	movs	r2, #83	@ 0x53
 80059b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059b6:	2513      	movs	r5, #19
 80059b8:	197c      	adds	r4, r7, r5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 f9cf 	bl	8005d60 <RTC_EnterInitMode>
 80059c2:	0003      	movs	r3, r0
 80059c4:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80059c6:	0028      	movs	r0, r5
 80059c8:	183b      	adds	r3, r7, r0
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10c      	bne.n	80059ea <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4910      	ldr	r1, [pc, #64]	@ (8005a18 <HAL_RTC_SetDate+0x11c>)
 80059d8:	400a      	ands	r2, r1
 80059da:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059dc:	183c      	adds	r4, r7, r0
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f000 fa00 	bl	8005de6 <RTC_ExitInitMode>
 80059e6:	0003      	movs	r3, r0
 80059e8:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80059ea:	2313      	movs	r3, #19
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	22ff      	movs	r2, #255	@ 0xff
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	771a      	strb	r2, [r3, #28]

  return status;
 8005a08:	2313      	movs	r3, #19
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	781b      	ldrb	r3, [r3, #0]
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b006      	add	sp, #24
 8005a14:	bdb0      	pop	{r4, r5, r7, pc}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	00ffff3f 	.word	0x00ffff3f

08005a1c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4a21      	ldr	r2, [pc, #132]	@ (8005ab8 <HAL_RTC_GetDate+0x9c>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	0c1b      	lsrs	r3, r3, #16
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	221f      	movs	r2, #31
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	223f      	movs	r2, #63	@ 0x3f
 8005a58:	4013      	ands	r3, r2
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	0b5b      	lsrs	r3, r3, #13
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2207      	movs	r2, #7
 8005a68:	4013      	ands	r3, r2
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d11a      	bne.n	8005aac <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	78db      	ldrb	r3, [r3, #3]
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f000 f9fd 	bl	8005e7a <RTC_Bcd2ToByte>
 8005a80:	0003      	movs	r3, r0
 8005a82:	001a      	movs	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 f9f4 	bl	8005e7a <RTC_Bcd2ToByte>
 8005a92:	0003      	movs	r3, r0
 8005a94:	001a      	movs	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	789b      	ldrb	r3, [r3, #2]
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f000 f9eb 	bl	8005e7a <RTC_Bcd2ToByte>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	001a      	movs	r2, r3
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b006      	add	sp, #24
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	00ffff3f 	.word	0x00ffff3f

08005abc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b089      	sub	sp, #36	@ 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005ac8:	4b75      	ldr	r3, [pc, #468]	@ (8005ca0 <HAL_RTC_SetAlarm_IT+0x1e4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	22fa      	movs	r2, #250	@ 0xfa
 8005ace:	01d1      	lsls	r1, r2, #7
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7fa fb23 	bl	800011c <__udivsi3>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	001a      	movs	r2, r3
 8005ada:	0013      	movs	r3, r2
 8005adc:	015b      	lsls	r3, r3, #5
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	7f1b      	ldrb	r3, [r3, #28]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_RTC_SetAlarm_IT+0x40>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e0cd      	b.n	8005c98 <HAL_RTC_SetAlarm_IT+0x1dc>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2202      	movs	r2, #2
 8005b06:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d136      	bne.n	8005b7c <HAL_RTC_SetAlarm_IT+0xc0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2240      	movs	r2, #64	@ 0x40
 8005b16:	4013      	ands	r3, r2
 8005b18:	d102      	bne.n	8005b20 <HAL_RTC_SetAlarm_IT+0x64>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f987 	bl	8005e38 <RTC_ByteToBcd2>
 8005b2a:	0003      	movs	r3, r0
 8005b2c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 f980 	bl	8005e38 <RTC_ByteToBcd2>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005b3c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	789b      	ldrb	r3, [r3, #2]
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 f978 	bl	8005e38 <RTC_ByteToBcd2>
 8005b48:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b4a:	0022      	movs	r2, r4
 8005b4c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	78db      	ldrb	r3, [r3, #3]
 8005b52:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005b54:	431a      	orrs	r2, r3
 8005b56:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	5c9b      	ldrb	r3, [r3, r2]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 f96a 	bl	8005e38 <RTC_ByteToBcd2>
 8005b64:	0003      	movs	r3, r0
 8005b66:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8005b68:	0022      	movs	r2, r4
 8005b6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005b70:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	e022      	b.n	8005bc2 <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2240      	movs	r2, #64	@ 0x40
 8005b84:	4013      	ands	r3, r2
 8005b86:	d102      	bne.n	8005b8e <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005b9a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005ba0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	78db      	ldrb	r3, [r3, #3]
 8005ba6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005ba8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2120      	movs	r1, #32
 8005bae:	5c5b      	ldrb	r3, [r3, r1]
 8005bb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8005bb2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005bb8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	22ca      	movs	r2, #202	@ 0xca
 8005bd4:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2253      	movs	r2, #83	@ 0x53
 8005bdc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	492e      	ldr	r1, [pc, #184]	@ (8005ca4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8005bea:	400a      	ands	r2, r1
 8005bec:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	22ff      	movs	r2, #255	@ 0xff
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	492a      	ldr	r1, [pc, #168]	@ (8005ca8 <HAL_RTC_SetAlarm_IT+0x1ec>)
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	22ff      	movs	r2, #255	@ 0xff
 8005c14:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2203      	movs	r2, #3
 8005c1a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e038      	b.n	8005c98 <HAL_RTC_SetAlarm_IT+0x1dc>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d0e7      	beq.n	8005c02 <HAL_RTC_SetAlarm_IT+0x146>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2180      	movs	r1, #128	@ 0x80
 8005c4e:	0049      	lsls	r1, r1, #1
 8005c50:	430a      	orrs	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2180      	movs	r1, #128	@ 0x80
 8005c60:	0149      	lsls	r1, r1, #5
 8005c62:	430a      	orrs	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005c66:	4b11      	ldr	r3, [pc, #68]	@ (8005cac <HAL_RTC_SetAlarm_IT+0x1f0>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <HAL_RTC_SetAlarm_IT+0x1f0>)
 8005c6c:	2180      	movs	r1, #128	@ 0x80
 8005c6e:	0289      	lsls	r1, r1, #10
 8005c70:	430a      	orrs	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005c74:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <HAL_RTC_SetAlarm_IT+0x1f0>)
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <HAL_RTC_SetAlarm_IT+0x1f0>)
 8005c7a:	2180      	movs	r1, #128	@ 0x80
 8005c7c:	0289      	lsls	r1, r1, #10
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	22ff      	movs	r2, #255	@ 0xff
 8005c88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b009      	add	sp, #36	@ 0x24
 8005c9e:	bd90      	pop	{r4, r7, pc}
 8005ca0:	20000000 	.word	0x20000000
 8005ca4:	fffffeff 	.word	0xfffffeff
 8005ca8:	fffffe7f 	.word	0xfffffe7f
 8005cac:	40010400 	.word	0x40010400

08005cb0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005cb8:	4b13      	ldr	r3, [pc, #76]	@ (8005d08 <HAL_RTC_AlarmIRQHandler+0x58>)
 8005cba:	2280      	movs	r2, #128	@ 0x80
 8005cbc:	0292      	lsls	r2, r2, #10
 8005cbe:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	2380      	movs	r3, #128	@ 0x80
 8005cc8:	015b      	lsls	r3, r3, #5
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d014      	beq.n	8005cf8 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	2380      	movs	r3, #128	@ 0x80
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d00d      	beq.n	8005cf8 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	22ff      	movs	r2, #255	@ 0xff
 8005ce4:	401a      	ands	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4908      	ldr	r1, [pc, #32]	@ (8005d0c <HAL_RTC_AlarmIRQHandler+0x5c>)
 8005cec:	430a      	orrs	r2, r1
 8005cee:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7fc fdd6 	bl	80028a4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	775a      	strb	r2, [r3, #29]
}
 8005cfe:	46c0      	nop			@ (mov r8, r8)
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b002      	add	sp, #8
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	40010400 	.word	0x40010400
 8005d0c:	fffffe7f 	.word	0xfffffe7f

08005d10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0e      	ldr	r2, [pc, #56]	@ (8005d5c <HAL_RTC_WaitForSynchro+0x4c>)
 8005d22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d24:	f7fd fca0 	bl	8003668 <HAL_GetTick>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d2c:	e00a      	b.n	8005d44 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d2e:	f7fd fc9b 	bl	8003668 <HAL_GetTick>
 8005d32:	0002      	movs	r2, r0
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	23fa      	movs	r3, #250	@ 0xfa
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d901      	bls.n	8005d44 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e006      	b.n	8005d52 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d0ee      	beq.n	8005d2e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	0018      	movs	r0, r3
 8005d54:	46bd      	mov	sp, r7
 8005d56:	b004      	add	sp, #16
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	00017959 	.word	0x00017959

08005d60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6c:	230f      	movs	r3, #15
 8005d6e:	18fb      	adds	r3, r7, r3
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2240      	movs	r2, #64	@ 0x40
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d12b      	bne.n	8005dd8 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2180      	movs	r1, #128	@ 0x80
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d90:	f7fd fc6a 	bl	8003668 <HAL_GetTick>
 8005d94:	0003      	movs	r3, r0
 8005d96:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d98:	e013      	b.n	8005dc2 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d9a:	f7fd fc65 	bl	8003668 <HAL_GetTick>
 8005d9e:	0002      	movs	r2, r0
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	200f      	movs	r0, #15
 8005da6:	183b      	adds	r3, r7, r0
 8005da8:	1839      	adds	r1, r7, r0
 8005daa:	7809      	ldrb	r1, [r1, #0]
 8005dac:	7019      	strb	r1, [r3, #0]
 8005dae:	23fa      	movs	r3, #250	@ 0xfa
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d905      	bls.n	8005dc2 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2204      	movs	r2, #4
 8005dba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005dbc:	183b      	adds	r3, r7, r0
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2240      	movs	r2, #64	@ 0x40
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d104      	bne.n	8005dd8 <RTC_EnterInitMode+0x78>
 8005dce:	230f      	movs	r3, #15
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d1e0      	bne.n	8005d9a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8005dd8:	230f      	movs	r3, #15
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	781b      	ldrb	r3, [r3, #0]
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b004      	add	sp, #16
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005de6:	b590      	push	{r4, r7, lr}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dee:	240f      	movs	r4, #15
 8005df0:	193b      	adds	r3, r7, r4
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2180      	movs	r1, #128	@ 0x80
 8005e02:	438a      	bics	r2, r1
 8005e04:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d10b      	bne.n	8005e2a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7ff ff7b 	bl	8005d10 <HAL_RTC_WaitForSynchro>
 8005e1a:	1e03      	subs	r3, r0, #0
 8005e1c:	d005      	beq.n	8005e2a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2204      	movs	r2, #4
 8005e22:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005e2a:	230f      	movs	r3, #15
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	781b      	ldrb	r3, [r3, #0]
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b005      	add	sp, #20
 8005e36:	bd90      	pop	{r4, r7, pc}

08005e38 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	0002      	movs	r2, r0
 8005e40:	1dfb      	adds	r3, r7, #7
 8005e42:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005e48:	e007      	b.n	8005e5a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005e50:	1dfb      	adds	r3, r7, #7
 8005e52:	1dfa      	adds	r2, r7, #7
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	3a0a      	subs	r2, #10
 8005e58:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8005e5a:	1dfb      	adds	r3, r7, #7
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	d8f3      	bhi.n	8005e4a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	1dfb      	adds	r3, r7, #7
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b2db      	uxtb	r3, r3
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	0002      	movs	r2, r0
 8005e82:	1dfb      	adds	r3, r7, #7
 8005e84:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005e8a:	1dfb      	adds	r3, r7, #7
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	091b      	lsrs	r3, r3, #4
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	001a      	movs	r2, r3
 8005e94:	0013      	movs	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	189b      	adds	r3, r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	1dfb      	adds	r3, r7, #7
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	210f      	movs	r1, #15
 8005ea8:	400b      	ands	r3, r1
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	18d3      	adds	r3, r2, r3
 8005eae:	b2db      	uxtb	r3, r3
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b004      	add	sp, #16
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e042      	b.n	8005f50 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	223d      	movs	r2, #61	@ 0x3d
 8005ece:	5c9b      	ldrb	r3, [r3, r2]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	223c      	movs	r2, #60	@ 0x3c
 8005eda:	2100      	movs	r1, #0
 8005edc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f7fd fa93 	bl	800340c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	223d      	movs	r2, #61	@ 0x3d
 8005eea:	2102      	movs	r1, #2
 8005eec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	0010      	movs	r0, r2
 8005efa:	f000 fa5b 	bl	80063b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2246      	movs	r2, #70	@ 0x46
 8005f02:	2101      	movs	r1, #1
 8005f04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	223e      	movs	r2, #62	@ 0x3e
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	5499      	strb	r1, [r3, r2]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	223f      	movs	r2, #63	@ 0x3f
 8005f12:	2101      	movs	r1, #1
 8005f14:	5499      	strb	r1, [r3, r2]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2240      	movs	r2, #64	@ 0x40
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2241      	movs	r2, #65	@ 0x41
 8005f22:	2101      	movs	r1, #1
 8005f24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2242      	movs	r2, #66	@ 0x42
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	5499      	strb	r1, [r3, r2]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2243      	movs	r2, #67	@ 0x43
 8005f32:	2101      	movs	r1, #1
 8005f34:	5499      	strb	r1, [r3, r2]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2244      	movs	r2, #68	@ 0x44
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5499      	strb	r1, [r3, r2]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2245      	movs	r2, #69	@ 0x45
 8005f42:	2101      	movs	r1, #1
 8005f44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	223d      	movs	r2, #61	@ 0x3d
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	0018      	movs	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b002      	add	sp, #8
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	223d      	movs	r2, #61	@ 0x3d
 8005f64:	5c9b      	ldrb	r3, [r3, r2]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d001      	beq.n	8005f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e036      	b.n	8005fde <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	223d      	movs	r2, #61	@ 0x3d
 8005f74:	2102      	movs	r1, #2
 8005f76:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2101      	movs	r1, #1
 8005f84:	430a      	orrs	r2, r1
 8005f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a16      	ldr	r2, [pc, #88]	@ (8005fe8 <HAL_TIM_Base_Start_IT+0x90>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00a      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x50>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	2380      	movs	r3, #128	@ 0x80
 8005f98:	05db      	lsls	r3, r3, #23
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x50>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a12      	ldr	r2, [pc, #72]	@ (8005fec <HAL_TIM_Base_Start_IT+0x94>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d111      	bne.n	8005fcc <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2207      	movs	r2, #7
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b06      	cmp	r3, #6
 8005fb8:	d010      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fca:	e007      	b.n	8005fdc <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	0018      	movs	r0, r3
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b004      	add	sp, #16
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40000400 	.word	0x40000400

08005ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2202      	movs	r2, #2
 800600c:	4013      	ands	r3, r2
 800600e:	d021      	beq.n	8006054 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2202      	movs	r2, #2
 8006014:	4013      	ands	r3, r2
 8006016:	d01d      	beq.n	8006054 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2203      	movs	r2, #3
 800601e:	4252      	negs	r2, r2
 8006020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	2203      	movs	r2, #3
 8006030:	4013      	ands	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	0018      	movs	r0, r3
 8006038:	f000 f9a4 	bl	8006384 <HAL_TIM_IC_CaptureCallback>
 800603c:	e007      	b.n	800604e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	0018      	movs	r0, r3
 8006042:	f000 f997 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f000 f9a3 	bl	8006394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2204      	movs	r2, #4
 8006058:	4013      	ands	r3, r2
 800605a:	d022      	beq.n	80060a2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2204      	movs	r2, #4
 8006060:	4013      	ands	r3, r2
 8006062:	d01e      	beq.n	80060a2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2205      	movs	r2, #5
 800606a:	4252      	negs	r2, r2
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	23c0      	movs	r3, #192	@ 0xc0
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4013      	ands	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	0018      	movs	r0, r3
 8006086:	f000 f97d 	bl	8006384 <HAL_TIM_IC_CaptureCallback>
 800608a:	e007      	b.n	800609c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	0018      	movs	r0, r3
 8006090:	f000 f970 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	0018      	movs	r0, r3
 8006098:	f000 f97c 	bl	8006394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2208      	movs	r2, #8
 80060a6:	4013      	ands	r3, r2
 80060a8:	d021      	beq.n	80060ee <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2208      	movs	r2, #8
 80060ae:	4013      	ands	r3, r2
 80060b0:	d01d      	beq.n	80060ee <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2209      	movs	r2, #9
 80060b8:	4252      	negs	r2, r2
 80060ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2204      	movs	r2, #4
 80060c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	2203      	movs	r2, #3
 80060ca:	4013      	ands	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f000 f957 	bl	8006384 <HAL_TIM_IC_CaptureCallback>
 80060d6:	e007      	b.n	80060e8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 f94a 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	0018      	movs	r0, r3
 80060e4:	f000 f956 	bl	8006394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2210      	movs	r2, #16
 80060f2:	4013      	ands	r3, r2
 80060f4:	d022      	beq.n	800613c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2210      	movs	r2, #16
 80060fa:	4013      	ands	r3, r2
 80060fc:	d01e      	beq.n	800613c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2211      	movs	r2, #17
 8006104:	4252      	negs	r2, r2
 8006106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2208      	movs	r2, #8
 800610c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	23c0      	movs	r3, #192	@ 0xc0
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4013      	ands	r3, r2
 800611a:	d004      	beq.n	8006126 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	0018      	movs	r0, r3
 8006120:	f000 f930 	bl	8006384 <HAL_TIM_IC_CaptureCallback>
 8006124:	e007      	b.n	8006136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f000 f923 	bl	8006374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	0018      	movs	r0, r3
 8006132:	f000 f92f 	bl	8006394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2201      	movs	r2, #1
 8006140:	4013      	ands	r3, r2
 8006142:	d00c      	beq.n	800615e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	4013      	ands	r3, r2
 800614a:	d008      	beq.n	800615e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2202      	movs	r2, #2
 8006152:	4252      	negs	r2, r2
 8006154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	0018      	movs	r0, r3
 800615a:	f7fc fb2f 	bl	80027bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2280      	movs	r2, #128	@ 0x80
 8006162:	4013      	ands	r3, r2
 8006164:	d00c      	beq.n	8006180 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2280      	movs	r2, #128	@ 0x80
 800616a:	4013      	ands	r3, r2
 800616c:	d008      	beq.n	8006180 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2281      	movs	r2, #129	@ 0x81
 8006174:	4252      	negs	r2, r2
 8006176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	0018      	movs	r0, r3
 800617c:	f000 fa98 	bl	80066b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2240      	movs	r2, #64	@ 0x40
 8006184:	4013      	ands	r3, r2
 8006186:	d00c      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2240      	movs	r2, #64	@ 0x40
 800618c:	4013      	ands	r3, r2
 800618e:	d008      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2241      	movs	r2, #65	@ 0x41
 8006196:	4252      	negs	r2, r2
 8006198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	0018      	movs	r0, r3
 800619e:	f000 f901 	bl	80063a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2220      	movs	r2, #32
 80061a6:	4013      	ands	r3, r2
 80061a8:	d00c      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	4013      	ands	r3, r2
 80061b0:	d008      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2221      	movs	r2, #33	@ 0x21
 80061b8:	4252      	negs	r2, r2
 80061ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0018      	movs	r0, r3
 80061c0:	f000 fa6e 	bl	80066a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061c4:	46c0      	nop			@ (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b004      	add	sp, #16
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061d6:	230f      	movs	r3, #15
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	223c      	movs	r2, #60	@ 0x3c
 80061e2:	5c9b      	ldrb	r3, [r3, r2]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_TIM_ConfigClockSource+0x20>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e0bc      	b.n	8006366 <HAL_TIM_ConfigClockSource+0x19a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	223c      	movs	r2, #60	@ 0x3c
 80061f0:	2101      	movs	r1, #1
 80061f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	223d      	movs	r2, #61	@ 0x3d
 80061f8:	2102      	movs	r1, #2
 80061fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2277      	movs	r2, #119	@ 0x77
 8006208:	4393      	bics	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4a58      	ldr	r2, [pc, #352]	@ (8006370 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006210:	4013      	ands	r3, r2
 8006212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2280      	movs	r2, #128	@ 0x80
 8006222:	0192      	lsls	r2, r2, #6
 8006224:	4293      	cmp	r3, r2
 8006226:	d040      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0xde>
 8006228:	2280      	movs	r2, #128	@ 0x80
 800622a:	0192      	lsls	r2, r2, #6
 800622c:	4293      	cmp	r3, r2
 800622e:	d900      	bls.n	8006232 <HAL_TIM_ConfigClockSource+0x66>
 8006230:	e088      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
 8006232:	2280      	movs	r2, #128	@ 0x80
 8006234:	0152      	lsls	r2, r2, #5
 8006236:	4293      	cmp	r3, r2
 8006238:	d100      	bne.n	800623c <HAL_TIM_ConfigClockSource+0x70>
 800623a:	e088      	b.n	800634e <HAL_TIM_ConfigClockSource+0x182>
 800623c:	2280      	movs	r2, #128	@ 0x80
 800623e:	0152      	lsls	r2, r2, #5
 8006240:	4293      	cmp	r3, r2
 8006242:	d900      	bls.n	8006246 <HAL_TIM_ConfigClockSource+0x7a>
 8006244:	e07e      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
 8006246:	2b70      	cmp	r3, #112	@ 0x70
 8006248:	d018      	beq.n	800627c <HAL_TIM_ConfigClockSource+0xb0>
 800624a:	d900      	bls.n	800624e <HAL_TIM_ConfigClockSource+0x82>
 800624c:	e07a      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
 800624e:	2b60      	cmp	r3, #96	@ 0x60
 8006250:	d04f      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x126>
 8006252:	d900      	bls.n	8006256 <HAL_TIM_ConfigClockSource+0x8a>
 8006254:	e076      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
 8006256:	2b50      	cmp	r3, #80	@ 0x50
 8006258:	d03b      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x106>
 800625a:	d900      	bls.n	800625e <HAL_TIM_ConfigClockSource+0x92>
 800625c:	e072      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
 800625e:	2b40      	cmp	r3, #64	@ 0x40
 8006260:	d057      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0x146>
 8006262:	d900      	bls.n	8006266 <HAL_TIM_ConfigClockSource+0x9a>
 8006264:	e06e      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
 8006266:	2b30      	cmp	r3, #48	@ 0x30
 8006268:	d063      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x166>
 800626a:	d86b      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
 800626c:	2b20      	cmp	r3, #32
 800626e:	d060      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x166>
 8006270:	d868      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d05d      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x166>
 8006276:	2b10      	cmp	r3, #16
 8006278:	d05b      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x166>
 800627a:	e063      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800628c:	f000 f990 	bl	80065b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2277      	movs	r2, #119	@ 0x77
 800629c:	4313      	orrs	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	609a      	str	r2, [r3, #8]
      break;
 80062a8:	e052      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ba:	f000 f979 	bl	80065b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2180      	movs	r1, #128	@ 0x80
 80062ca:	01c9      	lsls	r1, r1, #7
 80062cc:	430a      	orrs	r2, r1
 80062ce:	609a      	str	r2, [r3, #8]
      break;
 80062d0:	e03e      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	001a      	movs	r2, r3
 80062e0:	f000 f8ec 	bl	80064bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2150      	movs	r1, #80	@ 0x50
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 f946 	bl	800657c <TIM_ITRx_SetConfig>
      break;
 80062f0:	e02e      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062fe:	001a      	movs	r2, r3
 8006300:	f000 f90a 	bl	8006518 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2160      	movs	r1, #96	@ 0x60
 800630a:	0018      	movs	r0, r3
 800630c:	f000 f936 	bl	800657c <TIM_ITRx_SetConfig>
      break;
 8006310:	e01e      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	001a      	movs	r2, r3
 8006320:	f000 f8cc 	bl	80064bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2140      	movs	r1, #64	@ 0x40
 800632a:	0018      	movs	r0, r3
 800632c:	f000 f926 	bl	800657c <TIM_ITRx_SetConfig>
      break;
 8006330:	e00e      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	0019      	movs	r1, r3
 800633c:	0010      	movs	r0, r2
 800633e:	f000 f91d 	bl	800657c <TIM_ITRx_SetConfig>
      break;
 8006342:	e005      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006344:	230f      	movs	r3, #15
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]
      break;
 800634c:	e000      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800634e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	223d      	movs	r2, #61	@ 0x3d
 8006354:	2101      	movs	r1, #1
 8006356:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	223c      	movs	r2, #60	@ 0x3c
 800635c:	2100      	movs	r1, #0
 800635e:	5499      	strb	r1, [r3, r2]

  return status;
 8006360:	230f      	movs	r3, #15
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	781b      	ldrb	r3, [r3, #0]
}
 8006366:	0018      	movs	r0, r3
 8006368:	46bd      	mov	sp, r7
 800636a:	b004      	add	sp, #16
 800636c:	bd80      	pop	{r7, pc}
 800636e:	46c0      	nop			@ (mov r8, r8)
 8006370:	ffff00ff 	.word	0xffff00ff

08006374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800637c:	46c0      	nop			@ (mov r8, r8)
 800637e:	46bd      	mov	sp, r7
 8006380:	b002      	add	sp, #8
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800638c:	46c0      	nop			@ (mov r8, r8)
 800638e:	46bd      	mov	sp, r7
 8006390:	b002      	add	sp, #8
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800639c:	46c0      	nop			@ (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b002      	add	sp, #8
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ac:	46c0      	nop			@ (mov r8, r8)
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b002      	add	sp, #8
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a37      	ldr	r2, [pc, #220]	@ (80064a4 <TIM_Base_SetConfig+0xf0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d008      	beq.n	80063de <TIM_Base_SetConfig+0x2a>
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	2380      	movs	r3, #128	@ 0x80
 80063d0:	05db      	lsls	r3, r3, #23
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d003      	beq.n	80063de <TIM_Base_SetConfig+0x2a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a33      	ldr	r2, [pc, #204]	@ (80064a8 <TIM_Base_SetConfig+0xf4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d108      	bne.n	80063f0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2270      	movs	r2, #112	@ 0x70
 80063e2:	4393      	bics	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2c      	ldr	r2, [pc, #176]	@ (80064a4 <TIM_Base_SetConfig+0xf0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d014      	beq.n	8006422 <TIM_Base_SetConfig+0x6e>
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	2380      	movs	r3, #128	@ 0x80
 80063fc:	05db      	lsls	r3, r3, #23
 80063fe:	429a      	cmp	r2, r3
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0x6e>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a28      	ldr	r2, [pc, #160]	@ (80064a8 <TIM_Base_SetConfig+0xf4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x6e>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a27      	ldr	r2, [pc, #156]	@ (80064ac <TIM_Base_SetConfig+0xf8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x6e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a26      	ldr	r2, [pc, #152]	@ (80064b0 <TIM_Base_SetConfig+0xfc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x6e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a25      	ldr	r2, [pc, #148]	@ (80064b4 <TIM_Base_SetConfig+0x100>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a24      	ldr	r2, [pc, #144]	@ (80064b8 <TIM_Base_SetConfig+0x104>)
 8006426:	4013      	ands	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2280      	movs	r2, #128	@ 0x80
 8006438:	4393      	bics	r3, r2
 800643a:	001a      	movs	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a11      	ldr	r2, [pc, #68]	@ (80064a4 <TIM_Base_SetConfig+0xf0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d007      	beq.n	8006472 <TIM_Base_SetConfig+0xbe>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a12      	ldr	r2, [pc, #72]	@ (80064b0 <TIM_Base_SetConfig+0xfc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_Base_SetConfig+0xbe>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a11      	ldr	r2, [pc, #68]	@ (80064b4 <TIM_Base_SetConfig+0x100>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d103      	bne.n	800647a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2201      	movs	r2, #1
 8006486:	4013      	ands	r3, r2
 8006488:	2b01      	cmp	r3, #1
 800648a:	d106      	bne.n	800649a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2201      	movs	r2, #1
 8006492:	4393      	bics	r3, r2
 8006494:	001a      	movs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	611a      	str	r2, [r3, #16]
  }
}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	46bd      	mov	sp, r7
 800649e:	b004      	add	sp, #16
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	46c0      	nop			@ (mov r8, r8)
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40002000 	.word	0x40002000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800
 80064b8:	fffffcff 	.word	0xfffffcff

080064bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	2201      	movs	r2, #1
 80064d4:	4393      	bics	r3, r2
 80064d6:	001a      	movs	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	22f0      	movs	r2, #240	@ 0xf0
 80064e6:	4393      	bics	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	220a      	movs	r2, #10
 80064f8:	4393      	bics	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	621a      	str	r2, [r3, #32]
}
 8006510:	46c0      	nop			@ (mov r8, r8)
 8006512:	46bd      	mov	sp, r7
 8006514:	b006      	add	sp, #24
 8006516:	bd80      	pop	{r7, pc}

08006518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	2210      	movs	r2, #16
 8006530:	4393      	bics	r3, r2
 8006532:	001a      	movs	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4a0d      	ldr	r2, [pc, #52]	@ (8006578 <TIM_TI2_ConfigInputStage+0x60>)
 8006542:	4013      	ands	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	031b      	lsls	r3, r3, #12
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	22a0      	movs	r2, #160	@ 0xa0
 8006554:	4393      	bics	r3, r2
 8006556:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	46bd      	mov	sp, r7
 8006572:	b006      	add	sp, #24
 8006574:	bd80      	pop	{r7, pc}
 8006576:	46c0      	nop			@ (mov r8, r8)
 8006578:	ffff0fff 	.word	0xffff0fff

0800657c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2270      	movs	r2, #112	@ 0x70
 8006590:	4393      	bics	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	2207      	movs	r2, #7
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	609a      	str	r2, [r3, #8]
}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b004      	add	sp, #16
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	4a09      	ldr	r2, [pc, #36]	@ (80065ec <TIM_ETR_SetConfig+0x3c>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	021a      	lsls	r2, r3, #8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	609a      	str	r2, [r3, #8]
}
 80065e4:	46c0      	nop			@ (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b006      	add	sp, #24
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	ffff00ff 	.word	0xffff00ff

080065f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	223c      	movs	r2, #60	@ 0x3c
 80065fe:	5c9b      	ldrb	r3, [r3, r2]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006604:	2302      	movs	r3, #2
 8006606:	e042      	b.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	223c      	movs	r2, #60	@ 0x3c
 800660c:	2101      	movs	r1, #1
 800660e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	223d      	movs	r2, #61	@ 0x3d
 8006614:	2102      	movs	r1, #2
 8006616:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2270      	movs	r2, #112	@ 0x70
 800662c:	4393      	bics	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a14      	ldr	r2, [pc, #80]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00a      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	2380      	movs	r3, #128	@ 0x80
 8006652:	05db      	lsls	r3, r3, #23
 8006654:	429a      	cmp	r2, r3
 8006656:	d004      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0f      	ldr	r2, [pc, #60]	@ (800669c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d10c      	bne.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2280      	movs	r2, #128	@ 0x80
 8006666:	4393      	bics	r3, r2
 8006668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4313      	orrs	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	223d      	movs	r2, #61	@ 0x3d
 8006680:	2101      	movs	r1, #1
 8006682:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	223c      	movs	r2, #60	@ 0x3c
 8006688:	2100      	movs	r1, #0
 800668a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	0018      	movs	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	b004      	add	sp, #16
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			@ (mov r8, r8)
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40000400 	.word	0x40000400

080066a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a8:	46c0      	nop			@ (mov r8, r8)
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b002      	add	sp, #8
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b8:	46c0      	nop			@ (mov r8, r8)
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b002      	add	sp, #8
 80066be:	bd80      	pop	{r7, pc}

080066c0 <siprintf>:
 80066c0:	b40e      	push	{r1, r2, r3}
 80066c2:	b500      	push	{lr}
 80066c4:	490b      	ldr	r1, [pc, #44]	@ (80066f4 <siprintf+0x34>)
 80066c6:	b09c      	sub	sp, #112	@ 0x70
 80066c8:	ab1d      	add	r3, sp, #116	@ 0x74
 80066ca:	9002      	str	r0, [sp, #8]
 80066cc:	9006      	str	r0, [sp, #24]
 80066ce:	9107      	str	r1, [sp, #28]
 80066d0:	9104      	str	r1, [sp, #16]
 80066d2:	4809      	ldr	r0, [pc, #36]	@ (80066f8 <siprintf+0x38>)
 80066d4:	4909      	ldr	r1, [pc, #36]	@ (80066fc <siprintf+0x3c>)
 80066d6:	cb04      	ldmia	r3!, {r2}
 80066d8:	9105      	str	r1, [sp, #20]
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	a902      	add	r1, sp, #8
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	f000 f9a8 	bl	8006a34 <_svfiprintf_r>
 80066e4:	2200      	movs	r2, #0
 80066e6:	9b02      	ldr	r3, [sp, #8]
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	b01c      	add	sp, #112	@ 0x70
 80066ec:	bc08      	pop	{r3}
 80066ee:	b003      	add	sp, #12
 80066f0:	4718      	bx	r3
 80066f2:	46c0      	nop			@ (mov r8, r8)
 80066f4:	7fffffff 	.word	0x7fffffff
 80066f8:	2000000c 	.word	0x2000000c
 80066fc:	ffff0208 	.word	0xffff0208

08006700 <memset>:
 8006700:	0003      	movs	r3, r0
 8006702:	1882      	adds	r2, r0, r2
 8006704:	4293      	cmp	r3, r2
 8006706:	d100      	bne.n	800670a <memset+0xa>
 8006708:	4770      	bx	lr
 800670a:	7019      	strb	r1, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	e7f9      	b.n	8006704 <memset+0x4>

08006710 <__errno>:
 8006710:	4b01      	ldr	r3, [pc, #4]	@ (8006718 <__errno+0x8>)
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	4770      	bx	lr
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	2000000c 	.word	0x2000000c

0800671c <__libc_init_array>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	2600      	movs	r6, #0
 8006720:	4c0c      	ldr	r4, [pc, #48]	@ (8006754 <__libc_init_array+0x38>)
 8006722:	4d0d      	ldr	r5, [pc, #52]	@ (8006758 <__libc_init_array+0x3c>)
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	42a6      	cmp	r6, r4
 800672a:	d109      	bne.n	8006740 <__libc_init_array+0x24>
 800672c:	2600      	movs	r6, #0
 800672e:	f000 fc65 	bl	8006ffc <_init>
 8006732:	4c0a      	ldr	r4, [pc, #40]	@ (800675c <__libc_init_array+0x40>)
 8006734:	4d0a      	ldr	r5, [pc, #40]	@ (8006760 <__libc_init_array+0x44>)
 8006736:	1b64      	subs	r4, r4, r5
 8006738:	10a4      	asrs	r4, r4, #2
 800673a:	42a6      	cmp	r6, r4
 800673c:	d105      	bne.n	800674a <__libc_init_array+0x2e>
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	00b3      	lsls	r3, r6, #2
 8006742:	58eb      	ldr	r3, [r5, r3]
 8006744:	4798      	blx	r3
 8006746:	3601      	adds	r6, #1
 8006748:	e7ee      	b.n	8006728 <__libc_init_array+0xc>
 800674a:	00b3      	lsls	r3, r6, #2
 800674c:	58eb      	ldr	r3, [r5, r3]
 800674e:	4798      	blx	r3
 8006750:	3601      	adds	r6, #1
 8006752:	e7f2      	b.n	800673a <__libc_init_array+0x1e>
 8006754:	0800715c 	.word	0x0800715c
 8006758:	0800715c 	.word	0x0800715c
 800675c:	08007160 	.word	0x08007160
 8006760:	0800715c 	.word	0x0800715c

08006764 <__retarget_lock_acquire_recursive>:
 8006764:	4770      	bx	lr

08006766 <__retarget_lock_release_recursive>:
 8006766:	4770      	bx	lr

08006768 <memcpy>:
 8006768:	2300      	movs	r3, #0
 800676a:	b510      	push	{r4, lr}
 800676c:	429a      	cmp	r2, r3
 800676e:	d100      	bne.n	8006772 <memcpy+0xa>
 8006770:	bd10      	pop	{r4, pc}
 8006772:	5ccc      	ldrb	r4, [r1, r3]
 8006774:	54c4      	strb	r4, [r0, r3]
 8006776:	3301      	adds	r3, #1
 8006778:	e7f8      	b.n	800676c <memcpy+0x4>
	...

0800677c <_free_r>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	0005      	movs	r5, r0
 8006780:	1e0c      	subs	r4, r1, #0
 8006782:	d010      	beq.n	80067a6 <_free_r+0x2a>
 8006784:	3c04      	subs	r4, #4
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	da00      	bge.n	800678e <_free_r+0x12>
 800678c:	18e4      	adds	r4, r4, r3
 800678e:	0028      	movs	r0, r5
 8006790:	f000 f8e0 	bl	8006954 <__malloc_lock>
 8006794:	4a1d      	ldr	r2, [pc, #116]	@ (800680c <_free_r+0x90>)
 8006796:	6813      	ldr	r3, [r2, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <_free_r+0x2c>
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	6014      	str	r4, [r2, #0]
 80067a0:	0028      	movs	r0, r5
 80067a2:	f000 f8df 	bl	8006964 <__malloc_unlock>
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	d908      	bls.n	80067be <_free_r+0x42>
 80067ac:	6820      	ldr	r0, [r4, #0]
 80067ae:	1821      	adds	r1, r4, r0
 80067b0:	428b      	cmp	r3, r1
 80067b2:	d1f3      	bne.n	800679c <_free_r+0x20>
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	1809      	adds	r1, r1, r0
 80067ba:	6021      	str	r1, [r4, #0]
 80067bc:	e7ee      	b.n	800679c <_free_r+0x20>
 80067be:	001a      	movs	r2, r3
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <_free_r+0x4e>
 80067c6:	42a3      	cmp	r3, r4
 80067c8:	d9f9      	bls.n	80067be <_free_r+0x42>
 80067ca:	6811      	ldr	r1, [r2, #0]
 80067cc:	1850      	adds	r0, r2, r1
 80067ce:	42a0      	cmp	r0, r4
 80067d0:	d10b      	bne.n	80067ea <_free_r+0x6e>
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	1809      	adds	r1, r1, r0
 80067d6:	1850      	adds	r0, r2, r1
 80067d8:	6011      	str	r1, [r2, #0]
 80067da:	4283      	cmp	r3, r0
 80067dc:	d1e0      	bne.n	80067a0 <_free_r+0x24>
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	1841      	adds	r1, r0, r1
 80067e4:	6011      	str	r1, [r2, #0]
 80067e6:	6053      	str	r3, [r2, #4]
 80067e8:	e7da      	b.n	80067a0 <_free_r+0x24>
 80067ea:	42a0      	cmp	r0, r4
 80067ec:	d902      	bls.n	80067f4 <_free_r+0x78>
 80067ee:	230c      	movs	r3, #12
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	e7d5      	b.n	80067a0 <_free_r+0x24>
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	1821      	adds	r1, r4, r0
 80067f8:	428b      	cmp	r3, r1
 80067fa:	d103      	bne.n	8006804 <_free_r+0x88>
 80067fc:	6819      	ldr	r1, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	1809      	adds	r1, r1, r0
 8006802:	6021      	str	r1, [r4, #0]
 8006804:	6063      	str	r3, [r4, #4]
 8006806:	6054      	str	r4, [r2, #4]
 8006808:	e7ca      	b.n	80067a0 <_free_r+0x24>
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	200002bc 	.word	0x200002bc

08006810 <sbrk_aligned>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	4e0f      	ldr	r6, [pc, #60]	@ (8006850 <sbrk_aligned+0x40>)
 8006814:	000d      	movs	r5, r1
 8006816:	6831      	ldr	r1, [r6, #0]
 8006818:	0004      	movs	r4, r0
 800681a:	2900      	cmp	r1, #0
 800681c:	d102      	bne.n	8006824 <sbrk_aligned+0x14>
 800681e:	f000 fb99 	bl	8006f54 <_sbrk_r>
 8006822:	6030      	str	r0, [r6, #0]
 8006824:	0029      	movs	r1, r5
 8006826:	0020      	movs	r0, r4
 8006828:	f000 fb94 	bl	8006f54 <_sbrk_r>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d103      	bne.n	8006838 <sbrk_aligned+0x28>
 8006830:	2501      	movs	r5, #1
 8006832:	426d      	negs	r5, r5
 8006834:	0028      	movs	r0, r5
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	2303      	movs	r3, #3
 800683a:	1cc5      	adds	r5, r0, #3
 800683c:	439d      	bics	r5, r3
 800683e:	42a8      	cmp	r0, r5
 8006840:	d0f8      	beq.n	8006834 <sbrk_aligned+0x24>
 8006842:	1a29      	subs	r1, r5, r0
 8006844:	0020      	movs	r0, r4
 8006846:	f000 fb85 	bl	8006f54 <_sbrk_r>
 800684a:	3001      	adds	r0, #1
 800684c:	d1f2      	bne.n	8006834 <sbrk_aligned+0x24>
 800684e:	e7ef      	b.n	8006830 <sbrk_aligned+0x20>
 8006850:	200002b8 	.word	0x200002b8

08006854 <_malloc_r>:
 8006854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006856:	2203      	movs	r2, #3
 8006858:	1ccb      	adds	r3, r1, #3
 800685a:	4393      	bics	r3, r2
 800685c:	3308      	adds	r3, #8
 800685e:	0005      	movs	r5, r0
 8006860:	001f      	movs	r7, r3
 8006862:	2b0c      	cmp	r3, #12
 8006864:	d234      	bcs.n	80068d0 <_malloc_r+0x7c>
 8006866:	270c      	movs	r7, #12
 8006868:	42b9      	cmp	r1, r7
 800686a:	d833      	bhi.n	80068d4 <_malloc_r+0x80>
 800686c:	0028      	movs	r0, r5
 800686e:	f000 f871 	bl	8006954 <__malloc_lock>
 8006872:	4e37      	ldr	r6, [pc, #220]	@ (8006950 <_malloc_r+0xfc>)
 8006874:	6833      	ldr	r3, [r6, #0]
 8006876:	001c      	movs	r4, r3
 8006878:	2c00      	cmp	r4, #0
 800687a:	d12f      	bne.n	80068dc <_malloc_r+0x88>
 800687c:	0039      	movs	r1, r7
 800687e:	0028      	movs	r0, r5
 8006880:	f7ff ffc6 	bl	8006810 <sbrk_aligned>
 8006884:	0004      	movs	r4, r0
 8006886:	1c43      	adds	r3, r0, #1
 8006888:	d15f      	bne.n	800694a <_malloc_r+0xf6>
 800688a:	6834      	ldr	r4, [r6, #0]
 800688c:	9400      	str	r4, [sp, #0]
 800688e:	9b00      	ldr	r3, [sp, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d14a      	bne.n	800692a <_malloc_r+0xd6>
 8006894:	2c00      	cmp	r4, #0
 8006896:	d052      	beq.n	800693e <_malloc_r+0xea>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	0028      	movs	r0, r5
 800689c:	18e3      	adds	r3, r4, r3
 800689e:	9900      	ldr	r1, [sp, #0]
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	f000 fb57 	bl	8006f54 <_sbrk_r>
 80068a6:	9b01      	ldr	r3, [sp, #4]
 80068a8:	4283      	cmp	r3, r0
 80068aa:	d148      	bne.n	800693e <_malloc_r+0xea>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	0028      	movs	r0, r5
 80068b0:	1aff      	subs	r7, r7, r3
 80068b2:	0039      	movs	r1, r7
 80068b4:	f7ff ffac 	bl	8006810 <sbrk_aligned>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d040      	beq.n	800693e <_malloc_r+0xea>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	19db      	adds	r3, r3, r7
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	6833      	ldr	r3, [r6, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	d133      	bne.n	8006932 <_malloc_r+0xde>
 80068ca:	9b00      	ldr	r3, [sp, #0]
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	e019      	b.n	8006904 <_malloc_r+0xb0>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dac9      	bge.n	8006868 <_malloc_r+0x14>
 80068d4:	230c      	movs	r3, #12
 80068d6:	602b      	str	r3, [r5, #0]
 80068d8:	2000      	movs	r0, #0
 80068da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068dc:	6821      	ldr	r1, [r4, #0]
 80068de:	1bc9      	subs	r1, r1, r7
 80068e0:	d420      	bmi.n	8006924 <_malloc_r+0xd0>
 80068e2:	290b      	cmp	r1, #11
 80068e4:	d90a      	bls.n	80068fc <_malloc_r+0xa8>
 80068e6:	19e2      	adds	r2, r4, r7
 80068e8:	6027      	str	r7, [r4, #0]
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	d104      	bne.n	80068f8 <_malloc_r+0xa4>
 80068ee:	6032      	str	r2, [r6, #0]
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	6011      	str	r1, [r2, #0]
 80068f4:	6053      	str	r3, [r2, #4]
 80068f6:	e005      	b.n	8006904 <_malloc_r+0xb0>
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	e7f9      	b.n	80068f0 <_malloc_r+0x9c>
 80068fc:	6862      	ldr	r2, [r4, #4]
 80068fe:	42a3      	cmp	r3, r4
 8006900:	d10e      	bne.n	8006920 <_malloc_r+0xcc>
 8006902:	6032      	str	r2, [r6, #0]
 8006904:	0028      	movs	r0, r5
 8006906:	f000 f82d 	bl	8006964 <__malloc_unlock>
 800690a:	0020      	movs	r0, r4
 800690c:	2207      	movs	r2, #7
 800690e:	300b      	adds	r0, #11
 8006910:	1d23      	adds	r3, r4, #4
 8006912:	4390      	bics	r0, r2
 8006914:	1ac2      	subs	r2, r0, r3
 8006916:	4298      	cmp	r0, r3
 8006918:	d0df      	beq.n	80068da <_malloc_r+0x86>
 800691a:	1a1b      	subs	r3, r3, r0
 800691c:	50a3      	str	r3, [r4, r2]
 800691e:	e7dc      	b.n	80068da <_malloc_r+0x86>
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	e7ef      	b.n	8006904 <_malloc_r+0xb0>
 8006924:	0023      	movs	r3, r4
 8006926:	6864      	ldr	r4, [r4, #4]
 8006928:	e7a6      	b.n	8006878 <_malloc_r+0x24>
 800692a:	9c00      	ldr	r4, [sp, #0]
 800692c:	6863      	ldr	r3, [r4, #4]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	e7ad      	b.n	800688e <_malloc_r+0x3a>
 8006932:	001a      	movs	r2, r3
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	42a3      	cmp	r3, r4
 8006938:	d1fb      	bne.n	8006932 <_malloc_r+0xde>
 800693a:	2300      	movs	r3, #0
 800693c:	e7da      	b.n	80068f4 <_malloc_r+0xa0>
 800693e:	230c      	movs	r3, #12
 8006940:	0028      	movs	r0, r5
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f000 f80e 	bl	8006964 <__malloc_unlock>
 8006948:	e7c6      	b.n	80068d8 <_malloc_r+0x84>
 800694a:	6007      	str	r7, [r0, #0]
 800694c:	e7da      	b.n	8006904 <_malloc_r+0xb0>
 800694e:	46c0      	nop			@ (mov r8, r8)
 8006950:	200002bc 	.word	0x200002bc

08006954 <__malloc_lock>:
 8006954:	b510      	push	{r4, lr}
 8006956:	4802      	ldr	r0, [pc, #8]	@ (8006960 <__malloc_lock+0xc>)
 8006958:	f7ff ff04 	bl	8006764 <__retarget_lock_acquire_recursive>
 800695c:	bd10      	pop	{r4, pc}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	200002b4 	.word	0x200002b4

08006964 <__malloc_unlock>:
 8006964:	b510      	push	{r4, lr}
 8006966:	4802      	ldr	r0, [pc, #8]	@ (8006970 <__malloc_unlock+0xc>)
 8006968:	f7ff fefd 	bl	8006766 <__retarget_lock_release_recursive>
 800696c:	bd10      	pop	{r4, pc}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	200002b4 	.word	0x200002b4

08006974 <__ssputs_r>:
 8006974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006976:	688e      	ldr	r6, [r1, #8]
 8006978:	b085      	sub	sp, #20
 800697a:	001f      	movs	r7, r3
 800697c:	000c      	movs	r4, r1
 800697e:	680b      	ldr	r3, [r1, #0]
 8006980:	9002      	str	r0, [sp, #8]
 8006982:	9203      	str	r2, [sp, #12]
 8006984:	42be      	cmp	r6, r7
 8006986:	d830      	bhi.n	80069ea <__ssputs_r+0x76>
 8006988:	210c      	movs	r1, #12
 800698a:	5e62      	ldrsh	r2, [r4, r1]
 800698c:	2190      	movs	r1, #144	@ 0x90
 800698e:	00c9      	lsls	r1, r1, #3
 8006990:	420a      	tst	r2, r1
 8006992:	d028      	beq.n	80069e6 <__ssputs_r+0x72>
 8006994:	2003      	movs	r0, #3
 8006996:	6921      	ldr	r1, [r4, #16]
 8006998:	1a5b      	subs	r3, r3, r1
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	6963      	ldr	r3, [r4, #20]
 800699e:	4343      	muls	r3, r0
 80069a0:	9801      	ldr	r0, [sp, #4]
 80069a2:	0fdd      	lsrs	r5, r3, #31
 80069a4:	18ed      	adds	r5, r5, r3
 80069a6:	1c7b      	adds	r3, r7, #1
 80069a8:	181b      	adds	r3, r3, r0
 80069aa:	106d      	asrs	r5, r5, #1
 80069ac:	42ab      	cmp	r3, r5
 80069ae:	d900      	bls.n	80069b2 <__ssputs_r+0x3e>
 80069b0:	001d      	movs	r5, r3
 80069b2:	0552      	lsls	r2, r2, #21
 80069b4:	d528      	bpl.n	8006a08 <__ssputs_r+0x94>
 80069b6:	0029      	movs	r1, r5
 80069b8:	9802      	ldr	r0, [sp, #8]
 80069ba:	f7ff ff4b 	bl	8006854 <_malloc_r>
 80069be:	1e06      	subs	r6, r0, #0
 80069c0:	d02c      	beq.n	8006a1c <__ssputs_r+0xa8>
 80069c2:	9a01      	ldr	r2, [sp, #4]
 80069c4:	6921      	ldr	r1, [r4, #16]
 80069c6:	f7ff fecf 	bl	8006768 <memcpy>
 80069ca:	89a2      	ldrh	r2, [r4, #12]
 80069cc:	4b18      	ldr	r3, [pc, #96]	@ (8006a30 <__ssputs_r+0xbc>)
 80069ce:	401a      	ands	r2, r3
 80069d0:	2380      	movs	r3, #128	@ 0x80
 80069d2:	4313      	orrs	r3, r2
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	9b01      	ldr	r3, [sp, #4]
 80069d8:	6126      	str	r6, [r4, #16]
 80069da:	18f6      	adds	r6, r6, r3
 80069dc:	6026      	str	r6, [r4, #0]
 80069de:	003e      	movs	r6, r7
 80069e0:	6165      	str	r5, [r4, #20]
 80069e2:	1aed      	subs	r5, r5, r3
 80069e4:	60a5      	str	r5, [r4, #8]
 80069e6:	42be      	cmp	r6, r7
 80069e8:	d900      	bls.n	80069ec <__ssputs_r+0x78>
 80069ea:	003e      	movs	r6, r7
 80069ec:	0032      	movs	r2, r6
 80069ee:	9903      	ldr	r1, [sp, #12]
 80069f0:	6820      	ldr	r0, [r4, #0]
 80069f2:	f000 fa9b 	bl	8006f2c <memmove>
 80069f6:	2000      	movs	r0, #0
 80069f8:	68a3      	ldr	r3, [r4, #8]
 80069fa:	1b9b      	subs	r3, r3, r6
 80069fc:	60a3      	str	r3, [r4, #8]
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	199b      	adds	r3, r3, r6
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	b005      	add	sp, #20
 8006a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a08:	002a      	movs	r2, r5
 8006a0a:	9802      	ldr	r0, [sp, #8]
 8006a0c:	f000 fabf 	bl	8006f8e <_realloc_r>
 8006a10:	1e06      	subs	r6, r0, #0
 8006a12:	d1e0      	bne.n	80069d6 <__ssputs_r+0x62>
 8006a14:	6921      	ldr	r1, [r4, #16]
 8006a16:	9802      	ldr	r0, [sp, #8]
 8006a18:	f7ff feb0 	bl	800677c <_free_r>
 8006a1c:	230c      	movs	r3, #12
 8006a1e:	2001      	movs	r0, #1
 8006a20:	9a02      	ldr	r2, [sp, #8]
 8006a22:	4240      	negs	r0, r0
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	89a2      	ldrh	r2, [r4, #12]
 8006a28:	3334      	adds	r3, #52	@ 0x34
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	e7e9      	b.n	8006a04 <__ssputs_r+0x90>
 8006a30:	fffffb7f 	.word	0xfffffb7f

08006a34 <_svfiprintf_r>:
 8006a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a36:	b0a1      	sub	sp, #132	@ 0x84
 8006a38:	9003      	str	r0, [sp, #12]
 8006a3a:	001d      	movs	r5, r3
 8006a3c:	898b      	ldrh	r3, [r1, #12]
 8006a3e:	000f      	movs	r7, r1
 8006a40:	0016      	movs	r6, r2
 8006a42:	061b      	lsls	r3, r3, #24
 8006a44:	d511      	bpl.n	8006a6a <_svfiprintf_r+0x36>
 8006a46:	690b      	ldr	r3, [r1, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10e      	bne.n	8006a6a <_svfiprintf_r+0x36>
 8006a4c:	2140      	movs	r1, #64	@ 0x40
 8006a4e:	f7ff ff01 	bl	8006854 <_malloc_r>
 8006a52:	6038      	str	r0, [r7, #0]
 8006a54:	6138      	str	r0, [r7, #16]
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d105      	bne.n	8006a66 <_svfiprintf_r+0x32>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	9a03      	ldr	r2, [sp, #12]
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	2001      	movs	r0, #1
 8006a62:	4240      	negs	r0, r0
 8006a64:	e0cf      	b.n	8006c06 <_svfiprintf_r+0x1d2>
 8006a66:	2340      	movs	r3, #64	@ 0x40
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	ac08      	add	r4, sp, #32
 8006a6e:	6163      	str	r3, [r4, #20]
 8006a70:	3320      	adds	r3, #32
 8006a72:	7663      	strb	r3, [r4, #25]
 8006a74:	3310      	adds	r3, #16
 8006a76:	76a3      	strb	r3, [r4, #26]
 8006a78:	9507      	str	r5, [sp, #28]
 8006a7a:	0035      	movs	r5, r6
 8006a7c:	782b      	ldrb	r3, [r5, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <_svfiprintf_r+0x52>
 8006a82:	2b25      	cmp	r3, #37	@ 0x25
 8006a84:	d148      	bne.n	8006b18 <_svfiprintf_r+0xe4>
 8006a86:	1bab      	subs	r3, r5, r6
 8006a88:	9305      	str	r3, [sp, #20]
 8006a8a:	42b5      	cmp	r5, r6
 8006a8c:	d00b      	beq.n	8006aa6 <_svfiprintf_r+0x72>
 8006a8e:	0032      	movs	r2, r6
 8006a90:	0039      	movs	r1, r7
 8006a92:	9803      	ldr	r0, [sp, #12]
 8006a94:	f7ff ff6e 	bl	8006974 <__ssputs_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d100      	bne.n	8006a9e <_svfiprintf_r+0x6a>
 8006a9c:	e0ae      	b.n	8006bfc <_svfiprintf_r+0x1c8>
 8006a9e:	6963      	ldr	r3, [r4, #20]
 8006aa0:	9a05      	ldr	r2, [sp, #20]
 8006aa2:	189b      	adds	r3, r3, r2
 8006aa4:	6163      	str	r3, [r4, #20]
 8006aa6:	782b      	ldrb	r3, [r5, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d100      	bne.n	8006aae <_svfiprintf_r+0x7a>
 8006aac:	e0a6      	b.n	8006bfc <_svfiprintf_r+0x1c8>
 8006aae:	2201      	movs	r2, #1
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4252      	negs	r2, r2
 8006ab4:	6062      	str	r2, [r4, #4]
 8006ab6:	a904      	add	r1, sp, #16
 8006ab8:	3254      	adds	r2, #84	@ 0x54
 8006aba:	1852      	adds	r2, r2, r1
 8006abc:	1c6e      	adds	r6, r5, #1
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	60e3      	str	r3, [r4, #12]
 8006ac2:	60a3      	str	r3, [r4, #8]
 8006ac4:	7013      	strb	r3, [r2, #0]
 8006ac6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006ac8:	4b54      	ldr	r3, [pc, #336]	@ (8006c1c <_svfiprintf_r+0x1e8>)
 8006aca:	2205      	movs	r2, #5
 8006acc:	0018      	movs	r0, r3
 8006ace:	7831      	ldrb	r1, [r6, #0]
 8006ad0:	9305      	str	r3, [sp, #20]
 8006ad2:	f000 fa51 	bl	8006f78 <memchr>
 8006ad6:	1c75      	adds	r5, r6, #1
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d11f      	bne.n	8006b1c <_svfiprintf_r+0xe8>
 8006adc:	6822      	ldr	r2, [r4, #0]
 8006ade:	06d3      	lsls	r3, r2, #27
 8006ae0:	d504      	bpl.n	8006aec <_svfiprintf_r+0xb8>
 8006ae2:	2353      	movs	r3, #83	@ 0x53
 8006ae4:	a904      	add	r1, sp, #16
 8006ae6:	185b      	adds	r3, r3, r1
 8006ae8:	2120      	movs	r1, #32
 8006aea:	7019      	strb	r1, [r3, #0]
 8006aec:	0713      	lsls	r3, r2, #28
 8006aee:	d504      	bpl.n	8006afa <_svfiprintf_r+0xc6>
 8006af0:	2353      	movs	r3, #83	@ 0x53
 8006af2:	a904      	add	r1, sp, #16
 8006af4:	185b      	adds	r3, r3, r1
 8006af6:	212b      	movs	r1, #43	@ 0x2b
 8006af8:	7019      	strb	r1, [r3, #0]
 8006afa:	7833      	ldrb	r3, [r6, #0]
 8006afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006afe:	d016      	beq.n	8006b2e <_svfiprintf_r+0xfa>
 8006b00:	0035      	movs	r5, r6
 8006b02:	2100      	movs	r1, #0
 8006b04:	200a      	movs	r0, #10
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	782a      	ldrb	r2, [r5, #0]
 8006b0a:	1c6e      	adds	r6, r5, #1
 8006b0c:	3a30      	subs	r2, #48	@ 0x30
 8006b0e:	2a09      	cmp	r2, #9
 8006b10:	d950      	bls.n	8006bb4 <_svfiprintf_r+0x180>
 8006b12:	2900      	cmp	r1, #0
 8006b14:	d111      	bne.n	8006b3a <_svfiprintf_r+0x106>
 8006b16:	e017      	b.n	8006b48 <_svfiprintf_r+0x114>
 8006b18:	3501      	adds	r5, #1
 8006b1a:	e7af      	b.n	8006a7c <_svfiprintf_r+0x48>
 8006b1c:	9b05      	ldr	r3, [sp, #20]
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	1ac0      	subs	r0, r0, r3
 8006b22:	2301      	movs	r3, #1
 8006b24:	4083      	lsls	r3, r0
 8006b26:	4313      	orrs	r3, r2
 8006b28:	002e      	movs	r6, r5
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	e7cc      	b.n	8006ac8 <_svfiprintf_r+0x94>
 8006b2e:	9b07      	ldr	r3, [sp, #28]
 8006b30:	1d19      	adds	r1, r3, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	9107      	str	r1, [sp, #28]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	db01      	blt.n	8006b3e <_svfiprintf_r+0x10a>
 8006b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b3c:	e004      	b.n	8006b48 <_svfiprintf_r+0x114>
 8006b3e:	425b      	negs	r3, r3
 8006b40:	60e3      	str	r3, [r4, #12]
 8006b42:	2302      	movs	r3, #2
 8006b44:	4313      	orrs	r3, r2
 8006b46:	6023      	str	r3, [r4, #0]
 8006b48:	782b      	ldrb	r3, [r5, #0]
 8006b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b4c:	d10c      	bne.n	8006b68 <_svfiprintf_r+0x134>
 8006b4e:	786b      	ldrb	r3, [r5, #1]
 8006b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b52:	d134      	bne.n	8006bbe <_svfiprintf_r+0x18a>
 8006b54:	9b07      	ldr	r3, [sp, #28]
 8006b56:	3502      	adds	r5, #2
 8006b58:	1d1a      	adds	r2, r3, #4
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	9207      	str	r2, [sp, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da01      	bge.n	8006b66 <_svfiprintf_r+0x132>
 8006b62:	2301      	movs	r3, #1
 8006b64:	425b      	negs	r3, r3
 8006b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b68:	4e2d      	ldr	r6, [pc, #180]	@ (8006c20 <_svfiprintf_r+0x1ec>)
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	0030      	movs	r0, r6
 8006b6e:	7829      	ldrb	r1, [r5, #0]
 8006b70:	f000 fa02 	bl	8006f78 <memchr>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d006      	beq.n	8006b86 <_svfiprintf_r+0x152>
 8006b78:	2340      	movs	r3, #64	@ 0x40
 8006b7a:	1b80      	subs	r0, r0, r6
 8006b7c:	4083      	lsls	r3, r0
 8006b7e:	6822      	ldr	r2, [r4, #0]
 8006b80:	3501      	adds	r5, #1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	7829      	ldrb	r1, [r5, #0]
 8006b88:	2206      	movs	r2, #6
 8006b8a:	4826      	ldr	r0, [pc, #152]	@ (8006c24 <_svfiprintf_r+0x1f0>)
 8006b8c:	1c6e      	adds	r6, r5, #1
 8006b8e:	7621      	strb	r1, [r4, #24]
 8006b90:	f000 f9f2 	bl	8006f78 <memchr>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d038      	beq.n	8006c0a <_svfiprintf_r+0x1d6>
 8006b98:	4b23      	ldr	r3, [pc, #140]	@ (8006c28 <_svfiprintf_r+0x1f4>)
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d122      	bne.n	8006be4 <_svfiprintf_r+0x1b0>
 8006b9e:	2207      	movs	r2, #7
 8006ba0:	9b07      	ldr	r3, [sp, #28]
 8006ba2:	3307      	adds	r3, #7
 8006ba4:	4393      	bics	r3, r2
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	9307      	str	r3, [sp, #28]
 8006baa:	6963      	ldr	r3, [r4, #20]
 8006bac:	9a04      	ldr	r2, [sp, #16]
 8006bae:	189b      	adds	r3, r3, r2
 8006bb0:	6163      	str	r3, [r4, #20]
 8006bb2:	e762      	b.n	8006a7a <_svfiprintf_r+0x46>
 8006bb4:	4343      	muls	r3, r0
 8006bb6:	0035      	movs	r5, r6
 8006bb8:	2101      	movs	r1, #1
 8006bba:	189b      	adds	r3, r3, r2
 8006bbc:	e7a4      	b.n	8006b08 <_svfiprintf_r+0xd4>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	200a      	movs	r0, #10
 8006bc2:	0019      	movs	r1, r3
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	782a      	ldrb	r2, [r5, #0]
 8006bca:	1c6e      	adds	r6, r5, #1
 8006bcc:	3a30      	subs	r2, #48	@ 0x30
 8006bce:	2a09      	cmp	r2, #9
 8006bd0:	d903      	bls.n	8006bda <_svfiprintf_r+0x1a6>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0c8      	beq.n	8006b68 <_svfiprintf_r+0x134>
 8006bd6:	9109      	str	r1, [sp, #36]	@ 0x24
 8006bd8:	e7c6      	b.n	8006b68 <_svfiprintf_r+0x134>
 8006bda:	4341      	muls	r1, r0
 8006bdc:	0035      	movs	r5, r6
 8006bde:	2301      	movs	r3, #1
 8006be0:	1889      	adds	r1, r1, r2
 8006be2:	e7f1      	b.n	8006bc8 <_svfiprintf_r+0x194>
 8006be4:	aa07      	add	r2, sp, #28
 8006be6:	9200      	str	r2, [sp, #0]
 8006be8:	0021      	movs	r1, r4
 8006bea:	003a      	movs	r2, r7
 8006bec:	4b0f      	ldr	r3, [pc, #60]	@ (8006c2c <_svfiprintf_r+0x1f8>)
 8006bee:	9803      	ldr	r0, [sp, #12]
 8006bf0:	e000      	b.n	8006bf4 <_svfiprintf_r+0x1c0>
 8006bf2:	bf00      	nop
 8006bf4:	9004      	str	r0, [sp, #16]
 8006bf6:	9b04      	ldr	r3, [sp, #16]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	d1d6      	bne.n	8006baa <_svfiprintf_r+0x176>
 8006bfc:	89bb      	ldrh	r3, [r7, #12]
 8006bfe:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006c00:	065b      	lsls	r3, r3, #25
 8006c02:	d500      	bpl.n	8006c06 <_svfiprintf_r+0x1d2>
 8006c04:	e72c      	b.n	8006a60 <_svfiprintf_r+0x2c>
 8006c06:	b021      	add	sp, #132	@ 0x84
 8006c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c0a:	aa07      	add	r2, sp, #28
 8006c0c:	9200      	str	r2, [sp, #0]
 8006c0e:	0021      	movs	r1, r4
 8006c10:	003a      	movs	r2, r7
 8006c12:	4b06      	ldr	r3, [pc, #24]	@ (8006c2c <_svfiprintf_r+0x1f8>)
 8006c14:	9803      	ldr	r0, [sp, #12]
 8006c16:	f000 f87b 	bl	8006d10 <_printf_i>
 8006c1a:	e7eb      	b.n	8006bf4 <_svfiprintf_r+0x1c0>
 8006c1c:	08007128 	.word	0x08007128
 8006c20:	0800712e 	.word	0x0800712e
 8006c24:	08007132 	.word	0x08007132
 8006c28:	00000000 	.word	0x00000000
 8006c2c:	08006975 	.word	0x08006975

08006c30 <_printf_common>:
 8006c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c32:	0016      	movs	r6, r2
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	688a      	ldr	r2, [r1, #8]
 8006c38:	690b      	ldr	r3, [r1, #16]
 8006c3a:	000c      	movs	r4, r1
 8006c3c:	9000      	str	r0, [sp, #0]
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	da00      	bge.n	8006c44 <_printf_common+0x14>
 8006c42:	0013      	movs	r3, r2
 8006c44:	0022      	movs	r2, r4
 8006c46:	6033      	str	r3, [r6, #0]
 8006c48:	3243      	adds	r2, #67	@ 0x43
 8006c4a:	7812      	ldrb	r2, [r2, #0]
 8006c4c:	2a00      	cmp	r2, #0
 8006c4e:	d001      	beq.n	8006c54 <_printf_common+0x24>
 8006c50:	3301      	adds	r3, #1
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	069b      	lsls	r3, r3, #26
 8006c58:	d502      	bpl.n	8006c60 <_printf_common+0x30>
 8006c5a:	6833      	ldr	r3, [r6, #0]
 8006c5c:	3302      	adds	r3, #2
 8006c5e:	6033      	str	r3, [r6, #0]
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	2306      	movs	r3, #6
 8006c64:	0015      	movs	r5, r2
 8006c66:	401d      	ands	r5, r3
 8006c68:	421a      	tst	r2, r3
 8006c6a:	d027      	beq.n	8006cbc <_printf_common+0x8c>
 8006c6c:	0023      	movs	r3, r4
 8006c6e:	3343      	adds	r3, #67	@ 0x43
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	1e5a      	subs	r2, r3, #1
 8006c74:	4193      	sbcs	r3, r2
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	0692      	lsls	r2, r2, #26
 8006c7a:	d430      	bmi.n	8006cde <_printf_common+0xae>
 8006c7c:	0022      	movs	r2, r4
 8006c7e:	9901      	ldr	r1, [sp, #4]
 8006c80:	9800      	ldr	r0, [sp, #0]
 8006c82:	9d08      	ldr	r5, [sp, #32]
 8006c84:	3243      	adds	r2, #67	@ 0x43
 8006c86:	47a8      	blx	r5
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d025      	beq.n	8006cd8 <_printf_common+0xa8>
 8006c8c:	2206      	movs	r2, #6
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	2500      	movs	r5, #0
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d105      	bne.n	8006ca4 <_printf_common+0x74>
 8006c98:	6833      	ldr	r3, [r6, #0]
 8006c9a:	68e5      	ldr	r5, [r4, #12]
 8006c9c:	1aed      	subs	r5, r5, r3
 8006c9e:	43eb      	mvns	r3, r5
 8006ca0:	17db      	asrs	r3, r3, #31
 8006ca2:	401d      	ands	r5, r3
 8006ca4:	68a3      	ldr	r3, [r4, #8]
 8006ca6:	6922      	ldr	r2, [r4, #16]
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	dd01      	ble.n	8006cb0 <_printf_common+0x80>
 8006cac:	1a9b      	subs	r3, r3, r2
 8006cae:	18ed      	adds	r5, r5, r3
 8006cb0:	2600      	movs	r6, #0
 8006cb2:	42b5      	cmp	r5, r6
 8006cb4:	d120      	bne.n	8006cf8 <_printf_common+0xc8>
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	e010      	b.n	8006cdc <_printf_common+0xac>
 8006cba:	3501      	adds	r5, #1
 8006cbc:	68e3      	ldr	r3, [r4, #12]
 8006cbe:	6832      	ldr	r2, [r6, #0]
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	42ab      	cmp	r3, r5
 8006cc4:	ddd2      	ble.n	8006c6c <_printf_common+0x3c>
 8006cc6:	0022      	movs	r2, r4
 8006cc8:	2301      	movs	r3, #1
 8006cca:	9901      	ldr	r1, [sp, #4]
 8006ccc:	9800      	ldr	r0, [sp, #0]
 8006cce:	9f08      	ldr	r7, [sp, #32]
 8006cd0:	3219      	adds	r2, #25
 8006cd2:	47b8      	blx	r7
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d1f0      	bne.n	8006cba <_printf_common+0x8a>
 8006cd8:	2001      	movs	r0, #1
 8006cda:	4240      	negs	r0, r0
 8006cdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cde:	2030      	movs	r0, #48	@ 0x30
 8006ce0:	18e1      	adds	r1, r4, r3
 8006ce2:	3143      	adds	r1, #67	@ 0x43
 8006ce4:	7008      	strb	r0, [r1, #0]
 8006ce6:	0021      	movs	r1, r4
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	3145      	adds	r1, #69	@ 0x45
 8006cec:	7809      	ldrb	r1, [r1, #0]
 8006cee:	18a2      	adds	r2, r4, r2
 8006cf0:	3243      	adds	r2, #67	@ 0x43
 8006cf2:	3302      	adds	r3, #2
 8006cf4:	7011      	strb	r1, [r2, #0]
 8006cf6:	e7c1      	b.n	8006c7c <_printf_common+0x4c>
 8006cf8:	0022      	movs	r2, r4
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	9901      	ldr	r1, [sp, #4]
 8006cfe:	9800      	ldr	r0, [sp, #0]
 8006d00:	9f08      	ldr	r7, [sp, #32]
 8006d02:	321a      	adds	r2, #26
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	d0e6      	beq.n	8006cd8 <_printf_common+0xa8>
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e7d1      	b.n	8006cb2 <_printf_common+0x82>
	...

08006d10 <_printf_i>:
 8006d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d12:	b08b      	sub	sp, #44	@ 0x2c
 8006d14:	9206      	str	r2, [sp, #24]
 8006d16:	000a      	movs	r2, r1
 8006d18:	3243      	adds	r2, #67	@ 0x43
 8006d1a:	9307      	str	r3, [sp, #28]
 8006d1c:	9005      	str	r0, [sp, #20]
 8006d1e:	9203      	str	r2, [sp, #12]
 8006d20:	7e0a      	ldrb	r2, [r1, #24]
 8006d22:	000c      	movs	r4, r1
 8006d24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d26:	2a78      	cmp	r2, #120	@ 0x78
 8006d28:	d809      	bhi.n	8006d3e <_printf_i+0x2e>
 8006d2a:	2a62      	cmp	r2, #98	@ 0x62
 8006d2c:	d80b      	bhi.n	8006d46 <_printf_i+0x36>
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	d100      	bne.n	8006d34 <_printf_i+0x24>
 8006d32:	e0bc      	b.n	8006eae <_printf_i+0x19e>
 8006d34:	497b      	ldr	r1, [pc, #492]	@ (8006f24 <_printf_i+0x214>)
 8006d36:	9104      	str	r1, [sp, #16]
 8006d38:	2a58      	cmp	r2, #88	@ 0x58
 8006d3a:	d100      	bne.n	8006d3e <_printf_i+0x2e>
 8006d3c:	e090      	b.n	8006e60 <_printf_i+0x150>
 8006d3e:	0025      	movs	r5, r4
 8006d40:	3542      	adds	r5, #66	@ 0x42
 8006d42:	702a      	strb	r2, [r5, #0]
 8006d44:	e022      	b.n	8006d8c <_printf_i+0x7c>
 8006d46:	0010      	movs	r0, r2
 8006d48:	3863      	subs	r0, #99	@ 0x63
 8006d4a:	2815      	cmp	r0, #21
 8006d4c:	d8f7      	bhi.n	8006d3e <_printf_i+0x2e>
 8006d4e:	f7f9 f9db 	bl	8000108 <__gnu_thumb1_case_shi>
 8006d52:	0016      	.short	0x0016
 8006d54:	fff6001f 	.word	0xfff6001f
 8006d58:	fff6fff6 	.word	0xfff6fff6
 8006d5c:	001ffff6 	.word	0x001ffff6
 8006d60:	fff6fff6 	.word	0xfff6fff6
 8006d64:	fff6fff6 	.word	0xfff6fff6
 8006d68:	003600a1 	.word	0x003600a1
 8006d6c:	fff60080 	.word	0xfff60080
 8006d70:	00b2fff6 	.word	0x00b2fff6
 8006d74:	0036fff6 	.word	0x0036fff6
 8006d78:	fff6fff6 	.word	0xfff6fff6
 8006d7c:	0084      	.short	0x0084
 8006d7e:	0025      	movs	r5, r4
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	3542      	adds	r5, #66	@ 0x42
 8006d84:	1d11      	adds	r1, r2, #4
 8006d86:	6019      	str	r1, [r3, #0]
 8006d88:	6813      	ldr	r3, [r2, #0]
 8006d8a:	702b      	strb	r3, [r5, #0]
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0a0      	b.n	8006ed2 <_printf_i+0x1c2>
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	6809      	ldr	r1, [r1, #0]
 8006d94:	1d02      	adds	r2, r0, #4
 8006d96:	060d      	lsls	r5, r1, #24
 8006d98:	d50b      	bpl.n	8006db2 <_printf_i+0xa2>
 8006d9a:	6806      	ldr	r6, [r0, #0]
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	2e00      	cmp	r6, #0
 8006da0:	da03      	bge.n	8006daa <_printf_i+0x9a>
 8006da2:	232d      	movs	r3, #45	@ 0x2d
 8006da4:	9a03      	ldr	r2, [sp, #12]
 8006da6:	4276      	negs	r6, r6
 8006da8:	7013      	strb	r3, [r2, #0]
 8006daa:	4b5e      	ldr	r3, [pc, #376]	@ (8006f24 <_printf_i+0x214>)
 8006dac:	270a      	movs	r7, #10
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	e018      	b.n	8006de4 <_printf_i+0xd4>
 8006db2:	6806      	ldr	r6, [r0, #0]
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	0649      	lsls	r1, r1, #25
 8006db8:	d5f1      	bpl.n	8006d9e <_printf_i+0x8e>
 8006dba:	b236      	sxth	r6, r6
 8006dbc:	e7ef      	b.n	8006d9e <_printf_i+0x8e>
 8006dbe:	6808      	ldr	r0, [r1, #0]
 8006dc0:	6819      	ldr	r1, [r3, #0]
 8006dc2:	c940      	ldmia	r1!, {r6}
 8006dc4:	0605      	lsls	r5, r0, #24
 8006dc6:	d402      	bmi.n	8006dce <_printf_i+0xbe>
 8006dc8:	0640      	lsls	r0, r0, #25
 8006dca:	d500      	bpl.n	8006dce <_printf_i+0xbe>
 8006dcc:	b2b6      	uxth	r6, r6
 8006dce:	6019      	str	r1, [r3, #0]
 8006dd0:	4b54      	ldr	r3, [pc, #336]	@ (8006f24 <_printf_i+0x214>)
 8006dd2:	270a      	movs	r7, #10
 8006dd4:	9304      	str	r3, [sp, #16]
 8006dd6:	2a6f      	cmp	r2, #111	@ 0x6f
 8006dd8:	d100      	bne.n	8006ddc <_printf_i+0xcc>
 8006dda:	3f02      	subs	r7, #2
 8006ddc:	0023      	movs	r3, r4
 8006dde:	2200      	movs	r2, #0
 8006de0:	3343      	adds	r3, #67	@ 0x43
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	6863      	ldr	r3, [r4, #4]
 8006de6:	60a3      	str	r3, [r4, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db03      	blt.n	8006df4 <_printf_i+0xe4>
 8006dec:	2104      	movs	r1, #4
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	438a      	bics	r2, r1
 8006df2:	6022      	str	r2, [r4, #0]
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	d102      	bne.n	8006dfe <_printf_i+0xee>
 8006df8:	9d03      	ldr	r5, [sp, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <_printf_i+0x108>
 8006dfe:	9d03      	ldr	r5, [sp, #12]
 8006e00:	0030      	movs	r0, r6
 8006e02:	0039      	movs	r1, r7
 8006e04:	f7f9 fa10 	bl	8000228 <__aeabi_uidivmod>
 8006e08:	9b04      	ldr	r3, [sp, #16]
 8006e0a:	3d01      	subs	r5, #1
 8006e0c:	5c5b      	ldrb	r3, [r3, r1]
 8006e0e:	702b      	strb	r3, [r5, #0]
 8006e10:	0033      	movs	r3, r6
 8006e12:	0006      	movs	r6, r0
 8006e14:	429f      	cmp	r7, r3
 8006e16:	d9f3      	bls.n	8006e00 <_printf_i+0xf0>
 8006e18:	2f08      	cmp	r7, #8
 8006e1a:	d109      	bne.n	8006e30 <_printf_i+0x120>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	07db      	lsls	r3, r3, #31
 8006e20:	d506      	bpl.n	8006e30 <_printf_i+0x120>
 8006e22:	6862      	ldr	r2, [r4, #4]
 8006e24:	6923      	ldr	r3, [r4, #16]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	dc02      	bgt.n	8006e30 <_printf_i+0x120>
 8006e2a:	2330      	movs	r3, #48	@ 0x30
 8006e2c:	3d01      	subs	r5, #1
 8006e2e:	702b      	strb	r3, [r5, #0]
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	1b5b      	subs	r3, r3, r5
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	9b07      	ldr	r3, [sp, #28]
 8006e38:	0021      	movs	r1, r4
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	9805      	ldr	r0, [sp, #20]
 8006e3e:	9b06      	ldr	r3, [sp, #24]
 8006e40:	aa09      	add	r2, sp, #36	@ 0x24
 8006e42:	f7ff fef5 	bl	8006c30 <_printf_common>
 8006e46:	3001      	adds	r0, #1
 8006e48:	d148      	bne.n	8006edc <_printf_i+0x1cc>
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	4240      	negs	r0, r0
 8006e4e:	b00b      	add	sp, #44	@ 0x2c
 8006e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e52:	2220      	movs	r2, #32
 8006e54:	6809      	ldr	r1, [r1, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	6022      	str	r2, [r4, #0]
 8006e5a:	2278      	movs	r2, #120	@ 0x78
 8006e5c:	4932      	ldr	r1, [pc, #200]	@ (8006f28 <_printf_i+0x218>)
 8006e5e:	9104      	str	r1, [sp, #16]
 8006e60:	0021      	movs	r1, r4
 8006e62:	3145      	adds	r1, #69	@ 0x45
 8006e64:	700a      	strb	r2, [r1, #0]
 8006e66:	6819      	ldr	r1, [r3, #0]
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	c940      	ldmia	r1!, {r6}
 8006e6c:	0610      	lsls	r0, r2, #24
 8006e6e:	d402      	bmi.n	8006e76 <_printf_i+0x166>
 8006e70:	0650      	lsls	r0, r2, #25
 8006e72:	d500      	bpl.n	8006e76 <_printf_i+0x166>
 8006e74:	b2b6      	uxth	r6, r6
 8006e76:	6019      	str	r1, [r3, #0]
 8006e78:	07d3      	lsls	r3, r2, #31
 8006e7a:	d502      	bpl.n	8006e82 <_printf_i+0x172>
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d001      	beq.n	8006e8a <_printf_i+0x17a>
 8006e86:	2710      	movs	r7, #16
 8006e88:	e7a8      	b.n	8006ddc <_printf_i+0xcc>
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	4393      	bics	r3, r2
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	e7f8      	b.n	8006e86 <_printf_i+0x176>
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	680d      	ldr	r5, [r1, #0]
 8006e98:	1d10      	adds	r0, r2, #4
 8006e9a:	6949      	ldr	r1, [r1, #20]
 8006e9c:	6018      	str	r0, [r3, #0]
 8006e9e:	6813      	ldr	r3, [r2, #0]
 8006ea0:	062e      	lsls	r6, r5, #24
 8006ea2:	d501      	bpl.n	8006ea8 <_printf_i+0x198>
 8006ea4:	6019      	str	r1, [r3, #0]
 8006ea6:	e002      	b.n	8006eae <_printf_i+0x19e>
 8006ea8:	066d      	lsls	r5, r5, #25
 8006eaa:	d5fb      	bpl.n	8006ea4 <_printf_i+0x194>
 8006eac:	8019      	strh	r1, [r3, #0]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	9d03      	ldr	r5, [sp, #12]
 8006eb2:	6123      	str	r3, [r4, #16]
 8006eb4:	e7bf      	b.n	8006e36 <_printf_i+0x126>
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	1d11      	adds	r1, r2, #4
 8006eba:	6019      	str	r1, [r3, #0]
 8006ebc:	6815      	ldr	r5, [r2, #0]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	0028      	movs	r0, r5
 8006ec2:	6862      	ldr	r2, [r4, #4]
 8006ec4:	f000 f858 	bl	8006f78 <memchr>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d001      	beq.n	8006ed0 <_printf_i+0x1c0>
 8006ecc:	1b40      	subs	r0, r0, r5
 8006ece:	6060      	str	r0, [r4, #4]
 8006ed0:	6863      	ldr	r3, [r4, #4]
 8006ed2:	6123      	str	r3, [r4, #16]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9a03      	ldr	r2, [sp, #12]
 8006ed8:	7013      	strb	r3, [r2, #0]
 8006eda:	e7ac      	b.n	8006e36 <_printf_i+0x126>
 8006edc:	002a      	movs	r2, r5
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	9906      	ldr	r1, [sp, #24]
 8006ee2:	9805      	ldr	r0, [sp, #20]
 8006ee4:	9d07      	ldr	r5, [sp, #28]
 8006ee6:	47a8      	blx	r5
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d0ae      	beq.n	8006e4a <_printf_i+0x13a>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	079b      	lsls	r3, r3, #30
 8006ef0:	d415      	bmi.n	8006f1e <_printf_i+0x20e>
 8006ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef4:	68e0      	ldr	r0, [r4, #12]
 8006ef6:	4298      	cmp	r0, r3
 8006ef8:	daa9      	bge.n	8006e4e <_printf_i+0x13e>
 8006efa:	0018      	movs	r0, r3
 8006efc:	e7a7      	b.n	8006e4e <_printf_i+0x13e>
 8006efe:	0022      	movs	r2, r4
 8006f00:	2301      	movs	r3, #1
 8006f02:	9906      	ldr	r1, [sp, #24]
 8006f04:	9805      	ldr	r0, [sp, #20]
 8006f06:	9e07      	ldr	r6, [sp, #28]
 8006f08:	3219      	adds	r2, #25
 8006f0a:	47b0      	blx	r6
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d09c      	beq.n	8006e4a <_printf_i+0x13a>
 8006f10:	3501      	adds	r5, #1
 8006f12:	68e3      	ldr	r3, [r4, #12]
 8006f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	42ab      	cmp	r3, r5
 8006f1a:	dcf0      	bgt.n	8006efe <_printf_i+0x1ee>
 8006f1c:	e7e9      	b.n	8006ef2 <_printf_i+0x1e2>
 8006f1e:	2500      	movs	r5, #0
 8006f20:	e7f7      	b.n	8006f12 <_printf_i+0x202>
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	08007139 	.word	0x08007139
 8006f28:	0800714a 	.word	0x0800714a

08006f2c <memmove>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	4288      	cmp	r0, r1
 8006f30:	d806      	bhi.n	8006f40 <memmove+0x14>
 8006f32:	2300      	movs	r3, #0
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d008      	beq.n	8006f4a <memmove+0x1e>
 8006f38:	5ccc      	ldrb	r4, [r1, r3]
 8006f3a:	54c4      	strb	r4, [r0, r3]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	e7f9      	b.n	8006f34 <memmove+0x8>
 8006f40:	188b      	adds	r3, r1, r2
 8006f42:	4298      	cmp	r0, r3
 8006f44:	d2f5      	bcs.n	8006f32 <memmove+0x6>
 8006f46:	3a01      	subs	r2, #1
 8006f48:	d200      	bcs.n	8006f4c <memmove+0x20>
 8006f4a:	bd10      	pop	{r4, pc}
 8006f4c:	5c8b      	ldrb	r3, [r1, r2]
 8006f4e:	5483      	strb	r3, [r0, r2]
 8006f50:	e7f9      	b.n	8006f46 <memmove+0x1a>
	...

08006f54 <_sbrk_r>:
 8006f54:	2300      	movs	r3, #0
 8006f56:	b570      	push	{r4, r5, r6, lr}
 8006f58:	4d06      	ldr	r5, [pc, #24]	@ (8006f74 <_sbrk_r+0x20>)
 8006f5a:	0004      	movs	r4, r0
 8006f5c:	0008      	movs	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7fc faaa 	bl	80034b8 <_sbrk>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d103      	bne.n	8006f70 <_sbrk_r+0x1c>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d000      	beq.n	8006f70 <_sbrk_r+0x1c>
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	46c0      	nop			@ (mov r8, r8)
 8006f74:	200002b0 	.word	0x200002b0

08006f78 <memchr>:
 8006f78:	b2c9      	uxtb	r1, r1
 8006f7a:	1882      	adds	r2, r0, r2
 8006f7c:	4290      	cmp	r0, r2
 8006f7e:	d101      	bne.n	8006f84 <memchr+0xc>
 8006f80:	2000      	movs	r0, #0
 8006f82:	4770      	bx	lr
 8006f84:	7803      	ldrb	r3, [r0, #0]
 8006f86:	428b      	cmp	r3, r1
 8006f88:	d0fb      	beq.n	8006f82 <memchr+0xa>
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	e7f6      	b.n	8006f7c <memchr+0x4>

08006f8e <_realloc_r>:
 8006f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f90:	0006      	movs	r6, r0
 8006f92:	000c      	movs	r4, r1
 8006f94:	0015      	movs	r5, r2
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d105      	bne.n	8006fa6 <_realloc_r+0x18>
 8006f9a:	0011      	movs	r1, r2
 8006f9c:	f7ff fc5a 	bl	8006854 <_malloc_r>
 8006fa0:	0004      	movs	r4, r0
 8006fa2:	0020      	movs	r0, r4
 8006fa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fa6:	2a00      	cmp	r2, #0
 8006fa8:	d103      	bne.n	8006fb2 <_realloc_r+0x24>
 8006faa:	f7ff fbe7 	bl	800677c <_free_r>
 8006fae:	2400      	movs	r4, #0
 8006fb0:	e7f7      	b.n	8006fa2 <_realloc_r+0x14>
 8006fb2:	f000 f81b 	bl	8006fec <_malloc_usable_size_r>
 8006fb6:	0007      	movs	r7, r0
 8006fb8:	4285      	cmp	r5, r0
 8006fba:	d802      	bhi.n	8006fc2 <_realloc_r+0x34>
 8006fbc:	0843      	lsrs	r3, r0, #1
 8006fbe:	42ab      	cmp	r3, r5
 8006fc0:	d3ef      	bcc.n	8006fa2 <_realloc_r+0x14>
 8006fc2:	0029      	movs	r1, r5
 8006fc4:	0030      	movs	r0, r6
 8006fc6:	f7ff fc45 	bl	8006854 <_malloc_r>
 8006fca:	9001      	str	r0, [sp, #4]
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d0ee      	beq.n	8006fae <_realloc_r+0x20>
 8006fd0:	002a      	movs	r2, r5
 8006fd2:	42bd      	cmp	r5, r7
 8006fd4:	d900      	bls.n	8006fd8 <_realloc_r+0x4a>
 8006fd6:	003a      	movs	r2, r7
 8006fd8:	0021      	movs	r1, r4
 8006fda:	9801      	ldr	r0, [sp, #4]
 8006fdc:	f7ff fbc4 	bl	8006768 <memcpy>
 8006fe0:	0021      	movs	r1, r4
 8006fe2:	0030      	movs	r0, r6
 8006fe4:	f7ff fbca 	bl	800677c <_free_r>
 8006fe8:	9c01      	ldr	r4, [sp, #4]
 8006fea:	e7da      	b.n	8006fa2 <_realloc_r+0x14>

08006fec <_malloc_usable_size_r>:
 8006fec:	1f0b      	subs	r3, r1, #4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	1f18      	subs	r0, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da01      	bge.n	8006ffa <_malloc_usable_size_r+0xe>
 8006ff6:	580b      	ldr	r3, [r1, r0]
 8006ff8:	18c0      	adds	r0, r0, r3
 8006ffa:	4770      	bx	lr

08006ffc <_init>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	46c0      	nop			@ (mov r8, r8)
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

08007008 <_fini>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	46c0      	nop			@ (mov r8, r8)
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr
